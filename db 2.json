{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/header.jpeg","path":"header.jpeg","modified":0,"renderable":0},{"_id":"source/images/32.ico","path":"images/32.ico","modified":0,"renderable":0},{"_id":"source/images/1.ipk","path":"images/1.ipk","modified":0,"renderable":0},{"_id":"source/images/header.jpeg","path":"images/header.jpeg","modified":0,"renderable":0},{"_id":"source/uploads/header.jpeg","path":"uploads/header.jpeg","modified":0,"renderable":0},{"_id":"source/images/cat.JPG","path":"images/cat.JPG","modified":0,"renderable":0},{"_id":"source/images/algorithm/binary-tree-116-describe.png","path":"images/algorithm/binary-tree-116-describe.png","modified":0,"renderable":0},{"_id":"source/images/algorithm/monotonic-describe.png","path":"images/algorithm/monotonic-describe.png","modified":0,"renderable":0},{"_id":"source/images/hibernate/fetchType.png","path":"images/hibernate/fetchType.png","modified":0,"renderable":0},{"_id":"source/images/java/liquibase-jpa-example.png","path":"images/java/liquibase-jpa-example.png","modified":0,"renderable":0},{"_id":"source/images/java/stream-filter.png","path":"images/java/stream-filter.png","modified":0,"renderable":0},{"_id":"source/images/java/stream-reduce.png","path":"images/java/stream-reduce.png","modified":0,"renderable":0},{"_id":"source/images/nuxt/run-debug.jpg","path":"images/nuxt/run-debug.jpg","modified":0,"renderable":0},{"_id":"source/images/react/useReducer-implement.png","path":"images/react/useReducer-implement.png","modified":0,"renderable":0},{"_id":"source/images/styled-components/02.png","path":"images/styled-components/02.png","modified":0,"renderable":0},{"_id":"source/images/styled-components/01.png","path":"images/styled-components/01.png","modified":0,"renderable":0},{"_id":"source/images/spring-data-jpa/one-to-many-example.png","path":"images/spring-data-jpa/one-to-many-example.png","modified":0,"renderable":0},{"_id":"source/images/spring-boot-data-flow.png","path":"images/spring-boot-data-flow.png","modified":0,"renderable":0},{"_id":"source/images/styled-components/05.png","path":"images/styled-components/05.png","modified":0,"renderable":0},{"_id":"source/images/styled-components/03.png","path":"images/styled-components/03.png","modified":0,"renderable":0},{"_id":"source/images/styled-components/04.png","path":"images/styled-components/04.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"source/images/java/java-monad.png","path":"images/java/java-monad.png","modified":0,"renderable":0},{"_id":"source/images/java/stream-collection-accumulator.png","path":"images/java/stream-collection-accumulator.png","modified":0,"renderable":0},{"_id":"source/images/java/stream-collection-combiner.png","path":"images/java/stream-collection-combiner.png","modified":0,"renderable":0},{"_id":"source/images/java/stream-collection-supplier.png","path":"images/java/stream-collection-supplier.png","modified":0,"renderable":0},{"_id":"source/images/java/stream-flatMap.png","path":"images/java/stream-flatMap.png","modified":0,"renderable":0},{"_id":"source/images/java/stream-map.png","path":"images/java/stream-map.png","modified":0,"renderable":0},{"_id":"source/images/spring-boot-structure.png","path":"images/spring-boot-structure.png","modified":0,"renderable":0},{"_id":"source/images/hibernate/jpa-example-1.jpeg","path":"images/hibernate/jpa-example-1.jpeg","modified":0,"renderable":0},{"_id":"source/images/java/hash-function.png","path":"images/java/hash-function.png","modified":0,"renderable":0},{"_id":"source/images/nuxt/result.png","path":"images/nuxt/result.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"source/images/algorithm/linkedList-isPalindrome2.jpeg","path":"images/algorithm/linkedList-isPalindrome2.jpeg","modified":0,"renderable":0},{"_id":"source/images/hibernate/oneToMany-mappedBy.png","path":"images/hibernate/oneToMany-mappedBy.png","modified":0,"renderable":0},{"_id":"source/images/hibernate/oneToMany.png","path":"images/hibernate/oneToMany.png","modified":0,"renderable":0},{"_id":"source/images/nuxt/debug.png","path":"images/nuxt/debug.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/images/algorithm/binarySearch-left-bound.jpeg","path":"images/algorithm/binarySearch-left-bound.jpeg","modified":0,"renderable":0},{"_id":"source/images/algorithm/reverse-linkedList-2.png","path":"images/algorithm/reverse-linkedList-2.png","modified":0,"renderable":0},{"_id":"source/images/algorithm/reverse-linkedList-1.png","path":"images/algorithm/reverse-linkedList-1.png","modified":0,"renderable":0},{"_id":"source/images/algorithm/reverse-linkedList-between-node.jpeg","path":"images/algorithm/reverse-linkedList-between-node.jpeg","modified":0,"renderable":0},{"_id":"source/images/algorithm/reverse-linkedList-between-node4.png","path":"images/algorithm/reverse-linkedList-between-node4.png","modified":0,"renderable":0},{"_id":"source/images/algorithm/reverse-linkedListMN.jpeg","path":"images/algorithm/reverse-linkedListMN.jpeg","modified":0,"renderable":0},{"_id":"source/images/curl-resume-download.png","path":"images/curl-resume-download.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"source/images/algorithm/linkedList-isPalindrome.jpeg","path":"images/algorithm/linkedList-isPalindrome.jpeg","modified":0,"renderable":0},{"_id":"source/images/algorithm/reverse-linkedList-between-node3.png","path":"images/algorithm/reverse-linkedList-between-node3.png","modified":0,"renderable":0},{"_id":"source/images/algorithm/reverse-linkedListN-2.png","path":"images/algorithm/reverse-linkedListN-2.png","modified":0,"renderable":0},{"_id":"source/images/nuxt/log.png","path":"images/nuxt/log.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/images/algorithm/reverse-linkedList-3.png","path":"images/algorithm/reverse-linkedList-3.png","modified":0,"renderable":0},{"_id":"source/images/hibernate/manyToMany.png","path":"images/hibernate/manyToMany.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/algorithm/reverse-linkedList-between-node2.jpeg","path":"images/algorithm/reverse-linkedList-between-node2.jpeg","modified":0,"renderable":0},{"_id":"source/images/algorithm/reverse-linkedListN-1.png","path":"images/algorithm/reverse-linkedListN-1.png","modified":0,"renderable":0},{"_id":"source/images/java/java-error.png","path":"images/java/java-error.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"source/images/hibernate/manyToMany2.png","path":"images/hibernate/manyToMany2.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/java/java-lang-define-error.png","path":"images/java/java-lang-define-error.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/favicon.ico","hash":"6a73dce73e13b5d1cb498c775f282899d6b719c1","modified":1615548075214},{"_id":"source/header.jpeg","hash":"46719e32f7b5bfafdce4393e96742c835bf8687d","modified":1615548075214},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1501628194000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501628194000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501628194000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501628194000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501628194000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1501628194000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1501628194000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501628194000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501628194000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501628194000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1501628194000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501628194000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1501628194000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501628194000},{"_id":"themes/next/_config.yml","hash":"05e6a99673cf19ae8ba43b4ef475b0c9be39cbfa","modified":1646976539094},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1615709488000},{"_id":"source/.DS_Store","hash":"8053ee4efe1ab54dbc2b0fa96c0d7e3d498c7cdf","modified":1653202188075},{"_id":"source/_posts/Blog 开发日志.md","hash":"ba870abb1b9f2258045a6e5b322b6b7c1d81ad96","modified":1653202323286},{"_id":"source/_posts/Docker 安装 .md","hash":"23c29e668abc4b48d45d0a66beae065ba4c65079","modified":1647608027479},{"_id":"source/_posts/.DS_Store","hash":"4ac2a9a908ba4765bbd69e8fe0a1b03f7fee4eea","modified":1653889443270},{"_id":"source/_posts/Component-diff-with-Component().md","hash":"a61972fc5a963d63603e01c59c7174ce895bb178","modified":1653888425249},{"_id":"source/_posts/JS-防抖节流.md","hash":"7a56a0812fdc28e8bc2196f9bd19c0ed4027a090","modified":1619082487940},{"_id":"source/_posts/HTTP-cache.md","hash":"7500fa71d7d415a909ea9a51a68a1b305d535ebe","modified":1615548075134},{"_id":"source/_posts/Nodejs-Koa.md","hash":"cb485ea37fdc6c181ecc992dc7370b39604cc650","modified":1650291496707},{"_id":"source/_posts/Python-Learn.md","hash":"6ee94621dd96f4cfd4c226e583dda7915878c79a","modified":1651672957724},{"_id":"source/_posts/React - custom hook - useHotKeys.md","hash":"4e9e6e6755647b7f951adc08b3efc468afd37778","modified":1653747756738},{"_id":"source/_posts/React-CRA-multiple-entry.md","hash":"cb45822caddfe282c915fda5100de3aa7bbe6ed5","modified":1653890231080},{"_id":"source/_posts/algorithm- LRU.md","hash":"50d5f600f9c0832b46927a4f199e9ec6559edfe5","modified":1619080175330},{"_id":"source/_posts/algorithm-BST.md","hash":"bce95da019c0c2ecce867636cddfbbaef6e75616","modified":1619080180878},{"_id":"source/_posts/Wepack-Handbook.md","hash":"f499a8005e4b0eae0bb01cfde558ea8195c99a69","modified":1653579029796},{"_id":"source/_posts/Type Challenges.md","hash":"906917dee17f85ce0554c0c756f408bd72507c35","modified":1652367369942},{"_id":"source/_posts/algorithm-binary-tree.md","hash":"16c9af51372a657da9a851926a26e8389c116f06","modified":1625033809710},{"_id":"source/_posts/algorithm-linked-list-merge-two.md","hash":"9a008df0538e3a0a59912eb510c20113c54df5af","modified":1639529217025},{"_id":"source/_posts/algorithm-binary-heap.md","hash":"536b965a5a70deeea232a88273a44a4f5a07d857","modified":1651576888307},{"_id":"source/_posts/algorithm-linkedlist-example.md","hash":"9b6fb58af2a0a3281db52af3a390be7eb9582513","modified":1623571939704},{"_id":"source/_posts/algorithm-binarySearch.md","hash":"2305417b775077b0510e89b02a96f770d81587ab","modified":1623667833045},{"_id":"source/_posts/algorithm-linkedlist-reverseLinkedList.md","hash":"afb5130933c38e28ee71cb5d2e257b6337aafcef","modified":1624549052525},{"_id":"source/_posts/algorithm-linkedList-isPalindrome.md","hash":"fde23fd11f69a905b20e35841c913c8fc55c63dd","modified":1624528323044},{"_id":"source/_posts/algorithm-palindrome-linkedList.md","hash":"65099388c45a544603169af1229a675cd347129a","modified":1619080231107},{"_id":"source/_posts/auto-deploy.md","hash":"d3dc83de1563a7965a44dd703f45586204e567dd","modified":1627526512295},{"_id":"source/_posts/algorithm-monotonic.md","hash":"8e75d13f59c1bb892cecc70309b939433b4c7293","modified":1624259333826},{"_id":"source/_posts/algorithm-towPointer-twoSumII.md","hash":"cb660202109dedb4d9f873e050762333d29472d0","modified":1623725309265},{"_id":"source/_posts/clash-config-reference.md","hash":"7f5092f71ded15ccb341e0be23e39b9270486d91","modified":1647615828998},{"_id":"source/_posts/clash-docker.md","hash":"df492d2fa6a0ba35d0632b29ca79551c73482d72","modified":1648102817890},{"_id":"source/_posts/docker-bind-mounts.md","hash":"7b91c0487f11379b181708cf9190585188d08e1a","modified":1650041904672},{"_id":"source/_posts/communication-between-webview-and-react-native.md","hash":"0597276d6a16cb43131ecbe65a87021920f70a55","modified":1653888531168},{"_id":"source/_posts/docker-command.md","hash":"c03f2c08f49899e81dbf1d05f367c0a465bad8b2","modified":1636985141132},{"_id":"source/_posts/git-operation.md","hash":"824e96f7c259bb37b03a4e6c9224a9078979df50","modified":1615548075161},{"_id":"source/_posts/dockerlize-tv-movie.md","hash":"957df507b11df13350e38f8f078a40f52a1002d7","modified":1650291795024},{"_id":"source/_posts/fe-interview.md","hash":"456fd542f1669db0a56d30452427779b41a1dca0","modified":1652079152632},{"_id":"source/_posts/html-script-defer-async.md","hash":"76322ac86effe566d3bda58f351da4fb5da452c5","modified":1619079389918},{"_id":"source/_posts/implement-API.md","hash":"b03683f0b9aa025f8d3cb71a29e9eaa46de78c41","modified":1619080040842},{"_id":"source/_posts/java-domain-entity-with-hibernate-liqubase.md","hash":"1ba7c13c600d4e17acaccc720fcc8059d0fe4101","modified":1637147678094},{"_id":"source/_posts/java-basic.md","hash":"31a809484f83b4cd1a9c48580c59b66e93478d33","modified":1628046187187},{"_id":"source/_posts/java-functional-programming.md","hash":"baafdb05b3f1e3953bf70aa53dd5ca01b76fcc48","modified":1619080278799},{"_id":"source/_posts/java-object-equal.md","hash":"6f6dd33fcd93f1d96f6d52b222b6346228086e30","modified":1636423104559},{"_id":"source/_posts/java-error-handle.md","hash":"d868630b165b4d26740724ba065ef91431fc32f9","modified":1624844255196},{"_id":"source/_posts/java-optional-handbook.md","hash":"eb09c93f0edbea47493d921e5eb31ff229cffc19","modified":1619660304399},{"_id":"source/_posts/js-promise.md","hash":"f17c714ab73395c46916cecf9bdeebdcf67eb6d6","modified":1619079469893},{"_id":"source/_posts/lint-staged.md","hash":"34d7ecbadd07250b7b476b316e1b1199ba8268f3","modified":1619080020123},{"_id":"source/_posts/linux-apt-get.md","hash":"7d475f412be3846e75ac2c74f9e3fce86850f273","modified":1619079537920},{"_id":"source/_posts/js-prototype-constructor.md","hash":"e33259c031176c24c8f936ffdb40162ad751047b","modified":1650378236582},{"_id":"source/_posts/linux-awk.md","hash":"efbde5ab66cc0101e334128d7a752e6a6b3ece82","modified":1628577262104},{"_id":"source/_posts/java-hibernate-cascade.md","hash":"9925862fb84edd2d4c3933bfe5df67aad139aeb7","modified":1639149292842},{"_id":"source/_posts/linux-curl-tips.md","hash":"d2377359346e787493b2a7ad7d024f902008e705","modified":1619079542260},{"_id":"source/_posts/linux-nginx.md","hash":"3e0ed5a27a93d103c97ae9945148b86b3b18a321","modified":1649656986411},{"_id":"source/_posts/linux-set-up.md","hash":"bca2eebd66784f40e9a7a2ed0bafd80ca16bb434","modified":1627263452726},{"_id":"source/_posts/next-usage.md","hash":"9efbcd92d92f12c0bc08f353cbd611dac05e1457","modified":1619079858202},{"_id":"source/_posts/mysql-handbook.md","hash":"bd561980955c7641bd460e1f17a05c4898c71819","modified":1619106904117},{"_id":"source/_posts/nodejs-rename-files.md","hash":"92f8f920d97d6997a62e6f97d0bf8b00a70e2756","modified":1649258649877},{"_id":"source/_posts/nginx-http-proxy.md","hash":"7a8ecae1e91875e7eb7550991feaeb753fc331a2","modified":1619079994489},{"_id":"source/_posts/nslookup-linux.md","hash":"c7234f5e83540028a78af38a13c36d260f1fb4cd","modified":1649655836289},{"_id":"source/_posts/react-dev-02.md","hash":"b1cd114dd488d31b756d21240f6a0da6c3843b25","modified":1619079565347},{"_id":"source/_posts/react-dev-03.md","hash":"77a3bbf5951522783e81230032a79789992bdc49","modified":1619079575869},{"_id":"source/_posts/oh-my-zsh.md","hash":"7fdd8f80b41e2bd06dc34e3853fd83bbb60d4457","modified":1647925040145},{"_id":"source/_posts/react-dev-04.md","hash":"af0da04d49f742f446c47a45471bd848079ddc3b","modified":1619079588232},{"_id":"source/_posts/react-hooks-implement.md","hash":"41f8a59541e8a409491422e436884bbddc9523f7","modified":1635903976071},{"_id":"source/_posts/react-redux-slice-ecosystem.md","hash":"370a66a9aade50ac142e294d156a67f8fa67d025","modified":1635056441721},{"_id":"source/_posts/react-styled-component-cheat-sheets.md","hash":"1b4d8c32d83f5cad7ae1f89ad78ad382da7dc9ce","modified":1633930754577},{"_id":"source/_posts/react-UseCallback 和 React.memo() 使用介绍.md","hash":"3c2207c45aa902453dc1e8aba70e76832bb467cd","modified":1635484543066},{"_id":"source/_posts/redux-toolkit-cheat-sheet.md","hash":"2a0223f85e45726b875e318a7b30aaaf1d27d8ed","modified":1634896607136},{"_id":"source/_posts/spring-DTO.md","hash":"87defb2bfc62cc341d3446acd151da0437c4c990","modified":1620788201262},{"_id":"source/_posts/spring-boot-cors.md","hash":"c50699f6f8ed7f501f9819800c4e81bf9997e9f4","modified":1619080370777},{"_id":"source/_posts/spring-data-jpa-tree-entity.md","hash":"1f9cb7ab28a65e91e39d90246d9dfedb07b8966f","modified":1620611750783},{"_id":"source/_posts/spring-boot-response.md","hash":"3ca68688c762cbec571c5043d5d572559ae739cb","modified":1619080629573},{"_id":"source/_posts/spring-data-jpa-delete-child-parent-from-relationship.md","hash":"97eb48ce0ed0d09668dce8801a5c2800a6754213","modified":1627955307170},{"_id":"source/_posts/type 与 interface.md","hash":"3e537a805a6fa5d7d3de706dbcb96bfdc45baf63","modified":1649258649878},{"_id":"source/_posts/spring-data-jpa.md","hash":"997dda1130c226d74913c78dfbebaf01b4d5a940","modified":1644301569000},{"_id":"source/_posts/spring-data-querydsl.md","hash":"45a1406a8f3ceb787c6a98fddfd0dd0b6b528623","modified":1644301553000},{"_id":"source/_posts/util-img-container.md","hash":"ea7c28fe28eba4811788d46129a30f367c7c7ea6","modified":1619079712907},{"_id":"source/_posts/util-tree-path.md","hash":"3bf861fd3375220b9d0be0a88ecc9feaafaef358","modified":1619689842727},{"_id":"source/_posts/util-tree-filter.md","hash":"12416a34ac22ace508b9ce9633f7dc2745412376","modified":1634279395666},{"_id":"source/_posts/util-字符串转换成指定范围数字.md","hash":"d0354a69a2216fe56297c03c3d3fe12a1fe692fb","modified":1619079699553},{"_id":"source/_posts/util-数组shuffle.md","hash":"08a8d645a37d033b22a905ecb6d50dba02aab1d6","modified":1619079691797},{"_id":"source/_posts/util-数组转树.md","hash":"20984a5214f18d67b0d4c3756dcff85c8febe353","modified":1619079680296},{"_id":"source/_posts/util-js-uuid.md","hash":"9d98288c193ca8d835f78d0c3444c075b1e37edd","modified":1638855803765},{"_id":"source/_posts/utils-RegExp.md","hash":"57341bbd975a824a67234904e76a0d3e0e608650","modified":1619079751089},{"_id":"source/_posts/vue-2-reactivity-implement.md","hash":"f637abc931e19935e269888a4d45e0e2624ea51d","modified":1653888920781},{"_id":"source/_posts/utils-imgList2zip.md","hash":"06406d3b179a4efa929e515cfb05681c1e674a83","modified":1619079720734},{"_id":"source/_posts/utils-tree-map.md","hash":"67287900b720ad056f2baf0882bb94fc9273dfa3","modified":1639963430192},{"_id":"source/_posts/utils-svgToImage.md","hash":"63b54b9529ed4af54ff4752de900e2137ce4afef","modified":1619079764176},{"_id":"source/_posts/vue-next-nextTick.md","hash":"a0482029ba4a172457f8679230842acb1c89808c","modified":1619079804734},{"_id":"source/_posts/vue-next-reactivity.md","hash":"14e9b0ad2eb05c5dafc08898ea478a3b2278d423","modified":1619079814980},{"_id":"source/_posts/vue-nuxt-debug.md","hash":"0931068ef5b14a437eeb9a4812724bf471d3ac79","modified":1621416772265},{"_id":"source/_posts/webpack-learn05.md","hash":"926c4308588e217f47f1595778b4445dab5ba10d","modified":1653888760427},{"_id":"source/_posts/vue-render.md","hash":"f7a5448de8079e553148c7d865186e5f70ab7313","modified":1627201531248},{"_id":"source/_posts/webpack-learn07.md","hash":"43bd9e4952b1c4e9e04c102a0e973015e3a4d8a4","modified":1619079844746},{"_id":"source/draft/React Hooks.md","hash":"cc2ce2558d05ba61d77135d8850c4f73071f25b4","modified":1635383570276},{"_id":"source/_posts/百度AI 人脸搜索 -MN 调研.md","hash":"c485cfcad86581ddb056132ede3dc496ef627ded","modified":1650531231337},{"_id":"source/_posts/zerotier-planet.md","hash":"a69352248c6d8e6039f2d938ece8a9ef1fdcfe3c","modified":1647608212766},{"_id":"source/categories/index.md","hash":"a718acdfaf0bc65e0624b93b330d6f76b7bcf959","modified":1615548075214},{"_id":"source/about/index.md","hash":"3552947e144ffa8b87985af2f264f4d096bb4b6b","modified":1615548075213},{"_id":"source/draft/blog-dev.md","hash":"81de2f37507eaba756204710f6d939050dfb437f","modified":1618815297685},{"_id":"source/draft/spring-mapStruct.md","hash":"8dfd7f09c838a9b15e2f67152868e4479c793407","modified":1619874036226},{"_id":"source/images/32.ico","hash":"8147843e4b7bd88d301c0227b33c14f331f962c4","modified":1615548075215},{"_id":"source/images/1.ipk","hash":"90abef5686378a057284c0273d4c97ba405aefd7","modified":1646141645353},{"_id":"source/images/header.jpeg","hash":"46719e32f7b5bfafdce4393e96742c835bf8687d","modified":1615548075215},{"_id":"source/tags/index.md","hash":"a959969405c2bfe0aa4058fdc680369de76dcd03","modified":1615706399067},{"_id":"source/uploads/google5bedcd4170c798b7.html","hash":"8ce219f6cb7f9853247664fbb8a11d5d34f014ff","modified":1615548075216},{"_id":"source/uploads/header.jpeg","hash":"46719e32f7b5bfafdce4393e96742c835bf8687d","modified":1615548075217},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501628194000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501628194000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501628194000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501628194000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501628194000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501628194000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501628194000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501628194000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501628194000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"21ed33f92b4055acb5bda539b14d3b4d8bcfc056","modified":1616981175621},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501628194000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1501628194000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1501628194000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501628194000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1501628194000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1501628194000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1501628194000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1501628194000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1501628194000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501628194000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501628194000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1501628194000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1501628194000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501628194000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501628194000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501628194000},{"_id":"source/images/cat.JPG","hash":"45f8cb321f8c6a4ccdbadd975a974e20d3ff5687","modified":1617942721073},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"source/_posts/git-operation/git-rebase.png","hash":"b33bc9787ef6aab29f51ac1b3540fe6cce1c0d4b","modified":1615548075162},{"_id":"source/images/algorithm/binary-tree-116-describe.png","hash":"4e836f14fd7024b14461dbeaceec91e7ef9c350c","modified":1624425356029},{"_id":"source/images/algorithm/monotonic-describe.png","hash":"a5642beee30a86a906ecd4d3a6c176537a0f8a95","modified":1624256941053},{"_id":"source/images/hibernate/fetchType.png","hash":"b1d397fe15e79d04a893400efcace86f4b8e9e84","modified":1617681900853},{"_id":"source/images/java/liquibase-jpa-example.png","hash":"fbeeb667223907b80039e7c60a05ebc0b2909091","modified":1636942258913},{"_id":"source/images/java/stream-filter.png","hash":"9d86e599e0121dd1d2a798f8448b7f46309ce0b8","modified":1618152584974},{"_id":"source/images/java/stream-reduce.png","hash":"b21df39f3b39c92109630f43c9e16f0488023ff0","modified":1618152595491},{"_id":"source/images/nuxt/run-debug.jpg","hash":"37daa5c2ec46fca03d413666a5c03aef8fa2d955","modified":1621415708613},{"_id":"source/images/react/useReducer-implement.png","hash":"564cd3b507db072ae2ac41efc58b2da8aa62927f","modified":1635821235552},{"_id":"source/images/styled-components/02.png","hash":"4ec3c6e4ccc6a2158cd7eab7d58992f81213c6bd","modified":1633920460436},{"_id":"source/images/styled-components/01.png","hash":"6b1c302f4fdd9af9f897ed6224f64e600e76fef9","modified":1633918725273},{"_id":"source/images/spring-data-jpa/one-to-many-example.png","hash":"9dfddd2217772a3c43ec69f074a4c35c646afffa","modified":1618731249042},{"_id":"source/images/spring-boot-data-flow.png","hash":"785c8f89cfe38741001f6fcfd82cf380d6775762","modified":1616571494688},{"_id":"source/images/styled-components/05.png","hash":"b82b2c471ecaccd925bd24bcab0ab22a3f30b8c6","modified":1633930016147},{"_id":"source/images/styled-components/03.png","hash":"d5b8cad75508f1896626181a1a73c47da596d51a","modified":1633921172241},{"_id":"source/images/styled-components/04.png","hash":"0c299e31f37a57e73e4a6c21400d93378dc98f32","modified":1633922032560},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1501628194000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1501628194000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1501628194000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1501628194000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1501628194000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1619503757697},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1501628194000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1501628194000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1501628194000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1501628194000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501628194000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501628194000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501628194000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501628194000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1501628194000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501628194000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501628194000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501628194000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501628194000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1501628194000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501628194000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1501628194000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501628194000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501628194000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501628194000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501628194000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1501628194000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501628194000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1501628194000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1501628194000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1501628194000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501628194000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501628194000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501628194000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501628194000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501628194000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501628194000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501628194000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501628194000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501628194000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501628194000},{"_id":"source/_posts/FP-JS-GUIDE-CONTROL/forkCombinator.png","hash":"dea0083b9fefe9a27321298985ccaa299e94f6a2","modified":1615548075133},{"_id":"source/_posts/HTTP-cache/cache-control-strategy.png","hash":"3d61946aafb00e1fe0687997f2d67ffd67f1bfec","modified":1615548075134},{"_id":"source/_posts/algorithm-BST/1038.png","hash":"852fc0ca21731711b2f506cbf2efb9dcb4af876c","modified":1615548075152},{"_id":"source/_posts/docker-diff-with-container-image/diff.png","hash":"2ecd9053b503ba9cc63fdec8e40516dbb4fdade3","modified":1615548075161},{"_id":"source/_posts/js-prototype-constructor/assign-new-prototype.png","hash":"4c9018338fe044423eb55f4da0cb4a2907b73076","modified":1615548075166},{"_id":"source/_posts/js-prototype-constructor/create-obj.png","hash":"351b692b4f670c83a37b22a72eeb85c0d4e42fd0","modified":1615548075167},{"_id":"source/_posts/vue-2-reactivity-implement/data-structure.png","hash":"57f1dff08d466cf4cc6930b8be36eebfa47c3a79","modified":1615548075200},{"_id":"source/_posts/vue-next-reactivity/data-structure.jpeg","hash":"a94f24f02311b78cb8f1eea4381847ea7cf366e9","modified":1615548075204},{"_id":"source/images/java/java-monad.png","hash":"9914c0ff4f66d9175428eba90d8333dcd3d87e79","modified":1618193559255},{"_id":"source/images/java/stream-collection-accumulator.png","hash":"bcd2ddcd92d2d12dc1a9ad8473f22ca22e032ea3","modified":1618153984338},{"_id":"source/images/java/stream-collection-combiner.png","hash":"39ba9e269068922a5597a1c9ba05906b12e1165a","modified":1618154010706},{"_id":"source/images/java/stream-collection-supplier.png","hash":"4fd44a40c278c8bcda2f511c19e19f89f51b35de","modified":1618153956509},{"_id":"source/images/java/stream-flatMap.png","hash":"3a9bafb9c6352cbb6a4f1c29fcc5e8ff9d6c4fab","modified":1618152615514},{"_id":"source/images/java/stream-map.png","hash":"00ac18c39f2f0dc2f937242163da34af0d3496b3","modified":1618152544254},{"_id":"source/images/spring-boot-structure.png","hash":"e67b499f000ab8317cb28dd4d9e93e6e74f97aa7","modified":1616571513022},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501628194000},{"_id":"source/_posts/Three-learn/camerLookAt.png","hash":"dc5d5b2250f7a69cca0fb31e71b10843ae7dd4a9","modified":1615548075144},{"_id":"source/_posts/crackInterview_js/prototype.png","hash":"f4a92a86574e0e45bd72a7e191feaf6d8bc58342","modified":1615548075156},{"_id":"source/_posts/Three-learn/orthoCamera.png","hash":"6f7f2826bcb2389c1c4cd7125429910afd50c480","modified":1615548075148},{"_id":"source/_posts/algorithm-BST/236.png","hash":"03d2b3ad68ad3478787489342beed1b9ec51445c","modified":1615548075153},{"_id":"source/_posts/docker-diff-with-container-image/container-vs-vm.png","hash":"e2a60281739bbae09382df65ea62a5b641026552","modified":1615548075160},{"_id":"source/_posts/auto-deploy/webhook.jpg","hash":"0a048883db06c511f430f29efa6b203bff1f6461","modified":1615548075155},{"_id":"source/_posts/js-prototype-constructor/define-constructor.png","hash":"5c227375226d88463a691d70510fd668a3d40f21","modified":1615548075169},{"_id":"source/_posts/docker-diff-with-container-image/connect.png","hash":"29c85fa2b821153077dd751c10ee17e6c2db3fef","modified":1615548075158},{"_id":"source/_posts/vue-next-nextTick/eventloop.jpeg","hash":"3842d7018af839ad7b4f06fe3fc326b8b738bd3a","modified":1615548075203},{"_id":"source/images/hibernate/jpa-example-1.jpeg","hash":"cabff36ef6a9b3be898d488f7269dd7274fd47c6","modified":1625464140011},{"_id":"source/images/java/hash-function.png","hash":"3f97a26ef011a95ef4fc32ede6191801ff07e57b","modified":1636420910083},{"_id":"source/images/nuxt/result.png","hash":"0a47cd77100b66e6922ca8f55a89d62a96b65913","modified":1621416228243},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501628194000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501628194000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501628194000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501628194000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1501628194000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1501628194000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501628194000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501628194000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"e0a8c1225a0909498afb0c9728eff61f8c5b271f","modified":1623572217025},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1501628194000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501628194000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1501628194000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1501628194000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501628194000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501628194000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501628194000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501628194000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501628194000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501628194000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501628194000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501628194000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501628194000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501628194000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501628194000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501628194000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501628194000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501628194000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501628194000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501628194000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501628194000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501628194000},{"_id":"source/_posts/Three-learn/perspectiveCamera.png","hash":"8d3699764b01f6b5934cc5693f65d01805ad9110","modified":1615548075149},{"_id":"source/images/algorithm/linkedList-isPalindrome2.jpeg","hash":"6f7f7c153341f217b516d8692ff0a8d5eea8765f","modified":1623576443293},{"_id":"source/images/hibernate/oneToMany-mappedBy.png","hash":"b0046563e5e8263ceec84425539a1fd3dd3a6199","modified":1617679441884},{"_id":"source/images/hibernate/oneToMany.png","hash":"0bd966dd47526f96263db53bb96515802c0ecf50","modified":1617678455616},{"_id":"source/images/nuxt/debug.png","hash":"ffc2f0ec49fc611f3d6fec826c88392cfba96742","modified":1621416143828},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501628194000},{"_id":"source/_posts/js-promise/promise.png","hash":"289af920a6f52a2f3892b62c344befe8354617cf","modified":1615548075165},{"_id":"source/images/algorithm/binarySearch-left-bound.jpeg","hash":"86ed215ad502463c1f6c911744122eda8e9a4cf6","modified":1623602461594},{"_id":"source/images/algorithm/reverse-linkedList-2.png","hash":"72ea92cb0013e251e4828f43d5e4c32d6c3c2413","modified":1623290486376},{"_id":"source/images/algorithm/reverse-linkedList-1.png","hash":"ab2634344e6df3caf59988dde4460080f0d53e07","modified":1623290230092},{"_id":"source/images/algorithm/reverse-linkedList-between-node.jpeg","hash":"e9a8a819688df7b526f90131317a53352caa3544","modified":1623375941630},{"_id":"source/images/algorithm/reverse-linkedList-between-node4.png","hash":"122c86f06f20bbfde1620cdd8ff8fa90f41d0f14","modified":1623379962302},{"_id":"source/images/algorithm/reverse-linkedListMN.jpeg","hash":"e9a8a819688df7b526f90131317a53352caa3544","modified":1623317435018},{"_id":"source/images/curl-resume-download.png","hash":"2abd6835a8a78a488fe156c33b32a3f4e9634bad","modified":1616727716956},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501628194000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1501628194000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501628194000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501628194000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501628194000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501628194000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501628194000},{"_id":"source/images/algorithm/linkedList-isPalindrome.jpeg","hash":"37674778978bcc4baa00d829c887491ce3a84008","modified":1623573876000},{"_id":"source/images/algorithm/reverse-linkedList-between-node3.png","hash":"5b56e0e18b5cec160b8c5e37542347089c68f555","modified":1623380161743},{"_id":"source/images/algorithm/reverse-linkedListN-2.png","hash":"efcf5faa26d7228157875b9080d78f6c87d4a8ee","modified":1623294973628},{"_id":"source/images/nuxt/log.png","hash":"e9ca76c6570aac299dffaeb1741fa4e4d6e7cb56","modified":1621416574801},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501628194000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501628194000},{"_id":"source/images/algorithm/reverse-linkedList-3.png","hash":"33ad2574f4b5565e4443a57ef958c4b670d98889","modified":1623292205951},{"_id":"source/images/hibernate/manyToMany.png","hash":"5c21254f8005d7bcfec92db8e332aa66c6130f89","modified":1617680329333},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1501628194000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501628194000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501628194000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501628194000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501628194000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501628194000},{"_id":"source/_posts/vue-relearn-component/vue2-lifeCycle.jpg","hash":"69ca3faba3ff08596cac9f277bc1605f653ff3ae","modified":1615548075210},{"_id":"source/images/algorithm/reverse-linkedList-between-node2.jpeg","hash":"b093b6c5aaddfd2cc0e400979954c09f951518cd","modified":1623376651000},{"_id":"source/images/algorithm/reverse-linkedListN-1.png","hash":"bce57a38cd54c6922802accb543295ac18ee007c","modified":1623293995680},{"_id":"source/images/java/java-error.png","hash":"f408990603b5f609ec94cb0e8fbeae4fdacde5f0","modified":1623032606456},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501628194000},{"_id":"source/_posts/Three-learn/camera-diff.png","hash":"ce6bf6807e779bb68131154fa9d5be809c5d7e6e","modified":1615548075147},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501628194000},{"_id":"source/images/hibernate/manyToMany2.png","hash":"356e6f00dff9ce0233363672da981b460645f1c8","modified":1617680489111},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501628194000},{"_id":"source/_posts/HTTP-cache/mindSet.png","hash":"6c39e54f8eb93e62aadf6c569a426c0abb5984e6","modified":1615548075142},{"_id":"source/images/java/java-lang-define-error.png","hash":"56a10029df600a563a4ca1d61bb8fef19dde76e7","modified":1623034139480},{"_id":"public/content.json","hash":"78a6ee75892e04701521aa234a71b4118d382992","modified":1653890309599},{"_id":"public/baidusitemap.xml","hash":"14239157f5cf54463947ea21995d967d53b45c6d","modified":1653890309599},{"_id":"public/search.xml","hash":"baa52693b5d9764e3e2f11a6219dc18b3c1c6c14","modified":1653890366685},{"_id":"public/googleSitemap.xml","hash":"ef183d5a1085a16112832a3e03549326db94f310","modified":1653890309599},{"_id":"public/draft/React Hooks.html","hash":"67a152bd47c2d8e02cb48036d424ad3681bff9ea","modified":1653890309599},{"_id":"public/categories/index.html","hash":"a219746acc4617fa719251e5daaf18a11f3dffef","modified":1653890309599},{"_id":"public/about/index.html","hash":"6cbb78737b14c4def8e074bfa6b9fd8495b804a0","modified":1653890309599},{"_id":"public/draft/blog-dev.html","hash":"7fadf9c6102f1a38c00dcc3888366bfdd0d33853","modified":1653890309599},{"_id":"public/tags/index.html","hash":"4d6c1c54a03224566494eb1938af8aa347f8a988","modified":1653890309599},{"_id":"public/uploads/google5bedcd4170c798b7.html","hash":"e74b904d8bc795a3a4ba2cbe810a9df46fb142e6","modified":1653890309599},{"_id":"public/2022/05/13/Component-diff-with-Component()/index.html","hash":"5e6f1981f1c3dc874e21b0d77d523aa95a569f28","modified":1653890309599},{"_id":"public/2022/05/04/Python-Learn/index.html","hash":"67409dc4a61e292c08bc483ba279dd1a87e94a0a","modified":1653890309599},{"_id":"public/2022/05/03/Type Challenges/index.html","hash":"8a14fae74290d0e2a9f14c6996462ab2c647eb42","modified":1653890309599},{"_id":"public/2022/04/18/dockerlize-tv-movie/index.html","hash":"173a228d95554f8ba5982f6211776f26dc03a98b","modified":1653890309599},{"_id":"public/2022/04/17/Nodejs-Koa/index.html","hash":"8a8ba885ee3bc1fd762a963c04710eb8680dde25","modified":1653890309599},{"_id":"public/draft/spring-mapStruct.html","hash":"3fee14e77f3eec20572af8f687bcf74c397cc39e","modified":1653890309599},{"_id":"public/2022/04/11/nslookup-linux/index.html","hash":"6f2427f4d2c0a2c08cadcd37ac138871975f75b9","modified":1653890309599},{"_id":"public/2022/04/16/docker-bind-mounts/index.html","hash":"058bfaad07db744f2b15561765d208a112bfea3b","modified":1653890309599},{"_id":"public/2022/04/21/百度AI 人脸搜索 -MN 调研/index.html","hash":"2d5fb63c832d9525918635726533d7b21227b231","modified":1653890309599},{"_id":"public/2022/04/06/nodejs-rename-files/index.html","hash":"acfcf969f236b3166fd3c4a4fdd505404990a78a","modified":1653890309599},{"_id":"public/2022/04/06/type 与 interface/index.html","hash":"e003b28b9d746b5d8fdee0e91b6084567f1104e6","modified":1653890309599},{"_id":"public/2022/03/24/clash-docker/index.html","hash":"9c02e9515c7f089f76405326d251355a87d591f9","modified":1653890309599},{"_id":"public/2022/03/11/fe-interview/index.html","hash":"44c3deb5769b88bd130a5721788bf85c2f9798cb","modified":1653890309599},{"_id":"public/2022/03/22/oh-my-zsh/index.html","hash":"523ced888fcb0d2639864c7be21aa78c6a84731b","modified":1653890309599},{"_id":"public/2021/12/07/util-js-uuid/index.html","hash":"59183bdbfcf4157d16e135f1e7b44bf6f0f628ee","modified":1653890309599},{"_id":"public/2021/12/17/utils-tree-map/index.html","hash":"67eebf4198ceb04e24ef41b1034fd24d8b0263cf","modified":1653890309599},{"_id":"public/2021/11/15/java-domain-entity-with-hibernate-liqubase/index.html","hash":"44260faacbb5f9269521f75e47c304ba7a9a05b9","modified":1653890309599},{"_id":"public/2021/11/09/java-object-equal/index.html","hash":"6befde3389bae4306f0831852fb720670f7152fc","modified":1653890309599},{"_id":"public/2022/03/18/clash-config-reference/index.html","hash":"d60b9e54edba408c97976c6702890b62faed08ab","modified":1653890309599},{"_id":"public/2021/11/01/react-hooks-implement/index.html","hash":"ad921589aaeeb56e59d985621ece07d0c737e44e","modified":1653890309599},{"_id":"public/2022/03/18/zerotier-planet/index.html","hash":"d5e26c2ebeeb17400107e69c9b77538793c6e9fd","modified":1653890309599},{"_id":"public/2021/11/16/java-hibernate-cascade/index.html","hash":"9af373ac6b80c88f2571a49638a160f31e33d502","modified":1653890309599},{"_id":"public/2021/10/19/redux-toolkit-cheat-sheet/index.html","hash":"66d8d390006d5137567324df6345cca3ab7a7551","modified":1653890309599},{"_id":"public/2021/10/24/react-redux-slice-ecosystem/index.html","hash":"e464d7ea3eb228650c8aafcbb3dbacccf5a4c8d0","modified":1653890309599},{"_id":"public/2021/10/15/util-tree-filter/index.html","hash":"f778f47237e1663330b45a97b1adcd80a022c930","modified":1653890309599},{"_id":"public/2021/10/11/react-styled-component-cheat-sheets/index.html","hash":"06ba7722478693ef582fcbc03ca93a8ecd04c476","modified":1653890309599},{"_id":"public/2021/07/25/Docker 安装 /index.html","hash":"855ef8ee0202c05552eb02f45e8831421c100df6","modified":1653890309599},{"_id":"public/2021/08/03/java-basic/index.html","hash":"86a47ab54635fd51bc0f4d3c02be7078a4cc4a23","modified":1653890309599},{"_id":"public/2021/10/29/react-UseCallback 和 React.memo() 使用介绍/index.html","hash":"9284f1b0f727f9ffc5665e4947207a683c514287","modified":1653890309599},{"_id":"public/2021/07/24/vue-render/index.html","hash":"88e96a3a6955e3fc47903c7d2d38b823cb1ca01a","modified":1653890309599},{"_id":"public/2021/08/05/linux-awk/index.html","hash":"a6d85d7e04af418a2c68493e83f50fee050b4fa1","modified":1653890309599},{"_id":"public/2021/06/23/algorithm-binary-tree/index.html","hash":"83abe843cd7655ee15efccd4250ae58ac8b5abfb","modified":1653890309599},{"_id":"public/2021/07/05/spring-data-jpa-delete-child-parent-from-relationship/index.html","hash":"9402e25d99d4b06bb795c2be51c184d7b241d57f","modified":1653890309599},{"_id":"public/2021/06/21/algorithm-monotonic/index.html","hash":"c0985aee9a754cf9e836cb2262e063d744b886be","modified":1653890309599},{"_id":"public/2021/06/20/algorithm-binary-heap/index.html","hash":"8724c98e07976c27f25288f3287847f73598b260","modified":1653890309599},{"_id":"public/2021/06/13/algorithm-linkedList-isPalindrome/index.html","hash":"b6324d02534b6066879d3a447d21c35a13fdc8e4","modified":1653890309599},{"_id":"public/2021/06/14/algorithm-binarySearch/index.html","hash":"3a31ed72cd62f71abf7fdab44d25b69505b76315","modified":1653890309599},{"_id":"public/2021/06/13/linux-set-up/index.html","hash":"cf5bc8be3d887950e02f851093b1d5c87c4c5c24","modified":1653890309599},{"_id":"public/2021/06/10/algorithm-linkedlist-reverseLinkedList/index.html","hash":"7370cb00cb9542b831a63558f4844b9008f8ddcc","modified":1653890309599},{"_id":"public/2021/06/15/algorithm-towPointer-twoSumII/index.html","hash":"b62cc2815ac2375a9f61b4f36c98674aaac4b4a7","modified":1653890309599},{"_id":"public/2021/06/07/java-error-handle/index.html","hash":"3734e40f1499b5f6cffbad44936a95e831a3234b","modified":1653890309599},{"_id":"public/2021/05/19/vue-nuxt-debug/index.html","hash":"319ad75043e9947eaa36797907e266f5a2edd496","modified":1653890309599},{"_id":"public/2021/05/01/spring-data-jpa-tree-entity/index.html","hash":"8e88e379ead90309b0ab22dbcdd72d4ab7354356","modified":1653890309599},{"_id":"public/2021/04/28/java-optional-handbook/index.html","hash":"6debbb4a5baf0ea04c2b89cd94bdee747917e3b3","modified":1653890309599},{"_id":"public/2021/04/25/auto-deploy/index.html","hash":"45c40e4495720c9bd2226f678a2fdca4f8b107d1","modified":1653890309599},{"_id":"public/2021/04/25/spring-data-querydsl/index.html","hash":"c2f1927a10f2795bd67becada405caa2ff8948f2","modified":1653890309599},{"_id":"public/2021/04/25/util-tree-path/index.html","hash":"7e0539ecaf51432c5152678b01d15edbed9b3cd1","modified":1653890309599},{"_id":"public/2021/04/19/spring-DTO/index.html","hash":"79c3e1e29682eaa84484995fbe26bbbdae5b2f78","modified":1653890309599},{"_id":"public/2021/04/11/java-functional-programming/index.html","hash":"1f5f0c2c915d7123ee86e4de5d7b437ac2817c09","modified":1653890309599},{"_id":"public/2021/04/22/mysql-handbook/index.html","hash":"70a8a460b232e8de6953716d3d552836f997ca1c","modified":1653890309599},{"_id":"public/2021/03/30/html-script-defer-async/index.html","hash":"4dd8c01ab925c019d8f1fb6409329e3c69f19206","modified":1653890309599},{"_id":"public/2021/03/29/spring-boot-cors/index.html","hash":"25936df35e6b4b3fac60b36439b09ab8bd44cfa2","modified":1653890309599},{"_id":"public/2021/03/26/linux-curl-tips/index.html","hash":"427f430bcb9399f37467d6b6bb050223e1979230","modified":1653890309599},{"_id":"public/2021/03/14/next-usage/index.html","hash":"b238ef295c2ab5d48e97e11f5aa7b20241629785","modified":1653890309599},{"_id":"public/2021/02/26/nginx-http-proxy/index.html","hash":"0932b5f97d10856085990f7ff6ba223a0b9f40b9","modified":1653890309599},{"_id":"public/2021/02/24/lint-staged/index.html","hash":"4d73421b741cad066d054853f226e2a137520a9e","modified":1653890309599},{"_id":"public/2021/02/22/vue-next-nextTick/index.html","hash":"2c2a4dd090d1f5c2647b7264815f968a1605f2b3","modified":1653890309599},{"_id":"public/2021/02/20/vue-next-reactivity/index.html","hash":"43ef8fb1d160caf45fafcb943fa9546c682e8a7c","modified":1653890309599},{"_id":"public/2021/02/19/vue-2-reactivity-implement/index.html","hash":"2d53df336297ccb271c89dfc4356780fe76512d3","modified":1653890309599},{"_id":"public/2021/01/31/util-数组shuffle/index.html","hash":"9127070b49519ce4cdc88571ab31d0b68e9a8db9","modified":1653890309599},{"_id":"public/2021/03/08/spring-data-jpa/index.html","hash":"fe832b252277522ab6cf52c926e4b572b8d9f8d3","modified":1653890309599},{"_id":"public/2021/03/01/linux-nginx/index.html","hash":"16ee7ce3a0b8442c44de6418e658be22a711fd8a","modified":1653890309599},{"_id":"public/2021/01/13/js-prototype-constructor/index.html","hash":"f11458cead33d69685b7fa799ca66298f5e16035","modified":1653890309599},{"_id":"public/2021/01/11/JS-防抖节流/index.html","hash":"2fe5dd414ea7481345329052963f22ef45c78900","modified":1653890309599},{"_id":"public/2021/01/11/util-数组转树/index.html","hash":"21b8ef1e98a21c6180b8787aaead8054dc0bc452","modified":1653890309599},{"_id":"public/2021/01/11/util-字符串转换成指定范围数字/index.html","hash":"a35689846da9b518502edf0295ed3a0785deceaf","modified":1653890309599},{"_id":"public/2021/01/06/linux-apt-get/index.html","hash":"e90ee93d97f6ee5615f60e22d305716357134a81","modified":1653890309599},{"_id":"public/2021/01/07/implement-API/index.html","hash":"9c03c2e59aba096ea9a25bb41e6b31091541b722","modified":1653890309599},{"_id":"public/2021/01/05/util-img-container/index.html","hash":"2d26cd03d6711482571286c39d1ed89515bd5b23","modified":1653890309599},{"_id":"public/2020/12/15/utils-RegExp/index.html","hash":"6d992fb2b70011fb74cb0b452e4ea30f2deb9f78","modified":1653890309599},{"_id":"public/2020/10/07/webpack-learn07/index.html","hash":"561da1d61dac16fe6631a2aee4b9f3e03367d378","modified":1653890309599},{"_id":"public/2020/10/05/webpack-learn05/index.html","hash":"24141ba71d4a256546cc7c609ce1583d998c698f","modified":1653890309599},{"_id":"public/2020/09/12/react-dev-03/index.html","hash":"d478c42cfe68fc7559545f65e38f876b37fcc9a5","modified":1653890309599},{"_id":"public/2020/09/12/react-dev-04/index.html","hash":"b9f43a17dd242cb7501ac139a9d413bb7d4d8d95","modified":1653890309599},{"_id":"public/2020/09/18/docker-command/index.html","hash":"eb34c3dfacdd7c5748d93516e1330f3518297665","modified":1653890309599},{"_id":"public/2020/09/11/react-dev-02/index.html","hash":"a1de6905ed0cc7b1ba8ceb646ceda1db1509e195","modified":1653890309599},{"_id":"public/2020/08/12/HTTP-cache/index.html","hash":"ecd3732f88e36316d40272eb540fb5ca640c7e1b","modified":1653890309599},{"_id":"public/2020/08/06/algorithm-BST/index.html","hash":"5b5d430b686633ff87d3d9f107d64c80946a8156","modified":1653890309599},{"_id":"public/2020/07/03/git-operation/index.html","hash":"f851cb4cc5fd9faa474d2d78cceacde478297c78","modified":1653890309599},{"_id":"public/2020/09/08/utils-imgList2zip/index.html","hash":"2cca0b270e87dd27cd5bf047d418a91fa83683a3","modified":1653890309599},{"_id":"public/2020/07/02/js-promise/index.html","hash":"a44f3800aaf1a00a2e534a2dbb0fdc8069818ee4","modified":1653890309599},{"_id":"public/2020/06/22/algorithm-linkedlist-example/index.html","hash":"0d5b3eaf63509cde0129b58df612d15f267d83d9","modified":1653890309599},{"_id":"public/2020/06/22/algorithm-linked-list-merge-two/index.html","hash":"5265d035e9c0abd1498df2e18300dbf036102def","modified":1653890309599},{"_id":"public/2020/06/18/algorithm-palindrome-linkedList/index.html","hash":"38394143b7d5672f30d56273777be526e986310b","modified":1653890309599},{"_id":"public/2020/06/19/utils-svgToImage/index.html","hash":"4cc4a1a6f8bbf6cde65bf13f77908d080982df2a","modified":1653890309599},{"_id":"public/archives/index.html","hash":"3bf3990668e03e45d055da2f2a5f02eba7b6fc47","modified":1653890309599},{"_id":"public/2020/04/19/spring-boot-response/index.html","hash":"a474e55f3fa48b2223a4ae2f4d8254992ba7a72e","modified":1653890309599},{"_id":"public/archives/page/3/index.html","hash":"780cc1a2c756e4165965d98d34a944eb42b3229e","modified":1653890309599},{"_id":"public/2020/06/17/algorithm- LRU/index.html","hash":"f0c77dd930bab160b8ac8b56472969fb1ce00905","modified":1653890309599},{"_id":"public/archives/page/4/index.html","hash":"b6c62f356e81a6e7b2e7d2fa11b96a73c504f299","modified":1653890309599},{"_id":"public/archives/page/7/index.html","hash":"54d35e39bbd844d6ddfd11fd3073ec8bf0fb623c","modified":1653890309599},{"_id":"public/archives/page/8/index.html","hash":"47f13ea82b2c46f65a1dd2811ab79c349dda4567","modified":1653890309599},{"_id":"public/archives/page/9/index.html","hash":"197c8a2eb3558b3567c7926de43452fa803734e6","modified":1653890309599},{"_id":"public/archives/page/2/index.html","hash":"ccc513a46b89bd929cdcb6ac1244240292c68d29","modified":1653890309599},{"_id":"public/archives/2020/index.html","hash":"34e4324919fb4a343f0dd58db5cd8bf3143773fb","modified":1653890309599},{"_id":"public/archives/2020/page/2/index.html","hash":"9fa2d7551a06be6e284565c25d1b7c15d3cdb067","modified":1653890309599},{"_id":"public/archives/2020/04/index.html","hash":"e462b92abc8ea89a007d36d8b28107d26f97f25c","modified":1653890309599},{"_id":"public/archives/page/5/index.html","hash":"3210588184b055495416bdbad20ec79554f35829","modified":1653890309599},{"_id":"public/archives/page/6/index.html","hash":"a34febf801b2564af64dbdca8e5a305b9e3fcbe2","modified":1653890309599},{"_id":"public/archives/2020/06/index.html","hash":"967f8250c83f9edbe9fbde1ed105f733ce78c10e","modified":1653890309599},{"_id":"public/archives/2020/07/index.html","hash":"5154a4f648aa46da4da8faf7502d081acb9cd35d","modified":1653890309599},{"_id":"public/archives/2020/10/index.html","hash":"4eedf0de269efc8c146aa3c5a64d027744bdf21e","modified":1653890309599},{"_id":"public/archives/2020/09/index.html","hash":"7143322c324ee1762dd2892d6930e5182386468e","modified":1653890309599},{"_id":"public/archives/2020/12/index.html","hash":"b87bf5b571e7a625da043e470282a39f851f62e4","modified":1653890309599},{"_id":"public/archives/2020/08/index.html","hash":"8ad308b49bc49432dad5069386cc87bd847ef1a2","modified":1653890309599},{"_id":"public/archives/2021/index.html","hash":"7be1d1a3de146d4de6e194ac3f997ecfd622692f","modified":1653890309599},{"_id":"public/archives/2021/page/2/index.html","hash":"411389c856245947e98f8f486675e14a3ea9df48","modified":1653890309599},{"_id":"public/archives/2021/page/3/index.html","hash":"ed7a35b0efbefe45e16230f57709d4d6ce0a4dba","modified":1653890309599},{"_id":"public/archives/2021/page/5/index.html","hash":"1d14ab8f0fba3398fa1d8941d0d1e0e2d0211116","modified":1653890309599},{"_id":"public/archives/2021/01/index.html","hash":"505fe31fae77f9008ca3a55b1cca583c2b3d9f8b","modified":1653890309599},{"_id":"public/archives/2021/page/6/index.html","hash":"decaf09bb71d0c1b68a434dfa10316dae112ae92","modified":1653890309599},{"_id":"public/archives/2021/04/index.html","hash":"2b8586c10bc158e1dc2a14041daa04d9c55b00d7","modified":1653890309599},{"_id":"public/archives/2021/03/index.html","hash":"54587c470b62f527fd19891601f8ffd184869ab5","modified":1653890309599},{"_id":"public/archives/2021/05/index.html","hash":"17da94364f065b98b7a8cf93a7231eb6ffda9bfa","modified":1653890309599},{"_id":"public/archives/2021/06/index.html","hash":"cd5bdd57723b8a9e27ec83faaba256d949a70a42","modified":1653890309599},{"_id":"public/archives/2021/02/index.html","hash":"8e9bb8c5b990c45f83014f24bf92506abf8f74f5","modified":1653890309599},{"_id":"public/archives/2021/07/index.html","hash":"4c703312fc1342feca0ad12db53f09909d6a0cf7","modified":1653890309599},{"_id":"public/archives/2021/08/index.html","hash":"52da556464b11710beb6937aacb637bb65cd6ddc","modified":1653890309599},{"_id":"public/archives/2021/10/index.html","hash":"b50fd87c09c108d2b90593ebe9c6aed09100560c","modified":1653890309599},{"_id":"public/archives/2021/11/index.html","hash":"107c85cc5410d44403717e0dd9a6b6c660d69ebd","modified":1653890309599},{"_id":"public/archives/2021/12/index.html","hash":"68b4b85bb858dc4dda6301f08160128443d1024d","modified":1653890309599},{"_id":"public/archives/2022/index.html","hash":"efb4be7ef2ff5e31fc0a584805829f666d0bceb9","modified":1653890309599},{"_id":"public/archives/2021/page/4/index.html","hash":"7c16fad1f91d6be5b29436e86e87f1a6239b8d63","modified":1653890309599},{"_id":"public/archives/2022/04/index.html","hash":"31dd5dd1041e10554ca2ef2f5fbd11506bf3c0c3","modified":1653890309599},{"_id":"public/categories/运维/index.html","hash":"9335d55009ff8d5c9fb8b6f953c289d33a6b1e05","modified":1653890309599},{"_id":"public/archives/2022/05/index.html","hash":"d0e8cf14ae0e270392b857c3f5b9e88af53bac97","modified":1653890309599},{"_id":"public/categories/前端/index.html","hash":"9be26444011a14f2932c3af259c0f4b37fb2033c","modified":1653890309599},{"_id":"public/categories/前端/page/2/index.html","hash":"7c813feafa90cf579035ce886fb52701e4ceb400","modified":1653890309599},{"_id":"public/categories/前端/page/3/index.html","hash":"f4fbbba2cb1ef94242ee020f3429f634913e70ef","modified":1653890309599},{"_id":"public/categories/前端/page/4/index.html","hash":"a844f6023465786929f904e55bfe0a1d893b687c","modified":1653890309599},{"_id":"public/categories/网络/index.html","hash":"b9e50f197a53a422a113d44132f325660eb70163","modified":1653890309599},{"_id":"public/categories/后端/index.html","hash":"977ab12a2b9298e3c43084e0e6ea2e52acf75056","modified":1653890309599},{"_id":"public/categories/后端/page/2/index.html","hash":"1d8d509ad490c2a47c9a18479c075c929ef054c2","modified":1653890309599},{"_id":"public/archives/2022/page/2/index.html","hash":"2590ff0e9ef116c81b400c36955f64d8e738d578","modified":1653890309599},{"_id":"public/archives/2022/03/index.html","hash":"08cfb91d420b2fc28346f3fe72a8ed0ee9f78f5b","modified":1653890309599},{"_id":"public/categories/杂项/index.html","hash":"f6d4c993ccf3507e1e3c0bca8a1e23eb607abe40","modified":1653890309599},{"_id":"public/categories/算法/page/2/index.html","hash":"b8e8ef416beee91e90adaf1790e7fb49d8b7447b","modified":1653890309599},{"_id":"public/categories/工程化/index.html","hash":"1a9b7380a7460804237599dc4e426ed73b258e36","modified":1653890309599},{"_id":"public/categories/数据库/index.html","hash":"5efc9831da40b0f479e827bf95bfe0139217b1a3","modified":1653890309599},{"_id":"public/index.html","hash":"1acdd7bf9952e9a5259a85596700d0348ba6104d","modified":1653890309599},{"_id":"public/page/2/index.html","hash":"9903fc83d58167a660fea05cb20696e7997466e1","modified":1653890309599},{"_id":"public/page/4/index.html","hash":"94ae230aa0f996f96e5db1aa13bcc522e462c1fe","modified":1653890309599},{"_id":"public/page/5/index.html","hash":"66a3b1d19d2364e891b1e5b38ddba7b4181db4ae","modified":1653890309599},{"_id":"public/categories/算法/index.html","hash":"926e64a64eb8bed49ded52da59fc72db3369604a","modified":1653890309599},{"_id":"public/page/6/index.html","hash":"62f8bde08e267c8cbf8a287761ec387d48daa6b7","modified":1653890309599},{"_id":"public/page/7/index.html","hash":"6d45553f7c9638ff09a1bd4726ae482a944c9a25","modified":1653890309599},{"_id":"public/categories/python/index.html","hash":"37ad3124fed200844413a7044681549955443ba2","modified":1653890309599},{"_id":"public/page/8/index.html","hash":"3e2600e6097f9e9618e1c08b02389b5e9bf6354e","modified":1653890309599},{"_id":"public/page/9/index.html","hash":"f3d6a0cc85371d86c934584fc34d2d7083a04bdf","modified":1653890309599},{"_id":"public/page/3/index.html","hash":"9069a6e5eecd9712dfc884fcbc05c946a2e5a712","modified":1653890309599},{"_id":"public/tags/jsx/index.html","hash":"ae4e3c8faa0c8693d07f72b152276ba7dfd63846","modified":1653890309599},{"_id":"public/tags/implement/page/2/index.html","hash":"f89c3d45953dd365173184142ad468522e59ddbb","modified":1653890309599},{"_id":"public/tags/nodejs/index.html","hash":"9822b888513fcee9ee1ef7c867666a9ccb11efeb","modified":1653890309599},{"_id":"public/tags/koa/index.html","hash":"f82d242a86bac43de87fb02f4b83fc9b9e5eb47c","modified":1653890309599},{"_id":"public/tags/ts/index.html","hash":"31ffa46d5b86bb6925fbcb996d53ead4f77d1428","modified":1653890309599},{"_id":"public/tags/react/index.html","hash":"926414c57a2d9c955883db241a2dd71e2f7bdf33","modified":1653890309599},{"_id":"public/tags/Docker/index.html","hash":"9b7565ff6c61e83b8622e05b266e4c80e7bb06f4","modified":1653890309599},{"_id":"public/tags/implement/index.html","hash":"2232e512adeae2c982c6017f594b4adbc36eee54","modified":1653890309599},{"_id":"public/tags/algorithm/index.html","hash":"7d00e0746920050ead02af89eea63ae2ba9233fa","modified":1653890309599},{"_id":"public/tags/webpack/index.html","hash":"bd20a0840066f67c6ce3de433847a5ca4d9da084","modified":1653890309599},{"_id":"public/tags/LRU/index.html","hash":"412b2bb449382128bbb123eafacba21c235b49ea","modified":1653890309599},{"_id":"public/tags/typescript/index.html","hash":"5d90612c1fdcd7f00c100b6594bb36914f0c7ce4","modified":1653890309599},{"_id":"public/tags/BST/index.html","hash":"308104e814ff3e49b3d09914f1671127e782b40d","modified":1653890309599},{"_id":"public/tags/promise/index.html","hash":"c2708b0ab5bbcf627b637ade06adfe90e9a52e4d","modified":1653890309599},{"_id":"public/tags/linkedList/index.html","hash":"2283afa7f6a5408703c52d87209a885d75838443","modified":1653890309599},{"_id":"public/tags/binarySearch/index.html","hash":"f760ab0c6acc516f455c106f724cd66c4d56a69d","modified":1653890309599},{"_id":"public/tags/二叉树/index.html","hash":"f9c4c29cd7d7169dd49cb05d400e923ba9914a43","modified":1653890309599},{"_id":"public/tags/递归/index.html","hash":"36e412910d63e4007fe6205d8a18c541ae69fbfb","modified":1653890309599},{"_id":"public/tags/git/index.html","hash":"7d2b9a8cb2239d07cd5a773733c38b5b5fa0842d","modified":1653890309599},{"_id":"public/tags/docker/index.html","hash":"007dfa680907038c9ddde537c209502c953b22f5","modified":1653890309599},{"_id":"public/tags/高阶追剧流程/index.html","hash":"d731ccb8b649e070f35231fa5992dd5fd54269fd","modified":1653890309599},{"_id":"public/tags/hibernate/index.html","hash":"2bb03e472bb7c1064a548b49616aa2067306bc15","modified":1653890309599},{"_id":"public/tags/java/index.html","hash":"e4a52c56c0c9bc215c8f3fbb2dda4825d4bc15d5","modified":1653890309599},{"_id":"public/tags/liquibase/index.html","hash":"8e95fe8632beb56820a706e59e1e3433b401aea6","modified":1653890309599},{"_id":"public/tags/fp/index.html","hash":"333a00e7cce75c7d18804914e0810c49d14f88a4","modified":1653890309599},{"_id":"public/tags/异步/index.html","hash":"e6fa618687584e689eab1e7737a926fff6fbf0f0","modified":1653890309599},{"_id":"public/tags/js/index.html","hash":"a70b54e5d86ecf1bc800e23e5757e24d1484a1b7","modified":1653890309599},{"_id":"public/tags/工程化/index.html","hash":"93fb52e335c6c38ff5f04e2bad6d6b460eaa9594","modified":1653890309599},{"_id":"public/tags/linux/index.html","hash":"888ffc4d69dc95b6e28fe5252660e9cd2626e6ca","modified":1653890309599},{"_id":"public/tags/nginx/index.html","hash":"f77155038021c8fa274e1fe6b7e759c7b33ad798","modified":1653890309599},{"_id":"public/tags/mysql/index.html","hash":"af7c61a06b6ee0f9de00e29153f269fd1cf28a55","modified":1653890309599},{"_id":"public/tags/database/index.html","hash":"16be5babfe2d1e30cd2d87be21a6c7595dab1d2b","modified":1653890309599},{"_id":"public/tags/emby/index.html","hash":"579b3b65ce10c1ff8b2a401c3c453083ef75f4a7","modified":1653890309599},{"_id":"public/tags/chinese-subfinder/index.html","hash":"f6d25b29261e6776d81a74788d72c531f7555b4a","modified":1653890309599},{"_id":"public/tags/nslookup/index.html","hash":"01ae8adde72cb2d42b5cbb974ba9df7842f7925e","modified":1653890309599},{"_id":"public/tags/redux/index.html","hash":"6075ce3ca4cc05820ccdd687d0aae5989412002b","modified":1653890309599},{"_id":"public/tags/dns/index.html","hash":"14642d0bdb8e4550415056e5ed3d0dda70c09998","modified":1653890309599},{"_id":"public/tags/styled-component/index.html","hash":"9848a9af8fd2e5b18ca3925fb386b165c6c5eb7b","modified":1653890309599},{"_id":"public/tags/Spring/index.html","hash":"55278a68a5561ef0461a15f58a2364d4e8c298cd","modified":1653890309599},{"_id":"public/tags/ORM/index.html","hash":"ef9398284c07ade986d6e6d0e41964e6fd624b53","modified":1653890309599},{"_id":"public/tags/Spring-Boot/index.html","hash":"d890ea4fbe3781cffc780dc7a53836901102bb6e","modified":1653890309599},{"_id":"public/tags/JPA/index.html","hash":"8ec8a3993f5e560a7a60aa77c6853a8ac7abbf40","modified":1653890309599},{"_id":"public/tags/CORS/index.html","hash":"cce07fe18d027c5fc02be40c682d3dcce7bb9fed","modified":1653890309599},{"_id":"public/tags/vue/index.html","hash":"c41375ac4422472675d81d43ccbbe3b89b2ae0f8","modified":1653890309599},{"_id":"public/tags/debug/index.html","hash":"92c3fd639bd8cf7f7bfd89025203c3d598b63eda","modified":1653890309599},{"_id":"public/tags/nuxt/index.html","hash":"d21f0a6f6760d476a4096eec7ca79bd820031a91","modified":1653890309599},{"_id":"public/tags/jpa/index.html","hash":"d46598db7396b7f97906d56de1cd58c09c93109b","modified":1653890309599},{"_id":"public/2022/05/26/Wepack-Handbook/index.html","hash":"bb05d4936d3396af5a0f4f5389578ea80ccea47a","modified":1653890309599},{"_id":"public/2022/05/28/React - custom hook - useHotKeys/index.html","hash":"70f381046126a5b0ac1ccce7cca4b047e5c629dc","modified":1653890309599},{"_id":"public/2022/05/13/communication-between-webview-and-react-native/index.html","hash":"33e24ed2554d3bcac7ef1f6b2d8753484495e87f","modified":1653890309599},{"_id":"public/2020/09/11/React-CRA-multiple-entry/index.html","hash":"9d11d8a7916a31af84399842d5bffe15a1713db4","modified":1653890309599},{"_id":"public/header.jpeg","hash":"46719e32f7b5bfafdce4393e96742c835bf8687d","modified":1653890309599},{"_id":"public/favicon.ico","hash":"6a73dce73e13b5d1cb498c775f282899d6b719c1","modified":1653890309599},{"_id":"public/images/1.ipk","hash":"90abef5686378a057284c0273d4c97ba405aefd7","modified":1653890309599},{"_id":"public/images/32.ico","hash":"8147843e4b7bd88d301c0227b33c14f331f962c4","modified":1653890309599},{"_id":"public/uploads/header.jpeg","hash":"46719e32f7b5bfafdce4393e96742c835bf8687d","modified":1653890309599},{"_id":"public/images/algorithm/monotonic-describe.png","hash":"a5642beee30a86a906ecd4d3a6c176537a0f8a95","modified":1653890309599},{"_id":"public/images/header.jpeg","hash":"46719e32f7b5bfafdce4393e96742c835bf8687d","modified":1653890309599},{"_id":"public/images/java/liquibase-jpa-example.png","hash":"fbeeb667223907b80039e7c60a05ebc0b2909091","modified":1653890309599},{"_id":"public/images/nuxt/run-debug.jpg","hash":"37daa5c2ec46fca03d413666a5c03aef8fa2d955","modified":1653890309599},{"_id":"public/images/java/stream-filter.png","hash":"9d86e599e0121dd1d2a798f8448b7f46309ce0b8","modified":1653890309599},{"_id":"public/images/hibernate/fetchType.png","hash":"b1d397fe15e79d04a893400efcace86f4b8e9e84","modified":1653890309599},{"_id":"public/images/algorithm/binary-tree-116-describe.png","hash":"4e836f14fd7024b14461dbeaceec91e7ef9c350c","modified":1653890309599},{"_id":"public/images/styled-components/02.png","hash":"4ec3c6e4ccc6a2158cd7eab7d58992f81213c6bd","modified":1653890309599},{"_id":"public/images/styled-components/01.png","hash":"6b1c302f4fdd9af9f897ed6224f64e600e76fef9","modified":1653890309599},{"_id":"public/images/react/useReducer-implement.png","hash":"564cd3b507db072ae2ac41efc58b2da8aa62927f","modified":1653890309599},{"_id":"public/images/styled-components/05.png","hash":"b82b2c471ecaccd925bd24bcab0ab22a3f30b8c6","modified":1653890309599},{"_id":"public/images/styled-components/03.png","hash":"d5b8cad75508f1896626181a1a73c47da596d51a","modified":1653890309599},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1653890309599},{"_id":"public/images/spring-data-jpa/one-to-many-example.png","hash":"9dfddd2217772a3c43ec69f074a4c35c646afffa","modified":1653890309599},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1653890309599},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1653890309599},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1653890309599},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1653890309599},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1653890309599},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1653890309599},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1653890309599},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1653890309599},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1653890309599},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1653890309599},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1653890309599},{"_id":"public/images/styled-components/04.png","hash":"0c299e31f37a57e73e4a6c21400d93378dc98f32","modified":1653890309599},{"_id":"public/images/java/stream-reduce.png","hash":"b21df39f3b39c92109630f43c9e16f0488023ff0","modified":1653890309599},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1653890309599},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1653890309599},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1653890309599},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1653890309599},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1653890309599},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1653890309599},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1653890309599},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1653890309599},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1653890309599},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1653890309599},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1653890309599},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1653890309599},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1653890309599},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1653890309599},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1653890309599},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1653890309599},{"_id":"public/2020/07/03/git-operation/git-rebase.png","hash":"b33bc9787ef6aab29f51ac1b3540fe6cce1c0d4b","modified":1653890309599},{"_id":"public/images/cat.JPG","hash":"45f8cb321f8c6a4ccdbadd975a974e20d3ff5687","modified":1653890309599},{"_id":"public/images/java/java-monad.png","hash":"9914c0ff4f66d9175428eba90d8333dcd3d87e79","modified":1653890309599},{"_id":"public/images/java/stream-collection-combiner.png","hash":"39ba9e269068922a5597a1c9ba05906b12e1165a","modified":1653890309599},{"_id":"public/images/java/stream-collection-accumulator.png","hash":"bcd2ddcd92d2d12dc1a9ad8473f22ca22e032ea3","modified":1653890309599},{"_id":"public/images/java/stream-collection-supplier.png","hash":"4fd44a40c278c8bcda2f511c19e19f89f51b35de","modified":1653890309599},{"_id":"public/images/java/stream-flatMap.png","hash":"3a9bafb9c6352cbb6a4f1c29fcc5e8ff9d6c4fab","modified":1653890309599},{"_id":"public/images/java/stream-map.png","hash":"00ac18c39f2f0dc2f937242163da34af0d3496b3","modified":1653890309599},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1653890309599},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1653890309599},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1653890309599},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1653890309599},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1653890309599},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1653890309599},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1653890309599},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1653890309599},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1653890309599},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1653890309599},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1653890309599},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1653890309599},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1653890309599},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1653890309599},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1653890309599},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1653890309599},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1653890309599},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1653890309599},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1653890309599},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1653890309599},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1653890309599},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1653890309599},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1653890309599},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1653890309599},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1653890309599},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1653890309599},{"_id":"public/css/main.css","hash":"7f67173e2a8c40337f3533e682d3c2f270b03545","modified":1653890309599},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1653890309599},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1653890309599},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1653890309599},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1653890309599},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1653890309599},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1653890309599},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1653890309599},{"_id":"public/2021/02/19/vue-2-reactivity-implement/data-structure.png","hash":"57f1dff08d466cf4cc6930b8be36eebfa47c3a79","modified":1653890309599},{"_id":"public/2021/02/20/vue-next-reactivity/data-structure.jpeg","hash":"a94f24f02311b78cb8f1eea4381847ea7cf366e9","modified":1653890309599},{"_id":"public/2020/08/06/algorithm-BST/1038.png","hash":"852fc0ca21731711b2f506cbf2efb9dcb4af876c","modified":1653890309599},{"_id":"public/2020/08/12/HTTP-cache/cache-control-strategy.png","hash":"3d61946aafb00e1fe0687997f2d67ffd67f1bfec","modified":1653890309599},{"_id":"public/2021/01/13/js-prototype-constructor/assign-new-prototype.png","hash":"4c9018338fe044423eb55f4da0cb4a2907b73076","modified":1653890309599},{"_id":"public/2021/01/13/js-prototype-constructor/create-obj.png","hash":"351b692b4f670c83a37b22a72eeb85c0d4e42fd0","modified":1653890309599},{"_id":"public/images/spring-boot-data-flow.png","hash":"785c8f89cfe38741001f6fcfd82cf380d6775762","modified":1653890309599},{"_id":"public/images/hibernate/jpa-example-1.jpeg","hash":"cabff36ef6a9b3be898d488f7269dd7274fd47c6","modified":1653890309599},{"_id":"public/images/java/hash-function.png","hash":"3f97a26ef011a95ef4fc32ede6191801ff07e57b","modified":1653890309599},{"_id":"public/images/nuxt/result.png","hash":"0a47cd77100b66e6922ca8f55a89d62a96b65913","modified":1653890309599},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1653890309599},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1653890309599},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1653890309599},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1653890309599},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1653890309599},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1653890309599},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1653890309599},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1653890309599},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1653890309599},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1653890309599},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1653890309599},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1653890309599},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1653890309599},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1653890309599},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1653890309599},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1653890309599},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1653890309599},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1653890309599},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1653890309599},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1653890309599},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1653890309599},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1653890309599},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1653890309599},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1653890309599},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1653890309599},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1653890309599},{"_id":"public/2020/08/06/algorithm-BST/236.png","hash":"03d2b3ad68ad3478787489342beed1b9ec51445c","modified":1653890309599},{"_id":"public/2021/01/13/js-prototype-constructor/define-constructor.png","hash":"5c227375226d88463a691d70510fd668a3d40f21","modified":1653890309599},{"_id":"public/2021/02/22/vue-next-nextTick/eventloop.jpeg","hash":"3842d7018af839ad7b4f06fe3fc326b8b738bd3a","modified":1653890309599},{"_id":"public/2021/04/25/auto-deploy/webhook.jpg","hash":"0a048883db06c511f430f29efa6b203bff1f6461","modified":1653890309599},{"_id":"public/images/spring-boot-structure.png","hash":"e67b499f000ab8317cb28dd4d9e93e6e74f97aa7","modified":1653890309599},{"_id":"public/images/algorithm/linkedList-isPalindrome2.jpeg","hash":"6f7f7c153341f217b516d8692ff0a8d5eea8765f","modified":1653890309599},{"_id":"public/images/hibernate/oneToMany-mappedBy.png","hash":"b0046563e5e8263ceec84425539a1fd3dd3a6199","modified":1653890309599},{"_id":"public/images/hibernate/oneToMany.png","hash":"0bd966dd47526f96263db53bb96515802c0ecf50","modified":1653890309599},{"_id":"public/images/nuxt/debug.png","hash":"ffc2f0ec49fc611f3d6fec826c88392cfba96742","modified":1653890309599},{"_id":"public/images/algorithm/binarySearch-left-bound.jpeg","hash":"86ed215ad502463c1f6c911744122eda8e9a4cf6","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedListMN.jpeg","hash":"e9a8a819688df7b526f90131317a53352caa3544","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedList-between-node4.png","hash":"122c86f06f20bbfde1620cdd8ff8fa90f41d0f14","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedList-2.png","hash":"72ea92cb0013e251e4828f43d5e4c32d6c3c2413","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedList-1.png","hash":"ab2634344e6df3caf59988dde4460080f0d53e07","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedList-between-node.jpeg","hash":"e9a8a819688df7b526f90131317a53352caa3544","modified":1653890309599},{"_id":"public/2020/07/02/js-promise/promise.png","hash":"289af920a6f52a2f3892b62c344befe8354617cf","modified":1653890309599},{"_id":"public/images/algorithm/linkedList-isPalindrome.jpeg","hash":"37674778978bcc4baa00d829c887491ce3a84008","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedListN-2.png","hash":"efcf5faa26d7228157875b9080d78f6c87d4a8ee","modified":1653890309599},{"_id":"public/images/nuxt/log.png","hash":"e9ca76c6570aac299dffaeb1741fa4e4d6e7cb56","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedList-between-node3.png","hash":"5b56e0e18b5cec160b8c5e37542347089c68f555","modified":1653890309599},{"_id":"public/images/curl-resume-download.png","hash":"2abd6835a8a78a488fe156c33b32a3f4e9634bad","modified":1653890309599},{"_id":"public/images/hibernate/manyToMany.png","hash":"5c21254f8005d7bcfec92db8e332aa66c6130f89","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedList-3.png","hash":"33ad2574f4b5565e4443a57ef958c4b670d98889","modified":1653890309599},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1653890309599},{"_id":"public/images/java/java-error.png","hash":"f408990603b5f609ec94cb0e8fbeae4fdacde5f0","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedList-between-node2.jpeg","hash":"b093b6c5aaddfd2cc0e400979954c09f951518cd","modified":1653890309599},{"_id":"public/images/algorithm/reverse-linkedListN-1.png","hash":"bce57a38cd54c6922802accb543295ac18ee007c","modified":1653890309599},{"_id":"public/images/hibernate/manyToMany2.png","hash":"356e6f00dff9ce0233363672da981b460645f1c8","modified":1653890309599},{"_id":"public/images/java/java-lang-define-error.png","hash":"56a10029df600a563a4ca1d61bb8fef19dde76e7","modified":1653890309599},{"_id":"public/2020/08/12/HTTP-cache/mindSet.png","hash":"6c39e54f8eb93e62aadf6c569a426c0abb5984e6","modified":1653890309599}],"Category":[{"name":"运维","_id":"cl3sbl7i90004gosw14dtg1xt"},{"name":"前端","_id":"cl3sbl7ie000bgosw8z5n6glw"},{"name":"网络","_id":"cl3sbl7im000mgosw0w036omc"},{"name":"后端","_id":"cl3sbl7is000ugosw7t6k9h5u"},{"name":"python","_id":"cl3sbl7ix0011gosw2lka9qtp"},{"name":"算法","_id":"cl3sbl7j30018gosw74wlhr0p"},{"name":"杂项","_id":"cl3sbl7jn002egosweqo8731f"},{"name":"工程化","_id":"cl3sbl7js002ugosw8zjx3x7r"},{"name":"数据库","_id":"cl3sbl7k8004hgosw6jhk94ak"}],"Data":[],"Page":[{"_content":"# React Hooks\n\n## Dispatcher\n\n> Dispatcher 负责管理hooks 的生命周期\n\n+ The dispatcher is the shared object that contains the hook functions\n+ It will be dynamically allocated or cleaned up based on the rendering phase of ReactDOM,\n+ When we’re done performing the rendering work, we nullify the dispatcher and thus preventing hooks from being accidentally used outside ReactDOM’s rendering cycle\n\n\n\n## Hooks Queue\n\n+ hooks are represented as nodes which are linked together in their calling order.\n\n### hook schema\n\n hook has several properties\n\n- Its initial state is created in the initial render.\n- Its state can be updated on the fly.\n- React would remember the hook’s state in future renders.\n- React would provide you with the right state based on the calling order.\n- React would know which fiber does this hook belong to.\n\n\n\nwe need to rethink the way we view the a component’s state. So far we have thought about it as if it’s a plain object:\n\n```js\n{\n  foo: 'foo',\n  bar: 'bar',\n  baz: 'baz',\n}\n```\n\nwhen dealing with hooks it should be viewed as a queue, where each node represents a single model of the state\n\n```js\n{\n  memoizedState: 'foo',\n  next: {\n    memoizedState: 'bar',\n    next: {\n      memoizedState: 'bar',\n      next: null\n    }\n  }\n}\n```\n\nthe schema of a single hook node can be viewed in the[React Hook: createHook implemenet](https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L243)\n\nthe key for understanding how hooks work lies within `memoizedState` and `next`. \n\nThe rest of the properties are used specifically by the `useReducer()` hook to cache dispatched actions and base states\n\n### hook call\n\nbefore each and every function Component invocation, a function named [`prepareHooks()`](https://github.com/facebook/react/tree/5f06576f51ece88d846d01abd2ddd575827c6127/react-reconciler/src/ReactFiberHooks.js:123) is gonna be called, where the current fiber and its first hook node in the hooks queue are gonna be stored in global variables.This way, any time we call a hook function (`useXXX()`) it would know in which context to run.\n\n```js\nfunction updateFunctionComponent(\n  recentFiber,\n  workInProgressFiber,\n  Component,\n  props\n) {\n  prepareHooks(recentFiber, workInProgressFiber);\n  Component(props);\n  finishHooks();\n}\n```\n\nOnce an update has finished, a function named [`finishHooks()`](https://github.com/facebook/react/tree/5f06576f51ece88d846d01abd2ddd575827c6127/react-reconciler/src/ReactFiberHooks.js:148) will be called, where a reference for the first node in the hooks queue will be stored on the rendered fiber in the `memoizedState` property.\n\n### state hook\n\nYou would be surprised to know, but behind the scenes the `useState` hook uses `useReducer` and it simply provides it with a pre-defined reducer handler (see [implementation](https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L339))\n\n\n\nSo as expected, we can provide the action dispatcher with the new state directly;\n\n```js\nconst ParentComponent = () => {\n  const [name, setName] = useState();\n\n  return <ChildComponent toUpperCase={setName} />;\n};\n\nconst ChildComponent = (props) => {\n  useEffect(() => {\n    props.toUpperCase((state) => state.toUpperCase());\n  }, [true]);\n\n  return null;\n};\n```\n\n### Effect hooks\n\n- They’re created during render time, but they run *after* painting.\n- If given so, they’ll be destroyed right before the next painting.\n- They’re called in their definition order.","source":"draft/React Hooks.md","raw":"# React Hooks\n\n## Dispatcher\n\n> Dispatcher 负责管理hooks 的生命周期\n\n+ The dispatcher is the shared object that contains the hook functions\n+ It will be dynamically allocated or cleaned up based on the rendering phase of ReactDOM,\n+ When we’re done performing the rendering work, we nullify the dispatcher and thus preventing hooks from being accidentally used outside ReactDOM’s rendering cycle\n\n\n\n## Hooks Queue\n\n+ hooks are represented as nodes which are linked together in their calling order.\n\n### hook schema\n\n hook has several properties\n\n- Its initial state is created in the initial render.\n- Its state can be updated on the fly.\n- React would remember the hook’s state in future renders.\n- React would provide you with the right state based on the calling order.\n- React would know which fiber does this hook belong to.\n\n\n\nwe need to rethink the way we view the a component’s state. So far we have thought about it as if it’s a plain object:\n\n```js\n{\n  foo: 'foo',\n  bar: 'bar',\n  baz: 'baz',\n}\n```\n\nwhen dealing with hooks it should be viewed as a queue, where each node represents a single model of the state\n\n```js\n{\n  memoizedState: 'foo',\n  next: {\n    memoizedState: 'bar',\n    next: {\n      memoizedState: 'bar',\n      next: null\n    }\n  }\n}\n```\n\nthe schema of a single hook node can be viewed in the[React Hook: createHook implemenet](https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L243)\n\nthe key for understanding how hooks work lies within `memoizedState` and `next`. \n\nThe rest of the properties are used specifically by the `useReducer()` hook to cache dispatched actions and base states\n\n### hook call\n\nbefore each and every function Component invocation, a function named [`prepareHooks()`](https://github.com/facebook/react/tree/5f06576f51ece88d846d01abd2ddd575827c6127/react-reconciler/src/ReactFiberHooks.js:123) is gonna be called, where the current fiber and its first hook node in the hooks queue are gonna be stored in global variables.This way, any time we call a hook function (`useXXX()`) it would know in which context to run.\n\n```js\nfunction updateFunctionComponent(\n  recentFiber,\n  workInProgressFiber,\n  Component,\n  props\n) {\n  prepareHooks(recentFiber, workInProgressFiber);\n  Component(props);\n  finishHooks();\n}\n```\n\nOnce an update has finished, a function named [`finishHooks()`](https://github.com/facebook/react/tree/5f06576f51ece88d846d01abd2ddd575827c6127/react-reconciler/src/ReactFiberHooks.js:148) will be called, where a reference for the first node in the hooks queue will be stored on the rendered fiber in the `memoizedState` property.\n\n### state hook\n\nYou would be surprised to know, but behind the scenes the `useState` hook uses `useReducer` and it simply provides it with a pre-defined reducer handler (see [implementation](https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L339))\n\n\n\nSo as expected, we can provide the action dispatcher with the new state directly;\n\n```js\nconst ParentComponent = () => {\n  const [name, setName] = useState();\n\n  return <ChildComponent toUpperCase={setName} />;\n};\n\nconst ChildComponent = (props) => {\n  useEffect(() => {\n    props.toUpperCase((state) => state.toUpperCase());\n  }, [true]);\n\n  return null;\n};\n```\n\n### Effect hooks\n\n- They’re created during render time, but they run *after* painting.\n- If given so, they’ll be destroyed right before the next painting.\n- They’re called in their definition order.","date":"2021-10-28T01:12:50.350Z","updated":"2021-10-28T01:12:50.276Z","path":"draft/React Hooks.html","title":"","comments":1,"layout":"page","_id":"cl3sbl7i50001gosw2tlp5oy4","content":"<h1 id=\"React-Hooks\"><a href=\"#React-Hooks\" class=\"headerlink\" title=\"React Hooks\"></a>React Hooks</h1><h2 id=\"Dispatcher\"><a href=\"#Dispatcher\" class=\"headerlink\" title=\"Dispatcher\"></a>Dispatcher</h2><blockquote>\n<p>Dispatcher 负责管理hooks 的生命周期</p>\n</blockquote>\n<ul>\n<li>The dispatcher is the shared object that contains the hook functions</li>\n<li>It will be dynamically allocated or cleaned up based on the rendering phase of ReactDOM,</li>\n<li>When we’re done performing the rendering work, we nullify the dispatcher and thus preventing hooks from being accidentally used outside ReactDOM’s rendering cycle</li>\n</ul>\n<h2 id=\"Hooks-Queue\"><a href=\"#Hooks-Queue\" class=\"headerlink\" title=\"Hooks Queue\"></a>Hooks Queue</h2><ul>\n<li>hooks are represented as nodes which are linked together in their calling order.</li>\n</ul>\n<h3 id=\"hook-schema\"><a href=\"#hook-schema\" class=\"headerlink\" title=\"hook schema\"></a>hook schema</h3><p> hook has several properties</p>\n<ul>\n<li>Its initial state is created in the initial render.</li>\n<li>Its state can be updated on the fly.</li>\n<li>React would remember the hook’s state in future renders.</li>\n<li>React would provide you with the right state based on the calling order.</li>\n<li>React would know which fiber does this hook belong to.</li>\n</ul>\n<p>we need to rethink the way we view the a component’s state. So far we have thought about it as if it’s a plain object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  foo: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  bar: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">  baz: <span class=\"string\">'baz'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>when dealing with hooks it should be viewed as a queue, where each node represents a single model of the state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  memoizedState: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  next: &#123;</span><br><span class=\"line\">    memoizedState: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">    next: &#123;</span><br><span class=\"line\">      memoizedState: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">      next: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>the schema of a single hook node can be viewed in the<a href=\"https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L243\" target=\"_blank\" rel=\"noopener\">React Hook: createHook implemenet</a></p>\n<p>the key for understanding how hooks work lies within <code>memoizedState</code> and <code>next</code>. </p>\n<p>The rest of the properties are used specifically by the <code>useReducer()</code> hook to cache dispatched actions and base states</p>\n<h3 id=\"hook-call\"><a href=\"#hook-call\" class=\"headerlink\" title=\"hook call\"></a>hook call</h3><p>before each and every function Component invocation, a function named <a href=\"https://github.com/facebook/react/tree/5f06576f51ece88d846d01abd2ddd575827c6127/react-reconciler/src/ReactFiberHooks.js:123\" target=\"_blank\" rel=\"noopener\"><code>prepareHooks()</code></a> is gonna be called, where the current fiber and its first hook node in the hooks queue are gonna be stored in global variables.This way, any time we call a hook function (<code>useXXX()</code>) it would know in which context to run.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateFunctionComponent</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  recentFiber,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  workInProgressFiber,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  props</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  prepareHooks(recentFiber, workInProgressFiber);</span><br><span class=\"line\">  Component(props);</span><br><span class=\"line\">  finishHooks();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Once an update has finished, a function named <a href=\"https://github.com/facebook/react/tree/5f06576f51ece88d846d01abd2ddd575827c6127/react-reconciler/src/ReactFiberHooks.js:148\" target=\"_blank\" rel=\"noopener\"><code>finishHooks()</code></a> will be called, where a reference for the first node in the hooks queue will be stored on the rendered fiber in the <code>memoizedState</code> property.</p>\n<h3 id=\"state-hook\"><a href=\"#state-hook\" class=\"headerlink\" title=\"state hook\"></a>state hook</h3><p>You would be surprised to know, but behind the scenes the <code>useState</code> hook uses <code>useReducer</code> and it simply provides it with a pre-defined reducer handler (see <a href=\"https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L339\" target=\"_blank\" rel=\"noopener\">implementation</a>)</p>\n<p>So as expected, we can provide the action dispatcher with the new state directly;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ParentComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setName] = useState();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComponent</span> <span class=\"attr\">toUpperCase</span>=<span class=\"string\">&#123;setName&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ChildComponent = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    props.toUpperCase(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.toUpperCase());</span><br><span class=\"line\">  &#125;, [<span class=\"literal\">true</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Effect-hooks\"><a href=\"#Effect-hooks\" class=\"headerlink\" title=\"Effect hooks\"></a>Effect hooks</h3><ul>\n<li>They’re created during render time, but they run <em>after</em> painting.</li>\n<li>If given so, they’ll be destroyed right before the next painting.</li>\n<li>They’re called in their definition order.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-Hooks\"><a href=\"#React-Hooks\" class=\"headerlink\" title=\"React Hooks\"></a>React Hooks</h1><h2 id=\"Dispatcher\"><a href=\"#Dispatcher\" class=\"headerlink\" title=\"Dispatcher\"></a>Dispatcher</h2><blockquote>\n<p>Dispatcher 负责管理hooks 的生命周期</p>\n</blockquote>\n<ul>\n<li>The dispatcher is the shared object that contains the hook functions</li>\n<li>It will be dynamically allocated or cleaned up based on the rendering phase of ReactDOM,</li>\n<li>When we’re done performing the rendering work, we nullify the dispatcher and thus preventing hooks from being accidentally used outside ReactDOM’s rendering cycle</li>\n</ul>\n<h2 id=\"Hooks-Queue\"><a href=\"#Hooks-Queue\" class=\"headerlink\" title=\"Hooks Queue\"></a>Hooks Queue</h2><ul>\n<li>hooks are represented as nodes which are linked together in their calling order.</li>\n</ul>\n<h3 id=\"hook-schema\"><a href=\"#hook-schema\" class=\"headerlink\" title=\"hook schema\"></a>hook schema</h3><p> hook has several properties</p>\n<ul>\n<li>Its initial state is created in the initial render.</li>\n<li>Its state can be updated on the fly.</li>\n<li>React would remember the hook’s state in future renders.</li>\n<li>React would provide you with the right state based on the calling order.</li>\n<li>React would know which fiber does this hook belong to.</li>\n</ul>\n<p>we need to rethink the way we view the a component’s state. So far we have thought about it as if it’s a plain object:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  foo: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  bar: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">  baz: <span class=\"string\">'baz'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>when dealing with hooks it should be viewed as a queue, where each node represents a single model of the state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  memoizedState: <span class=\"string\">'foo'</span>,</span><br><span class=\"line\">  next: &#123;</span><br><span class=\"line\">    memoizedState: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">    next: &#123;</span><br><span class=\"line\">      memoizedState: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">      next: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>the schema of a single hook node can be viewed in the<a href=\"https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L243\" target=\"_blank\" rel=\"noopener\">React Hook: createHook implemenet</a></p>\n<p>the key for understanding how hooks work lies within <code>memoizedState</code> and <code>next</code>. </p>\n<p>The rest of the properties are used specifically by the <code>useReducer()</code> hook to cache dispatched actions and base states</p>\n<h3 id=\"hook-call\"><a href=\"#hook-call\" class=\"headerlink\" title=\"hook call\"></a>hook call</h3><p>before each and every function Component invocation, a function named <a href=\"https://github.com/facebook/react/tree/5f06576f51ece88d846d01abd2ddd575827c6127/react-reconciler/src/ReactFiberHooks.js:123\" target=\"_blank\" rel=\"noopener\"><code>prepareHooks()</code></a> is gonna be called, where the current fiber and its first hook node in the hooks queue are gonna be stored in global variables.This way, any time we call a hook function (<code>useXXX()</code>) it would know in which context to run.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateFunctionComponent</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  recentFiber,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  workInProgressFiber,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  Component,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  props</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  prepareHooks(recentFiber, workInProgressFiber);</span><br><span class=\"line\">  Component(props);</span><br><span class=\"line\">  finishHooks();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Once an update has finished, a function named <a href=\"https://github.com/facebook/react/tree/5f06576f51ece88d846d01abd2ddd575827c6127/react-reconciler/src/ReactFiberHooks.js:148\" target=\"_blank\" rel=\"noopener\"><code>finishHooks()</code></a> will be called, where a reference for the first node in the hooks queue will be stored on the rendered fiber in the <code>memoizedState</code> property.</p>\n<h3 id=\"state-hook\"><a href=\"#state-hook\" class=\"headerlink\" title=\"state hook\"></a>state hook</h3><p>You would be surprised to know, but behind the scenes the <code>useState</code> hook uses <code>useReducer</code> and it simply provides it with a pre-defined reducer handler (see <a href=\"https://github.com/facebook/react/blob/5f06576f51ece88d846d01abd2ddd575827c6127/packages/react-reconciler/src/ReactFiberHooks.js#L339\" target=\"_blank\" rel=\"noopener\">implementation</a>)</p>\n<p>So as expected, we can provide the action dispatcher with the new state directly;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ParentComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setName] = useState();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComponent</span> <span class=\"attr\">toUpperCase</span>=<span class=\"string\">&#123;setName&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ChildComponent = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    props.toUpperCase(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> state.toUpperCase());</span><br><span class=\"line\">  &#125;, [<span class=\"literal\">true</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Effect-hooks\"><a href=\"#Effect-hooks\" class=\"headerlink\" title=\"Effect hooks\"></a>Effect hooks</h3><ul>\n<li>They’re created during render time, but they run <em>after</em> painting.</li>\n<li>If given so, they’ll be destroyed right before the next painting.</li>\n<li>They’re called in their definition order.</li>\n</ul>\n"},{"title":"All categories","date":"2014-12-22T04:39:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: All categories\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\n---\n","updated":"2021-03-12T11:21:15.214Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl3sbl7i80003gosw0tou9v2q","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"single-column","comments":1,"_content":"\n## 职位：\n\n前端\n\n## github 地址:\n\nhttps://github.com/shancw96\n\n## 邮箱：\n\nshancw1996@gmail.com\n\n## 坐标：\n\n苏州\n\n> 欢迎勾搭\n","source":"about/index.md","raw":"---\nlayout: single-column\ncomments: true\n---\n\n## 职位：\n\n前端\n\n## github 地址:\n\nhttps://github.com/shancw96\n\n## 邮箱：\n\nshancw1996@gmail.com\n\n## 坐标：\n\n苏州\n\n> 欢迎勾搭\n","date":"2021-03-12T11:21:23.799Z","updated":"2021-03-12T11:21:15.213Z","path":"about/index.html","title":"","_id":"cl3sbl7ib0007gosw4hah3cl0","content":"<h2 id=\"职位：\"><a href=\"#职位：\" class=\"headerlink\" title=\"职位：\"></a>职位：</h2><p>前端</p>\n<h2 id=\"github-地址\"><a href=\"#github-地址\" class=\"headerlink\" title=\"github 地址:\"></a>github 地址:</h2><p><a href=\"https://github.com/shancw96\" target=\"_blank\" rel=\"noopener\">https://github.com/shancw96</a></p>\n<h2 id=\"邮箱：\"><a href=\"#邮箱：\" class=\"headerlink\" title=\"邮箱：\"></a>邮箱：</h2><p><a href=\"mailto:shancw1996@gmail.com\">shancw1996@gmail.com</a></p>\n<h2 id=\"坐标：\"><a href=\"#坐标：\" class=\"headerlink\" title=\"坐标：\"></a>坐标：</h2><p>苏州</p>\n<blockquote>\n<p>欢迎勾搭</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"职位：\"><a href=\"#职位：\" class=\"headerlink\" title=\"职位：\"></a>职位：</h2><p>前端</p>\n<h2 id=\"github-地址\"><a href=\"#github-地址\" class=\"headerlink\" title=\"github 地址:\"></a>github 地址:</h2><p><a href=\"https://github.com/shancw96\" target=\"_blank\" rel=\"noopener\">https://github.com/shancw96</a></p>\n<h2 id=\"邮箱：\"><a href=\"#邮箱：\" class=\"headerlink\" title=\"邮箱：\"></a>邮箱：</h2><p><a href=\"mailto:shancw1996@gmail.com\">shancw1996@gmail.com</a></p>\n<h2 id=\"坐标：\"><a href=\"#坐标：\" class=\"headerlink\" title=\"坐标：\"></a>坐标：</h2><p>苏州</p>\n<blockquote>\n<p>欢迎勾搭</p>\n</blockquote>\n"},{"title":"博客项目开发知识点汇集","categories":["temp"],"tags":[],"toc":true,"date":"2021-04-17T16:00:00.000Z","_content":"\n# 什么是 Service 层\n\nThe service layer is there to provide logic to operate on the data sent to and from the DAO and the client. Very often these 2 pieces will be bundled together into the same module, and occasionally into the same code, but you’ll still see them as distinct logical entities.\n\nController 层像是一个服务员，他把客人（前端）点的菜（数据、请求的类型等）进行汇总什么口味、咸淡、量的多少，交给厨师长（Service 层），厨师长则告诉沾板厨师（Dao 1）、汤料房（Dao 2）、配菜厨师（Dao 3）等（统称 Dao 层）我需要什么样的半成品，副厨们（Dao 层）就负责完成厨师长（Service）交代的任务。\n\nController-->service 接口-->serviceImpl-->dao 接口-->daoImpl-->mapper-->db\n\n# 如何设计 service 层\n\nService 层主要负责业务模块的逻辑应用设计。**先设计放接口的类，再创建实现的类**，然后在配置文件中进行配置其实现的关联。service 层调用 dao 层接口，接收 dao 层返回的数据，完成项目的基本功能设计。\n\n## 代码设计方式\n\n- Interface + Class 面向服务\n\n  ```java\n  // 业务层接口\n\n  public interface IUserService {\n      boolean login(User user);\n  }\n  // 业务层实现类\n\n  @Service(\"userService\")\n  public class UserServiceImpl implements IUserService {\n      public boolean login(User user) {\n          //登录判断逻辑\n      }\n  }\n\n  ```\n\n- 单独 Class 面向业务\n  对于一个中小项目来说，脱掉 Service 层接口的枷锁，实现起业务来，十分流畅，不再用抽象，只关注于业务即可。\n\n  ```java\n  public class UserService{\n      public boolean login(User user) {\n          //登录判断逻辑\n      }\n  }\n  ```\n\n# Service 设计需要注意的点\n\n## Service 间能够相互调用？\n\nService 间不应该相互调用，特别是去除接口的情况下，让 Service 完全成为一个业务体的设计下，更加不应该相互调用 Service。\n每个 Service 对应一个业务，业务之间应该有明确的分界，不然会出现业务间的耦合，这是设计的不合理。\n\n如果是 Service 间的逻辑通用，可以创建一个 ServiceHelper 类,里面放的，就是 Service 间的通用逻辑，各自调用这个逻辑即可。\n\n## Service 的业务逻辑只由 Service 自己知道\n\n用户登录的例子：\n\n错误示范：\n\n```java\n@Service(\"userService\")\npublic class UserService {\n    public boolean login(User user) {\n        //登录判断逻辑\n    }\n}\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController extends BaseController {\n\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.POST)\n    public\n    @ResponseBody ResponseResult login(@RequestBody User form) {\n        if(userService.login(form)) {\n            return ResponseResult.getOk(\"登陆成功\");\n        } else {\n            return ResponseResult.getError(\"登陆失败\");\n        }\n    }\n}\n```\n\n这个 Service 最终会被一个 Controller 所调用，当 Controller 调用该方法时，还需要判断返回值是 true 还是 false，再返回结果，**其逻辑“泄露”了**，因为 Controller 要了解业务是 true 是登陆成功\n\n正确的方式：\n\n```java\n\n@Service(\"userService\")\npublic class UserService {\n    /** * @return ResponseResult响应结果.为{\"status\":\"状态码\",\"msg\":\"响应信息\",\"data\":\"响应数据\"} */\n    public ResponseResult login(User entity) {\n        //用MD5加密密码\n        entity.setPassword(MD5Utils.getMD5(entity.getPassword()));\n        //用账号和加密后的密码为查询条件，查询数据库中是否有对应的数据\n        Optional<User> optional = userRepository.selectOne(entity);\n        return optional.map(ResponseResult::getOk).orElseGet(() -> ResponseResult.getError(\"账号/密码错误\"));\n    }\n}\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController extends BaseController {\n\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.POST)\n    public\n    @ResponseBody ResponseResult login(@RequestBody User form) {\n        return userService.login(form);\n    }\n}\n```\n\n平时我们一直说，Controller 一定要尽量少的逻辑，其实反过来说，是指 Service 的逻辑应该高内聚，这样 Controller 如 Service 的耦合自然就是最低，Controller 真真正正的坐到，不用理会 Service 的实现，只需要调用即可。\n\n- [\\*如何设计 Service 层](https://my.oschina.net/bingzhong/blog/1559856)\n\n* [SpringBoot 框架中的 DAO 层、Entity 层、Service 层、Controller 层](https://www.jianshu.com/p/18c4418e9b99)\n","source":"draft/blog-dev.md","raw":"---\ntitle: 博客项目开发知识点汇集\ncategories: [temp]\ntags: []\ntoc: true\ndate: 2021/4/18\n---\n\n# 什么是 Service 层\n\nThe service layer is there to provide logic to operate on the data sent to and from the DAO and the client. Very often these 2 pieces will be bundled together into the same module, and occasionally into the same code, but you’ll still see them as distinct logical entities.\n\nController 层像是一个服务员，他把客人（前端）点的菜（数据、请求的类型等）进行汇总什么口味、咸淡、量的多少，交给厨师长（Service 层），厨师长则告诉沾板厨师（Dao 1）、汤料房（Dao 2）、配菜厨师（Dao 3）等（统称 Dao 层）我需要什么样的半成品，副厨们（Dao 层）就负责完成厨师长（Service）交代的任务。\n\nController-->service 接口-->serviceImpl-->dao 接口-->daoImpl-->mapper-->db\n\n# 如何设计 service 层\n\nService 层主要负责业务模块的逻辑应用设计。**先设计放接口的类，再创建实现的类**，然后在配置文件中进行配置其实现的关联。service 层调用 dao 层接口，接收 dao 层返回的数据，完成项目的基本功能设计。\n\n## 代码设计方式\n\n- Interface + Class 面向服务\n\n  ```java\n  // 业务层接口\n\n  public interface IUserService {\n      boolean login(User user);\n  }\n  // 业务层实现类\n\n  @Service(\"userService\")\n  public class UserServiceImpl implements IUserService {\n      public boolean login(User user) {\n          //登录判断逻辑\n      }\n  }\n\n  ```\n\n- 单独 Class 面向业务\n  对于一个中小项目来说，脱掉 Service 层接口的枷锁，实现起业务来，十分流畅，不再用抽象，只关注于业务即可。\n\n  ```java\n  public class UserService{\n      public boolean login(User user) {\n          //登录判断逻辑\n      }\n  }\n  ```\n\n# Service 设计需要注意的点\n\n## Service 间能够相互调用？\n\nService 间不应该相互调用，特别是去除接口的情况下，让 Service 完全成为一个业务体的设计下，更加不应该相互调用 Service。\n每个 Service 对应一个业务，业务之间应该有明确的分界，不然会出现业务间的耦合，这是设计的不合理。\n\n如果是 Service 间的逻辑通用，可以创建一个 ServiceHelper 类,里面放的，就是 Service 间的通用逻辑，各自调用这个逻辑即可。\n\n## Service 的业务逻辑只由 Service 自己知道\n\n用户登录的例子：\n\n错误示范：\n\n```java\n@Service(\"userService\")\npublic class UserService {\n    public boolean login(User user) {\n        //登录判断逻辑\n    }\n}\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController extends BaseController {\n\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.POST)\n    public\n    @ResponseBody ResponseResult login(@RequestBody User form) {\n        if(userService.login(form)) {\n            return ResponseResult.getOk(\"登陆成功\");\n        } else {\n            return ResponseResult.getError(\"登陆失败\");\n        }\n    }\n}\n```\n\n这个 Service 最终会被一个 Controller 所调用，当 Controller 调用该方法时，还需要判断返回值是 true 还是 false，再返回结果，**其逻辑“泄露”了**，因为 Controller 要了解业务是 true 是登陆成功\n\n正确的方式：\n\n```java\n\n@Service(\"userService\")\npublic class UserService {\n    /** * @return ResponseResult响应结果.为{\"status\":\"状态码\",\"msg\":\"响应信息\",\"data\":\"响应数据\"} */\n    public ResponseResult login(User entity) {\n        //用MD5加密密码\n        entity.setPassword(MD5Utils.getMD5(entity.getPassword()));\n        //用账号和加密后的密码为查询条件，查询数据库中是否有对应的数据\n        Optional<User> optional = userRepository.selectOne(entity);\n        return optional.map(ResponseResult::getOk).orElseGet(() -> ResponseResult.getError(\"账号/密码错误\"));\n    }\n}\n\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController extends BaseController {\n\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.POST)\n    public\n    @ResponseBody ResponseResult login(@RequestBody User form) {\n        return userService.login(form);\n    }\n}\n```\n\n平时我们一直说，Controller 一定要尽量少的逻辑，其实反过来说，是指 Service 的逻辑应该高内聚，这样 Controller 如 Service 的耦合自然就是最低，Controller 真真正正的坐到，不用理会 Service 的实现，只需要调用即可。\n\n- [\\*如何设计 Service 层](https://my.oschina.net/bingzhong/blog/1559856)\n\n* [SpringBoot 框架中的 DAO 层、Entity 层、Service 层、Controller 层](https://www.jianshu.com/p/18c4418e9b99)\n","updated":"2021-04-19T06:54:57.685Z","path":"draft/blog-dev.html","comments":1,"layout":"page","_id":"cl3sbl7id0009gosw990d9yyh","content":"<h1 id=\"什么是-Service-层\"><a href=\"#什么是-Service-层\" class=\"headerlink\" title=\"什么是 Service 层\"></a>什么是 Service 层</h1><p>The service layer is there to provide logic to operate on the data sent to and from the DAO and the client. Very often these 2 pieces will be bundled together into the same module, and occasionally into the same code, but you’ll still see them as distinct logical entities.</p>\n<p>Controller 层像是一个服务员，他把客人（前端）点的菜（数据、请求的类型等）进行汇总什么口味、咸淡、量的多少，交给厨师长（Service 层），厨师长则告诉沾板厨师（Dao 1）、汤料房（Dao 2）、配菜厨师（Dao 3）等（统称 Dao 层）我需要什么样的半成品，副厨们（Dao 层）就负责完成厨师长（Service）交代的任务。</p>\n<p>Controller–&gt;service 接口–&gt;serviceImpl–&gt;dao 接口–&gt;daoImpl–&gt;mapper–&gt;db</p>\n<h1 id=\"如何设计-service-层\"><a href=\"#如何设计-service-层\" class=\"headerlink\" title=\"如何设计 service 层\"></a>如何设计 service 层</h1><p>Service 层主要负责业务模块的逻辑应用设计。<strong>先设计放接口的类，再创建实现的类</strong>，然后在配置文件中进行配置其实现的关联。service 层调用 dao 层接口，接收 dao 层返回的数据，完成项目的基本功能设计。</p>\n<h2 id=\"代码设计方式\"><a href=\"#代码设计方式\" class=\"headerlink\" title=\"代码设计方式\"></a>代码设计方式</h2><ul>\n<li><p>Interface + Class 面向服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 业务层接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 业务层实现类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录判断逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单独 Class 面向业务<br>对于一个中小项目来说，脱掉 Service 层接口的枷锁，实现起业务来，十分流畅，不再用抽象，只关注于业务即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录判断逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"Service-设计需要注意的点\"><a href=\"#Service-设计需要注意的点\" class=\"headerlink\" title=\"Service 设计需要注意的点\"></a>Service 设计需要注意的点</h1><h2 id=\"Service-间能够相互调用？\"><a href=\"#Service-间能够相互调用？\" class=\"headerlink\" title=\"Service 间能够相互调用？\"></a>Service 间能够相互调用？</h2><p>Service 间不应该相互调用，特别是去除接口的情况下，让 Service 完全成为一个业务体的设计下，更加不应该相互调用 Service。<br>每个 Service 对应一个业务，业务之间应该有明确的分界，不然会出现业务间的耦合，这是设计的不合理。</p>\n<p>如果是 Service 间的逻辑通用，可以创建一个 ServiceHelper 类,里面放的，就是 Service 间的通用逻辑，各自调用这个逻辑即可。</p>\n<h2 id=\"Service-的业务逻辑只由-Service-自己知道\"><a href=\"#Service-的业务逻辑只由-Service-自己知道\" class=\"headerlink\" title=\"Service 的业务逻辑只由 Service 自己知道\"></a>Service 的业务逻辑只由 Service 自己知道</h2><p>用户登录的例子：</p>\n<p>错误示范：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录判断逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"keyword\">public</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span> <span class=\"function\">ResponseResult <span class=\"title\">login</span><span class=\"params\">(@RequestBody User form)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(userService.login(form)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResponseResult.getOk(<span class=\"string\">\"登陆成功\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResponseResult.getError(<span class=\"string\">\"登陆失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个 Service 最终会被一个 Controller 所调用，当 Controller 调用该方法时，还需要判断返回值是 true 还是 false，再返回结果，<strong>其逻辑“泄露”了</strong>，因为 Controller 要了解业务是 true 是登陆成功</p>\n<p>正确的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** * <span class=\"doctag\">@return</span> ResponseResult响应结果.为&#123;\"status\":\"状态码\",\"msg\":\"响应信息\",\"data\":\"响应数据\"&#125; */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">login</span><span class=\"params\">(User entity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//用MD5加密密码</span></span><br><span class=\"line\">        entity.setPassword(MD5Utils.getMD5(entity.getPassword()));</span><br><span class=\"line\">        <span class=\"comment\">//用账号和加密后的密码为查询条件，查询数据库中是否有对应的数据</span></span><br><span class=\"line\">        Optional&lt;User&gt; optional = userRepository.selectOne(entity);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> optional.map(ResponseResult::getOk).orElseGet(() -&gt; ResponseResult.getError(<span class=\"string\">\"账号/密码错误\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"keyword\">public</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span> <span class=\"function\">ResponseResult <span class=\"title\">login</span><span class=\"params\">(@RequestBody User form)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.login(form);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>平时我们一直说，Controller 一定要尽量少的逻辑，其实反过来说，是指 Service 的逻辑应该高内聚，这样 Controller 如 Service 的耦合自然就是最低，Controller 真真正正的坐到，不用理会 Service 的实现，只需要调用即可。</p>\n<ul>\n<li><a href=\"https://my.oschina.net/bingzhong/blog/1559856\" target=\"_blank\" rel=\"noopener\">*如何设计 Service 层</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/18c4418e9b99\" target=\"_blank\" rel=\"noopener\">SpringBoot 框架中的 DAO 层、Entity 层、Service 层、Controller 层</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是-Service-层\"><a href=\"#什么是-Service-层\" class=\"headerlink\" title=\"什么是 Service 层\"></a>什么是 Service 层</h1><p>The service layer is there to provide logic to operate on the data sent to and from the DAO and the client. Very often these 2 pieces will be bundled together into the same module, and occasionally into the same code, but you’ll still see them as distinct logical entities.</p>\n<p>Controller 层像是一个服务员，他把客人（前端）点的菜（数据、请求的类型等）进行汇总什么口味、咸淡、量的多少，交给厨师长（Service 层），厨师长则告诉沾板厨师（Dao 1）、汤料房（Dao 2）、配菜厨师（Dao 3）等（统称 Dao 层）我需要什么样的半成品，副厨们（Dao 层）就负责完成厨师长（Service）交代的任务。</p>\n<p>Controller–&gt;service 接口–&gt;serviceImpl–&gt;dao 接口–&gt;daoImpl–&gt;mapper–&gt;db</p>\n<h1 id=\"如何设计-service-层\"><a href=\"#如何设计-service-层\" class=\"headerlink\" title=\"如何设计 service 层\"></a>如何设计 service 层</h1><p>Service 层主要负责业务模块的逻辑应用设计。<strong>先设计放接口的类，再创建实现的类</strong>，然后在配置文件中进行配置其实现的关联。service 层调用 dao 层接口，接收 dao 层返回的数据，完成项目的基本功能设计。</p>\n<h2 id=\"代码设计方式\"><a href=\"#代码设计方式\" class=\"headerlink\" title=\"代码设计方式\"></a>代码设计方式</h2><ul>\n<li><p>Interface + Class 面向服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 业务层接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 业务层实现类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IUserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录判断逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单独 Class 面向业务<br>对于一个中小项目来说，脱掉 Service 层接口的枷锁，实现起业务来，十分流畅，不再用抽象，只关注于业务即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录判断逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"Service-设计需要注意的点\"><a href=\"#Service-设计需要注意的点\" class=\"headerlink\" title=\"Service 设计需要注意的点\"></a>Service 设计需要注意的点</h1><h2 id=\"Service-间能够相互调用？\"><a href=\"#Service-间能够相互调用？\" class=\"headerlink\" title=\"Service 间能够相互调用？\"></a>Service 间能够相互调用？</h2><p>Service 间不应该相互调用，特别是去除接口的情况下，让 Service 完全成为一个业务体的设计下，更加不应该相互调用 Service。<br>每个 Service 对应一个业务，业务之间应该有明确的分界，不然会出现业务间的耦合，这是设计的不合理。</p>\n<p>如果是 Service 间的逻辑通用，可以创建一个 ServiceHelper 类,里面放的，就是 Service 间的通用逻辑，各自调用这个逻辑即可。</p>\n<h2 id=\"Service-的业务逻辑只由-Service-自己知道\"><a href=\"#Service-的业务逻辑只由-Service-自己知道\" class=\"headerlink\" title=\"Service 的业务逻辑只由 Service 自己知道\"></a>Service 的业务逻辑只由 Service 自己知道</h2><p>用户登录的例子：</p>\n<p>错误示范：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录判断逻辑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"keyword\">public</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span> <span class=\"function\">ResponseResult <span class=\"title\">login</span><span class=\"params\">(@RequestBody User form)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(userService.login(form)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResponseResult.getOk(<span class=\"string\">\"登陆成功\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ResponseResult.getError(<span class=\"string\">\"登陆失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个 Service 最终会被一个 Controller 所调用，当 Controller 调用该方法时，还需要判断返回值是 true 还是 false，再返回结果，<strong>其逻辑“泄露”了</strong>，因为 Controller 要了解业务是 true 是登陆成功</p>\n<p>正确的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** * <span class=\"doctag\">@return</span> ResponseResult响应结果.为&#123;\"status\":\"状态码\",\"msg\":\"响应信息\",\"data\":\"响应数据\"&#125; */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResponseResult <span class=\"title\">login</span><span class=\"params\">(User entity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//用MD5加密密码</span></span><br><span class=\"line\">        entity.setPassword(MD5Utils.getMD5(entity.getPassword()));</span><br><span class=\"line\">        <span class=\"comment\">//用账号和加密后的密码为查询条件，查询数据库中是否有对应的数据</span></span><br><span class=\"line\">        Optional&lt;User&gt; optional = userRepository.selectOne(entity);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> optional.map(ResponseResult::getOk).orElseGet(() -&gt; ResponseResult.getError(<span class=\"string\">\"账号/密码错误\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"keyword\">public</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span> <span class=\"function\">ResponseResult <span class=\"title\">login</span><span class=\"params\">(@RequestBody User form)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.login(form);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>平时我们一直说，Controller 一定要尽量少的逻辑，其实反过来说，是指 Service 的逻辑应该高内聚，这样 Controller 如 Service 的耦合自然就是最低，Controller 真真正正的坐到，不用理会 Service 的实现，只需要调用即可。</p>\n<ul>\n<li><a href=\"https://my.oschina.net/bingzhong/blog/1559856\" target=\"_blank\" rel=\"noopener\">*如何设计 Service 层</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/18c4418e9b99\" target=\"_blank\" rel=\"noopener\">SpringBoot 框架中的 DAO 层、Entity 层、Service 层、Controller 层</a></li>\n</ul>\n"},{"title":"mapStruct handbook","categories":["后端"],"tags":["Spring","ORM","项目架构"],"toc":true,"date":"2021-04-26T16:00:00.000Z","_content":"\nmapStruct 用于对象转换, 在项目中主要用于 DTO <-> entity 之间的转换，这篇文章介绍了 mapStruct 的配置和常用 API\n\n<!-- more -->\n\n# 安装使用\n\n## maven 配置项\n\n```xml\n...\n<properties>\n    <java.version>11</java.version>\n\t\t<mapstruct.version>1.4.2.Final</mapstruct.version>\n\t\t<lombok.version>1.18.20</lombok.version>\n</properties>\n...\n<dependencies>\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct</artifactId>\n        <version>${mapstruct.version}</version>\n    </dependency>\n</dependencies>\n...\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.1</version>\n            <configuration>\n              <!-- 这里的Java 版本需要按照你项目里的Java 版本进行设置 -->\n              <source>${java.version}</source>\n              <target>${java.version}</target>\n              <annotationProcessorPaths>\n                  <path>\n                      <groupId>org.mapstruct</groupId>\n                      <artifactId>mapstruct-processor</artifactId>\n                      <version>${org.mapstruct.version}</version>\n                  </path>\n                  <!-- other annotation processors -->\n                  <!-- 集成lombok：mapStruct 使用 @Getter @Setter ...注解 -->\n                  <path>\n                    <groupId>org.projectlombok</groupId>\n                    <artifactId>lombok</artifactId>\n                    <version>${lombok.version}</version>\n                  </path>\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n...\n```\n\n## 项目中配置\n\n创建 mapper 包，通过创建 instance 的方式，实现指定 entity 的转换\n\n配置接口：articleMapper interface\n\n```java\n@Mapper\npublic interface ArticleMapper {\n    ArticleMapper INSTANCE = Mappers.getMapper(ArticleMapper.class);\n\n    Article covert(ArticleDto articleDto);\n\n    @Mapping(source = \"title\", target=\"title\")\n    ArticleDto covert(Article article);\n}\n\n```\n\n编译后，会在 target/generated-source/annotations/com.xxx.xxx.mapper 下生成 interface ArticleMapper 的具体实现\n\n```java\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2021-04-27T13:26:18+0800\",\n    comments = \"version: 1.4.2.Final, compiler: javac, environment: Java 15.0.2 (Oracle Corporation)\"\n)\npublic class ArticleMapperImpl implements ArticleMapper {\n\n    @Override\n    public Article covert(ArticleDto articleDto) {\n        if ( articleDto == null ) {\n            return null;\n        }\n\n        Article article = new Article();\n\n        article.setUpdateTime( articleDto.getUpdateTime() );\n        article.setCreateTime( articleDto.getCreateTime() );\n        article.setId( articleDto.getId() );\n        article.setTitle( articleDto.getTitle() );\n        article.setVisitCount( articleDto.getVisitCount() );\n        article.setContent( articleDto.getContent() );\n        List<Comment> list = articleDto.getComments();\n        if ( list != null ) {\n            article.setComments( new ArrayList<Comment>( list ) );\n        }\n\n        return article;\n    }\n\n    @Override\n    public ArticleDto covert(Article article) {\n        if ( article == null ) {\n            return null;\n        }\n\n        ArticleDto articleDto = new ArticleDto();\n\n        articleDto.setTitle( article.getTitle() );\n        articleDto.setCreateTime( article.getCreateTime() );\n        articleDto.setUpdateTime( article.getUpdateTime() );\n        articleDto.setId( article.getId() );\n        articleDto.setVisitCount( article.getVisitCount() );\n        List<Comment> list = article.getComments();\n        if ( list != null ) {\n            articleDto.setComments( new ArrayList<Comment>( list ) );\n        }\n        articleDto.setContent( article.getContent() );\n\n        return articleDto;\n    }\n}\n\n```\n\n使用：\n\n```java\nArticle article = new Article(...);\n\nArticleDto dto = ArticleMapper.INSTANCE.convert(article);\n```\n\n# 常用 mapping\n\n- int and String\n\n```java\n    @Mapper\n    public interface CarMapper {\n\n        @Mapping(source = \"price\", numberFormat = \"$#.00\")\n        CarDto carToCarDto(Car car);\n\n        @IterableMapping(numberFormat = \"$#.00\")\n        List<String> prices(List<Integer> prices);\n    }\n```\n\n- Date and String\n\n  ```java\n  @Mapper\n  public interface CarMapper {\n\n          @Mapping(source = \"manufacturingDate\", dateFormat = \"dd.MM.yyyy\")\n          CarDto carToCarDto(Car car);\n\n          @IterableMapping(dateFormat = \"dd.MM.yyyy\")\n          List<String> stringListToDateList(List<Date> dates);\n      }\n  ```\n\n## 多对象转一个对象\n\nAddress\n\n```java\n@Data\npublic class Address {\n    private String street;\n    private Integer zipCode;\n    private Integer houseNo;\n    private String description;\n}\n\n```\n\nUserWithAddress\n\n```java\n@Data\npublic class UserWithAddressVo {\n\n    private String username;\n    private Integer sex;\n    private String street;\n    private Integer zipCode;\n    private Integer houseNumber;\n    private String description;\n}\n\n```\n\nconvert 方法\n\n```java\n@Mapping(source = \"person.description\", target = \"description\")\n@Mapping(source = \"address.houseNo\", target = \"houseNumber\")\nUserWithAddressVo userAndAddress2Vo(User user, Address address);\n\n```\n\n当多个原对象中，有相同名字的属性时，需要通过 @Mapping 注解来具体的指定， 以免出现歧义（不指定会报错）。 如上面的 description\n\n## 忽略特定字段\n\n```java\n@Mapper\npublic interface FishTankMapper {\n\n    @Mapping(target = \"fish.name\", ignore = true)\n    FishTankDto map( FishTank source );\n}\n```\n\n## 默认值\n\n```java\n@Mapper(uses = StringListMapper.class)\npublic interface SourceTargetMapper {\n\n    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper.class );\n\n    @Mapping(target = \"stringProperty\", source = \"stringProp\", defaultValue = \"undefined\")\n    @Mapping(target = \"longProperty\", source = \"longProp\", defaultValue = \"-1\")\n    Target sourceToTarget(Source s);\n}\n```\n\n## 使用表达式\n\n### 自定义表达式\n\n```java\n\nimports org.sample.TimeAndFormat;\n\n@Mapper( imports = TimeAndFormat.class )\npublic interface SourceTargetMapper {\n\n    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper.class );\n\n    @Mapping(target = \"timeAndFormat\",\n         expression = \"java( new TimeAndFormat( s.getTime(), s.getFormat() ) )\")\n    Target sourceToTarget(Source s);\n}\n\n```\n\n### 默认表达式\n\n当属性值为 null 触发\n\n```java\nimports java.util.UUID;\n\n@Mapper( imports = UUID.class )\npublic interface SourceTargetMapper {\n\n    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper.class );\n\n    @Mapping(target=\"id\", source=\"sourceId\", defaultExpression = \"java( UUID.randomUUID().toString() )\")\n    Target sourceToTarget(Source s);\n}\n```\n\n更多转化查看[MapStruct: 5.1. Implicit type conversions](https://mapstruct.org/documentation/stable/reference/html/#implicit-type-conversions)\n","source":"draft/spring-mapStruct.md","raw":"---\ntitle: mapStruct handbook\ncategories: [后端]\ntags: [Spring, ORM, 项目架构]\ntoc: true\ndate: 2021/4/27\n---\n\nmapStruct 用于对象转换, 在项目中主要用于 DTO <-> entity 之间的转换，这篇文章介绍了 mapStruct 的配置和常用 API\n\n<!-- more -->\n\n# 安装使用\n\n## maven 配置项\n\n```xml\n...\n<properties>\n    <java.version>11</java.version>\n\t\t<mapstruct.version>1.4.2.Final</mapstruct.version>\n\t\t<lombok.version>1.18.20</lombok.version>\n</properties>\n...\n<dependencies>\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct</artifactId>\n        <version>${mapstruct.version}</version>\n    </dependency>\n</dependencies>\n...\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.8.1</version>\n            <configuration>\n              <!-- 这里的Java 版本需要按照你项目里的Java 版本进行设置 -->\n              <source>${java.version}</source>\n              <target>${java.version}</target>\n              <annotationProcessorPaths>\n                  <path>\n                      <groupId>org.mapstruct</groupId>\n                      <artifactId>mapstruct-processor</artifactId>\n                      <version>${org.mapstruct.version}</version>\n                  </path>\n                  <!-- other annotation processors -->\n                  <!-- 集成lombok：mapStruct 使用 @Getter @Setter ...注解 -->\n                  <path>\n                    <groupId>org.projectlombok</groupId>\n                    <artifactId>lombok</artifactId>\n                    <version>${lombok.version}</version>\n                  </path>\n                </annotationProcessorPaths>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n...\n```\n\n## 项目中配置\n\n创建 mapper 包，通过创建 instance 的方式，实现指定 entity 的转换\n\n配置接口：articleMapper interface\n\n```java\n@Mapper\npublic interface ArticleMapper {\n    ArticleMapper INSTANCE = Mappers.getMapper(ArticleMapper.class);\n\n    Article covert(ArticleDto articleDto);\n\n    @Mapping(source = \"title\", target=\"title\")\n    ArticleDto covert(Article article);\n}\n\n```\n\n编译后，会在 target/generated-source/annotations/com.xxx.xxx.mapper 下生成 interface ArticleMapper 的具体实现\n\n```java\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2021-04-27T13:26:18+0800\",\n    comments = \"version: 1.4.2.Final, compiler: javac, environment: Java 15.0.2 (Oracle Corporation)\"\n)\npublic class ArticleMapperImpl implements ArticleMapper {\n\n    @Override\n    public Article covert(ArticleDto articleDto) {\n        if ( articleDto == null ) {\n            return null;\n        }\n\n        Article article = new Article();\n\n        article.setUpdateTime( articleDto.getUpdateTime() );\n        article.setCreateTime( articleDto.getCreateTime() );\n        article.setId( articleDto.getId() );\n        article.setTitle( articleDto.getTitle() );\n        article.setVisitCount( articleDto.getVisitCount() );\n        article.setContent( articleDto.getContent() );\n        List<Comment> list = articleDto.getComments();\n        if ( list != null ) {\n            article.setComments( new ArrayList<Comment>( list ) );\n        }\n\n        return article;\n    }\n\n    @Override\n    public ArticleDto covert(Article article) {\n        if ( article == null ) {\n            return null;\n        }\n\n        ArticleDto articleDto = new ArticleDto();\n\n        articleDto.setTitle( article.getTitle() );\n        articleDto.setCreateTime( article.getCreateTime() );\n        articleDto.setUpdateTime( article.getUpdateTime() );\n        articleDto.setId( article.getId() );\n        articleDto.setVisitCount( article.getVisitCount() );\n        List<Comment> list = article.getComments();\n        if ( list != null ) {\n            articleDto.setComments( new ArrayList<Comment>( list ) );\n        }\n        articleDto.setContent( article.getContent() );\n\n        return articleDto;\n    }\n}\n\n```\n\n使用：\n\n```java\nArticle article = new Article(...);\n\nArticleDto dto = ArticleMapper.INSTANCE.convert(article);\n```\n\n# 常用 mapping\n\n- int and String\n\n```java\n    @Mapper\n    public interface CarMapper {\n\n        @Mapping(source = \"price\", numberFormat = \"$#.00\")\n        CarDto carToCarDto(Car car);\n\n        @IterableMapping(numberFormat = \"$#.00\")\n        List<String> prices(List<Integer> prices);\n    }\n```\n\n- Date and String\n\n  ```java\n  @Mapper\n  public interface CarMapper {\n\n          @Mapping(source = \"manufacturingDate\", dateFormat = \"dd.MM.yyyy\")\n          CarDto carToCarDto(Car car);\n\n          @IterableMapping(dateFormat = \"dd.MM.yyyy\")\n          List<String> stringListToDateList(List<Date> dates);\n      }\n  ```\n\n## 多对象转一个对象\n\nAddress\n\n```java\n@Data\npublic class Address {\n    private String street;\n    private Integer zipCode;\n    private Integer houseNo;\n    private String description;\n}\n\n```\n\nUserWithAddress\n\n```java\n@Data\npublic class UserWithAddressVo {\n\n    private String username;\n    private Integer sex;\n    private String street;\n    private Integer zipCode;\n    private Integer houseNumber;\n    private String description;\n}\n\n```\n\nconvert 方法\n\n```java\n@Mapping(source = \"person.description\", target = \"description\")\n@Mapping(source = \"address.houseNo\", target = \"houseNumber\")\nUserWithAddressVo userAndAddress2Vo(User user, Address address);\n\n```\n\n当多个原对象中，有相同名字的属性时，需要通过 @Mapping 注解来具体的指定， 以免出现歧义（不指定会报错）。 如上面的 description\n\n## 忽略特定字段\n\n```java\n@Mapper\npublic interface FishTankMapper {\n\n    @Mapping(target = \"fish.name\", ignore = true)\n    FishTankDto map( FishTank source );\n}\n```\n\n## 默认值\n\n```java\n@Mapper(uses = StringListMapper.class)\npublic interface SourceTargetMapper {\n\n    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper.class );\n\n    @Mapping(target = \"stringProperty\", source = \"stringProp\", defaultValue = \"undefined\")\n    @Mapping(target = \"longProperty\", source = \"longProp\", defaultValue = \"-1\")\n    Target sourceToTarget(Source s);\n}\n```\n\n## 使用表达式\n\n### 自定义表达式\n\n```java\n\nimports org.sample.TimeAndFormat;\n\n@Mapper( imports = TimeAndFormat.class )\npublic interface SourceTargetMapper {\n\n    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper.class );\n\n    @Mapping(target = \"timeAndFormat\",\n         expression = \"java( new TimeAndFormat( s.getTime(), s.getFormat() ) )\")\n    Target sourceToTarget(Source s);\n}\n\n```\n\n### 默认表达式\n\n当属性值为 null 触发\n\n```java\nimports java.util.UUID;\n\n@Mapper( imports = UUID.class )\npublic interface SourceTargetMapper {\n\n    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper.class );\n\n    @Mapping(target=\"id\", source=\"sourceId\", defaultExpression = \"java( UUID.randomUUID().toString() )\")\n    Target sourceToTarget(Source s);\n}\n```\n\n更多转化查看[MapStruct: 5.1. Implicit type conversions](https://mapstruct.org/documentation/stable/reference/html/#implicit-type-conversions)\n","updated":"2021-05-01T13:00:36.226Z","path":"draft/spring-mapStruct.html","comments":1,"layout":"page","_id":"cl3sbl7if000dgoswchwo8vsc","content":"<p>mapStruct 用于对象转换, 在项目中主要用于 DTO &lt;-&gt; entity 之间的转换，这篇文章介绍了 mapStruct 的配置和常用 API</p>\n<a id=\"more\"></a>\n\n<h1 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h1><h2 id=\"maven-配置项\"><a href=\"#maven-配置项\" class=\"headerlink\" title=\"maven 配置项\"></a>maven 配置项</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapstruct.version</span>&gt;</span>1.4.2.Final<span class=\"tag\">&lt;/<span class=\"name\">mapstruct.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">lombok.version</span>&gt;</span>1.18.20<span class=\"tag\">&lt;/<span class=\"name\">lombok.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mapstruct<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mapstruct<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- 这里的Java 版本需要按照你项目里的Java 版本进行设置 --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mapstruct<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mapstruct-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"comment\">&lt;!-- other annotation processors --&gt;</span></span><br><span class=\"line\">                  <span class=\"comment\">&lt;!-- 集成lombok：mapStruct 使用 @Getter @Setter ...注解 --&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;lombok.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目中配置\"><a href=\"#项目中配置\" class=\"headerlink\" title=\"项目中配置\"></a>项目中配置</h2><p>创建 mapper 包，通过创建 instance 的方式，实现指定 entity 的转换</p>\n<p>配置接口：articleMapper interface</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ArticleMapper</span> </span>&#123;</span><br><span class=\"line\">    ArticleMapper INSTANCE = Mappers.getMapper(ArticleMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Article <span class=\"title\">covert</span><span class=\"params\">(ArticleDto articleDto)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"title\"</span>, target=<span class=\"string\">\"title\"</span>)</span><br><span class=\"line\">    <span class=\"function\">ArticleDto <span class=\"title\">covert</span><span class=\"params\">(Article article)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译后，会在 target/generated-source/annotations/com.xxx.xxx.mapper 下生成 interface ArticleMapper 的具体实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Generated</span>(</span><br><span class=\"line\">    value = <span class=\"string\">\"org.mapstruct.ap.MappingProcessor\"</span>,</span><br><span class=\"line\">    date = <span class=\"string\">\"2021-04-27T13:26:18+0800\"</span>,</span><br><span class=\"line\">    comments = <span class=\"string\">\"version: 1.4.2.Final, compiler: javac, environment: Java 15.0.2 (Oracle Corporation)\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleMapperImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ArticleMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Article <span class=\"title\">covert</span><span class=\"params\">(ArticleDto articleDto)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( articleDto == <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Article article = <span class=\"keyword\">new</span> Article();</span><br><span class=\"line\"></span><br><span class=\"line\">        article.setUpdateTime( articleDto.getUpdateTime() );</span><br><span class=\"line\">        article.setCreateTime( articleDto.getCreateTime() );</span><br><span class=\"line\">        article.setId( articleDto.getId() );</span><br><span class=\"line\">        article.setTitle( articleDto.getTitle() );</span><br><span class=\"line\">        article.setVisitCount( articleDto.getVisitCount() );</span><br><span class=\"line\">        article.setContent( articleDto.getContent() );</span><br><span class=\"line\">        List&lt;Comment&gt; list = articleDto.getComments();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( list != <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">            article.setComments( <span class=\"keyword\">new</span> ArrayList&lt;Comment&gt;( list ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> article;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArticleDto <span class=\"title\">covert</span><span class=\"params\">(Article article)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( article == <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArticleDto articleDto = <span class=\"keyword\">new</span> ArticleDto();</span><br><span class=\"line\"></span><br><span class=\"line\">        articleDto.setTitle( article.getTitle() );</span><br><span class=\"line\">        articleDto.setCreateTime( article.getCreateTime() );</span><br><span class=\"line\">        articleDto.setUpdateTime( article.getUpdateTime() );</span><br><span class=\"line\">        articleDto.setId( article.getId() );</span><br><span class=\"line\">        articleDto.setVisitCount( article.getVisitCount() );</span><br><span class=\"line\">        List&lt;Comment&gt; list = article.getComments();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( list != <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">            articleDto.setComments( <span class=\"keyword\">new</span> ArrayList&lt;Comment&gt;( list ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        articleDto.setContent( article.getContent() );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> articleDto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Article article = <span class=\"keyword\">new</span> Article(...);</span><br><span class=\"line\"></span><br><span class=\"line\">ArticleDto dto = ArticleMapper.INSTANCE.convert(article);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用-mapping\"><a href=\"#常用-mapping\" class=\"headerlink\" title=\"常用 mapping\"></a>常用 mapping</h1><ul>\n<li>int and String</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CarMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"price\"</span>, numberFormat = <span class=\"string\">\"$#.00\"</span>)</span><br><span class=\"line\">    <span class=\"function\">CarDto <span class=\"title\">carToCarDto</span><span class=\"params\">(Car car)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@IterableMapping</span>(numberFormat = <span class=\"string\">\"$#.00\"</span>)</span><br><span class=\"line\">    <span class=\"function\">List&lt;String&gt; <span class=\"title\">prices</span><span class=\"params\">(List&lt;Integer&gt; prices)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Date and String</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CarMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"manufacturingDate\"</span>, dateFormat = <span class=\"string\">\"dd.MM.yyyy\"</span>)</span><br><span class=\"line\">        <span class=\"function\">CarDto <span class=\"title\">carToCarDto</span><span class=\"params\">(Car car)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@IterableMapping</span>(dateFormat = <span class=\"string\">\"dd.MM.yyyy\"</span>)</span><br><span class=\"line\">        <span class=\"function\">List&lt;String&gt; <span class=\"title\">stringListToDateList</span><span class=\"params\">(List&lt;Date&gt; dates)</span></span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"多对象转一个对象\"><a href=\"#多对象转一个对象\" class=\"headerlink\" title=\"多对象转一个对象\"></a>多对象转一个对象</h2><p>Address</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String street;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer zipCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer houseNo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UserWithAddress</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserWithAddressVo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sex;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String street;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer zipCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer houseNumber;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>convert 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"person.description\"</span>, target = <span class=\"string\">\"description\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"address.houseNo\"</span>, target = <span class=\"string\">\"houseNumber\"</span>)</span><br><span class=\"line\"><span class=\"function\">UserWithAddressVo <span class=\"title\">userAndAddress2Vo</span><span class=\"params\">(User user, Address address)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>当多个原对象中，有相同名字的属性时，需要通过 @Mapping 注解来具体的指定， 以免出现歧义（不指定会报错）。 如上面的 description</p>\n<h2 id=\"忽略特定字段\"><a href=\"#忽略特定字段\" class=\"headerlink\" title=\"忽略特定字段\"></a>忽略特定字段</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FishTankMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target = <span class=\"string\">\"fish.name\"</span>, ignore = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"function\">FishTankDto <span class=\"title\">map</span><span class=\"params\">( FishTank source )</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span>(uses = StringListMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">interface</span> <span class=\"title\">SourceTargetMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper<span class=\"class\">.<span class=\"keyword\">class</span> )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target = <span class=\"string\">\"stringProperty\"</span>, source = <span class=\"string\">\"stringProp\"</span>, defaultValue = <span class=\"string\">\"undefined\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target = <span class=\"string\">\"longProperty\"</span>, source = <span class=\"string\">\"longProp\"</span>, defaultValue = <span class=\"string\">\"-1\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Target <span class=\"title\">sourceToTarget</span><span class=\"params\">(Source s)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用表达式\"><a href=\"#使用表达式\" class=\"headerlink\" title=\"使用表达式\"></a>使用表达式</h2><h3 id=\"自定义表达式\"><a href=\"#自定义表达式\" class=\"headerlink\" title=\"自定义表达式\"></a>自定义表达式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">imports org.sample.TimeAndFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>( imports = TimeAndFormat<span class=\"class\">.<span class=\"keyword\">class</span> )</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">interface</span> <span class=\"title\">SourceTargetMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper<span class=\"class\">.<span class=\"keyword\">class</span> )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target = <span class=\"string\">\"timeAndFormat\"</span>,</span><br><span class=\"line\">         expression = <span class=\"string\">\"java( new TimeAndFormat( s.getTime(), s.getFormat() ) )\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Target <span class=\"title\">sourceToTarget</span><span class=\"params\">(Source s)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认表达式\"><a href=\"#默认表达式\" class=\"headerlink\" title=\"默认表达式\"></a>默认表达式</h3><p>当属性值为 null 触发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imports java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>( imports = UUID<span class=\"class\">.<span class=\"keyword\">class</span> )</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">interface</span> <span class=\"title\">SourceTargetMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper<span class=\"class\">.<span class=\"keyword\">class</span> )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target=<span class=\"string\">\"id\"</span>, source=<span class=\"string\">\"sourceId\"</span>, defaultExpression = <span class=\"string\">\"java( UUID.randomUUID().toString() )\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Target <span class=\"title\">sourceToTarget</span><span class=\"params\">(Source s)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多转化查看<a href=\"https://mapstruct.org/documentation/stable/reference/html/#implicit-type-conversions\" target=\"_blank\" rel=\"noopener\">MapStruct: 5.1. Implicit type conversions</a></p>\n","site":{"data":{}},"excerpt":"<p>mapStruct 用于对象转换, 在项目中主要用于 DTO &lt;-&gt; entity 之间的转换，这篇文章介绍了 mapStruct 的配置和常用 API</p>","more":"<h1 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h1><h2 id=\"maven-配置项\"><a href=\"#maven-配置项\" class=\"headerlink\" title=\"maven 配置项\"></a>maven 配置项</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>11<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapstruct.version</span>&gt;</span>1.4.2.Final<span class=\"tag\">&lt;/<span class=\"name\">mapstruct.version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">lombok.version</span>&gt;</span>1.18.20<span class=\"tag\">&lt;/<span class=\"name\">lombok.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mapstruct<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mapstruct<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;mapstruct.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- 这里的Java 版本需要按照你项目里的Java 版本进行设置 --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>$&#123;java.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mapstruct<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mapstruct-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"comment\">&lt;!-- other annotation processors --&gt;</span></span><br><span class=\"line\">                  <span class=\"comment\">&lt;!-- 集成lombok：mapStruct 使用 @Getter @Setter ...注解 --&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;lombok.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目中配置\"><a href=\"#项目中配置\" class=\"headerlink\" title=\"项目中配置\"></a>项目中配置</h2><p>创建 mapper 包，通过创建 instance 的方式，实现指定 entity 的转换</p>\n<p>配置接口：articleMapper interface</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ArticleMapper</span> </span>&#123;</span><br><span class=\"line\">    ArticleMapper INSTANCE = Mappers.getMapper(ArticleMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Article <span class=\"title\">covert</span><span class=\"params\">(ArticleDto articleDto)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"title\"</span>, target=<span class=\"string\">\"title\"</span>)</span><br><span class=\"line\">    <span class=\"function\">ArticleDto <span class=\"title\">covert</span><span class=\"params\">(Article article)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译后，会在 target/generated-source/annotations/com.xxx.xxx.mapper 下生成 interface ArticleMapper 的具体实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Generated</span>(</span><br><span class=\"line\">    value = <span class=\"string\">\"org.mapstruct.ap.MappingProcessor\"</span>,</span><br><span class=\"line\">    date = <span class=\"string\">\"2021-04-27T13:26:18+0800\"</span>,</span><br><span class=\"line\">    comments = <span class=\"string\">\"version: 1.4.2.Final, compiler: javac, environment: Java 15.0.2 (Oracle Corporation)\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleMapperImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ArticleMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Article <span class=\"title\">covert</span><span class=\"params\">(ArticleDto articleDto)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( articleDto == <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Article article = <span class=\"keyword\">new</span> Article();</span><br><span class=\"line\"></span><br><span class=\"line\">        article.setUpdateTime( articleDto.getUpdateTime() );</span><br><span class=\"line\">        article.setCreateTime( articleDto.getCreateTime() );</span><br><span class=\"line\">        article.setId( articleDto.getId() );</span><br><span class=\"line\">        article.setTitle( articleDto.getTitle() );</span><br><span class=\"line\">        article.setVisitCount( articleDto.getVisitCount() );</span><br><span class=\"line\">        article.setContent( articleDto.getContent() );</span><br><span class=\"line\">        List&lt;Comment&gt; list = articleDto.getComments();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( list != <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">            article.setComments( <span class=\"keyword\">new</span> ArrayList&lt;Comment&gt;( list ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> article;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArticleDto <span class=\"title\">covert</span><span class=\"params\">(Article article)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( article == <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArticleDto articleDto = <span class=\"keyword\">new</span> ArticleDto();</span><br><span class=\"line\"></span><br><span class=\"line\">        articleDto.setTitle( article.getTitle() );</span><br><span class=\"line\">        articleDto.setCreateTime( article.getCreateTime() );</span><br><span class=\"line\">        articleDto.setUpdateTime( article.getUpdateTime() );</span><br><span class=\"line\">        articleDto.setId( article.getId() );</span><br><span class=\"line\">        articleDto.setVisitCount( article.getVisitCount() );</span><br><span class=\"line\">        List&lt;Comment&gt; list = article.getComments();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( list != <span class=\"keyword\">null</span> ) &#123;</span><br><span class=\"line\">            articleDto.setComments( <span class=\"keyword\">new</span> ArrayList&lt;Comment&gt;( list ) );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        articleDto.setContent( article.getContent() );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> articleDto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Article article = <span class=\"keyword\">new</span> Article(...);</span><br><span class=\"line\"></span><br><span class=\"line\">ArticleDto dto = ArticleMapper.INSTANCE.convert(article);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用-mapping\"><a href=\"#常用-mapping\" class=\"headerlink\" title=\"常用 mapping\"></a>常用 mapping</h1><ul>\n<li>int and String</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CarMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"price\"</span>, numberFormat = <span class=\"string\">\"$#.00\"</span>)</span><br><span class=\"line\">    <span class=\"function\">CarDto <span class=\"title\">carToCarDto</span><span class=\"params\">(Car car)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@IterableMapping</span>(numberFormat = <span class=\"string\">\"$#.00\"</span>)</span><br><span class=\"line\">    <span class=\"function\">List&lt;String&gt; <span class=\"title\">prices</span><span class=\"params\">(List&lt;Integer&gt; prices)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Date and String</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CarMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"manufacturingDate\"</span>, dateFormat = <span class=\"string\">\"dd.MM.yyyy\"</span>)</span><br><span class=\"line\">        <span class=\"function\">CarDto <span class=\"title\">carToCarDto</span><span class=\"params\">(Car car)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@IterableMapping</span>(dateFormat = <span class=\"string\">\"dd.MM.yyyy\"</span>)</span><br><span class=\"line\">        <span class=\"function\">List&lt;String&gt; <span class=\"title\">stringListToDateList</span><span class=\"params\">(List&lt;Date&gt; dates)</span></span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"多对象转一个对象\"><a href=\"#多对象转一个对象\" class=\"headerlink\" title=\"多对象转一个对象\"></a>多对象转一个对象</h2><p>Address</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String street;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer zipCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer houseNo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UserWithAddress</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserWithAddressVo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer sex;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String street;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer zipCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer houseNumber;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>convert 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"person.description\"</span>, target = <span class=\"string\">\"description\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Mapping</span>(source = <span class=\"string\">\"address.houseNo\"</span>, target = <span class=\"string\">\"houseNumber\"</span>)</span><br><span class=\"line\"><span class=\"function\">UserWithAddressVo <span class=\"title\">userAndAddress2Vo</span><span class=\"params\">(User user, Address address)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>当多个原对象中，有相同名字的属性时，需要通过 @Mapping 注解来具体的指定， 以免出现歧义（不指定会报错）。 如上面的 description</p>\n<h2 id=\"忽略特定字段\"><a href=\"#忽略特定字段\" class=\"headerlink\" title=\"忽略特定字段\"></a>忽略特定字段</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FishTankMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target = <span class=\"string\">\"fish.name\"</span>, ignore = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"function\">FishTankDto <span class=\"title\">map</span><span class=\"params\">( FishTank source )</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span>(uses = StringListMapper<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">interface</span> <span class=\"title\">SourceTargetMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper<span class=\"class\">.<span class=\"keyword\">class</span> )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target = <span class=\"string\">\"stringProperty\"</span>, source = <span class=\"string\">\"stringProp\"</span>, defaultValue = <span class=\"string\">\"undefined\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target = <span class=\"string\">\"longProperty\"</span>, source = <span class=\"string\">\"longProp\"</span>, defaultValue = <span class=\"string\">\"-1\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Target <span class=\"title\">sourceToTarget</span><span class=\"params\">(Source s)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用表达式\"><a href=\"#使用表达式\" class=\"headerlink\" title=\"使用表达式\"></a>使用表达式</h2><h3 id=\"自定义表达式\"><a href=\"#自定义表达式\" class=\"headerlink\" title=\"自定义表达式\"></a>自定义表达式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">imports org.sample.TimeAndFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>( imports = TimeAndFormat<span class=\"class\">.<span class=\"keyword\">class</span> )</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">interface</span> <span class=\"title\">SourceTargetMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper<span class=\"class\">.<span class=\"keyword\">class</span> )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target = <span class=\"string\">\"timeAndFormat\"</span>,</span><br><span class=\"line\">         expression = <span class=\"string\">\"java( new TimeAndFormat( s.getTime(), s.getFormat() ) )\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Target <span class=\"title\">sourceToTarget</span><span class=\"params\">(Source s)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认表达式\"><a href=\"#默认表达式\" class=\"headerlink\" title=\"默认表达式\"></a>默认表达式</h3><p>当属性值为 null 触发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imports java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span>( imports = UUID<span class=\"class\">.<span class=\"keyword\">class</span> )</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">interface</span> <span class=\"title\">SourceTargetMapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SourceTargetMapper INSTANCE = Mappers.getMapper( SourceTargetMapper<span class=\"class\">.<span class=\"keyword\">class</span> )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Mapping</span>(target=<span class=\"string\">\"id\"</span>, source=<span class=\"string\">\"sourceId\"</span>, defaultExpression = <span class=\"string\">\"java( UUID.randomUUID().toString() )\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Target <span class=\"title\">sourceToTarget</span><span class=\"params\">(Source s)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更多转化查看<a href=\"https://mapstruct.org/documentation/stable/reference/html/#implicit-type-conversions\" target=\"_blank\" rel=\"noopener\">MapStruct: 5.1. Implicit type conversions</a></p>"},{"title":"tags","date":"2021-03-12T11:55:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-03-12 19:55:03\ntype: \"tags\"\n---\n","updated":"2021-03-14T07:19:59.067Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl3sbl7o100a8gosw6rw2de1a","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"google-site-verification: google5bedcd4170c798b7.html","source":"uploads/google5bedcd4170c798b7.html","raw":"google-site-verification: google5bedcd4170c798b7.html","date":"2021-03-12T11:21:23.888Z","updated":"2021-03-12T11:21:15.216Z","path":"uploads/google5bedcd4170c798b7.html","title":"","comments":1,"layout":"page","_id":"cl3sbl7o200a9gosw3g7v8zo7","content":"google-site-verification: google5bedcd4170c798b7.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google5bedcd4170c798b7.html"}],"Post":[{"title":"docker 安装&使用手册","toc":true,"date":"2021-07-24T16:00:00.000Z","_content":"\n一个 **Docker Registry** 中可以包含多个 **仓库**（`Repository`）；每个仓库可以包含多个 **标签**（`Tag`）；每个标签对应一个镜像。\n\n私有仓库：\n\n除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 [Docker Registry](https://hub.docker.com/_/registry/) 镜像，可以直接使用做为私有 Registry 服务\n\n<!-- more -->\n\n# Docker 安装\n\n## ubuntu\n\n### 安装\n\n#### 手动安装\n\n- sudo apt-get update\n- sudo apt-get install docker-ce docker-ce-cli containerd.io\n\n#### 官方脚本安装\n\n```bash\n# $ curl -fsSL test.docker.com -o get-docker.sh\n$ curl -fsSL get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh --mirror Aliyun\n# $ sudo sh get-docker.sh --mirror AzureChinaCloud\n```\n\n## macOS\n\n### 安装\n\n```bash\nbrew install --cask docker\n```\n\n## 启动\n\n```bash\n$ sudo systemctl enable docker\n$ sudo systemctl start docker\n```\n\n### win10\n\n建议使用 win10 内置的 linux 子系统进行安装，操作与 ubuntu 保持一致\n\n**手动下载安装**\n\n点击以下 [链接](https://desktop.docker.com/win/stable/amd64/Docker Desktop Installer.exe) 下载 Docker Desktop for Windows。\n\n下载好之后双击 `Docker Desktop Installer.exe` 开始安装。\n\n## 解决安装 docker 后每次都需要输入 sudo 的问题\n\n```bash\n$sudo groupadd docker    #添加docker用户组\n$sudo gpasswd -a $USER docker    #将登陆用户加入到docker用户组中\n$newgrp docker    #更新用户组\n```\n\n# 镜像\n\n## 获取 docker pull\n\n从 Docker 镜像仓库获取镜像的命令是 `docker pull`。其命令格式为：\n\n```bash\ndocker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]\n```\n\n- 选项：通过 docker pull --help 可以看到详细选项列表\n\n- 镜像的名称格式\n\n  - docker 镜像仓库地址： `<域名/IP>[:端口号]`\n\n    > 默认地址是 Docker Hub (docker.io)\n\n  - 仓库名：两段式名称，即 `<用户名>/<软件名>`\n\n    > 对于 Docker Hub，如果不给出用户名，则默认为 `library`，也就是官方镜像。\n\n比如：\n\n```bash\n$ docker pull ubuntu:18.04\n18.04: Pulling from library/ubuntu\n92dc2a97ff99: Pull complete\nbe13a9d27eb8: Pull complete\nc8299583700a: Pull complete\nDigest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26\nStatus: Downloaded newer image for ubuntu:18.04\ndocker.io/library/ubuntu:18.04\n```\n\n- 命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （`docker.io`）获取镜像\n- 。而镜像名称是 `ubuntu:18.04`，因此将会获取官方镜像 `library/ubuntu` 仓库中标签为 `18.04` 的镜像。\n- 最后一行给出了镜像的完整名称 docker.io/library/ubuntu:18.04\n\n## 使用镜像\n\n### 镜像列表操作\n\n- 列出所有 docker 镜像:docker image ls\n\n  ```bash\n  $ docker image ls\n  REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE\n  redis                latest              5f515359c7f8        5 days ago          183 MB\n  nginx                latest              05a60462f8ba        5 days ago          181 MB\n  mongo                3.2                 fe9198c04d62        5 days ago          342 MB\n  <none>               <none>              00285df0df87        5 days ago          342 MB\n  ubuntu               18.04               329ed837d508        3 days ago          63.3MB\n  ubuntu               bionic              329ed837d508        3 days ago          63.3MB\n  ```\n\n- 根据仓库名显示\n\n  ```bash\n  $ docker image ls ubuntu\n  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n  ubuntu              18.04               329ed837d508        3 days ago          63.3MB\n  ubuntu              bionic              329ed837d508        3 days ago          63.3MB\n  ```\n\n- 仓库名 + 标签\n\n  ```bash\n  $ docker image ls ubuntu:18.04\n  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n  ubuntu              18.04               329ed837d508        3 days ago          63.3MB\n  ```\n\n- 列表过滤器 `--fiter`\n\n  - 通过 label 过滤\n\n    ```bash\n    $ docker image ls -f label=com.example.version=0.1\n    ...\n    ```\n\n- 过滤并传递\n\n  > 当我们需要利用 `docker image ls` 把所有的虚悬镜像的 ID 列出来，然后才可以交给 `docker image rm` 命令作为参数来删除指定的这些镜像，可以用到 -q 参数\n\n  ```bash\n  $ docker image ls -q\n  5f515359c7f8\n  05a60462f8ba\n  fe9198c04d62\n  00285df0df87\n  329ed837d508\n  329ed837d508\n  ```\n\n- 镜像删除 docker image rm [image Id]\n\n  删除所有名为 redis 的镜像\n\n  ```bash\n  $ docker image rm $(docker image ls -q redis)\n  ```\n\n- 关注 docker 占用的磁盘空间\n\n  ```bash\n  $ docker system df\n\n  $ docker system df\n\n  TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\n  Images              24                  0                   1.992GB             1.992GB (100%)\n  Containers          1                   0                   62.82MB             62.82MB (100%)\n  Local Volumes       9                   0                   652.2MB             652.2MB (100%)\n  Build Cache                                                 0B                  0B\n  ```\n\n- 无效镜像（dangling image）\n\n  - 显示无效镜像列表\n\n    ```bash\n    docker image ls -f dangling=true\n    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n    <none>              <none>              00285df0df87        5 days ago          342 MB\n    ```\n\n  - 删除无效镜像：`sudo docker rmi $(docker images -f \"dangling=true\" -q)`\n\n## 使用 Dockerfile 定制镜像\n\n```bash\nFROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\n\n### FROM 指定基础镜像\n\n所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。\n\n我们运行了一个 `nginx` 镜像的容器，再进行修改一样，基础镜像是必须指定的。\n\n一个 `Dockerfile` 中 `FROM` 是必备的指令，并且必须是第一条指令\n\n### RUN 执行命令\n\n`RUN` 指令在定制镜像时是最常用的指令之一。其格式有两种：\n\n- _shell_ 格式：`RUN <命令>`，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 `RUN` 指令就是这种格式。\n\n  ```bash\n  RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n  ```\n\n- _exec_ 格式：`RUN [\"可执行文件\", \"参数1\", \"参数2\"]`，这更像是函数调用中的格式。\n\n  ```bash\n  FROM debian:stretch\n\n  RUN apt-get update\n  RUN apt-get install -y gcc libc6-dev make wget\n  RUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\"\n  RUN mkdir -p /usr/src/redis\n  RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\n  RUN make -C /usr/src/redis\n  RUN make -C /usr/src/redis install\n  ```\n\n每一个 `RUN` 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，`commit` 这一层的修改，构成新的镜像。\n\n上面的写法，构建了 7 层镜像。正确的写法如下\n\n```bash\nFROM debian:stretch\n\nRUN set -x; buildDeps='gcc libc6-dev make wget' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n```\n\n很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。\n\n## 构建镜像\n\ndocker build [选项] <上下文路径/URL/->\n\n```bash\n$ docker build -t nginx:v3 .\nSending build context to Docker daemon 2.048 kB\nStep 1 : FROM nginx\n ---> e43d811ce2f4\nStep 2 : RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n ---> Running in 9cdc27646c7b\n ---> 44aa4490ce2c\nRemoving intermediate container 9cdc27646c7b\nSuccessfully built 44aa4490ce2c\n```\n\n### 镜像构建上下文\n\nDocker 在运行时分为**Docker 引擎（也就是服务端守护进程）和客户端工具**。\n\nDocker 的引擎提供了一组 REST API，被称为 [Docker Remote API](https://docs.docker.com/develop/sdk/)，而如 `docker` 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能.\n\n而 `docker build` 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？\n\n这就引入了上下文的概念。**当构建的时候，用户会指定构建镜像上下文的路径，`docker build` 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎**。\n\n对于 如下命令\n\n```bash\nCOPY ./package.json /app/\n```\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n因此，`COPY ../package.json /app` 或者 `COPY /opt/xxxx /app` 无法工作\n\n### .dockerignore 忽略上下文目录下的文件\n\n上面说了，构建的时候会打包路径下的所有内容，但是会存在不需要打包的文件，比如前端的 node_modules 文件夹，这时候可以用 `.gitignore` 一样的语法写一个 `.dockerignore`，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。\n\n# 容器\n\n## 启动 docker run\n\n启动容器有两种方式\n\n- 基于镜像新建一个容器并启动\n- 将在终止状态（`exited`）的容器重新启动。\n\n执行 docker run 后，Docker 在后台运行的操作：\n\n- 检查本地是否存在指定的镜像，不存在就从 [registry]() 下载\n\n- 利用镜像创建并启动一个容器\n\n- 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n\n- 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n\n- 从地址池配置一个 ip 地址给容器\n\n- 执行用户指定的应用程序\n\n- 执行完毕后容器被终止\n\n## 后台运行 -d\n\n```bash\n$ docker run -d ubuntu:18.04 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a\n```\n\n获取容器的输出信息：docker container logs\n\n```bash\n$ docker container logs [container ID or NAMES]\nhello world\nhello world\nhello world\n. . .\n```\n\n## 停止与恢复 stop/start/restart\n\n- docker container stop [container ID] 停止\n- docker container start [contaienr ID] 恢复\n- docker container restart [container ID] 重启\n\n### 机器重启，docker 容器恢复策略\n\n`--restart`\n\n| flag           | 描述                                                                                           |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| no             | 不重启容器 （默认值）                                                                          |\n| on-failure     | 如果容器因为错误崩溃退出，那么重启                                                             |\n| always         | 当容器停止时候，总是重启。如果是被手动停止，那么只有在 Docker 守护进程重启的时候才会自动重启。 |\n| unless-stopped | 和 always 类似，如果被手动停止，即使是 Docker 守护进程重启，也不会被重启                       |\n\n```bash\ndocker run -d --restart unless-stopped redis\n```\n\n## 指定外部访问端口\n\n容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。\n\n- -P 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。\n\n  ```bash\n  $ docker run -d -P nginx:alpine\n\n  $ docker container ls -l\n  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES\n  fae320d08268        nginx:alpine        \"/docker-entrypoint.…\"   24 seconds ago      Up 20 seconds       0.0.0.0:32768->80/tcp   bold_mcnulty\n  ```\n\n  本地主机的 32768 被映射到了容器的 80 端口\n\n- -p 指定要映射的端口\n\n  ```bash\n  $ docker run -d \\\n      -p 80:80 \\\n      -p 443:443 \\\n      nginx:alpine\n  ```\n\n## 进入容器\n\ndocker exec -it 69d1 bash\n\n## 导出与导入容器\n\n导出`docker export [container Id] > [file name]`\n\n```bash\n$ docker container ls -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES\n7691a814370e        ubuntu:18.04        \"/bin/bash\"         36 hours ago        Exited (0) 21 hours ago                       test\n$ docker export 7691a814370e > ubuntu.tar\n```\n\n导入 `docker import`\n\n文件导入\n\n```bash\n$ cat ubuntu.tar | docker import - test/ubuntu:v1.0\n$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE\ntest/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB\n```\n\nurl 导入\n\n```bash\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n## 删除容器\n\n```bash\n$ docker container rm trusting_newton\ntrusting_newton\n```\n\n如果要删除一个运行中的容器，可以添加 `-f` 参数。Docker 会发送 `SIGKILL` 信号给容器。\n\n删除所有处于终止状态的容器\n\n```bash\n$ docker container prune\n```\n\n# 私有仓库\n\n有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。\n\n## 安装并运行 docker-registry\n\n```bash\n$ docker run -d -p 5000:5000 --restart=always --name registry registry\n```\n\n默认情况下，仓库会被创建在容器的 `/var/lib/registry` 目录下。\n\n**自定义存放路径：**你可以通过 `-v` 参数来将镜像文件存放在本地的指定路径\n\n例子：将上传的镜像放到本地的 `/opt/data/registry` 目录。\n\n```bash\n$ docker run -d \\\n    -p 5000:5000 \\\n    -v /opt/data/registry:/var/lib/registry \\\n    registry\n```\n\n## 上传镜像到私有仓库\n\n1. 找到想要的 image\n\n```bash\n$ docker image ls\nREPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB\n```\n\n2.  docker tag 进行标记\n\n格式:`docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]`\n\n```bash\n$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest\n$ docker image ls\nREPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB\n127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB\n```\n\n3. docker push 上传标记的镜像\n\n   ```bash\n   docker push 127.0.0.1:5000/ubuntu:latest\n   ```\n\n4. 查看私有仓库已有的镜像\n\n   ```bash\n   $ curl 127.0.0.1:5000/v2/_catalog\n   {\"repositories\":[\"ubuntu\"]}\n   ```\n\n配置非 https 仓库地址\n\n/etc/docker/daemon.json\n\n对于 `192.168.199.100:5000` 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。这是因为 Docker 默认不允许非 `HTTPS` 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制\n\n```bash\n{\n  \"registry-mirrors\": [\n    \"https://hub-mirror.c.163.com\",\n    \"https://mirror.baidubce.com\"\n  ],\n   \"insecure-registries\": [\n    \"192.168.193.72:5000\",\n    \"192.168.1.193:5000\",\n    \"192.168.193.124:5000\"\n  ]\n}\n```\n\n```bash\n// 服务重启\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n```\n\n# 修改 Docker 镜像默认存储位置 - 软链接\n\n默认情况下 Docker 容器的存放位置在 /var/lib/docker 目录下面，可以通过下面命令查看具体位置。\n\n```bash\n# 默认存放位置\nsudo docker info | grep \"Docker Root Dir\"\n```\n\n```bash\n# 停掉Docker服务\nservice docker stop\n# 重启Docker服务\nsystemctl restart docker\n```\n\n移动整个 /var/lib/docker 目录到空间不较大的目的路径。这时候启动 Docker 时发现存储目录依旧是 /var/lib/docker 目录，但是实际上是存储在数据盘 /data/docker 上了。\n\n```bash\n# 移动原有的内容\nmv /var/lib/docker /data/docker\n\n# 进行链接\nln -sf /data/docker /var/lib/docker\n```\n","source":"_posts/Docker 安装 .md","raw":"---\ntitle: docker 安装&使用手册\ncategories: [运维]\ntags: [Docker]\ntoc: true\ndate: 2021/7/25\n---\n\n一个 **Docker Registry** 中可以包含多个 **仓库**（`Repository`）；每个仓库可以包含多个 **标签**（`Tag`）；每个标签对应一个镜像。\n\n私有仓库：\n\n除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 [Docker Registry](https://hub.docker.com/_/registry/) 镜像，可以直接使用做为私有 Registry 服务\n\n<!-- more -->\n\n# Docker 安装\n\n## ubuntu\n\n### 安装\n\n#### 手动安装\n\n- sudo apt-get update\n- sudo apt-get install docker-ce docker-ce-cli containerd.io\n\n#### 官方脚本安装\n\n```bash\n# $ curl -fsSL test.docker.com -o get-docker.sh\n$ curl -fsSL get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh --mirror Aliyun\n# $ sudo sh get-docker.sh --mirror AzureChinaCloud\n```\n\n## macOS\n\n### 安装\n\n```bash\nbrew install --cask docker\n```\n\n## 启动\n\n```bash\n$ sudo systemctl enable docker\n$ sudo systemctl start docker\n```\n\n### win10\n\n建议使用 win10 内置的 linux 子系统进行安装，操作与 ubuntu 保持一致\n\n**手动下载安装**\n\n点击以下 [链接](https://desktop.docker.com/win/stable/amd64/Docker Desktop Installer.exe) 下载 Docker Desktop for Windows。\n\n下载好之后双击 `Docker Desktop Installer.exe` 开始安装。\n\n## 解决安装 docker 后每次都需要输入 sudo 的问题\n\n```bash\n$sudo groupadd docker    #添加docker用户组\n$sudo gpasswd -a $USER docker    #将登陆用户加入到docker用户组中\n$newgrp docker    #更新用户组\n```\n\n# 镜像\n\n## 获取 docker pull\n\n从 Docker 镜像仓库获取镜像的命令是 `docker pull`。其命令格式为：\n\n```bash\ndocker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]\n```\n\n- 选项：通过 docker pull --help 可以看到详细选项列表\n\n- 镜像的名称格式\n\n  - docker 镜像仓库地址： `<域名/IP>[:端口号]`\n\n    > 默认地址是 Docker Hub (docker.io)\n\n  - 仓库名：两段式名称，即 `<用户名>/<软件名>`\n\n    > 对于 Docker Hub，如果不给出用户名，则默认为 `library`，也就是官方镜像。\n\n比如：\n\n```bash\n$ docker pull ubuntu:18.04\n18.04: Pulling from library/ubuntu\n92dc2a97ff99: Pull complete\nbe13a9d27eb8: Pull complete\nc8299583700a: Pull complete\nDigest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26\nStatus: Downloaded newer image for ubuntu:18.04\ndocker.io/library/ubuntu:18.04\n```\n\n- 命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （`docker.io`）获取镜像\n- 。而镜像名称是 `ubuntu:18.04`，因此将会获取官方镜像 `library/ubuntu` 仓库中标签为 `18.04` 的镜像。\n- 最后一行给出了镜像的完整名称 docker.io/library/ubuntu:18.04\n\n## 使用镜像\n\n### 镜像列表操作\n\n- 列出所有 docker 镜像:docker image ls\n\n  ```bash\n  $ docker image ls\n  REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE\n  redis                latest              5f515359c7f8        5 days ago          183 MB\n  nginx                latest              05a60462f8ba        5 days ago          181 MB\n  mongo                3.2                 fe9198c04d62        5 days ago          342 MB\n  <none>               <none>              00285df0df87        5 days ago          342 MB\n  ubuntu               18.04               329ed837d508        3 days ago          63.3MB\n  ubuntu               bionic              329ed837d508        3 days ago          63.3MB\n  ```\n\n- 根据仓库名显示\n\n  ```bash\n  $ docker image ls ubuntu\n  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n  ubuntu              18.04               329ed837d508        3 days ago          63.3MB\n  ubuntu              bionic              329ed837d508        3 days ago          63.3MB\n  ```\n\n- 仓库名 + 标签\n\n  ```bash\n  $ docker image ls ubuntu:18.04\n  REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n  ubuntu              18.04               329ed837d508        3 days ago          63.3MB\n  ```\n\n- 列表过滤器 `--fiter`\n\n  - 通过 label 过滤\n\n    ```bash\n    $ docker image ls -f label=com.example.version=0.1\n    ...\n    ```\n\n- 过滤并传递\n\n  > 当我们需要利用 `docker image ls` 把所有的虚悬镜像的 ID 列出来，然后才可以交给 `docker image rm` 命令作为参数来删除指定的这些镜像，可以用到 -q 参数\n\n  ```bash\n  $ docker image ls -q\n  5f515359c7f8\n  05a60462f8ba\n  fe9198c04d62\n  00285df0df87\n  329ed837d508\n  329ed837d508\n  ```\n\n- 镜像删除 docker image rm [image Id]\n\n  删除所有名为 redis 的镜像\n\n  ```bash\n  $ docker image rm $(docker image ls -q redis)\n  ```\n\n- 关注 docker 占用的磁盘空间\n\n  ```bash\n  $ docker system df\n\n  $ docker system df\n\n  TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE\n  Images              24                  0                   1.992GB             1.992GB (100%)\n  Containers          1                   0                   62.82MB             62.82MB (100%)\n  Local Volumes       9                   0                   652.2MB             652.2MB (100%)\n  Build Cache                                                 0B                  0B\n  ```\n\n- 无效镜像（dangling image）\n\n  - 显示无效镜像列表\n\n    ```bash\n    docker image ls -f dangling=true\n    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n    <none>              <none>              00285df0df87        5 days ago          342 MB\n    ```\n\n  - 删除无效镜像：`sudo docker rmi $(docker images -f \"dangling=true\" -q)`\n\n## 使用 Dockerfile 定制镜像\n\n```bash\nFROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n```\n\n### FROM 指定基础镜像\n\n所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。\n\n我们运行了一个 `nginx` 镜像的容器，再进行修改一样，基础镜像是必须指定的。\n\n一个 `Dockerfile` 中 `FROM` 是必备的指令，并且必须是第一条指令\n\n### RUN 执行命令\n\n`RUN` 指令在定制镜像时是最常用的指令之一。其格式有两种：\n\n- _shell_ 格式：`RUN <命令>`，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 `RUN` 指令就是这种格式。\n\n  ```bash\n  RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n  ```\n\n- _exec_ 格式：`RUN [\"可执行文件\", \"参数1\", \"参数2\"]`，这更像是函数调用中的格式。\n\n  ```bash\n  FROM debian:stretch\n\n  RUN apt-get update\n  RUN apt-get install -y gcc libc6-dev make wget\n  RUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\"\n  RUN mkdir -p /usr/src/redis\n  RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\n  RUN make -C /usr/src/redis\n  RUN make -C /usr/src/redis install\n  ```\n\n每一个 `RUN` 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，`commit` 这一层的修改，构成新的镜像。\n\n上面的写法，构建了 7 层镜像。正确的写法如下\n\n```bash\nFROM debian:stretch\n\nRUN set -x; buildDeps='gcc libc6-dev make wget' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-5.0.3.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n```\n\n很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。\n\n## 构建镜像\n\ndocker build [选项] <上下文路径/URL/->\n\n```bash\n$ docker build -t nginx:v3 .\nSending build context to Docker daemon 2.048 kB\nStep 1 : FROM nginx\n ---> e43d811ce2f4\nStep 2 : RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html\n ---> Running in 9cdc27646c7b\n ---> 44aa4490ce2c\nRemoving intermediate container 9cdc27646c7b\nSuccessfully built 44aa4490ce2c\n```\n\n### 镜像构建上下文\n\nDocker 在运行时分为**Docker 引擎（也就是服务端守护进程）和客户端工具**。\n\nDocker 的引擎提供了一组 REST API，被称为 [Docker Remote API](https://docs.docker.com/develop/sdk/)，而如 `docker` 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能.\n\n而 `docker build` 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？\n\n这就引入了上下文的概念。**当构建的时候，用户会指定构建镜像上下文的路径，`docker build` 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎**。\n\n对于 如下命令\n\n```bash\nCOPY ./package.json /app/\n```\n\n这并不是要复制执行 `docker build` 命令所在的目录下的 `package.json`，也不是复制 `Dockerfile` 所在目录下的 `package.json`，而是复制 **上下文（context）** 目录下的 `package.json`。\n\n因此，`COPY ../package.json /app` 或者 `COPY /opt/xxxx /app` 无法工作\n\n### .dockerignore 忽略上下文目录下的文件\n\n上面说了，构建的时候会打包路径下的所有内容，但是会存在不需要打包的文件，比如前端的 node_modules 文件夹，这时候可以用 `.gitignore` 一样的语法写一个 `.dockerignore`，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。\n\n# 容器\n\n## 启动 docker run\n\n启动容器有两种方式\n\n- 基于镜像新建一个容器并启动\n- 将在终止状态（`exited`）的容器重新启动。\n\n执行 docker run 后，Docker 在后台运行的操作：\n\n- 检查本地是否存在指定的镜像，不存在就从 [registry]() 下载\n\n- 利用镜像创建并启动一个容器\n\n- 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n\n- 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n\n- 从地址池配置一个 ip 地址给容器\n\n- 执行用户指定的应用程序\n\n- 执行完毕后容器被终止\n\n## 后台运行 -d\n\n```bash\n$ docker run -d ubuntu:18.04 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a\n```\n\n获取容器的输出信息：docker container logs\n\n```bash\n$ docker container logs [container ID or NAMES]\nhello world\nhello world\nhello world\n. . .\n```\n\n## 停止与恢复 stop/start/restart\n\n- docker container stop [container ID] 停止\n- docker container start [contaienr ID] 恢复\n- docker container restart [container ID] 重启\n\n### 机器重启，docker 容器恢复策略\n\n`--restart`\n\n| flag           | 描述                                                                                           |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| no             | 不重启容器 （默认值）                                                                          |\n| on-failure     | 如果容器因为错误崩溃退出，那么重启                                                             |\n| always         | 当容器停止时候，总是重启。如果是被手动停止，那么只有在 Docker 守护进程重启的时候才会自动重启。 |\n| unless-stopped | 和 always 类似，如果被手动停止，即使是 Docker 守护进程重启，也不会被重启                       |\n\n```bash\ndocker run -d --restart unless-stopped redis\n```\n\n## 指定外部访问端口\n\n容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。\n\n- -P 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。\n\n  ```bash\n  $ docker run -d -P nginx:alpine\n\n  $ docker container ls -l\n  CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES\n  fae320d08268        nginx:alpine        \"/docker-entrypoint.…\"   24 seconds ago      Up 20 seconds       0.0.0.0:32768->80/tcp   bold_mcnulty\n  ```\n\n  本地主机的 32768 被映射到了容器的 80 端口\n\n- -p 指定要映射的端口\n\n  ```bash\n  $ docker run -d \\\n      -p 80:80 \\\n      -p 443:443 \\\n      nginx:alpine\n  ```\n\n## 进入容器\n\ndocker exec -it 69d1 bash\n\n## 导出与导入容器\n\n导出`docker export [container Id] > [file name]`\n\n```bash\n$ docker container ls -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES\n7691a814370e        ubuntu:18.04        \"/bin/bash\"         36 hours ago        Exited (0) 21 hours ago                       test\n$ docker export 7691a814370e > ubuntu.tar\n```\n\n导入 `docker import`\n\n文件导入\n\n```bash\n$ cat ubuntu.tar | docker import - test/ubuntu:v1.0\n$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE\ntest/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB\n```\n\nurl 导入\n\n```bash\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n\n## 删除容器\n\n```bash\n$ docker container rm trusting_newton\ntrusting_newton\n```\n\n如果要删除一个运行中的容器，可以添加 `-f` 参数。Docker 会发送 `SIGKILL` 信号给容器。\n\n删除所有处于终止状态的容器\n\n```bash\n$ docker container prune\n```\n\n# 私有仓库\n\n有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。\n\n## 安装并运行 docker-registry\n\n```bash\n$ docker run -d -p 5000:5000 --restart=always --name registry registry\n```\n\n默认情况下，仓库会被创建在容器的 `/var/lib/registry` 目录下。\n\n**自定义存放路径：**你可以通过 `-v` 参数来将镜像文件存放在本地的指定路径\n\n例子：将上传的镜像放到本地的 `/opt/data/registry` 目录。\n\n```bash\n$ docker run -d \\\n    -p 5000:5000 \\\n    -v /opt/data/registry:/var/lib/registry \\\n    registry\n```\n\n## 上传镜像到私有仓库\n\n1. 找到想要的 image\n\n```bash\n$ docker image ls\nREPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB\n```\n\n2.  docker tag 进行标记\n\n格式:`docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]`\n\n```bash\n$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest\n$ docker image ls\nREPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB\n127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB\n```\n\n3. docker push 上传标记的镜像\n\n   ```bash\n   docker push 127.0.0.1:5000/ubuntu:latest\n   ```\n\n4. 查看私有仓库已有的镜像\n\n   ```bash\n   $ curl 127.0.0.1:5000/v2/_catalog\n   {\"repositories\":[\"ubuntu\"]}\n   ```\n\n配置非 https 仓库地址\n\n/etc/docker/daemon.json\n\n对于 `192.168.199.100:5000` 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。这是因为 Docker 默认不允许非 `HTTPS` 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制\n\n```bash\n{\n  \"registry-mirrors\": [\n    \"https://hub-mirror.c.163.com\",\n    \"https://mirror.baidubce.com\"\n  ],\n   \"insecure-registries\": [\n    \"192.168.193.72:5000\",\n    \"192.168.1.193:5000\",\n    \"192.168.193.124:5000\"\n  ]\n}\n```\n\n```bash\n// 服务重启\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n```\n\n# 修改 Docker 镜像默认存储位置 - 软链接\n\n默认情况下 Docker 容器的存放位置在 /var/lib/docker 目录下面，可以通过下面命令查看具体位置。\n\n```bash\n# 默认存放位置\nsudo docker info | grep \"Docker Root Dir\"\n```\n\n```bash\n# 停掉Docker服务\nservice docker stop\n# 重启Docker服务\nsystemctl restart docker\n```\n\n移动整个 /var/lib/docker 目录到空间不较大的目的路径。这时候启动 Docker 时发现存储目录依旧是 /var/lib/docker 目录，但是实际上是存储在数据盘 /data/docker 上了。\n\n```bash\n# 移动原有的内容\nmv /var/lib/docker /data/docker\n\n# 进行链接\nln -sf /data/docker /var/lib/docker\n```\n","slug":"Docker 安装 ","published":1,"updated":"2022-03-18T12:53:47.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7i00000goswdbu1c1bp","content":"<p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p>\n<p>私有仓库：</p>\n<p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href=\"https://hub.docker.com/_/registry/\" target=\"_blank\" rel=\"noopener\">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h1><h2 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h4><ul>\n<li>sudo apt-get update</li>\n<li>sudo apt-get install docker-ce docker-ce-cli containerd.io</li>\n</ul>\n<h4 id=\"官方脚本安装\"><a href=\"#官方脚本安装\" class=\"headerlink\" title=\"官方脚本安装\"></a>官方脚本安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># $ curl -fsSL test.docker.com -o get-docker.sh</span></span><br><span class=\"line\">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class=\"line\">$ sudo sh get-docker.sh --mirror Aliyun</span><br><span class=\"line\"><span class=\"comment\"># $ sudo sh get-docker.sh --mirror AzureChinaCloud</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"win10\"><a href=\"#win10\" class=\"headerlink\" title=\"win10\"></a>win10</h3><p>建议使用 win10 内置的 linux 子系统进行安装，操作与 ubuntu 保持一致</p>\n<p><strong>手动下载安装</strong></p>\n<p>点击以下 [链接](<a href=\"https://desktop.docker.com/win/stable/amd64/Docker\" target=\"_blank\" rel=\"noopener\">https://desktop.docker.com/win/stable/amd64/Docker</a> Desktop Installer.exe) 下载 Docker Desktop for Windows。</p>\n<p>下载好之后双击 <code>Docker Desktop Installer.exe</code> 开始安装。</p>\n<h2 id=\"解决安装-docker-后每次都需要输入-sudo-的问题\"><a href=\"#解决安装-docker-后每次都需要输入-sudo-的问题\" class=\"headerlink\" title=\"解决安装 docker 后每次都需要输入 sudo 的问题\"></a>解决安装 docker 后每次都需要输入 sudo 的问题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sudo</span> groupadd docker    <span class=\"comment\">#添加docker用户组</span></span><br><span class=\"line\"><span class=\"variable\">$sudo</span> gpasswd -a <span class=\"variable\">$USER</span> docker    <span class=\"comment\">#将登陆用户加入到docker用户组中</span></span><br><span class=\"line\"><span class=\"variable\">$newgrp</span> docker    <span class=\"comment\">#更新用户组</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h1><h2 id=\"获取-docker-pull\"><a href=\"#获取-docker-pull\" class=\"headerlink\" title=\"获取 docker pull\"></a>获取 docker pull</h2><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>选项：通过 docker pull –help 可以看到详细选项列表</p>\n</li>\n<li><p>镜像的名称格式</p>\n<ul>\n<li><p>docker 镜像仓库地址： <code>&lt;域名/IP&gt;[:端口号]</code></p>\n<blockquote>\n<p>默认地址是 Docker Hub (docker.io)</p>\n</blockquote>\n</li>\n<li><p>仓库名：两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code></p>\n<blockquote>\n<p>对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull ubuntu:18.04</span><br><span class=\"line\">18.04: Pulling from library/ubuntu</span><br><span class=\"line\">92dc2a97ff99: Pull complete</span><br><span class=\"line\">be13a9d27eb8: Pull complete</span><br><span class=\"line\">c8299583700a: Pull complete</span><br><span class=\"line\">Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:18.04</span><br><span class=\"line\">docker.io/library/ubuntu:18.04</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （<code>docker.io</code>）获取镜像</li>\n<li>。而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。</li>\n<li>最后一行给出了镜像的完整名称 docker.io/library/ubuntu:18.04</li>\n</ul>\n<h2 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h2><h3 id=\"镜像列表操作\"><a href=\"#镜像列表操作\" class=\"headerlink\" title=\"镜像列表操作\"></a>镜像列表操作</h3><ul>\n<li><p>列出所有 docker 镜像:docker image ls</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">redis                latest              5f515359c7f8        5 days ago          183 MB</span><br><span class=\"line\">nginx                latest              05a60462f8ba        5 days ago          181 MB</span><br><span class=\"line\">mongo                3.2                 fe9198c04d62        5 days ago          342 MB</span><br><span class=\"line\">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br><span class=\"line\">ubuntu               18.04               329ed837d508        3 days ago          63.3MB</span><br><span class=\"line\">ubuntu               bionic              329ed837d508        3 days ago          63.3MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据仓库名显示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls ubuntu</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              18.04               329ed837d508        3 days ago          63.3MB</span><br><span class=\"line\">ubuntu              bionic              329ed837d508        3 days ago          63.3MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仓库名 + 标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls ubuntu:18.04</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              18.04               329ed837d508        3 days ago          63.3MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列表过滤器 <code>--fiter</code></p>\n<ul>\n<li><p>通过 label 过滤</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -f label=com.example.version=0.1</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>过滤并传递</p>\n<blockquote>\n<p>当我们需要利用 <code>docker image ls</code> 把所有的虚悬镜像的 ID 列出来，然后才可以交给 <code>docker image rm</code> 命令作为参数来删除指定的这些镜像，可以用到 -q 参数</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -q</span><br><span class=\"line\">5f515359c7f8</span><br><span class=\"line\">05a60462f8ba</span><br><span class=\"line\">fe9198c04d62</span><br><span class=\"line\">00285df0df87</span><br><span class=\"line\">329ed837d508</span><br><span class=\"line\">329ed837d508</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像删除 docker image rm [image Id]</p>\n<p>删除所有名为 redis 的镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关注 docker 占用的磁盘空间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker system df</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker system df</span><br><span class=\"line\"></span><br><span class=\"line\">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class=\"line\">Images              24                  0                   1.992GB             1.992GB (100%)</span><br><span class=\"line\">Containers          1                   0                   62.82MB             62.82MB (100%)</span><br><span class=\"line\">Local Volumes       9                   0                   652.2MB             652.2MB (100%)</span><br><span class=\"line\">Build Cache                                                 0B                  0B</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>无效镜像（dangling image）</p>\n<ul>\n<li><p>显示无效镜像列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image ls -f dangling=<span class=\"literal\">true</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除无效镜像：<code>sudo docker rmi $(docker images -f &quot;dangling=true&quot; -q)</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用-Dockerfile-定制镜像\"><a href=\"#使用-Dockerfile-定制镜像\" class=\"headerlink\" title=\"使用 Dockerfile 定制镜像\"></a>使用 Dockerfile 定制镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FROM-指定基础镜像\"><a href=\"#FROM-指定基础镜像\" class=\"headerlink\" title=\"FROM 指定基础镜像\"></a>FROM 指定基础镜像</h3><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。</p>\n<p>我们运行了一个 <code>nginx</code> 镜像的容器，再进行修改一样，基础镜像是必须指定的。</p>\n<p>一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令</p>\n<h3 id=\"RUN-执行命令\"><a href=\"#RUN-执行命令\" class=\"headerlink\" title=\"RUN 执行命令\"></a>RUN 执行命令</h3><p><code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p>\n<ul>\n<li><p><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM debian:stretch</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install -y gcc libc6-dev make wget</span><br><span class=\"line\">RUN wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-5.0.3.tar.gz\"</span></span><br><span class=\"line\">RUN mkdir -p /usr/src/redis</span><br><span class=\"line\">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span><br><span class=\"line\">RUN make -C /usr/src/redis</span><br><span class=\"line\">RUN make -C /usr/src/redis install</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>每一个 <code>RUN</code> 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code> 这一层的修改，构成新的镜像。</p>\n<p>上面的写法，构建了 7 层镜像。正确的写法如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM debian:stretch</span><br><span class=\"line\"></span><br><span class=\"line\">RUN <span class=\"built_in\">set</span> -x; buildDeps=<span class=\"string\">'gcc libc6-dev make wget'</span> \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y <span class=\"variable\">$buildDeps</span> \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-5.0.3.tar.gz\"</span> \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; rm redis.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm -r /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove <span class=\"variable\">$buildDeps</span></span><br></pre></td></tr></table></figure>\n\n<p>很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><p>docker build [选项] &lt;上下文路径/URL/-&gt;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">Step 1 : FROM nginx</span><br><span class=\"line\"> ---&gt; e43d811ce2f4</span><br><span class=\"line\">Step 2 : RUN <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 9cdc27646c7b</span><br><span class=\"line\"> ---&gt; 44aa4490ce2c</span><br><span class=\"line\">Removing intermediate container 9cdc27646c7b</span><br><span class=\"line\">Successfully built 44aa4490ce2c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"镜像构建上下文\"><a href=\"#镜像构建上下文\" class=\"headerlink\" title=\"镜像构建上下文\"></a>镜像构建上下文</h3><p>Docker 在运行时分为<strong>Docker 引擎（也就是服务端守护进程）和客户端工具</strong>。</p>\n<p>Docker 的引擎提供了一组 REST API，被称为 <a href=\"https://docs.docker.com/develop/sdk/\" target=\"_blank\" rel=\"noopener\">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能.</p>\n<p>而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p>\n<p>这就引入了上下文的概念。<strong>当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎</strong>。</p>\n<p>对于 如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY ./package.json /app/</span><br></pre></td></tr></table></figure>\n\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>因此，<code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作</p>\n<h3 id=\"dockerignore-忽略上下文目录下的文件\"><a href=\"#dockerignore-忽略上下文目录下的文件\" class=\"headerlink\" title=\".dockerignore 忽略上下文目录下的文件\"></a>.dockerignore 忽略上下文目录下的文件</h3><p>上面说了，构建的时候会打包路径下的所有内容，但是会存在不需要打包的文件，比如前端的 node_modules 文件夹，这时候可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>\n<h1 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h1><h2 id=\"启动-docker-run\"><a href=\"#启动-docker-run\" class=\"headerlink\" title=\"启动 docker run\"></a>启动 docker run</h2><p>启动容器有两种方式</p>\n<ul>\n<li>基于镜像新建一个容器并启动</li>\n<li>将在终止状态（<code>exited</code>）的容器重新启动。</li>\n</ul>\n<p>执行 docker run 后，Docker 在后台运行的操作：</p>\n<ul>\n<li><p>检查本地是否存在指定的镜像，不存在就从 <a href=\"\">registry</a> 下载</p>\n</li>\n<li><p>利用镜像创建并启动一个容器</p>\n</li>\n<li><p>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</p>\n</li>\n<li><p>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</p>\n</li>\n<li><p>从地址池配置一个 ip 地址给容器</p>\n</li>\n<li><p>执行用户指定的应用程序</p>\n</li>\n<li><p>执行完毕后容器被终止</p>\n</li>\n</ul>\n<h2 id=\"后台运行-d\"><a href=\"#后台运行-d\" class=\"headerlink\" title=\"后台运行 -d\"></a>后台运行 -d</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d ubuntu:18.04 /bin/sh -c <span class=\"string\">\"while true; do echo hello world; sleep 1; done\"</span></span><br><span class=\"line\">77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a</span><br></pre></td></tr></table></figure>\n\n<p>获取容器的输出信息：docker container logs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container logs [container ID or NAMES]</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"停止与恢复-stop-start-restart\"><a href=\"#停止与恢复-stop-start-restart\" class=\"headerlink\" title=\"停止与恢复 stop/start/restart\"></a>停止与恢复 stop/start/restart</h2><ul>\n<li>docker container stop [container ID] 停止</li>\n<li>docker container start [contaienr ID] 恢复</li>\n<li>docker container restart [container ID] 重启</li>\n</ul>\n<h3 id=\"机器重启，docker-容器恢复策略\"><a href=\"#机器重启，docker-容器恢复策略\" class=\"headerlink\" title=\"机器重启，docker 容器恢复策略\"></a>机器重启，docker 容器恢复策略</h3><p><code>--restart</code></p>\n<table>\n<thead>\n<tr>\n<th>flag</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>no</td>\n<td>不重启容器 （默认值）</td>\n</tr>\n<tr>\n<td>on-failure</td>\n<td>如果容器因为错误崩溃退出，那么重启</td>\n</tr>\n<tr>\n<td>always</td>\n<td>当容器停止时候，总是重启。如果是被手动停止，那么只有在 Docker 守护进程重启的时候才会自动重启。</td>\n</tr>\n<tr>\n<td>unless-stopped</td>\n<td>和 always 类似，如果被手动停止，即使是 Docker 守护进程重启，也不会被重启</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --restart unless-stopped redis</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指定外部访问端口\"><a href=\"#指定外部访问端口\" class=\"headerlink\" title=\"指定外部访问端口\"></a>指定外部访问端口</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。</p>\n<ul>\n<li><p>-P 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -P nginx:alpine</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls -l</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES</span><br><span class=\"line\">fae320d08268        nginx:alpine        <span class=\"string\">\"/docker-entrypoint.…\"</span>   24 seconds ago      Up 20 seconds       0.0.0.0:32768-&gt;80/tcp   bold_mcnulty</span><br></pre></td></tr></table></figure>\n\n<p>本地主机的 32768 被映射到了容器的 80 端口</p>\n</li>\n<li><p>-p 指定要映射的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d \\</span><br><span class=\"line\">    -p 80:80 \\</span><br><span class=\"line\">    -p 443:443 \\</span><br><span class=\"line\">    nginx:alpine</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h2><p>docker exec -it 69d1 bash</p>\n<h2 id=\"导出与导入容器\"><a href=\"#导出与导入容器\" class=\"headerlink\" title=\"导出与导入容器\"></a>导出与导入容器</h2><p>导出<code>docker export [container Id] &gt; [file name]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container ls -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES</span><br><span class=\"line\">7691a814370e        ubuntu:18.04        <span class=\"string\">\"/bin/bash\"</span>         36 hours ago        Exited (0) 21 hours ago                       <span class=\"built_in\">test</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>\n\n<p>导入 <code>docker import</code></p>\n<p>文件导入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ubuntu.tar | docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class=\"line\"><span class=\"built_in\">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure>\n\n<p>url 导入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container rm trusting_newton</span><br><span class=\"line\">trusting_newton</span><br></pre></td></tr></table></figure>\n\n<p>如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</p>\n<p>删除所有处于终止状态的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container prune</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"私有仓库\"><a href=\"#私有仓库\" class=\"headerlink\" title=\"私有仓库\"></a>私有仓库</h1><p>有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。</p>\n<h2 id=\"安装并运行-docker-registry\"><a href=\"#安装并运行-docker-registry\" class=\"headerlink\" title=\"安装并运行 docker-registry\"></a>安装并运行 docker-registry</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，仓库会被创建在容器的 <code>/var/lib/registry</code> 目录下。</p>\n<p><strong>自定义存放路径：</strong>你可以通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径</p>\n<p>例子：将上传的镜像放到本地的 <code>/opt/data/registry</code> 目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d \\</span><br><span class=\"line\">    -p 5000:5000 \\</span><br><span class=\"line\">    -v /opt/data/registry:/var/lib/registry \\</span><br><span class=\"line\">    registry</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上传镜像到私有仓库\"><a href=\"#上传镜像到私有仓库\" class=\"headerlink\" title=\"上传镜像到私有仓库\"></a>上传镜像到私有仓库</h2><ol>\n<li>找到想要的 image</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>docker tag 进行标记</li>\n</ol>\n<p>格式:<code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br><span class=\"line\">127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>docker push 上传标记的镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 127.0.0.1:5000/ubuntu:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看私有仓库已有的镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl 127.0.0.1:5000/v2/_catalog</span><br><span class=\"line\">&#123;<span class=\"string\">\"repositories\"</span>:[<span class=\"string\">\"ubuntu\"</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>配置非 https 仓库地址</p>\n<p>/etc/docker/daemon.json</p>\n<p>对于 <code>192.168.199.100:5000</code> 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。这是因为 Docker 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://hub-mirror.c.163.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"https://mirror.baidubce.com\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">   <span class=\"string\">\"insecure-registries\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"192.168.193.72:5000\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"192.168.1.193:5000\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"192.168.193.124:5000\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 服务重启</span><br><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改-Docker-镜像默认存储位置-软链接\"><a href=\"#修改-Docker-镜像默认存储位置-软链接\" class=\"headerlink\" title=\"修改 Docker 镜像默认存储位置 - 软链接\"></a>修改 Docker 镜像默认存储位置 - 软链接</h1><p>默认情况下 Docker 容器的存放位置在 /var/lib/docker 目录下面，可以通过下面命令查看具体位置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认存放位置</span></span><br><span class=\"line\">sudo docker info | grep <span class=\"string\">\"Docker Root Dir\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停掉Docker服务</span></span><br><span class=\"line\">service docker stop</span><br><span class=\"line\"><span class=\"comment\"># 重启Docker服务</span></span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>移动整个 /var/lib/docker 目录到空间不较大的目的路径。这时候启动 Docker 时发现存储目录依旧是 /var/lib/docker 目录，但是实际上是存储在数据盘 /data/docker 上了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 移动原有的内容</span></span><br><span class=\"line\">mv /var/lib/docker /data/docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行链接</span></span><br><span class=\"line\">ln -sf /data/docker /var/lib/docker</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p>\n<p>私有仓库：</p>\n<p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href=\"https://hub.docker.com/_/registry/\" target=\"_blank\" rel=\"noopener\">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务</p>","more":"<h1 id=\"Docker-安装\"><a href=\"#Docker-安装\" class=\"headerlink\" title=\"Docker 安装\"></a>Docker 安装</h1><h2 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h4><ul>\n<li>sudo apt-get update</li>\n<li>sudo apt-get install docker-ce docker-ce-cli containerd.io</li>\n</ul>\n<h4 id=\"官方脚本安装\"><a href=\"#官方脚本安装\" class=\"headerlink\" title=\"官方脚本安装\"></a>官方脚本安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># $ curl -fsSL test.docker.com -o get-docker.sh</span></span><br><span class=\"line\">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class=\"line\">$ sudo sh get-docker.sh --mirror Aliyun</span><br><span class=\"line\"><span class=\"comment\"># $ sudo sh get-docker.sh --mirror AzureChinaCloud</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install --cask docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"win10\"><a href=\"#win10\" class=\"headerlink\" title=\"win10\"></a>win10</h3><p>建议使用 win10 内置的 linux 子系统进行安装，操作与 ubuntu 保持一致</p>\n<p><strong>手动下载安装</strong></p>\n<p>点击以下 [链接](<a href=\"https://desktop.docker.com/win/stable/amd64/Docker\" target=\"_blank\" rel=\"noopener\">https://desktop.docker.com/win/stable/amd64/Docker</a> Desktop Installer.exe) 下载 Docker Desktop for Windows。</p>\n<p>下载好之后双击 <code>Docker Desktop Installer.exe</code> 开始安装。</p>\n<h2 id=\"解决安装-docker-后每次都需要输入-sudo-的问题\"><a href=\"#解决安装-docker-后每次都需要输入-sudo-的问题\" class=\"headerlink\" title=\"解决安装 docker 后每次都需要输入 sudo 的问题\"></a>解决安装 docker 后每次都需要输入 sudo 的问题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sudo</span> groupadd docker    <span class=\"comment\">#添加docker用户组</span></span><br><span class=\"line\"><span class=\"variable\">$sudo</span> gpasswd -a <span class=\"variable\">$USER</span> docker    <span class=\"comment\">#将登陆用户加入到docker用户组中</span></span><br><span class=\"line\"><span class=\"variable\">$newgrp</span> docker    <span class=\"comment\">#更新用户组</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h1><h2 id=\"获取-docker-pull\"><a href=\"#获取-docker-pull\" class=\"headerlink\" title=\"获取 docker pull\"></a>获取 docker pull</h2><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>选项：通过 docker pull –help 可以看到详细选项列表</p>\n</li>\n<li><p>镜像的名称格式</p>\n<ul>\n<li><p>docker 镜像仓库地址： <code>&lt;域名/IP&gt;[:端口号]</code></p>\n<blockquote>\n<p>默认地址是 Docker Hub (docker.io)</p>\n</blockquote>\n</li>\n<li><p>仓库名：两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code></p>\n<blockquote>\n<p>对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull ubuntu:18.04</span><br><span class=\"line\">18.04: Pulling from library/ubuntu</span><br><span class=\"line\">92dc2a97ff99: Pull complete</span><br><span class=\"line\">be13a9d27eb8: Pull complete</span><br><span class=\"line\">c8299583700a: Pull complete</span><br><span class=\"line\">Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> ubuntu:18.04</span><br><span class=\"line\">docker.io/library/ubuntu:18.04</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub （<code>docker.io</code>）获取镜像</li>\n<li>。而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。</li>\n<li>最后一行给出了镜像的完整名称 docker.io/library/ubuntu:18.04</li>\n</ul>\n<h2 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h2><h3 id=\"镜像列表操作\"><a href=\"#镜像列表操作\" class=\"headerlink\" title=\"镜像列表操作\"></a>镜像列表操作</h3><ul>\n<li><p>列出所有 docker 镜像:docker image ls</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">redis                latest              5f515359c7f8        5 days ago          183 MB</span><br><span class=\"line\">nginx                latest              05a60462f8ba        5 days ago          181 MB</span><br><span class=\"line\">mongo                3.2                 fe9198c04d62        5 days ago          342 MB</span><br><span class=\"line\">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br><span class=\"line\">ubuntu               18.04               329ed837d508        3 days ago          63.3MB</span><br><span class=\"line\">ubuntu               bionic              329ed837d508        3 days ago          63.3MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据仓库名显示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls ubuntu</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              18.04               329ed837d508        3 days ago          63.3MB</span><br><span class=\"line\">ubuntu              bionic              329ed837d508        3 days ago          63.3MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仓库名 + 标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls ubuntu:18.04</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu              18.04               329ed837d508        3 days ago          63.3MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>列表过滤器 <code>--fiter</code></p>\n<ul>\n<li><p>通过 label 过滤</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -f label=com.example.version=0.1</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>过滤并传递</p>\n<blockquote>\n<p>当我们需要利用 <code>docker image ls</code> 把所有的虚悬镜像的 ID 列出来，然后才可以交给 <code>docker image rm</code> 命令作为参数来删除指定的这些镜像，可以用到 -q 参数</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls -q</span><br><span class=\"line\">5f515359c7f8</span><br><span class=\"line\">05a60462f8ba</span><br><span class=\"line\">fe9198c04d62</span><br><span class=\"line\">00285df0df87</span><br><span class=\"line\">329ed837d508</span><br><span class=\"line\">329ed837d508</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>镜像删除 docker image rm [image Id]</p>\n<p>删除所有名为 redis 的镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关注 docker 占用的磁盘空间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker system df</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker system df</span><br><span class=\"line\"></span><br><span class=\"line\">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class=\"line\">Images              24                  0                   1.992GB             1.992GB (100%)</span><br><span class=\"line\">Containers          1                   0                   62.82MB             62.82MB (100%)</span><br><span class=\"line\">Local Volumes       9                   0                   652.2MB             652.2MB (100%)</span><br><span class=\"line\">Build Cache                                                 0B                  0B</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>无效镜像（dangling image）</p>\n<ul>\n<li><p>显示无效镜像列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image ls -f dangling=<span class=\"literal\">true</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除无效镜像：<code>sudo docker rmi $(docker images -f &quot;dangling=true&quot; -q)</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"使用-Dockerfile-定制镜像\"><a href=\"#使用-Dockerfile-定制镜像\" class=\"headerlink\" title=\"使用 Dockerfile 定制镜像\"></a>使用 Dockerfile 定制镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\">RUN <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FROM-指定基础镜像\"><a href=\"#FROM-指定基础镜像\" class=\"headerlink\" title=\"FROM 指定基础镜像\"></a>FROM 指定基础镜像</h3><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。</p>\n<p>我们运行了一个 <code>nginx</code> 镜像的容器，再进行修改一样，基础镜像是必须指定的。</p>\n<p>一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令</p>\n<h3 id=\"RUN-执行命令\"><a href=\"#RUN-执行命令\" class=\"headerlink\" title=\"RUN 执行命令\"></a>RUN 执行命令</h3><p><code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p>\n<ul>\n<li><p><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM debian:stretch</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install -y gcc libc6-dev make wget</span><br><span class=\"line\">RUN wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-5.0.3.tar.gz\"</span></span><br><span class=\"line\">RUN mkdir -p /usr/src/redis</span><br><span class=\"line\">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span><br><span class=\"line\">RUN make -C /usr/src/redis</span><br><span class=\"line\">RUN make -C /usr/src/redis install</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>每一个 <code>RUN</code> 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code> 这一层的修改，构成新的镜像。</p>\n<p>上面的写法，构建了 7 层镜像。正确的写法如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM debian:stretch</span><br><span class=\"line\"></span><br><span class=\"line\">RUN <span class=\"built_in\">set</span> -x; buildDeps=<span class=\"string\">'gcc libc6-dev make wget'</span> \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y <span class=\"variable\">$buildDeps</span> \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-5.0.3.tar.gz\"</span> \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; make -C /usr/src/redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span><br><span class=\"line\">    &amp;&amp; rm redis.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm -r /usr/src/redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove <span class=\"variable\">$buildDeps</span></span><br></pre></td></tr></table></figure>\n\n<p>很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><p>docker build [选项] &lt;上下文路径/URL/-&gt;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t nginx:v3 .</span><br><span class=\"line\">Sending build context to Docker daemon 2.048 kB</span><br><span class=\"line\">Step 1 : FROM nginx</span><br><span class=\"line\"> ---&gt; e43d811ce2f4</span><br><span class=\"line\">Step 2 : RUN <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> 9cdc27646c7b</span><br><span class=\"line\"> ---&gt; 44aa4490ce2c</span><br><span class=\"line\">Removing intermediate container 9cdc27646c7b</span><br><span class=\"line\">Successfully built 44aa4490ce2c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"镜像构建上下文\"><a href=\"#镜像构建上下文\" class=\"headerlink\" title=\"镜像构建上下文\"></a>镜像构建上下文</h3><p>Docker 在运行时分为<strong>Docker 引擎（也就是服务端守护进程）和客户端工具</strong>。</p>\n<p>Docker 的引擎提供了一组 REST API，被称为 <a href=\"https://docs.docker.com/develop/sdk/\" target=\"_blank\" rel=\"noopener\">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能.</p>\n<p>而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p>\n<p>这就引入了上下文的概念。<strong>当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎</strong>。</p>\n<p>对于 如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COPY ./package.json /app/</span><br></pre></td></tr></table></figure>\n\n<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>\n<p>因此，<code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作</p>\n<h3 id=\"dockerignore-忽略上下文目录下的文件\"><a href=\"#dockerignore-忽略上下文目录下的文件\" class=\"headerlink\" title=\".dockerignore 忽略上下文目录下的文件\"></a>.dockerignore 忽略上下文目录下的文件</h3><p>上面说了，构建的时候会打包路径下的所有内容，但是会存在不需要打包的文件，比如前端的 node_modules 文件夹，这时候可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>\n<h1 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h1><h2 id=\"启动-docker-run\"><a href=\"#启动-docker-run\" class=\"headerlink\" title=\"启动 docker run\"></a>启动 docker run</h2><p>启动容器有两种方式</p>\n<ul>\n<li>基于镜像新建一个容器并启动</li>\n<li>将在终止状态（<code>exited</code>）的容器重新启动。</li>\n</ul>\n<p>执行 docker run 后，Docker 在后台运行的操作：</p>\n<ul>\n<li><p>检查本地是否存在指定的镜像，不存在就从 <a href=\"\">registry</a> 下载</p>\n</li>\n<li><p>利用镜像创建并启动一个容器</p>\n</li>\n<li><p>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</p>\n</li>\n<li><p>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</p>\n</li>\n<li><p>从地址池配置一个 ip 地址给容器</p>\n</li>\n<li><p>执行用户指定的应用程序</p>\n</li>\n<li><p>执行完毕后容器被终止</p>\n</li>\n</ul>\n<h2 id=\"后台运行-d\"><a href=\"#后台运行-d\" class=\"headerlink\" title=\"后台运行 -d\"></a>后台运行 -d</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d ubuntu:18.04 /bin/sh -c <span class=\"string\">\"while true; do echo hello world; sleep 1; done\"</span></span><br><span class=\"line\">77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a</span><br></pre></td></tr></table></figure>\n\n<p>获取容器的输出信息：docker container logs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container logs [container ID or NAMES]</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"停止与恢复-stop-start-restart\"><a href=\"#停止与恢复-stop-start-restart\" class=\"headerlink\" title=\"停止与恢复 stop/start/restart\"></a>停止与恢复 stop/start/restart</h2><ul>\n<li>docker container stop [container ID] 停止</li>\n<li>docker container start [contaienr ID] 恢复</li>\n<li>docker container restart [container ID] 重启</li>\n</ul>\n<h3 id=\"机器重启，docker-容器恢复策略\"><a href=\"#机器重启，docker-容器恢复策略\" class=\"headerlink\" title=\"机器重启，docker 容器恢复策略\"></a>机器重启，docker 容器恢复策略</h3><p><code>--restart</code></p>\n<table>\n<thead>\n<tr>\n<th>flag</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>no</td>\n<td>不重启容器 （默认值）</td>\n</tr>\n<tr>\n<td>on-failure</td>\n<td>如果容器因为错误崩溃退出，那么重启</td>\n</tr>\n<tr>\n<td>always</td>\n<td>当容器停止时候，总是重启。如果是被手动停止，那么只有在 Docker 守护进程重启的时候才会自动重启。</td>\n</tr>\n<tr>\n<td>unless-stopped</td>\n<td>和 always 类似，如果被手动停止，即使是 Docker 守护进程重启，也不会被重启</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --restart unless-stopped redis</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指定外部访问端口\"><a href=\"#指定外部访问端口\" class=\"headerlink\" title=\"指定外部访问端口\"></a>指定外部访问端口</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。</p>\n<ul>\n<li><p>-P 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -P nginx:alpine</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls -l</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES</span><br><span class=\"line\">fae320d08268        nginx:alpine        <span class=\"string\">\"/docker-entrypoint.…\"</span>   24 seconds ago      Up 20 seconds       0.0.0.0:32768-&gt;80/tcp   bold_mcnulty</span><br></pre></td></tr></table></figure>\n\n<p>本地主机的 32768 被映射到了容器的 80 端口</p>\n</li>\n<li><p>-p 指定要映射的端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d \\</span><br><span class=\"line\">    -p 80:80 \\</span><br><span class=\"line\">    -p 443:443 \\</span><br><span class=\"line\">    nginx:alpine</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h2><p>docker exec -it 69d1 bash</p>\n<h2 id=\"导出与导入容器\"><a href=\"#导出与导入容器\" class=\"headerlink\" title=\"导出与导入容器\"></a>导出与导入容器</h2><p>导出<code>docker export [container Id] &gt; [file name]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container ls -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES</span><br><span class=\"line\">7691a814370e        ubuntu:18.04        <span class=\"string\">\"/bin/bash\"</span>         36 hours ago        Exited (0) 21 hours ago                       <span class=\"built_in\">test</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>\n\n<p>导入 <code>docker import</code></p>\n<p>文件导入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ubuntu.tar | docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class=\"line\"><span class=\"built_in\">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure>\n\n<p>url 导入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container rm trusting_newton</span><br><span class=\"line\">trusting_newton</span><br></pre></td></tr></table></figure>\n\n<p>如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</p>\n<p>删除所有处于终止状态的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker container prune</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"私有仓库\"><a href=\"#私有仓库\" class=\"headerlink\" title=\"私有仓库\"></a>私有仓库</h1><p>有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。</p>\n<h2 id=\"安装并运行-docker-registry\"><a href=\"#安装并运行-docker-registry\" class=\"headerlink\" title=\"安装并运行 docker-registry\"></a>安装并运行 docker-registry</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，仓库会被创建在容器的 <code>/var/lib/registry</code> 目录下。</p>\n<p><strong>自定义存放路径：</strong>你可以通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径</p>\n<p>例子：将上传的镜像放到本地的 <code>/opt/data/registry</code> 目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d \\</span><br><span class=\"line\">    -p 5000:5000 \\</span><br><span class=\"line\">    -v /opt/data/registry:/var/lib/registry \\</span><br><span class=\"line\">    registry</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上传镜像到私有仓库\"><a href=\"#上传镜像到私有仓库\" class=\"headerlink\" title=\"上传镜像到私有仓库\"></a>上传镜像到私有仓库</h2><ol>\n<li>找到想要的 image</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>docker tag 进行标记</li>\n</ol>\n<p>格式:<code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br><span class=\"line\">127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>docker push 上传标记的镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 127.0.0.1:5000/ubuntu:latest</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看私有仓库已有的镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl 127.0.0.1:5000/v2/_catalog</span><br><span class=\"line\">&#123;<span class=\"string\">\"repositories\"</span>:[<span class=\"string\">\"ubuntu\"</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>配置非 https 仓库地址</p>\n<p>/etc/docker/daemon.json</p>\n<p>对于 <code>192.168.199.100:5000</code> 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。这是因为 Docker 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://hub-mirror.c.163.com\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"https://mirror.baidubce.com\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">   <span class=\"string\">\"insecure-registries\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"192.168.193.72:5000\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"192.168.1.193:5000\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"192.168.193.124:5000\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 服务重启</span><br><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改-Docker-镜像默认存储位置-软链接\"><a href=\"#修改-Docker-镜像默认存储位置-软链接\" class=\"headerlink\" title=\"修改 Docker 镜像默认存储位置 - 软链接\"></a>修改 Docker 镜像默认存储位置 - 软链接</h1><p>默认情况下 Docker 容器的存放位置在 /var/lib/docker 目录下面，可以通过下面命令查看具体位置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认存放位置</span></span><br><span class=\"line\">sudo docker info | grep <span class=\"string\">\"Docker Root Dir\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停掉Docker服务</span></span><br><span class=\"line\">service docker stop</span><br><span class=\"line\"><span class=\"comment\"># 重启Docker服务</span></span><br><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>移动整个 /var/lib/docker 目录到空间不较大的目的路径。这时候启动 Docker 时发现存储目录依旧是 /var/lib/docker 目录，但是实际上是存储在数据盘 /data/docker 上了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 移动原有的内容</span></span><br><span class=\"line\">mv /var/lib/docker /data/docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行链接</span></span><br><span class=\"line\">ln -sf /data/docker /var/lib/docker</span><br></pre></td></tr></table></figure>"},{"title":"Component-tag和Component function的区别","toc":true,"date":"2022-05-12T16:00:00.000Z","_content":"\n在组件中使用 JSX 标签 和 直接调用函数有什么区别？这个视频解释了具体原因\n\n<iframe src=\"https://egghead.io/lessons/egghead-fix-react-error-rendered-fewer-hooks-than-expected/embed?pl=kent-s-blog-posts-as-screencasts-eefa540c&amp;preload=false&amp;af=5236ad\" allowfullscreen=\"\" width=\"100%\" height=\"400px\"></iframe>\n\n<!-- more -->\n\n下文为具体内容描述\n\n[CodeSandBox 复现参考此处](https://codesandbox.io/s/epic-bose-2u2f18?file=/src/App.js)\n\n```jsx\nimport * as React from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount((c) => c + 1);\n  return <button onClick={increment}>{count}</button>;\n}\n\nfunction App() {\n  const [items, setItems] = React.useState([]);\n  const addItem = () => setItems((i) => [...i, { id: i.length }]);\n  return (\n    <div>\n      <button onClick={addItem}>Add Item</button>\n      <div>{items.map(Counter)}</div>\n      <div>\n        {items.map(() => (\n          <Counter />\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n## `<div>{items.map(() => <Counter />)}</div>`\n\n理解 JSX: [React 文档：JSX IN Depth](https://reactjs.org/docs/jsx-in-depth.html)\n\n当写 `<Component />` 等价于调用`React.createElement`，创建一个新的组件，Counter 内部的 hook 归他自己管理\n\n## ` <div>{items.map(Counter)}</div>`\n\n就是纯代码块，等价于如下\n\n```jsx\n<div>\n  {items.map(() => {\n    const [count, setCount] = React.useState(0);\n    const increment = () => setCount((c) => c + 1);\n    return <button onClick={increment}>{count}</button>;\n  })}\n</div>\n```\n\n这块代码违背了 hook 写法规范: [Only Call Hooks at the Top Level](https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level)\n\n**Don’t call Hooks inside loops, conditions, or nested functions.** Instead, always use Hooks at the top level of your React function, before any early returns. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple `useState` and `useEffect` calls. (If you’re curious, we’ll explain this in depth [below](https://reactjs.org/docs/hooks-rules.html#explanation).)\n","source":"_posts/Component-diff-with-Component().md","raw":"---\ntitle: Component-tag和Component function的区别\ncategories: [前端]\ntags: [jsx, react]\ntoc: true\ndate: 2022/5/13\n---\n\n在组件中使用 JSX 标签 和 直接调用函数有什么区别？这个视频解释了具体原因\n\n<iframe src=\"https://egghead.io/lessons/egghead-fix-react-error-rendered-fewer-hooks-than-expected/embed?pl=kent-s-blog-posts-as-screencasts-eefa540c&amp;preload=false&amp;af=5236ad\" allowfullscreen=\"\" width=\"100%\" height=\"400px\"></iframe>\n\n<!-- more -->\n\n下文为具体内容描述\n\n[CodeSandBox 复现参考此处](https://codesandbox.io/s/epic-bose-2u2f18?file=/src/App.js)\n\n```jsx\nimport * as React from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount((c) => c + 1);\n  return <button onClick={increment}>{count}</button>;\n}\n\nfunction App() {\n  const [items, setItems] = React.useState([]);\n  const addItem = () => setItems((i) => [...i, { id: i.length }]);\n  return (\n    <div>\n      <button onClick={addItem}>Add Item</button>\n      <div>{items.map(Counter)}</div>\n      <div>\n        {items.map(() => (\n          <Counter />\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n## `<div>{items.map(() => <Counter />)}</div>`\n\n理解 JSX: [React 文档：JSX IN Depth](https://reactjs.org/docs/jsx-in-depth.html)\n\n当写 `<Component />` 等价于调用`React.createElement`，创建一个新的组件，Counter 内部的 hook 归他自己管理\n\n## ` <div>{items.map(Counter)}</div>`\n\n就是纯代码块，等价于如下\n\n```jsx\n<div>\n  {items.map(() => {\n    const [count, setCount] = React.useState(0);\n    const increment = () => setCount((c) => c + 1);\n    return <button onClick={increment}>{count}</button>;\n  })}\n</div>\n```\n\n这块代码违背了 hook 写法规范: [Only Call Hooks at the Top Level](https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level)\n\n**Don’t call Hooks inside loops, conditions, or nested functions.** Instead, always use Hooks at the top level of your React function, before any early returns. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple `useState` and `useEffect` calls. (If you’re curious, we’ll explain this in depth [below](https://reactjs.org/docs/hooks-rules.html#explanation).)\n","slug":"Component-diff-with-Component()","published":1,"updated":"2022-05-30T05:27:05.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7i60002gosw5zq7ct6g","content":"<p>在组件中使用 JSX 标签 和 直接调用函数有什么区别？这个视频解释了具体原因</p>\n<iframe src=\"https://egghead.io/lessons/egghead-fix-react-error-rendered-fewer-hooks-than-expected/embed?pl=kent-s-blog-posts-as-screencasts-eefa540c&amp;preload=false&amp;af=5236ad\" allowfullscreen=\"\" width=\"100%\" height=\"400px\"></iframe>\n\n<a id=\"more\"></a>\n\n<p>下文为具体内容描述</p>\n<p><a href=\"https://codesandbox.io/s/epic-bose-2u2f18?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">CodeSandBox 复现参考此处</a></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = React.useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> increment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setCount(<span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> c + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [items, setItems] = React.useState([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addItem = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setItems(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> [...i, &#123; <span class=\"attr\">id</span>: i.length &#125;]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;addItem&#125;&gt;Add Item&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;&#123;items.map(Counter)&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;items.map(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">          &lt;Counter /&gt;</span><br><span class=\"line\">        ))&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"lt-div-gt-items-map-gt-lt-Counter-gt-lt-div-gt\"><a href=\"#lt-div-gt-items-map-gt-lt-Counter-gt-lt-div-gt\" class=\"headerlink\" title=\"&lt;div&gt;{items.map(() =&gt; &lt;Counter /&gt;)}&lt;/div&gt;\"></a><code>&lt;div&gt;{items.map(() =&gt; &lt;Counter /&gt;)}&lt;/div&gt;</code></h2><p>理解 JSX: <a href=\"https://reactjs.org/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"noopener\">React 文档：JSX IN Depth</a></p>\n<p>当写 <code>&lt;Component /&gt;</code> 等价于调用<code>React.createElement</code>，创建一个新的组件，Counter 内部的 hook 归他自己管理</p>\n<h2 id=\"lt-div-gt-items-map-Counter-lt-div-gt\"><a href=\"#lt-div-gt-items-map-Counter-lt-div-gt\" class=\"headerlink\" title=\"&lt;div&gt;{items.map(Counter)}&lt;/div&gt;\"></a><code>&lt;div&gt;{items.map(Counter)}&lt;/div&gt;</code></h2><p>就是纯代码块，等价于如下</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;items.map(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = React.useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> increment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setCount(<span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> c + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;)&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这块代码违背了 hook 写法规范: <a href=\"https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\" target=\"_blank\" rel=\"noopener\">Only Call Hooks at the Top Level</a></p>\n<p><strong>Don’t call Hooks inside loops, conditions, or nested functions.</strong> Instead, always use Hooks at the top level of your React function, before any early returns. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple <code>useState</code> and <code>useEffect</code> calls. (If you’re curious, we’ll explain this in depth <a href=\"https://reactjs.org/docs/hooks-rules.html#explanation\" target=\"_blank\" rel=\"noopener\">below</a>.)</p>\n","site":{"data":{}},"excerpt":"<p>在组件中使用 JSX 标签 和 直接调用函数有什么区别？这个视频解释了具体原因</p>\n<iframe src=\"https://egghead.io/lessons/egghead-fix-react-error-rendered-fewer-hooks-than-expected/embed?pl=kent-s-blog-posts-as-screencasts-eefa540c&amp;preload=false&amp;af=5236ad\" allowfullscreen=\"\" width=\"100%\" height=\"400px\"></iframe>","more":"<p>下文为具体内容描述</p>\n<p><a href=\"https://codesandbox.io/s/epic-bose-2u2f18?file=/src/App.js\" target=\"_blank\" rel=\"noopener\">CodeSandBox 复现参考此处</a></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = React.useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> increment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setCount(<span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> c + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [items, setItems] = React.useState([]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addItem = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setItems(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> [...i, &#123; <span class=\"attr\">id</span>: i.length &#125;]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;addItem&#125;&gt;Add Item&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;&#123;items.map(Counter)&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;items.map(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">          &lt;Counter /&gt;</span><br><span class=\"line\">        ))&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"lt-div-gt-items-map-gt-lt-Counter-gt-lt-div-gt\"><a href=\"#lt-div-gt-items-map-gt-lt-Counter-gt-lt-div-gt\" class=\"headerlink\" title=\"&lt;div&gt;{items.map(() =&gt; &lt;Counter /&gt;)}&lt;/div&gt;\"></a><code>&lt;div&gt;{items.map(() =&gt; &lt;Counter /&gt;)}&lt;/div&gt;</code></h2><p>理解 JSX: <a href=\"https://reactjs.org/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"noopener\">React 文档：JSX IN Depth</a></p>\n<p>当写 <code>&lt;Component /&gt;</code> 等价于调用<code>React.createElement</code>，创建一个新的组件，Counter 内部的 hook 归他自己管理</p>\n<h2 id=\"lt-div-gt-items-map-Counter-lt-div-gt\"><a href=\"#lt-div-gt-items-map-Counter-lt-div-gt\" class=\"headerlink\" title=\"&lt;div&gt;{items.map(Counter)}&lt;/div&gt;\"></a><code>&lt;div&gt;{items.map(Counter)}&lt;/div&gt;</code></h2><p>就是纯代码块，等价于如下</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;items.map(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = React.useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> increment = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setCount(<span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> c + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;increment&#125;</span>&gt;</span>&#123;count&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;)&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这块代码违背了 hook 写法规范: <a href=\"https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\" target=\"_blank\" rel=\"noopener\">Only Call Hooks at the Top Level</a></p>\n<p><strong>Don’t call Hooks inside loops, conditions, or nested functions.</strong> Instead, always use Hooks at the top level of your React function, before any early returns. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple <code>useState</code> and <code>useEffect</code> calls. (If you’re curious, we’ll explain this in depth <a href=\"https://reactjs.org/docs/hooks-rules.html#explanation\" target=\"_blank\" rel=\"noopener\">below</a>.)</p>"},{"title":"debounce & throttle","toc":true,"date":"2021-01-10T16:00:00.000Z","_content":"\n## 请实现一下防抖和节流\n\n### 防抖函数\n\ndebounce 函数返回一个可执行函数。这个可执行函数的作用域链上保存了定时器变量。当重复执行的时候，会先清空掉上次生成的定时器，从而实现延迟执行的效果\n\n#### 代码实现\n\n```js\nfunction debounce(func, wait) {\n  let timer = null;\n  return function (...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, wait);\n  };\n}\n```\n\n### 节流函数\n\n原理与 防抖函数相同，通过 closure 存储上次执行的时间戳，当前时间戳和之前的时间戳相比较，如果超过约定时间，则执行一次函数。\n\n#### 代码实现\n\n##### 时间戳实现\n\n```js\n// 只有当上一次调用的时间 与 现在时间的差值 超过了设定的时间 才会再次调用\nfunction throttle(func, interval) {\n  let lastTimeStamp = 0;\n  return function () {\n    let curDate = Date.now();\n    const diff = curDate - lastTimeStamp;\n    if (diff > interval) {\n      func.apply(this, arguments);\n      lastTimeStamp = curDate;\n    }\n  };\n}\n```\n\n##### requestAnimationFrame 实现\n\n> 参考了 ElementUI 图片拖拽部分的源码\n\n实现原理和时间戳实现方法相同，只不过吧延迟 interval 替换为一帧。在屏幕刷新率为 60HZ 的情况下约为 16.7ms 执行一次（1000ms / 60 = 16.666...ms）\n\n```js\nfunction rafThrottle(func) {\n  let lock = false;\n  return function (...args) {\n    if (lock) return;\n    lock = true;\n    window.requestAnimationFrame(() => {\n      func.apply(this, args);\n      lock = false;\n    });\n  };\n}\n```\n","source":"_posts/JS-防抖节流.md","raw":"---\ntitle: debounce & throttle\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/1/11\n---\n\n## 请实现一下防抖和节流\n\n### 防抖函数\n\ndebounce 函数返回一个可执行函数。这个可执行函数的作用域链上保存了定时器变量。当重复执行的时候，会先清空掉上次生成的定时器，从而实现延迟执行的效果\n\n#### 代码实现\n\n```js\nfunction debounce(func, wait) {\n  let timer = null;\n  return function (...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, wait);\n  };\n}\n```\n\n### 节流函数\n\n原理与 防抖函数相同，通过 closure 存储上次执行的时间戳，当前时间戳和之前的时间戳相比较，如果超过约定时间，则执行一次函数。\n\n#### 代码实现\n\n##### 时间戳实现\n\n```js\n// 只有当上一次调用的时间 与 现在时间的差值 超过了设定的时间 才会再次调用\nfunction throttle(func, interval) {\n  let lastTimeStamp = 0;\n  return function () {\n    let curDate = Date.now();\n    const diff = curDate - lastTimeStamp;\n    if (diff > interval) {\n      func.apply(this, arguments);\n      lastTimeStamp = curDate;\n    }\n  };\n}\n```\n\n##### requestAnimationFrame 实现\n\n> 参考了 ElementUI 图片拖拽部分的源码\n\n实现原理和时间戳实现方法相同，只不过吧延迟 interval 替换为一帧。在屏幕刷新率为 60HZ 的情况下约为 16.7ms 执行一次（1000ms / 60 = 16.666...ms）\n\n```js\nfunction rafThrottle(func) {\n  let lock = false;\n  return function (...args) {\n    if (lock) return;\n    lock = true;\n    window.requestAnimationFrame(() => {\n      func.apply(this, args);\n      lock = false;\n    });\n  };\n}\n```\n","slug":"JS-防抖节流","published":1,"updated":"2021-04-22T09:08:07.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ib0006goswhnks8wt0","content":"<h2 id=\"请实现一下防抖和节流\"><a href=\"#请实现一下防抖和节流\" class=\"headerlink\" title=\"请实现一下防抖和节流\"></a>请实现一下防抖和节流</h2><h3 id=\"防抖函数\"><a href=\"#防抖函数\" class=\"headerlink\" title=\"防抖函数\"></a>防抖函数</h3><p>debounce 函数返回一个可执行函数。这个可执行函数的作用域链上保存了定时器变量。当重复执行的时候，会先清空掉上次生成的定时器，从而实现延迟执行的效果</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节流函数\"><a href=\"#节流函数\" class=\"headerlink\" title=\"节流函数\"></a>节流函数</h3><p>原理与 防抖函数相同，通过 closure 存储上次执行的时间戳，当前时间戳和之前的时间戳相比较，如果超过约定时间，则执行一次函数。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><h5 id=\"时间戳实现\"><a href=\"#时间戳实现\" class=\"headerlink\" title=\"时间戳实现\"></a>时间戳实现</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只有当上一次调用的时间 与 现在时间的差值 超过了设定的时间 才会再次调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, interval</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastTimeStamp = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> curDate = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> diff = curDate - lastTimeStamp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diff &gt; interval) &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      lastTimeStamp = curDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"requestAnimationFrame-实现\"><a href=\"#requestAnimationFrame-实现\" class=\"headerlink\" title=\"requestAnimationFrame 实现\"></a>requestAnimationFrame 实现</h5><blockquote>\n<p>参考了 ElementUI 图片拖拽部分的源码</p>\n</blockquote>\n<p>实现原理和时间戳实现方法相同，只不过吧延迟 interval 替换为一帧。在屏幕刷新率为 60HZ 的情况下约为 16.7ms 执行一次（1000ms / 60 = 16.666…ms）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rafThrottle</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lock = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lock) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    lock = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.requestAnimationFrame(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      lock = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"请实现一下防抖和节流\"><a href=\"#请实现一下防抖和节流\" class=\"headerlink\" title=\"请实现一下防抖和节流\"></a>请实现一下防抖和节流</h2><h3 id=\"防抖函数\"><a href=\"#防抖函数\" class=\"headerlink\" title=\"防抖函数\"></a>防抖函数</h3><p>debounce 函数返回一个可执行函数。这个可执行函数的作用域链上保存了定时器变量。当重复执行的时候，会先清空掉上次生成的定时器，从而实现延迟执行的效果</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节流函数\"><a href=\"#节流函数\" class=\"headerlink\" title=\"节流函数\"></a>节流函数</h3><p>原理与 防抖函数相同，通过 closure 存储上次执行的时间戳，当前时间戳和之前的时间戳相比较，如果超过约定时间，则执行一次函数。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><h5 id=\"时间戳实现\"><a href=\"#时间戳实现\" class=\"headerlink\" title=\"时间戳实现\"></a>时间戳实现</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只有当上一次调用的时间 与 现在时间的差值 超过了设定的时间 才会再次调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">func, interval</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastTimeStamp = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> curDate = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> diff = curDate - lastTimeStamp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diff &gt; interval) &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      lastTimeStamp = curDate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"requestAnimationFrame-实现\"><a href=\"#requestAnimationFrame-实现\" class=\"headerlink\" title=\"requestAnimationFrame 实现\"></a>requestAnimationFrame 实现</h5><blockquote>\n<p>参考了 ElementUI 图片拖拽部分的源码</p>\n</blockquote>\n<p>实现原理和时间戳实现方法相同，只不过吧延迟 interval 替换为一帧。在屏幕刷新率为 60HZ 的情况下约为 16.7ms 执行一次（1000ms / 60 = 16.666…ms）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rafThrottle</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> lock = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lock) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    lock = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.requestAnimationFrame(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      func.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      lock = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"HTTP - 缓存","toc":true,"date":"2020-08-11T16:00:00.000Z","_content":"\n<img src=\"mindSet.png\" alt=\"http协议脑图\">\n\n## 强缓存\n\n**不会向服务器发送请求**，直接从缓存中读取资源\n\n### 如何判断强缓存是否失效\n\n当浏览器向服务器请求数据的时候，服务器会将数据和缓存的规则返回，在**响应头的 header 中**，有两个字段 **Expires** 和 **Cache-Control**。\n\n### Expires\n\n```http\nexpires: Wed, 11 Sep 2019 16:12:18 GMT\n```\n\n存储资源过期时间戳，在浏览器请求数据的时候，会使用本地时间先和这个时间戳比较，判断是否过期。\n\n### Cache- control （http1.1）：\n\n对于 Expires 如果我手动改变了本地时间，那么 Expires 就没有意义了。为了解决这个问题，**HTTP1.1** 添加了 Cache-Control；\n\n```http\nCache-Control:max-age=7200\n```\n\n> 服务器和客户端说，这个资源缓存只可以存在 7200 秒，在这个时间段之内，你就可以在缓存获取资源。\n\n如果 Expire 和 Cache-control 两者同时出现，则以 Cache-control 为主\n\nCache-control 的额外字段\n\n```http\ncache-control: max-age=3600, s-maxage=31536000\n```\n\n- **Public**：只要为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；\n- **Private(默认值)**：则该资源只能被浏览器缓存。\n- **no-store：**不使用任何缓存，直接向服务器发起请求。\n- **no-cache：**绕开浏览器缓存（每次发起请求不会询问浏览器缓存），而是直接向服务器确认该缓存是够过期。\n\n利用 cache control 提供的字段可以实现一套完整的缓存策略\n<img src=\"cache-control-strategy.png\" alt=\"cache control 缓存策略\">\n\n## 协商缓存\n\n协商缓存流程：\n\n1. 从本地取出数据标识符，向服务器验证是否失效，\n2. 没失效，则从本地取出数据\n3. 失效，从服务器获取新的数据和标识符\n\n### 如何判断协商缓存\n\n协商缓存: 判断**服务端资源**是否有改动，如果有则更新缓存，如果没有则使用缓存\n\n主要通过报文头部 header 中的**Last-Modified**，**If-Modified-Since** 以及**ETag**、**If-None-Match** 字段来进行识别\n\n### Last-Modified & If-Modified-Since(存储时间戳)\n\n浏览器**第一次访问**服务器资源：\n\n- 因为是第一次访问该页面，客户端发请求时，请求头中没有 If-Modified-Since 标签。\n\n- 服务器返回的 HTTP 头标签中有 Last-Modified，告诉客户端页面的最后修改时间。\n\n(**资源没有改变**)浏览器第二次访问服务器资源：\n\n- 客户端发 HTTP 请求时，使用 If-Modified-Since 标签，把上次服务器告诉它的文件最后修改时间返回到服务器端\n- 因为文件没有发生改变,服务器返回 304\n\n**(资源发生改变)**浏览器第三次访问服务器资源\n\n- 客户端发 HTTP 请求时，使用 If-Modified-Since 标签，把上次服务器告诉它的文件最后修改时间返回到服务器端\n- 因为文件发生改变，服务器做如下操作\n  - 状态码：200\n  - header 中带有 Last-modified 告诉客户端页面最新的资源修改时间\n  - body 返回新的内容\n\n缺陷：精度低，只能以秒计时\n\n### Etag & If-None-Match （http1.1，资源唯一标识符）\n\nETag 代表的意思是**标识字符串**。对资源进行内容编码，只有内容被改变，这个编码才不同\n\n请求原理和上面的 Last-Modified 相同\n\n服务端返回\n\n```http\nETag: W/\"2a3b-1602480f459\"\n```\n\n浏览器携带\n\n```http\nIf-None-Match: W/\"2a3b-1602480f459\"\n```\n\n## 缓存位置\n\n缓存位置从上到下：\n\n1. Memory Cache：读取高效，持续时间短\n2. Service Worker：PWA 的实现核心，可以自主控制缓存内容，如何匹配，如何读取\n3. Disk Cache：磁盘缓存，读取速度慢，但是容量和存储时效性都更好\n4. Push Cache：推送缓存，属于 HTTP2 的内容,国内资源太少。。。\n\n## 总结\n\n1. 强缓存优先于协商缓存\n2. 协商缓存失效，返回 200，重新返回资源和缓存标识\n3. 协商缓存生效则返回 304， 继续使用缓存\n","source":"_posts/HTTP-cache.md","raw":"---\ntitle: HTTP - 缓存\ncategories: [网络]\ntags: []\ntoc: true\ndate: 2020/8/12\n---\n\n<img src=\"mindSet.png\" alt=\"http协议脑图\">\n\n## 强缓存\n\n**不会向服务器发送请求**，直接从缓存中读取资源\n\n### 如何判断强缓存是否失效\n\n当浏览器向服务器请求数据的时候，服务器会将数据和缓存的规则返回，在**响应头的 header 中**，有两个字段 **Expires** 和 **Cache-Control**。\n\n### Expires\n\n```http\nexpires: Wed, 11 Sep 2019 16:12:18 GMT\n```\n\n存储资源过期时间戳，在浏览器请求数据的时候，会使用本地时间先和这个时间戳比较，判断是否过期。\n\n### Cache- control （http1.1）：\n\n对于 Expires 如果我手动改变了本地时间，那么 Expires 就没有意义了。为了解决这个问题，**HTTP1.1** 添加了 Cache-Control；\n\n```http\nCache-Control:max-age=7200\n```\n\n> 服务器和客户端说，这个资源缓存只可以存在 7200 秒，在这个时间段之内，你就可以在缓存获取资源。\n\n如果 Expire 和 Cache-control 两者同时出现，则以 Cache-control 为主\n\nCache-control 的额外字段\n\n```http\ncache-control: max-age=3600, s-maxage=31536000\n```\n\n- **Public**：只要为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；\n- **Private(默认值)**：则该资源只能被浏览器缓存。\n- **no-store：**不使用任何缓存，直接向服务器发起请求。\n- **no-cache：**绕开浏览器缓存（每次发起请求不会询问浏览器缓存），而是直接向服务器确认该缓存是够过期。\n\n利用 cache control 提供的字段可以实现一套完整的缓存策略\n<img src=\"cache-control-strategy.png\" alt=\"cache control 缓存策略\">\n\n## 协商缓存\n\n协商缓存流程：\n\n1. 从本地取出数据标识符，向服务器验证是否失效，\n2. 没失效，则从本地取出数据\n3. 失效，从服务器获取新的数据和标识符\n\n### 如何判断协商缓存\n\n协商缓存: 判断**服务端资源**是否有改动，如果有则更新缓存，如果没有则使用缓存\n\n主要通过报文头部 header 中的**Last-Modified**，**If-Modified-Since** 以及**ETag**、**If-None-Match** 字段来进行识别\n\n### Last-Modified & If-Modified-Since(存储时间戳)\n\n浏览器**第一次访问**服务器资源：\n\n- 因为是第一次访问该页面，客户端发请求时，请求头中没有 If-Modified-Since 标签。\n\n- 服务器返回的 HTTP 头标签中有 Last-Modified，告诉客户端页面的最后修改时间。\n\n(**资源没有改变**)浏览器第二次访问服务器资源：\n\n- 客户端发 HTTP 请求时，使用 If-Modified-Since 标签，把上次服务器告诉它的文件最后修改时间返回到服务器端\n- 因为文件没有发生改变,服务器返回 304\n\n**(资源发生改变)**浏览器第三次访问服务器资源\n\n- 客户端发 HTTP 请求时，使用 If-Modified-Since 标签，把上次服务器告诉它的文件最后修改时间返回到服务器端\n- 因为文件发生改变，服务器做如下操作\n  - 状态码：200\n  - header 中带有 Last-modified 告诉客户端页面最新的资源修改时间\n  - body 返回新的内容\n\n缺陷：精度低，只能以秒计时\n\n### Etag & If-None-Match （http1.1，资源唯一标识符）\n\nETag 代表的意思是**标识字符串**。对资源进行内容编码，只有内容被改变，这个编码才不同\n\n请求原理和上面的 Last-Modified 相同\n\n服务端返回\n\n```http\nETag: W/\"2a3b-1602480f459\"\n```\n\n浏览器携带\n\n```http\nIf-None-Match: W/\"2a3b-1602480f459\"\n```\n\n## 缓存位置\n\n缓存位置从上到下：\n\n1. Memory Cache：读取高效，持续时间短\n2. Service Worker：PWA 的实现核心，可以自主控制缓存内容，如何匹配，如何读取\n3. Disk Cache：磁盘缓存，读取速度慢，但是容量和存储时效性都更好\n4. Push Cache：推送缓存，属于 HTTP2 的内容,国内资源太少。。。\n\n## 总结\n\n1. 强缓存优先于协商缓存\n2. 协商缓存失效，返回 200，重新返回资源和缓存标识\n3. 协商缓存生效则返回 304， 继续使用缓存\n","slug":"HTTP-cache","published":1,"updated":"2021-03-12T11:21:15.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ic0008goswbeoo8nz7","content":"<img src=\"mindSet.png\" alt=\"http协议脑图\">\n\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p><strong>不会向服务器发送请求</strong>，直接从缓存中读取资源</p>\n<h3 id=\"如何判断强缓存是否失效\"><a href=\"#如何判断强缓存是否失效\" class=\"headerlink\" title=\"如何判断强缓存是否失效\"></a>如何判断强缓存是否失效</h3><p>当浏览器向服务器请求数据的时候，服务器会将数据和缓存的规则返回，在<strong>响应头的 header 中</strong>，有两个字段 <strong>Expires</strong> 和 <strong>Cache-Control</strong>。</p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">expires</span>: Wed, 11 Sep 2019 16:12:18 GMT</span><br></pre></td></tr></table></figure>\n\n<p>存储资源过期时间戳，在浏览器请求数据的时候，会使用本地时间先和这个时间戳比较，判断是否过期。</p>\n<h3 id=\"Cache-control-（http1-1）：\"><a href=\"#Cache-control-（http1-1）：\" class=\"headerlink\" title=\"Cache- control （http1.1）：\"></a>Cache- control （http1.1）：</h3><p>对于 Expires 如果我手动改变了本地时间，那么 Expires 就没有意义了。为了解决这个问题，<strong>HTTP1.1</strong> 添加了 Cache-Control；</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:max-age=7200</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>服务器和客户端说，这个资源缓存只可以存在 7200 秒，在这个时间段之内，你就可以在缓存获取资源。</p>\n</blockquote>\n<p>如果 Expire 和 Cache-control 两者同时出现，则以 Cache-control 为主</p>\n<p>Cache-control 的额外字段</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cache-control</span>: max-age=3600, s-maxage=31536000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Public</strong>：只要为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；</li>\n<li><strong>Private(默认值)</strong>：则该资源只能被浏览器缓存。</li>\n<li><strong>no-store：</strong>不使用任何缓存，直接向服务器发起请求。</li>\n<li><strong>no-cache：</strong>绕开浏览器缓存（每次发起请求不会询问浏览器缓存），而是直接向服务器确认该缓存是够过期。</li>\n</ul>\n<p>利用 cache control 提供的字段可以实现一套完整的缓存策略<br><img src=\"cache-control-strategy.png\" alt=\"cache control 缓存策略\"></p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>协商缓存流程：</p>\n<ol>\n<li>从本地取出数据标识符，向服务器验证是否失效，</li>\n<li>没失效，则从本地取出数据</li>\n<li>失效，从服务器获取新的数据和标识符</li>\n</ol>\n<h3 id=\"如何判断协商缓存\"><a href=\"#如何判断协商缓存\" class=\"headerlink\" title=\"如何判断协商缓存\"></a>如何判断协商缓存</h3><p>协商缓存: 判断<strong>服务端资源</strong>是否有改动，如果有则更新缓存，如果没有则使用缓存</p>\n<p>主要通过报文头部 header 中的<strong>Last-Modified</strong>，<strong>If-Modified-Since</strong> 以及<strong>ETag</strong>、<strong>If-None-Match</strong> 字段来进行识别</p>\n<h3 id=\"Last-Modified-amp-If-Modified-Since-存储时间戳\"><a href=\"#Last-Modified-amp-If-Modified-Since-存储时间戳\" class=\"headerlink\" title=\"Last-Modified &amp; If-Modified-Since(存储时间戳)\"></a>Last-Modified &amp; If-Modified-Since(存储时间戳)</h3><p>浏览器<strong>第一次访问</strong>服务器资源：</p>\n<ul>\n<li><p>因为是第一次访问该页面，客户端发请求时，请求头中没有 If-Modified-Since 标签。</p>\n</li>\n<li><p>服务器返回的 HTTP 头标签中有 Last-Modified，告诉客户端页面的最后修改时间。</p>\n</li>\n</ul>\n<p>(<strong>资源没有改变</strong>)浏览器第二次访问服务器资源：</p>\n<ul>\n<li>客户端发 HTTP 请求时，使用 If-Modified-Since 标签，把上次服务器告诉它的文件最后修改时间返回到服务器端</li>\n<li>因为文件没有发生改变,服务器返回 304</li>\n</ul>\n<p><strong>(资源发生改变)</strong>浏览器第三次访问服务器资源</p>\n<ul>\n<li>客户端发 HTTP 请求时，使用 If-Modified-Since 标签，把上次服务器告诉它的文件最后修改时间返回到服务器端</li>\n<li>因为文件发生改变，服务器做如下操作<ul>\n<li>状态码：200</li>\n<li>header 中带有 Last-modified 告诉客户端页面最新的资源修改时间</li>\n<li>body 返回新的内容</li>\n</ul>\n</li>\n</ul>\n<p>缺陷：精度低，只能以秒计时</p>\n<h3 id=\"Etag-amp-If-None-Match-（http1-1，资源唯一标识符）\"><a href=\"#Etag-amp-If-None-Match-（http1-1，资源唯一标识符）\" class=\"headerlink\" title=\"Etag &amp; If-None-Match （http1.1，资源唯一标识符）\"></a>Etag &amp; If-None-Match （http1.1，资源唯一标识符）</h3><p>ETag 代表的意思是<strong>标识字符串</strong>。对资源进行内容编码，只有内容被改变，这个编码才不同</p>\n<p>请求原理和上面的 Last-Modified 相同</p>\n<p>服务端返回</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ETag</span>: W/\"2a3b-1602480f459\"</span><br></pre></td></tr></table></figure>\n\n<p>浏览器携带</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">If-None-Match</span>: W/\"2a3b-1602480f459\"</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h2><p>缓存位置从上到下：</p>\n<ol>\n<li>Memory Cache：读取高效，持续时间短</li>\n<li>Service Worker：PWA 的实现核心，可以自主控制缓存内容，如何匹配，如何读取</li>\n<li>Disk Cache：磁盘缓存，读取速度慢，但是容量和存储时效性都更好</li>\n<li>Push Cache：推送缓存，属于 HTTP2 的内容,国内资源太少。。。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>强缓存优先于协商缓存</li>\n<li>协商缓存失效，返回 200，重新返回资源和缓存标识</li>\n<li>协商缓存生效则返回 304， 继续使用缓存</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"mindSet.png\" alt=\"http协议脑图\">\n\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p><strong>不会向服务器发送请求</strong>，直接从缓存中读取资源</p>\n<h3 id=\"如何判断强缓存是否失效\"><a href=\"#如何判断强缓存是否失效\" class=\"headerlink\" title=\"如何判断强缓存是否失效\"></a>如何判断强缓存是否失效</h3><p>当浏览器向服务器请求数据的时候，服务器会将数据和缓存的规则返回，在<strong>响应头的 header 中</strong>，有两个字段 <strong>Expires</strong> 和 <strong>Cache-Control</strong>。</p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h3><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">expires</span>: Wed, 11 Sep 2019 16:12:18 GMT</span><br></pre></td></tr></table></figure>\n\n<p>存储资源过期时间戳，在浏览器请求数据的时候，会使用本地时间先和这个时间戳比较，判断是否过期。</p>\n<h3 id=\"Cache-control-（http1-1）：\"><a href=\"#Cache-control-（http1-1）：\" class=\"headerlink\" title=\"Cache- control （http1.1）：\"></a>Cache- control （http1.1）：</h3><p>对于 Expires 如果我手动改变了本地时间，那么 Expires 就没有意义了。为了解决这个问题，<strong>HTTP1.1</strong> 添加了 Cache-Control；</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control:max-age=7200</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>服务器和客户端说，这个资源缓存只可以存在 7200 秒，在这个时间段之内，你就可以在缓存获取资源。</p>\n</blockquote>\n<p>如果 Expire 和 Cache-control 两者同时出现，则以 Cache-control 为主</p>\n<p>Cache-control 的额外字段</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">cache-control</span>: max-age=3600, s-maxage=31536000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Public</strong>：只要为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；</li>\n<li><strong>Private(默认值)</strong>：则该资源只能被浏览器缓存。</li>\n<li><strong>no-store：</strong>不使用任何缓存，直接向服务器发起请求。</li>\n<li><strong>no-cache：</strong>绕开浏览器缓存（每次发起请求不会询问浏览器缓存），而是直接向服务器确认该缓存是够过期。</li>\n</ul>\n<p>利用 cache control 提供的字段可以实现一套完整的缓存策略<br><img src=\"cache-control-strategy.png\" alt=\"cache control 缓存策略\"></p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>协商缓存流程：</p>\n<ol>\n<li>从本地取出数据标识符，向服务器验证是否失效，</li>\n<li>没失效，则从本地取出数据</li>\n<li>失效，从服务器获取新的数据和标识符</li>\n</ol>\n<h3 id=\"如何判断协商缓存\"><a href=\"#如何判断协商缓存\" class=\"headerlink\" title=\"如何判断协商缓存\"></a>如何判断协商缓存</h3><p>协商缓存: 判断<strong>服务端资源</strong>是否有改动，如果有则更新缓存，如果没有则使用缓存</p>\n<p>主要通过报文头部 header 中的<strong>Last-Modified</strong>，<strong>If-Modified-Since</strong> 以及<strong>ETag</strong>、<strong>If-None-Match</strong> 字段来进行识别</p>\n<h3 id=\"Last-Modified-amp-If-Modified-Since-存储时间戳\"><a href=\"#Last-Modified-amp-If-Modified-Since-存储时间戳\" class=\"headerlink\" title=\"Last-Modified &amp; If-Modified-Since(存储时间戳)\"></a>Last-Modified &amp; If-Modified-Since(存储时间戳)</h3><p>浏览器<strong>第一次访问</strong>服务器资源：</p>\n<ul>\n<li><p>因为是第一次访问该页面，客户端发请求时，请求头中没有 If-Modified-Since 标签。</p>\n</li>\n<li><p>服务器返回的 HTTP 头标签中有 Last-Modified，告诉客户端页面的最后修改时间。</p>\n</li>\n</ul>\n<p>(<strong>资源没有改变</strong>)浏览器第二次访问服务器资源：</p>\n<ul>\n<li>客户端发 HTTP 请求时，使用 If-Modified-Since 标签，把上次服务器告诉它的文件最后修改时间返回到服务器端</li>\n<li>因为文件没有发生改变,服务器返回 304</li>\n</ul>\n<p><strong>(资源发生改变)</strong>浏览器第三次访问服务器资源</p>\n<ul>\n<li>客户端发 HTTP 请求时，使用 If-Modified-Since 标签，把上次服务器告诉它的文件最后修改时间返回到服务器端</li>\n<li>因为文件发生改变，服务器做如下操作<ul>\n<li>状态码：200</li>\n<li>header 中带有 Last-modified 告诉客户端页面最新的资源修改时间</li>\n<li>body 返回新的内容</li>\n</ul>\n</li>\n</ul>\n<p>缺陷：精度低，只能以秒计时</p>\n<h3 id=\"Etag-amp-If-None-Match-（http1-1，资源唯一标识符）\"><a href=\"#Etag-amp-If-None-Match-（http1-1，资源唯一标识符）\" class=\"headerlink\" title=\"Etag &amp; If-None-Match （http1.1，资源唯一标识符）\"></a>Etag &amp; If-None-Match （http1.1，资源唯一标识符）</h3><p>ETag 代表的意思是<strong>标识字符串</strong>。对资源进行内容编码，只有内容被改变，这个编码才不同</p>\n<p>请求原理和上面的 Last-Modified 相同</p>\n<p>服务端返回</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ETag</span>: W/\"2a3b-1602480f459\"</span><br></pre></td></tr></table></figure>\n\n<p>浏览器携带</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">If-None-Match</span>: W/\"2a3b-1602480f459\"</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h2><p>缓存位置从上到下：</p>\n<ol>\n<li>Memory Cache：读取高效，持续时间短</li>\n<li>Service Worker：PWA 的实现核心，可以自主控制缓存内容，如何匹配，如何读取</li>\n<li>Disk Cache：磁盘缓存，读取速度慢，但是容量和存储时效性都更好</li>\n<li>Push Cache：推送缓存，属于 HTTP2 的内容,国内资源太少。。。</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>强缓存优先于协商缓存</li>\n<li>协商缓存失效，返回 200，重新返回资源和缓存标识</li>\n<li>协商缓存生效则返回 304， 继续使用缓存</li>\n</ol>\n"},{"title":"Nodejs-Koa-template","toc":true,"date":"2022-04-16T16:00:00.000Z","_content":"\ngithub 模版地址：[Koa with Typescript](https://github.com/shancw96/koa-ts-template.git)\n\n<!-- more -->\n\n## Writing a Configuration File\n\ntsconfig.json 用于配置 ts，比如覆盖哪些文件，要做哪些校验\n\n```json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"diST\",\n    \"allowJs\": true,\n    \"target\": \"ES6\", // optional：es5, es6,es2020,esnext\n    \"module\": \"commonjs\", // ts module输出的格式，koa基于nodejs，因此选择commonjs\n    \"moduleResolution\": \"node\",\n    \"lib\": [\n      \"es6\"\n    ] /* Specify library files to be included in the compilation. */,\n    \"allowSyntheticDefaultImports\": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,\n    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n> esnext: ES Next simply call the Next version or upcoming version of ES(ECMAScript / JavaScript ).\n>\n> module 的输出可选项:\n>\n>     +  https://www.typescriptlang.org/docs/handbook/modules.html#code-generation-for-modules\n>     +  https://www.typescriptlang.org/tsconfig#module\n>\n> moduleResolution: module 输出策略的细化\n>\n> - https://www.typescriptlang.org/tsconfig#moduleResolution\n\n## 增加 type support\n\n```bash\nyarn add @types/node @types/koa\n```\n\n## 编译\n\ntsc\n\n## 增加环境变量 [dotenv](https://www.npmjs.com/package/dotenv)\n\ndotenv 可以将.env 文件加载到 process.env 中\n\n```bash\nyarn add dotenv\n```\n\n尽可能早的在项目中配置。\n\n```js\nimport dotenv from \"dotenv\";\n\ndotenv.config({ path: \".env\" });\n```\n\n## 增加自动重启\n\nnodemon 用于 nodejs 服务自动重启，当监听到指定的文件夹下文件发生变动后触发\n\n安装\n\n```js\nyarn add -D nodemon\n```\n\n使用\n\npackage.json 增加启动脚本\n\n```js\n{\n  ...\n  \"scripts\": {\n    \"watch-server\": \"nodemon --ignore tests/ --watch src -e ts,tsx --exec ts-node src/index.ts\"\n  }\n}\n```\n","source":"_posts/Nodejs-Koa.md","raw":"---\ntitle: Nodejs-Koa-template\ncategories: [后端]\ntags: [nodejs, koa, ts]\ntoc: true\ndate: 2022/4/17\n---\n\ngithub 模版地址：[Koa with Typescript](https://github.com/shancw96/koa-ts-template.git)\n\n<!-- more -->\n\n## Writing a Configuration File\n\ntsconfig.json 用于配置 ts，比如覆盖哪些文件，要做哪些校验\n\n```json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"diST\",\n    \"allowJs\": true,\n    \"target\": \"ES6\", // optional：es5, es6,es2020,esnext\n    \"module\": \"commonjs\", // ts module输出的格式，koa基于nodejs，因此选择commonjs\n    \"moduleResolution\": \"node\",\n    \"lib\": [\n      \"es6\"\n    ] /* Specify library files to be included in the compilation. */,\n    \"allowSyntheticDefaultImports\": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,\n    \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n> esnext: ES Next simply call the Next version or upcoming version of ES(ECMAScript / JavaScript ).\n>\n> module 的输出可选项:\n>\n>     +  https://www.typescriptlang.org/docs/handbook/modules.html#code-generation-for-modules\n>     +  https://www.typescriptlang.org/tsconfig#module\n>\n> moduleResolution: module 输出策略的细化\n>\n> - https://www.typescriptlang.org/tsconfig#moduleResolution\n\n## 增加 type support\n\n```bash\nyarn add @types/node @types/koa\n```\n\n## 编译\n\ntsc\n\n## 增加环境变量 [dotenv](https://www.npmjs.com/package/dotenv)\n\ndotenv 可以将.env 文件加载到 process.env 中\n\n```bash\nyarn add dotenv\n```\n\n尽可能早的在项目中配置。\n\n```js\nimport dotenv from \"dotenv\";\n\ndotenv.config({ path: \".env\" });\n```\n\n## 增加自动重启\n\nnodemon 用于 nodejs 服务自动重启，当监听到指定的文件夹下文件发生变动后触发\n\n安装\n\n```js\nyarn add -D nodemon\n```\n\n使用\n\npackage.json 增加启动脚本\n\n```js\n{\n  ...\n  \"scripts\": {\n    \"watch-server\": \"nodemon --ignore tests/ --watch src -e ts,tsx --exec ts-node src/index.ts\"\n  }\n}\n```\n","slug":"Nodejs-Koa","published":1,"updated":"2022-04-18T14:18:16.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7id000agoswgiqpdby6","content":"<p>github 模版地址：<a href=\"https://github.com/shancw96/koa-ts-template.git\" target=\"_blank\" rel=\"noopener\">Koa with Typescript</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Writing-a-Configuration-File\"><a href=\"#Writing-a-Configuration-File\" class=\"headerlink\" title=\"Writing a Configuration File\"></a>Writing a Configuration File</h2><p>tsconfig.json 用于配置 ts，比如覆盖哪些文件，要做哪些校验</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"outDir\"</span>: <span class=\"string\">\"diST\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"allowJs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"ES6\"</span>, <span class=\"comment\">// optional：es5, es6,es2020,esnext</span></span><br><span class=\"line\">    <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>, <span class=\"comment\">// ts module输出的格式，koa基于nodejs，因此选择commonjs</span></span><br><span class=\"line\">    <span class=\"attr\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lib\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"es6\"</span></span><br><span class=\"line\">    ] <span class=\"comment\">/* Specify library files to be included in the compilation. */</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span> <span class=\"comment\">/* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"esModuleInterop\"</span>: <span class=\"literal\">true</span> <span class=\"comment\">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"include\"</span>: [<span class=\"string\">\"src/**/*\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>esnext: ES Next simply call the Next version or upcoming version of ES(ECMAScript / JavaScript ).</p>\n<p>module 的输出可选项:</p>\n<pre><code>+  https://www.typescriptlang.org/docs/handbook/modules.html#code-generation-for-modules\n+  https://www.typescriptlang.org/tsconfig#module</code></pre><p>moduleResolution: module 输出策略的细化</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/tsconfig#moduleResolution\" target=\"_blank\" rel=\"noopener\">https://www.typescriptlang.org/tsconfig#moduleResolution</a></li>\n</ul>\n</blockquote>\n<h2 id=\"增加-type-support\"><a href=\"#增加-type-support\" class=\"headerlink\" title=\"增加 type support\"></a>增加 type support</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @types/node @types/koa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>tsc</p>\n<h2 id=\"增加环境变量-dotenv\"><a href=\"#增加环境变量-dotenv\" class=\"headerlink\" title=\"增加环境变量 dotenv\"></a>增加环境变量 <a href=\"https://www.npmjs.com/package/dotenv\" target=\"_blank\" rel=\"noopener\">dotenv</a></h2><p>dotenv 可以将.env 文件加载到 process.env 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add dotenv</span><br></pre></td></tr></table></figure>\n\n<p>尽可能早的在项目中配置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">\"dotenv\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dotenv.config(&#123; <span class=\"attr\">path</span>: <span class=\"string\">\".env\"</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加自动重启\"><a href=\"#增加自动重启\" class=\"headerlink\" title=\"增加自动重启\"></a>增加自动重启</h2><p>nodemon 用于 nodejs 服务自动重启，当监听到指定的文件夹下文件发生变动后触发</p>\n<p>安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D nodemon</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<p>package.json 增加启动脚本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"watch-server\"</span>: <span class=\"string\">\"nodemon --ignore tests/ --watch src -e ts,tsx --exec ts-node src/index.ts\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>github 模版地址：<a href=\"https://github.com/shancw96/koa-ts-template.git\" target=\"_blank\" rel=\"noopener\">Koa with Typescript</a></p>","more":"<h2 id=\"Writing-a-Configuration-File\"><a href=\"#Writing-a-Configuration-File\" class=\"headerlink\" title=\"Writing a Configuration File\"></a>Writing a Configuration File</h2><p>tsconfig.json 用于配置 ts，比如覆盖哪些文件，要做哪些校验</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"outDir\"</span>: <span class=\"string\">\"diST\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"allowJs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"ES6\"</span>, <span class=\"comment\">// optional：es5, es6,es2020,esnext</span></span><br><span class=\"line\">    <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>, <span class=\"comment\">// ts module输出的格式，koa基于nodejs，因此选择commonjs</span></span><br><span class=\"line\">    <span class=\"attr\">\"moduleResolution\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"lib\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"es6\"</span></span><br><span class=\"line\">    ] <span class=\"comment\">/* Specify library files to be included in the compilation. */</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"allowSyntheticDefaultImports\"</span>: <span class=\"literal\">true</span> <span class=\"comment\">/* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"esModuleInterop\"</span>: <span class=\"literal\">true</span> <span class=\"comment\">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"include\"</span>: [<span class=\"string\">\"src/**/*\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>esnext: ES Next simply call the Next version or upcoming version of ES(ECMAScript / JavaScript ).</p>\n<p>module 的输出可选项:</p>\n<pre><code>+  https://www.typescriptlang.org/docs/handbook/modules.html#code-generation-for-modules\n+  https://www.typescriptlang.org/tsconfig#module</code></pre><p>moduleResolution: module 输出策略的细化</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/tsconfig#moduleResolution\" target=\"_blank\" rel=\"noopener\">https://www.typescriptlang.org/tsconfig#moduleResolution</a></li>\n</ul>\n</blockquote>\n<h2 id=\"增加-type-support\"><a href=\"#增加-type-support\" class=\"headerlink\" title=\"增加 type support\"></a>增加 type support</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @types/node @types/koa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>tsc</p>\n<h2 id=\"增加环境变量-dotenv\"><a href=\"#增加环境变量-dotenv\" class=\"headerlink\" title=\"增加环境变量 dotenv\"></a>增加环境变量 <a href=\"https://www.npmjs.com/package/dotenv\" target=\"_blank\" rel=\"noopener\">dotenv</a></h2><p>dotenv 可以将.env 文件加载到 process.env 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add dotenv</span><br></pre></td></tr></table></figure>\n\n<p>尽可能早的在项目中配置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dotenv <span class=\"keyword\">from</span> <span class=\"string\">\"dotenv\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">dotenv.config(&#123; <span class=\"attr\">path</span>: <span class=\"string\">\".env\"</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加自动重启\"><a href=\"#增加自动重启\" class=\"headerlink\" title=\"增加自动重启\"></a>增加自动重启</h2><p>nodemon 用于 nodejs 服务自动重启，当监听到指定的文件夹下文件发生变动后触发</p>\n<p>安装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D nodemon</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<p>package.json 增加启动脚本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"watch-server\"</span>: <span class=\"string\">\"nodemon --ignore tests/ --watch src -e ts,tsx --exec ts-node src/index.ts\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"python learn","toc":true,"date":"2022-05-03T16:00:00.000Z","_content":"\n兴趣爱好，学点 python 用来写算法\n\n资源：\n\nw3schools: https://www.w3schools.com/python/python_conditions.asp\n\npythoncheatsheet: https://www.pythoncheatsheet.org/#Python-Basics\n\n<!-- more -->\n\n## Loop\n\nThe provided code stub reads and integer, ,n from STDIN. For all non-negative integers i<n, print n^2.\n\n```python\nprint(*[num**2 for num in range(n)], sep='\\n')\n```\n\n知识点\n\n- arbitrary argument list.\n\n类似于 js 的解构赋值 `...[argument]`\n\n```python\n>>> def concat(*args, sep=\"/\"):\n...     return sep.join(args)\n...\n>>> concat(\"earth\", \"mars\", \"venus\")\n'earth/mars/venus'\n>>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n'earth.mars.venus'\n```\n\n- list comprehension\n\n  实现 map 的效果\n\n  ```python\n  def myfunc(n):\n    return len(n)\n\n  x = map(myfunc, ('apple', 'banana', 'cherry'))\n  ```\n\n  ```python\n  >>> doubled_odds = map(lambda n: n * 2, filter(lambda n: n % 2 == 1, numbers))\n  >>> doubled_odds = [n * 2 for n in numbers if n % 2 == 1]\n  ```\n\n## Operators\n\nhttps://www.w3schools.com/python/python_operators.asp\n\n重要的几个记录\n\n逻辑操作符\n\n| Operator | Description                                             | Example               | Try it                                                                                 |\n| :------- | :------------------------------------------------------ | :-------------------- | :------------------------------------------------------------------------------------- |\n| and      | Returns True if both statements are true                | x < 5 and x < 10      | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical1) |\n| or       | Returns True if one of the statements is true           | x < 5 or x < 4        | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical2) |\n| not      | Reverse the result, returns False if the result is true | not(x < 5 and x < 10) | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical3) |\n\n相等判断\n\n| Operator | Description                                            | Example    | Try it                                                                                  |\n| :------- | :----------------------------------------------------- | :--------- | :-------------------------------------------------------------------------------------- |\n| is       | Returns True if both variables are the same object     | x is y     | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_identity1) |\n| is not   | Returns True if both variables are not the same object | x is not y | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_identity2) |\n\n属于性判断\n\n| Operator | Description                                                                      | Example    | Try it                                                                                    |\n| :------- | :------------------------------------------------------------------------------- | :--------- | :---------------------------------------------------------------------------------------- |\n| in       | Returns True if a sequence with the specified value is present in the object     | x in y     | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_membership1) |\n| not in   | Returns True if a sequence with the specified value is not present in the object | x not in y | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_membership2) |\n\n算数运算\n\n| Operator | Name                        | Example           | Try it                                                                                 |\n| :------- | :-------------------------- | :---------------- | :------------------------------------------------------------------------------------- |\n| /        | Division                    | 13/3 = 4.333      | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_div)      |\n| %        | Modulus 取余                | 13%3 = 4.333      | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_mod)      |\n| \\*\\*     | Exponentiation 次方         | 13\\*\\*2 == 13\\*13 | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_exp)      |\n| //       | Floor division 向下取整除法 | 13/3 = 4          | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_floordiv) |\n","source":"_posts/Python-Learn.md","raw":"---\ntitle: python learn\ncategories: [python]\ntags: []\ntoc: true\ndate: 2022/5/4\n---\n\n兴趣爱好，学点 python 用来写算法\n\n资源：\n\nw3schools: https://www.w3schools.com/python/python_conditions.asp\n\npythoncheatsheet: https://www.pythoncheatsheet.org/#Python-Basics\n\n<!-- more -->\n\n## Loop\n\nThe provided code stub reads and integer, ,n from STDIN. For all non-negative integers i<n, print n^2.\n\n```python\nprint(*[num**2 for num in range(n)], sep='\\n')\n```\n\n知识点\n\n- arbitrary argument list.\n\n类似于 js 的解构赋值 `...[argument]`\n\n```python\n>>> def concat(*args, sep=\"/\"):\n...     return sep.join(args)\n...\n>>> concat(\"earth\", \"mars\", \"venus\")\n'earth/mars/venus'\n>>> concat(\"earth\", \"mars\", \"venus\", sep=\".\")\n'earth.mars.venus'\n```\n\n- list comprehension\n\n  实现 map 的效果\n\n  ```python\n  def myfunc(n):\n    return len(n)\n\n  x = map(myfunc, ('apple', 'banana', 'cherry'))\n  ```\n\n  ```python\n  >>> doubled_odds = map(lambda n: n * 2, filter(lambda n: n % 2 == 1, numbers))\n  >>> doubled_odds = [n * 2 for n in numbers if n % 2 == 1]\n  ```\n\n## Operators\n\nhttps://www.w3schools.com/python/python_operators.asp\n\n重要的几个记录\n\n逻辑操作符\n\n| Operator | Description                                             | Example               | Try it                                                                                 |\n| :------- | :------------------------------------------------------ | :-------------------- | :------------------------------------------------------------------------------------- |\n| and      | Returns True if both statements are true                | x < 5 and x < 10      | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical1) |\n| or       | Returns True if one of the statements is true           | x < 5 or x < 4        | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical2) |\n| not      | Reverse the result, returns False if the result is true | not(x < 5 and x < 10) | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical3) |\n\n相等判断\n\n| Operator | Description                                            | Example    | Try it                                                                                  |\n| :------- | :----------------------------------------------------- | :--------- | :-------------------------------------------------------------------------------------- |\n| is       | Returns True if both variables are the same object     | x is y     | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_identity1) |\n| is not   | Returns True if both variables are not the same object | x is not y | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_identity2) |\n\n属于性判断\n\n| Operator | Description                                                                      | Example    | Try it                                                                                    |\n| :------- | :------------------------------------------------------------------------------- | :--------- | :---------------------------------------------------------------------------------------- |\n| in       | Returns True if a sequence with the specified value is present in the object     | x in y     | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_membership1) |\n| not in   | Returns True if a sequence with the specified value is not present in the object | x not in y | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_membership2) |\n\n算数运算\n\n| Operator | Name                        | Example           | Try it                                                                                 |\n| :------- | :-------------------------- | :---------------- | :------------------------------------------------------------------------------------- |\n| /        | Division                    | 13/3 = 4.333      | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_div)      |\n| %        | Modulus 取余                | 13%3 = 4.333      | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_mod)      |\n| \\*\\*     | Exponentiation 次方         | 13\\*\\*2 == 13\\*13 | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_exp)      |\n| //       | Floor division 向下取整除法 | 13/3 = 4          | [Try it »](https://www.w3schools.com/python/trypython.asp?filename=demo_oper_floordiv) |\n","slug":"Python-Learn","published":1,"updated":"2022-05-04T14:02:37.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ig000fgosw6hcpebfs","content":"<p>兴趣爱好，学点 python 用来写算法</p>\n<p>资源：</p>\n<p>w3schools: <a href=\"https://www.w3schools.com/python/python_conditions.asp\" target=\"_blank\" rel=\"noopener\">https://www.w3schools.com/python/python_conditions.asp</a></p>\n<p>pythoncheatsheet: <a href=\"https://www.pythoncheatsheet.org/#Python-Basics\" target=\"_blank\" rel=\"noopener\">https://www.pythoncheatsheet.org/#Python-Basics</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Loop\"><a href=\"#Loop\" class=\"headerlink\" title=\"Loop\"></a>Loop</h2><p>The provided code stub reads and integer, ,n from STDIN. For all non-negative integers i&lt;n, print n^2.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(*[num**<span class=\"number\">2</span> <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(n)], sep=<span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>知识点</p>\n<ul>\n<li>arbitrary argument list.</li>\n</ul>\n<p>类似于 js 的解构赋值 <code>...[argument]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concat</span><span class=\"params\">(*args, sep=<span class=\"string\">\"/\"</span>)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> sep.join(args)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>concat(<span class=\"string\">\"earth\"</span>, <span class=\"string\">\"mars\"</span>, <span class=\"string\">\"venus\"</span>)</span><br><span class=\"line\"><span class=\"string\">'earth/mars/venus'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>concat(<span class=\"string\">\"earth\"</span>, <span class=\"string\">\"mars\"</span>, <span class=\"string\">\"venus\"</span>, sep=<span class=\"string\">\".\"</span>)</span><br><span class=\"line\"><span class=\"string\">'earth.mars.venus'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>list comprehension</p>\n<p>实现 map 的效果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> len(n)</span><br><span class=\"line\"></span><br><span class=\"line\">x = map(myfunc, (<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'cherry'</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>doubled_odds = map(<span class=\"keyword\">lambda</span> n: n * <span class=\"number\">2</span>, filter(<span class=\"keyword\">lambda</span> n: n % <span class=\"number\">2</span> == <span class=\"number\">1</span>, numbers))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>doubled_odds = [n * <span class=\"number\">2</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h2><p><a href=\"https://www.w3schools.com/python/python_operators.asp\" target=\"_blank\" rel=\"noopener\">https://www.w3schools.com/python/python_operators.asp</a></p>\n<p>重要的几个记录</p>\n<p>逻辑操作符</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Try it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">and</td>\n<td align=\"left\">Returns True if both statements are true</td>\n<td align=\"left\">x &lt; 5 and x &lt; 10</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical1\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">or</td>\n<td align=\"left\">Returns True if one of the statements is true</td>\n<td align=\"left\">x &lt; 5 or x &lt; 4</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical2\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">not</td>\n<td align=\"left\">Reverse the result, returns False if the result is true</td>\n<td align=\"left\">not(x &lt; 5 and x &lt; 10)</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical3\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n</tbody></table>\n<p>相等判断</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Try it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">is</td>\n<td align=\"left\">Returns True if both variables are the same object</td>\n<td align=\"left\">x is y</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_identity1\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">is not</td>\n<td align=\"left\">Returns True if both variables are not the same object</td>\n<td align=\"left\">x is not y</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_identity2\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n</tbody></table>\n<p>属于性判断</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Try it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">in</td>\n<td align=\"left\">Returns True if a sequence with the specified value is present in the object</td>\n<td align=\"left\">x in y</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_membership1\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">not in</td>\n<td align=\"left\">Returns True if a sequence with the specified value is not present in the object</td>\n<td align=\"left\">x not in y</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_membership2\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n</tbody></table>\n<p>算数运算</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Name</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Try it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/</td>\n<td align=\"left\">Division</td>\n<td align=\"left\">13/3 = 4.333</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_div\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">Modulus 取余</td>\n<td align=\"left\">13%3 = 4.333</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_mod\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">**</td>\n<td align=\"left\">Exponentiation 次方</td>\n<td align=\"left\">13**2 == 13*13</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_exp\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">//</td>\n<td align=\"left\">Floor division 向下取整除法</td>\n<td align=\"left\">13/3 = 4</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_floordiv\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>兴趣爱好，学点 python 用来写算法</p>\n<p>资源：</p>\n<p>w3schools: <a href=\"https://www.w3schools.com/python/python_conditions.asp\" target=\"_blank\" rel=\"noopener\">https://www.w3schools.com/python/python_conditions.asp</a></p>\n<p>pythoncheatsheet: <a href=\"https://www.pythoncheatsheet.org/#Python-Basics\" target=\"_blank\" rel=\"noopener\">https://www.pythoncheatsheet.org/#Python-Basics</a></p>","more":"<h2 id=\"Loop\"><a href=\"#Loop\" class=\"headerlink\" title=\"Loop\"></a>Loop</h2><p>The provided code stub reads and integer, ,n from STDIN. For all non-negative integers i&lt;n, print n^2.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(*[num**<span class=\"number\">2</span> <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(n)], sep=<span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>知识点</p>\n<ul>\n<li>arbitrary argument list.</li>\n</ul>\n<p>类似于 js 的解构赋值 <code>...[argument]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">concat</span><span class=\"params\">(*args, sep=<span class=\"string\">\"/\"</span>)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> sep.join(args)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>concat(<span class=\"string\">\"earth\"</span>, <span class=\"string\">\"mars\"</span>, <span class=\"string\">\"venus\"</span>)</span><br><span class=\"line\"><span class=\"string\">'earth/mars/venus'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>concat(<span class=\"string\">\"earth\"</span>, <span class=\"string\">\"mars\"</span>, <span class=\"string\">\"venus\"</span>, sep=<span class=\"string\">\".\"</span>)</span><br><span class=\"line\"><span class=\"string\">'earth.mars.venus'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>list comprehension</p>\n<p>实现 map 的效果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> len(n)</span><br><span class=\"line\"></span><br><span class=\"line\">x = map(myfunc, (<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'cherry'</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>doubled_odds = map(<span class=\"keyword\">lambda</span> n: n * <span class=\"number\">2</span>, filter(<span class=\"keyword\">lambda</span> n: n % <span class=\"number\">2</span> == <span class=\"number\">1</span>, numbers))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>doubled_odds = [n * <span class=\"number\">2</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Operators\"><a href=\"#Operators\" class=\"headerlink\" title=\"Operators\"></a>Operators</h2><p><a href=\"https://www.w3schools.com/python/python_operators.asp\" target=\"_blank\" rel=\"noopener\">https://www.w3schools.com/python/python_operators.asp</a></p>\n<p>重要的几个记录</p>\n<p>逻辑操作符</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Try it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">and</td>\n<td align=\"left\">Returns True if both statements are true</td>\n<td align=\"left\">x &lt; 5 and x &lt; 10</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical1\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">or</td>\n<td align=\"left\">Returns True if one of the statements is true</td>\n<td align=\"left\">x &lt; 5 or x &lt; 4</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical2\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">not</td>\n<td align=\"left\">Reverse the result, returns False if the result is true</td>\n<td align=\"left\">not(x &lt; 5 and x &lt; 10)</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_logical3\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n</tbody></table>\n<p>相等判断</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Try it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">is</td>\n<td align=\"left\">Returns True if both variables are the same object</td>\n<td align=\"left\">x is y</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_identity1\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">is not</td>\n<td align=\"left\">Returns True if both variables are not the same object</td>\n<td align=\"left\">x is not y</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_identity2\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n</tbody></table>\n<p>属于性判断</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Try it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">in</td>\n<td align=\"left\">Returns True if a sequence with the specified value is present in the object</td>\n<td align=\"left\">x in y</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_membership1\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">not in</td>\n<td align=\"left\">Returns True if a sequence with the specified value is not present in the object</td>\n<td align=\"left\">x not in y</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_membership2\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n</tbody></table>\n<p>算数运算</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operator</th>\n<th align=\"left\">Name</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Try it</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">/</td>\n<td align=\"left\">Division</td>\n<td align=\"left\">13/3 = 4.333</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_div\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">Modulus 取余</td>\n<td align=\"left\">13%3 = 4.333</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_mod\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">**</td>\n<td align=\"left\">Exponentiation 次方</td>\n<td align=\"left\">13**2 == 13*13</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_exp\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n<tr>\n<td align=\"left\">//</td>\n<td align=\"left\">Floor division 向下取整除法</td>\n<td align=\"left\">13/3 = 4</td>\n<td align=\"left\"><a href=\"https://www.w3schools.com/python/trypython.asp?filename=demo_oper_floordiv\" target=\"_blank\" rel=\"noopener\">Try it »</a></td>\n</tr>\n</tbody></table>"},{"_content":"# React - custom hook - useHotKeys\n\n## 描述：\n\nreact 自定义hook，实现浏览器监听特定组合按键，比如 `ctrl+ m`, `ctrl + k + j + a + b`，0依赖。点击[在线预览: codesandbox](https://codesandbox.io/s/chakraui-ts-components-forked-iy9nkq?file=/src/index.tsx)\n\n## 使用：\n\n```js\n// 自定义按键\nuseHotKey('ctrl+shift+m', () => {\n\t/*happy Coding*/\n})\n// 无视空格\nuseHotKey('ctrl + k', () => {\n\t/*happy Coding 2*/\n})\n\n// 自定义keycode映射\nconst HotkeyDict: { [key: string]: number } = {\n  \"backspace\": 8,\n  \"tab\": 9,\n  \"enter\": 13,\n  \"shift\": 16,\n  \"ctrl\": 17,\n  \"alt\": 18,\n  \"command\": 91,\n  \"caps-lock\": 20,\n  \"escape\": 27,\n  \"space\": 32,\n  \"page-down\": 34,\n  \"end\": 35,\n  \"arrow-left\": 37,\n  \"arrow-up\": 38,\n  \"arrow-right\": 39,\n  \"arrow-down\": 40,\n  \"insert\": 45,\n  \"delete\": 46,\n  \"0\": 48,\n  \"1\": 49,\n  \"2\": 50,\n  \"3\": 51,\n  \"4\": 52,\n  \"5\": 53,\n  \"6\": 54,\n  \"7\": 55,\n  \"8\": 56,\n  \"9\": 57,\n  \"numpad-0\": 96,\n  \"numpad-1\": 97,\n  \"numpad-2\": 98,\n  \"numpad-3\": 99,\n  \"numpad-4\": 100,\n  \"numpad-5\": 101,\n  \"numpad-6\": 102,\n  \"numpad-7\": 103,\n  \"numpad-8\": 104,\n  \"numpad-9\": 105,\n  \"a\": 65,\n  \"b\": 66,\n  \"c\": 67,\n  \"d\": 68,\n  \"e\": 69,\n  \"f\": 70,\n  \"g\": 71,\n  \"h\": 72,\n  \"i\": 73,\n  \"j\": 74,\n  \"k\": 75,\n  \"l\": 76,\n  \"m\": 77,\n  \"n\": 78,\n  \"o\": 79,\n  \"p\": 80,\n  \"q\": 81,\n  \"r\": 82,\n  \"s\": 83,\n  \"t\": 84,\n  \"u\": 85,\n  \"v\": 86,\n  \"w\": 87,\n  \"x\": 88,\n  \"y\": 89,\n  \"z\": 90\n}\n// 自定义按键映射\nuseHotKey(\n  'ctrl + k',\n  () => {},\n  hotKeyDict\n)\n```\n\n## 源码 - ts版本：\n\n```ts\nimport { useEffect, useMemo } from \"react\";\n\nconst HotkeyDict: { [key: string]: number } = {\n  \"backspace\": 8,\n  \"tab\": 9,\n  \"enter\": 13,\n  \"shift\": 16,\n  \"ctrl\": 17,\n  \"alt\": 18,\n  \"command\": 91,\n  \"caps-lock\": 20,\n  \"escape\": 27,\n  \"space\": 32,\n  \"page-down\": 34,\n  \"end\": 35,\n  \"arrow-left\": 37,\n  \"arrow-up\": 38,\n  \"arrow-right\": 39,\n  \"arrow-down\": 40,\n  \"insert\": 45,\n  \"delete\": 46,\n  \"0\": 48,\n  \"1\": 49,\n  \"2\": 50,\n  \"3\": 51,\n  \"4\": 52,\n  \"5\": 53,\n  \"6\": 54,\n  \"7\": 55,\n  \"8\": 56,\n  \"9\": 57,\n  \"numpad-0\": 96,\n  \"numpad-1\": 97,\n  \"numpad-2\": 98,\n  \"numpad-3\": 99,\n  \"numpad-4\": 100,\n  \"numpad-5\": 101,\n  \"numpad-6\": 102,\n  \"numpad-7\": 103,\n  \"numpad-8\": 104,\n  \"numpad-9\": 105,\n  \"a\": 65,\n  \"b\": 66,\n  \"c\": 67,\n  \"d\": 68,\n  \"e\": 69,\n  \"f\": 70,\n  \"g\": 71,\n  \"h\": 72,\n  \"i\": 73,\n  \"j\": 74,\n  \"k\": 75,\n  \"l\": 76,\n  \"m\": 77,\n  \"n\": 78,\n  \"o\": 79,\n  \"p\": 80,\n  \"q\": 81,\n  \"r\": 82,\n  \"s\": 83,\n  \"t\": 84,\n  \"u\": 85,\n  \"v\": 86,\n  \"w\": 87,\n  \"x\": 88,\n  \"y\": 89,\n  \"z\": 90\n}\n\nclass KeyManager {\n  queue: Set<number>\n  target: number[]\n  constructor(combineAlias: string, hotKeyDict: { [key: string]: number } = HotkeyDict) {\n    this.queue = new Set()\n    this.target = KeyManager.extractKeyAlias(combineAlias, hotKeyDict);\n  }\n  get isValid(): boolean {\n    return this.target.every(targetKeyCode => this.queue.has(targetKeyCode)) && this.queue.size === this.target.length;\n  }\n  public add(keyCode: number) {\n    this.queue.add(keyCode)\n  }\n  public remove(keyCode: number) {\n    this.queue.delete(keyCode)\n  }\n  public reset() {\n    this.queue.clear();\n  }\n\n  static extractKeyAlias(combineAlias: string, hotKeyDict: { [key: string]: number }) {\n    return combineAlias.replace(/\\s/g, '').split('+').map(keyAlias => {\n      if (isNaN(hotKeyDict[keyAlias])) {\n        throw new Error('nonsupport key alias')\n      }\n      return hotKeyDict[keyAlias]\n    });\n  }\n}\n/**\n * \n * @param combineAlias key + key + key + ... + key\n * @param callback 回调函数\n */\nexport function useHotKey(combineAlias: string, callback: () => void): KeyManager {\n  const keyManager = useMemo(() => {\n    return new KeyManager(combineAlias);\n  }, [combineAlias]);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown)\n    document.addEventListener(\"keyup\", handleKeyUp)\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown)\n      document.removeEventListener(\"keyup\", handleKeyUp)\n    }\n    function handleKeyDown(e: KeyboardEvent) {\n      keyManager.add(e.keyCode);\n      if (keyManager.isValid) {\n        callback?.();\n      }\n    }\n    function handleKeyUp(e: KeyboardEvent) {\n      keyManager.remove(e.keyCode);\n    }\n  }, [keyManager, callback])\n  return keyManager;\n}\n```\n\n","source":"_posts/React - custom hook - useHotKeys.md","raw":"# React - custom hook - useHotKeys\n\n## 描述：\n\nreact 自定义hook，实现浏览器监听特定组合按键，比如 `ctrl+ m`, `ctrl + k + j + a + b`，0依赖。点击[在线预览: codesandbox](https://codesandbox.io/s/chakraui-ts-components-forked-iy9nkq?file=/src/index.tsx)\n\n## 使用：\n\n```js\n// 自定义按键\nuseHotKey('ctrl+shift+m', () => {\n\t/*happy Coding*/\n})\n// 无视空格\nuseHotKey('ctrl + k', () => {\n\t/*happy Coding 2*/\n})\n\n// 自定义keycode映射\nconst HotkeyDict: { [key: string]: number } = {\n  \"backspace\": 8,\n  \"tab\": 9,\n  \"enter\": 13,\n  \"shift\": 16,\n  \"ctrl\": 17,\n  \"alt\": 18,\n  \"command\": 91,\n  \"caps-lock\": 20,\n  \"escape\": 27,\n  \"space\": 32,\n  \"page-down\": 34,\n  \"end\": 35,\n  \"arrow-left\": 37,\n  \"arrow-up\": 38,\n  \"arrow-right\": 39,\n  \"arrow-down\": 40,\n  \"insert\": 45,\n  \"delete\": 46,\n  \"0\": 48,\n  \"1\": 49,\n  \"2\": 50,\n  \"3\": 51,\n  \"4\": 52,\n  \"5\": 53,\n  \"6\": 54,\n  \"7\": 55,\n  \"8\": 56,\n  \"9\": 57,\n  \"numpad-0\": 96,\n  \"numpad-1\": 97,\n  \"numpad-2\": 98,\n  \"numpad-3\": 99,\n  \"numpad-4\": 100,\n  \"numpad-5\": 101,\n  \"numpad-6\": 102,\n  \"numpad-7\": 103,\n  \"numpad-8\": 104,\n  \"numpad-9\": 105,\n  \"a\": 65,\n  \"b\": 66,\n  \"c\": 67,\n  \"d\": 68,\n  \"e\": 69,\n  \"f\": 70,\n  \"g\": 71,\n  \"h\": 72,\n  \"i\": 73,\n  \"j\": 74,\n  \"k\": 75,\n  \"l\": 76,\n  \"m\": 77,\n  \"n\": 78,\n  \"o\": 79,\n  \"p\": 80,\n  \"q\": 81,\n  \"r\": 82,\n  \"s\": 83,\n  \"t\": 84,\n  \"u\": 85,\n  \"v\": 86,\n  \"w\": 87,\n  \"x\": 88,\n  \"y\": 89,\n  \"z\": 90\n}\n// 自定义按键映射\nuseHotKey(\n  'ctrl + k',\n  () => {},\n  hotKeyDict\n)\n```\n\n## 源码 - ts版本：\n\n```ts\nimport { useEffect, useMemo } from \"react\";\n\nconst HotkeyDict: { [key: string]: number } = {\n  \"backspace\": 8,\n  \"tab\": 9,\n  \"enter\": 13,\n  \"shift\": 16,\n  \"ctrl\": 17,\n  \"alt\": 18,\n  \"command\": 91,\n  \"caps-lock\": 20,\n  \"escape\": 27,\n  \"space\": 32,\n  \"page-down\": 34,\n  \"end\": 35,\n  \"arrow-left\": 37,\n  \"arrow-up\": 38,\n  \"arrow-right\": 39,\n  \"arrow-down\": 40,\n  \"insert\": 45,\n  \"delete\": 46,\n  \"0\": 48,\n  \"1\": 49,\n  \"2\": 50,\n  \"3\": 51,\n  \"4\": 52,\n  \"5\": 53,\n  \"6\": 54,\n  \"7\": 55,\n  \"8\": 56,\n  \"9\": 57,\n  \"numpad-0\": 96,\n  \"numpad-1\": 97,\n  \"numpad-2\": 98,\n  \"numpad-3\": 99,\n  \"numpad-4\": 100,\n  \"numpad-5\": 101,\n  \"numpad-6\": 102,\n  \"numpad-7\": 103,\n  \"numpad-8\": 104,\n  \"numpad-9\": 105,\n  \"a\": 65,\n  \"b\": 66,\n  \"c\": 67,\n  \"d\": 68,\n  \"e\": 69,\n  \"f\": 70,\n  \"g\": 71,\n  \"h\": 72,\n  \"i\": 73,\n  \"j\": 74,\n  \"k\": 75,\n  \"l\": 76,\n  \"m\": 77,\n  \"n\": 78,\n  \"o\": 79,\n  \"p\": 80,\n  \"q\": 81,\n  \"r\": 82,\n  \"s\": 83,\n  \"t\": 84,\n  \"u\": 85,\n  \"v\": 86,\n  \"w\": 87,\n  \"x\": 88,\n  \"y\": 89,\n  \"z\": 90\n}\n\nclass KeyManager {\n  queue: Set<number>\n  target: number[]\n  constructor(combineAlias: string, hotKeyDict: { [key: string]: number } = HotkeyDict) {\n    this.queue = new Set()\n    this.target = KeyManager.extractKeyAlias(combineAlias, hotKeyDict);\n  }\n  get isValid(): boolean {\n    return this.target.every(targetKeyCode => this.queue.has(targetKeyCode)) && this.queue.size === this.target.length;\n  }\n  public add(keyCode: number) {\n    this.queue.add(keyCode)\n  }\n  public remove(keyCode: number) {\n    this.queue.delete(keyCode)\n  }\n  public reset() {\n    this.queue.clear();\n  }\n\n  static extractKeyAlias(combineAlias: string, hotKeyDict: { [key: string]: number }) {\n    return combineAlias.replace(/\\s/g, '').split('+').map(keyAlias => {\n      if (isNaN(hotKeyDict[keyAlias])) {\n        throw new Error('nonsupport key alias')\n      }\n      return hotKeyDict[keyAlias]\n    });\n  }\n}\n/**\n * \n * @param combineAlias key + key + key + ... + key\n * @param callback 回调函数\n */\nexport function useHotKey(combineAlias: string, callback: () => void): KeyManager {\n  const keyManager = useMemo(() => {\n    return new KeyManager(combineAlias);\n  }, [combineAlias]);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown)\n    document.addEventListener(\"keyup\", handleKeyUp)\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown)\n      document.removeEventListener(\"keyup\", handleKeyUp)\n    }\n    function handleKeyDown(e: KeyboardEvent) {\n      keyManager.add(e.keyCode);\n      if (keyManager.isValid) {\n        callback?.();\n      }\n    }\n    function handleKeyUp(e: KeyboardEvent) {\n      keyManager.remove(e.keyCode);\n    }\n  }, [keyManager, callback])\n  return keyManager;\n}\n```\n\n","slug":"React - custom hook - useHotKeys","published":1,"date":"2022-05-28T14:22:36.738Z","updated":"2022-05-28T14:22:36.738Z","title":"React - custom hook - useHotKeys","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ih000ggosw0rau0wl9","content":"<h1 id=\"React-custom-hook-useHotKeys\"><a href=\"#React-custom-hook-useHotKeys\" class=\"headerlink\" title=\"React - custom hook - useHotKeys\"></a>React - custom hook - useHotKeys</h1><h2 id=\"描述：\"><a href=\"#描述：\" class=\"headerlink\" title=\"描述：\"></a>描述：</h2><p>react 自定义hook，实现浏览器监听特定组合按键，比如 <code>ctrl+ m</code>, <code>ctrl + k + j + a + b</code>，0依赖。点击<a href=\"https://codesandbox.io/s/chakraui-ts-components-forked-iy9nkq?file=/src/index.tsx\" target=\"_blank\" rel=\"noopener\">在线预览: codesandbox</a></p>\n<h2 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义按键</span></span><br><span class=\"line\">useHotKey(<span class=\"string\">'ctrl+shift+m'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*happy Coding*/</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 无视空格</span></span><br><span class=\"line\">useHotKey(<span class=\"string\">'ctrl + k'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*happy Coding 2*/</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义keycode映射</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HotkeyDict: &#123; [key: string]: number &#125; = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"backspace\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"string\">\"tab\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">  <span class=\"string\">\"enter\"</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">  <span class=\"string\">\"shift\"</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ctrl\"</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">  <span class=\"string\">\"alt\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"string\">\"command\"</span>: <span class=\"number\">91</span>,</span><br><span class=\"line\">  <span class=\"string\">\"caps-lock\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"string\">\"escape\"</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"string\">\"space\"</span>: <span class=\"number\">32</span>,</span><br><span class=\"line\">  <span class=\"string\">\"page-down\"</span>: <span class=\"number\">34</span>,</span><br><span class=\"line\">  <span class=\"string\">\"end\"</span>: <span class=\"number\">35</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-left\"</span>: <span class=\"number\">37</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-up\"</span>: <span class=\"number\">38</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-right\"</span>: <span class=\"number\">39</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-down\"</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">  <span class=\"string\">\"insert\"</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">  <span class=\"string\">\"delete\"</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">  <span class=\"string\">\"0\"</span>: <span class=\"number\">48</span>,</span><br><span class=\"line\">  <span class=\"string\">\"1\"</span>: <span class=\"number\">49</span>,</span><br><span class=\"line\">  <span class=\"string\">\"2\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">  <span class=\"string\">\"3\"</span>: <span class=\"number\">51</span>,</span><br><span class=\"line\">  <span class=\"string\">\"4\"</span>: <span class=\"number\">52</span>,</span><br><span class=\"line\">  <span class=\"string\">\"5\"</span>: <span class=\"number\">53</span>,</span><br><span class=\"line\">  <span class=\"string\">\"6\"</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">  <span class=\"string\">\"7\"</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">  <span class=\"string\">\"8\"</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">  <span class=\"string\">\"9\"</span>: <span class=\"number\">57</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-0\"</span>: <span class=\"number\">96</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-1\"</span>: <span class=\"number\">97</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-2\"</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-3\"</span>: <span class=\"number\">99</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-4\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-5\"</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-6\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-7\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-8\"</span>: <span class=\"number\">104</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-9\"</span>: <span class=\"number\">105</span>,</span><br><span class=\"line\">  <span class=\"string\">\"a\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>: <span class=\"number\">66</span>,</span><br><span class=\"line\">  <span class=\"string\">\"c\"</span>: <span class=\"number\">67</span>,</span><br><span class=\"line\">  <span class=\"string\">\"d\"</span>: <span class=\"number\">68</span>,</span><br><span class=\"line\">  <span class=\"string\">\"e\"</span>: <span class=\"number\">69</span>,</span><br><span class=\"line\">  <span class=\"string\">\"f\"</span>: <span class=\"number\">70</span>,</span><br><span class=\"line\">  <span class=\"string\">\"g\"</span>: <span class=\"number\">71</span>,</span><br><span class=\"line\">  <span class=\"string\">\"h\"</span>: <span class=\"number\">72</span>,</span><br><span class=\"line\">  <span class=\"string\">\"i\"</span>: <span class=\"number\">73</span>,</span><br><span class=\"line\">  <span class=\"string\">\"j\"</span>: <span class=\"number\">74</span>,</span><br><span class=\"line\">  <span class=\"string\">\"k\"</span>: <span class=\"number\">75</span>,</span><br><span class=\"line\">  <span class=\"string\">\"l\"</span>: <span class=\"number\">76</span>,</span><br><span class=\"line\">  <span class=\"string\">\"m\"</span>: <span class=\"number\">77</span>,</span><br><span class=\"line\">  <span class=\"string\">\"n\"</span>: <span class=\"number\">78</span>,</span><br><span class=\"line\">  <span class=\"string\">\"o\"</span>: <span class=\"number\">79</span>,</span><br><span class=\"line\">  <span class=\"string\">\"p\"</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"string\">\"q\"</span>: <span class=\"number\">81</span>,</span><br><span class=\"line\">  <span class=\"string\">\"r\"</span>: <span class=\"number\">82</span>,</span><br><span class=\"line\">  <span class=\"string\">\"s\"</span>: <span class=\"number\">83</span>,</span><br><span class=\"line\">  <span class=\"string\">\"t\"</span>: <span class=\"number\">84</span>,</span><br><span class=\"line\">  <span class=\"string\">\"u\"</span>: <span class=\"number\">85</span>,</span><br><span class=\"line\">  <span class=\"string\">\"v\"</span>: <span class=\"number\">86</span>,</span><br><span class=\"line\">  <span class=\"string\">\"w\"</span>: <span class=\"number\">87</span>,</span><br><span class=\"line\">  <span class=\"string\">\"x\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">  <span class=\"string\">\"y\"</span>: <span class=\"number\">89</span>,</span><br><span class=\"line\">  <span class=\"string\">\"z\"</span>: <span class=\"number\">90</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自定义按键映射</span></span><br><span class=\"line\">useHotKey(</span><br><span class=\"line\">  <span class=\"string\">'ctrl + k'</span>,</span><br><span class=\"line\">  () =&gt; &#123;&#125;,</span><br><span class=\"line\">  hotKeyDict</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码-ts版本：\"><a href=\"#源码-ts版本：\" class=\"headerlink\" title=\"源码 - ts版本：\"></a>源码 - ts版本：</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HotkeyDict: &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span> &#125; = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"backspace\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"string\">\"tab\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">  <span class=\"string\">\"enter\"</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">  <span class=\"string\">\"shift\"</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ctrl\"</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">  <span class=\"string\">\"alt\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"string\">\"command\"</span>: <span class=\"number\">91</span>,</span><br><span class=\"line\">  <span class=\"string\">\"caps-lock\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"string\">\"escape\"</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"string\">\"space\"</span>: <span class=\"number\">32</span>,</span><br><span class=\"line\">  <span class=\"string\">\"page-down\"</span>: <span class=\"number\">34</span>,</span><br><span class=\"line\">  <span class=\"string\">\"end\"</span>: <span class=\"number\">35</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-left\"</span>: <span class=\"number\">37</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-up\"</span>: <span class=\"number\">38</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-right\"</span>: <span class=\"number\">39</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-down\"</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">  <span class=\"string\">\"insert\"</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">  <span class=\"string\">\"delete\"</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">  <span class=\"string\">\"0\"</span>: <span class=\"number\">48</span>,</span><br><span class=\"line\">  <span class=\"string\">\"1\"</span>: <span class=\"number\">49</span>,</span><br><span class=\"line\">  <span class=\"string\">\"2\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">  <span class=\"string\">\"3\"</span>: <span class=\"number\">51</span>,</span><br><span class=\"line\">  <span class=\"string\">\"4\"</span>: <span class=\"number\">52</span>,</span><br><span class=\"line\">  <span class=\"string\">\"5\"</span>: <span class=\"number\">53</span>,</span><br><span class=\"line\">  <span class=\"string\">\"6\"</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">  <span class=\"string\">\"7\"</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">  <span class=\"string\">\"8\"</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">  <span class=\"string\">\"9\"</span>: <span class=\"number\">57</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-0\"</span>: <span class=\"number\">96</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-1\"</span>: <span class=\"number\">97</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-2\"</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-3\"</span>: <span class=\"number\">99</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-4\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-5\"</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-6\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-7\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-8\"</span>: <span class=\"number\">104</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-9\"</span>: <span class=\"number\">105</span>,</span><br><span class=\"line\">  <span class=\"string\">\"a\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>: <span class=\"number\">66</span>,</span><br><span class=\"line\">  <span class=\"string\">\"c\"</span>: <span class=\"number\">67</span>,</span><br><span class=\"line\">  <span class=\"string\">\"d\"</span>: <span class=\"number\">68</span>,</span><br><span class=\"line\">  <span class=\"string\">\"e\"</span>: <span class=\"number\">69</span>,</span><br><span class=\"line\">  <span class=\"string\">\"f\"</span>: <span class=\"number\">70</span>,</span><br><span class=\"line\">  <span class=\"string\">\"g\"</span>: <span class=\"number\">71</span>,</span><br><span class=\"line\">  <span class=\"string\">\"h\"</span>: <span class=\"number\">72</span>,</span><br><span class=\"line\">  <span class=\"string\">\"i\"</span>: <span class=\"number\">73</span>,</span><br><span class=\"line\">  <span class=\"string\">\"j\"</span>: <span class=\"number\">74</span>,</span><br><span class=\"line\">  <span class=\"string\">\"k\"</span>: <span class=\"number\">75</span>,</span><br><span class=\"line\">  <span class=\"string\">\"l\"</span>: <span class=\"number\">76</span>,</span><br><span class=\"line\">  <span class=\"string\">\"m\"</span>: <span class=\"number\">77</span>,</span><br><span class=\"line\">  <span class=\"string\">\"n\"</span>: <span class=\"number\">78</span>,</span><br><span class=\"line\">  <span class=\"string\">\"o\"</span>: <span class=\"number\">79</span>,</span><br><span class=\"line\">  <span class=\"string\">\"p\"</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"string\">\"q\"</span>: <span class=\"number\">81</span>,</span><br><span class=\"line\">  <span class=\"string\">\"r\"</span>: <span class=\"number\">82</span>,</span><br><span class=\"line\">  <span class=\"string\">\"s\"</span>: <span class=\"number\">83</span>,</span><br><span class=\"line\">  <span class=\"string\">\"t\"</span>: <span class=\"number\">84</span>,</span><br><span class=\"line\">  <span class=\"string\">\"u\"</span>: <span class=\"number\">85</span>,</span><br><span class=\"line\">  <span class=\"string\">\"v\"</span>: <span class=\"number\">86</span>,</span><br><span class=\"line\">  <span class=\"string\">\"w\"</span>: <span class=\"number\">87</span>,</span><br><span class=\"line\">  <span class=\"string\">\"x\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">  <span class=\"string\">\"y\"</span>: <span class=\"number\">89</span>,</span><br><span class=\"line\">  <span class=\"string\">\"z\"</span>: <span class=\"number\">90</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> KeyManager &#123;</span><br><span class=\"line\">  queue: Set&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">  target: <span class=\"built_in\">number</span>[]</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">combineAlias: <span class=\"built_in\">string</span>, hotKeyDict: &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span> &#125; = HotkeyDict</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = <span class=\"keyword\">new</span> Set()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = KeyManager.extractKeyAlias(combineAlias, hotKeyDict);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> isValid(): <span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.target.every(<span class=\"function\"><span class=\"params\">targetKeyCode</span> =&gt;</span> <span class=\"keyword\">this</span>.queue.has(targetKeyCode)) &amp;&amp; <span class=\"keyword\">this</span>.queue.size === <span class=\"keyword\">this</span>.target.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> add(keyCode: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.add(keyCode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> remove(keyCode: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.delete(keyCode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> reset() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> extractKeyAlias(combineAlias: <span class=\"built_in\">string</span>, hotKeyDict: &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> combineAlias.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>).split(<span class=\"string\">'+'</span>).map(<span class=\"function\"><span class=\"params\">keyAlias</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(hotKeyDict[keyAlias])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'nonsupport key alias'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> hotKeyDict[keyAlias]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param combineAlias key + key + key + ... + key</span></span><br><span class=\"line\"><span class=\"comment\"> * @param callback 回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useHotKey</span>(<span class=\"params\">combineAlias: <span class=\"built_in\">string</span>, callback: () =&gt; <span class=\"built_in\">void</span></span>): <span class=\"title\">KeyManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyManager = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyManager(combineAlias);</span><br><span class=\"line\">  &#125;, [combineAlias]);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"keydown\"</span>, handleKeyDown)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"keyup\"</span>, handleKeyUp)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"keydown\"</span>, handleKeyDown)</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"keyup\"</span>, handleKeyUp)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleKeyDown</span>(<span class=\"params\">e: KeyboardEvent</span>) </span>&#123;</span><br><span class=\"line\">      keyManager.add(e.keyCode);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (keyManager.isValid) &#123;</span><br><span class=\"line\">        callback?.();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleKeyUp</span>(<span class=\"params\">e: KeyboardEvent</span>) </span>&#123;</span><br><span class=\"line\">      keyManager.remove(e.keyCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [keyManager, callback])</span><br><span class=\"line\">  <span class=\"keyword\">return</span> keyManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-custom-hook-useHotKeys\"><a href=\"#React-custom-hook-useHotKeys\" class=\"headerlink\" title=\"React - custom hook - useHotKeys\"></a>React - custom hook - useHotKeys</h1><h2 id=\"描述：\"><a href=\"#描述：\" class=\"headerlink\" title=\"描述：\"></a>描述：</h2><p>react 自定义hook，实现浏览器监听特定组合按键，比如 <code>ctrl+ m</code>, <code>ctrl + k + j + a + b</code>，0依赖。点击<a href=\"https://codesandbox.io/s/chakraui-ts-components-forked-iy9nkq?file=/src/index.tsx\" target=\"_blank\" rel=\"noopener\">在线预览: codesandbox</a></p>\n<h2 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义按键</span></span><br><span class=\"line\">useHotKey(<span class=\"string\">'ctrl+shift+m'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*happy Coding*/</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 无视空格</span></span><br><span class=\"line\">useHotKey(<span class=\"string\">'ctrl + k'</span>, () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*happy Coding 2*/</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义keycode映射</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> HotkeyDict: &#123; [key: string]: number &#125; = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"backspace\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"string\">\"tab\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">  <span class=\"string\">\"enter\"</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">  <span class=\"string\">\"shift\"</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ctrl\"</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">  <span class=\"string\">\"alt\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"string\">\"command\"</span>: <span class=\"number\">91</span>,</span><br><span class=\"line\">  <span class=\"string\">\"caps-lock\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"string\">\"escape\"</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"string\">\"space\"</span>: <span class=\"number\">32</span>,</span><br><span class=\"line\">  <span class=\"string\">\"page-down\"</span>: <span class=\"number\">34</span>,</span><br><span class=\"line\">  <span class=\"string\">\"end\"</span>: <span class=\"number\">35</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-left\"</span>: <span class=\"number\">37</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-up\"</span>: <span class=\"number\">38</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-right\"</span>: <span class=\"number\">39</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-down\"</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">  <span class=\"string\">\"insert\"</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">  <span class=\"string\">\"delete\"</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">  <span class=\"string\">\"0\"</span>: <span class=\"number\">48</span>,</span><br><span class=\"line\">  <span class=\"string\">\"1\"</span>: <span class=\"number\">49</span>,</span><br><span class=\"line\">  <span class=\"string\">\"2\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">  <span class=\"string\">\"3\"</span>: <span class=\"number\">51</span>,</span><br><span class=\"line\">  <span class=\"string\">\"4\"</span>: <span class=\"number\">52</span>,</span><br><span class=\"line\">  <span class=\"string\">\"5\"</span>: <span class=\"number\">53</span>,</span><br><span class=\"line\">  <span class=\"string\">\"6\"</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">  <span class=\"string\">\"7\"</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">  <span class=\"string\">\"8\"</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">  <span class=\"string\">\"9\"</span>: <span class=\"number\">57</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-0\"</span>: <span class=\"number\">96</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-1\"</span>: <span class=\"number\">97</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-2\"</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-3\"</span>: <span class=\"number\">99</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-4\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-5\"</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-6\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-7\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-8\"</span>: <span class=\"number\">104</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-9\"</span>: <span class=\"number\">105</span>,</span><br><span class=\"line\">  <span class=\"string\">\"a\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>: <span class=\"number\">66</span>,</span><br><span class=\"line\">  <span class=\"string\">\"c\"</span>: <span class=\"number\">67</span>,</span><br><span class=\"line\">  <span class=\"string\">\"d\"</span>: <span class=\"number\">68</span>,</span><br><span class=\"line\">  <span class=\"string\">\"e\"</span>: <span class=\"number\">69</span>,</span><br><span class=\"line\">  <span class=\"string\">\"f\"</span>: <span class=\"number\">70</span>,</span><br><span class=\"line\">  <span class=\"string\">\"g\"</span>: <span class=\"number\">71</span>,</span><br><span class=\"line\">  <span class=\"string\">\"h\"</span>: <span class=\"number\">72</span>,</span><br><span class=\"line\">  <span class=\"string\">\"i\"</span>: <span class=\"number\">73</span>,</span><br><span class=\"line\">  <span class=\"string\">\"j\"</span>: <span class=\"number\">74</span>,</span><br><span class=\"line\">  <span class=\"string\">\"k\"</span>: <span class=\"number\">75</span>,</span><br><span class=\"line\">  <span class=\"string\">\"l\"</span>: <span class=\"number\">76</span>,</span><br><span class=\"line\">  <span class=\"string\">\"m\"</span>: <span class=\"number\">77</span>,</span><br><span class=\"line\">  <span class=\"string\">\"n\"</span>: <span class=\"number\">78</span>,</span><br><span class=\"line\">  <span class=\"string\">\"o\"</span>: <span class=\"number\">79</span>,</span><br><span class=\"line\">  <span class=\"string\">\"p\"</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"string\">\"q\"</span>: <span class=\"number\">81</span>,</span><br><span class=\"line\">  <span class=\"string\">\"r\"</span>: <span class=\"number\">82</span>,</span><br><span class=\"line\">  <span class=\"string\">\"s\"</span>: <span class=\"number\">83</span>,</span><br><span class=\"line\">  <span class=\"string\">\"t\"</span>: <span class=\"number\">84</span>,</span><br><span class=\"line\">  <span class=\"string\">\"u\"</span>: <span class=\"number\">85</span>,</span><br><span class=\"line\">  <span class=\"string\">\"v\"</span>: <span class=\"number\">86</span>,</span><br><span class=\"line\">  <span class=\"string\">\"w\"</span>: <span class=\"number\">87</span>,</span><br><span class=\"line\">  <span class=\"string\">\"x\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">  <span class=\"string\">\"y\"</span>: <span class=\"number\">89</span>,</span><br><span class=\"line\">  <span class=\"string\">\"z\"</span>: <span class=\"number\">90</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自定义按键映射</span></span><br><span class=\"line\">useHotKey(</span><br><span class=\"line\">  <span class=\"string\">'ctrl + k'</span>,</span><br><span class=\"line\">  () =&gt; &#123;&#125;,</span><br><span class=\"line\">  hotKeyDict</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码-ts版本：\"><a href=\"#源码-ts版本：\" class=\"headerlink\" title=\"源码 - ts版本：\"></a>源码 - ts版本：</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useEffect, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HotkeyDict: &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span> &#125; = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"backspace\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"string\">\"tab\"</span>: <span class=\"number\">9</span>,</span><br><span class=\"line\">  <span class=\"string\">\"enter\"</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">  <span class=\"string\">\"shift\"</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ctrl\"</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">  <span class=\"string\">\"alt\"</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"string\">\"command\"</span>: <span class=\"number\">91</span>,</span><br><span class=\"line\">  <span class=\"string\">\"caps-lock\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"string\">\"escape\"</span>: <span class=\"number\">27</span>,</span><br><span class=\"line\">  <span class=\"string\">\"space\"</span>: <span class=\"number\">32</span>,</span><br><span class=\"line\">  <span class=\"string\">\"page-down\"</span>: <span class=\"number\">34</span>,</span><br><span class=\"line\">  <span class=\"string\">\"end\"</span>: <span class=\"number\">35</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-left\"</span>: <span class=\"number\">37</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-up\"</span>: <span class=\"number\">38</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-right\"</span>: <span class=\"number\">39</span>,</span><br><span class=\"line\">  <span class=\"string\">\"arrow-down\"</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">  <span class=\"string\">\"insert\"</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">  <span class=\"string\">\"delete\"</span>: <span class=\"number\">46</span>,</span><br><span class=\"line\">  <span class=\"string\">\"0\"</span>: <span class=\"number\">48</span>,</span><br><span class=\"line\">  <span class=\"string\">\"1\"</span>: <span class=\"number\">49</span>,</span><br><span class=\"line\">  <span class=\"string\">\"2\"</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">  <span class=\"string\">\"3\"</span>: <span class=\"number\">51</span>,</span><br><span class=\"line\">  <span class=\"string\">\"4\"</span>: <span class=\"number\">52</span>,</span><br><span class=\"line\">  <span class=\"string\">\"5\"</span>: <span class=\"number\">53</span>,</span><br><span class=\"line\">  <span class=\"string\">\"6\"</span>: <span class=\"number\">54</span>,</span><br><span class=\"line\">  <span class=\"string\">\"7\"</span>: <span class=\"number\">55</span>,</span><br><span class=\"line\">  <span class=\"string\">\"8\"</span>: <span class=\"number\">56</span>,</span><br><span class=\"line\">  <span class=\"string\">\"9\"</span>: <span class=\"number\">57</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-0\"</span>: <span class=\"number\">96</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-1\"</span>: <span class=\"number\">97</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-2\"</span>: <span class=\"number\">98</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-3\"</span>: <span class=\"number\">99</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-4\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-5\"</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-6\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-7\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-8\"</span>: <span class=\"number\">104</span>,</span><br><span class=\"line\">  <span class=\"string\">\"numpad-9\"</span>: <span class=\"number\">105</span>,</span><br><span class=\"line\">  <span class=\"string\">\"a\"</span>: <span class=\"number\">65</span>,</span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>: <span class=\"number\">66</span>,</span><br><span class=\"line\">  <span class=\"string\">\"c\"</span>: <span class=\"number\">67</span>,</span><br><span class=\"line\">  <span class=\"string\">\"d\"</span>: <span class=\"number\">68</span>,</span><br><span class=\"line\">  <span class=\"string\">\"e\"</span>: <span class=\"number\">69</span>,</span><br><span class=\"line\">  <span class=\"string\">\"f\"</span>: <span class=\"number\">70</span>,</span><br><span class=\"line\">  <span class=\"string\">\"g\"</span>: <span class=\"number\">71</span>,</span><br><span class=\"line\">  <span class=\"string\">\"h\"</span>: <span class=\"number\">72</span>,</span><br><span class=\"line\">  <span class=\"string\">\"i\"</span>: <span class=\"number\">73</span>,</span><br><span class=\"line\">  <span class=\"string\">\"j\"</span>: <span class=\"number\">74</span>,</span><br><span class=\"line\">  <span class=\"string\">\"k\"</span>: <span class=\"number\">75</span>,</span><br><span class=\"line\">  <span class=\"string\">\"l\"</span>: <span class=\"number\">76</span>,</span><br><span class=\"line\">  <span class=\"string\">\"m\"</span>: <span class=\"number\">77</span>,</span><br><span class=\"line\">  <span class=\"string\">\"n\"</span>: <span class=\"number\">78</span>,</span><br><span class=\"line\">  <span class=\"string\">\"o\"</span>: <span class=\"number\">79</span>,</span><br><span class=\"line\">  <span class=\"string\">\"p\"</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"string\">\"q\"</span>: <span class=\"number\">81</span>,</span><br><span class=\"line\">  <span class=\"string\">\"r\"</span>: <span class=\"number\">82</span>,</span><br><span class=\"line\">  <span class=\"string\">\"s\"</span>: <span class=\"number\">83</span>,</span><br><span class=\"line\">  <span class=\"string\">\"t\"</span>: <span class=\"number\">84</span>,</span><br><span class=\"line\">  <span class=\"string\">\"u\"</span>: <span class=\"number\">85</span>,</span><br><span class=\"line\">  <span class=\"string\">\"v\"</span>: <span class=\"number\">86</span>,</span><br><span class=\"line\">  <span class=\"string\">\"w\"</span>: <span class=\"number\">87</span>,</span><br><span class=\"line\">  <span class=\"string\">\"x\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">  <span class=\"string\">\"y\"</span>: <span class=\"number\">89</span>,</span><br><span class=\"line\">  <span class=\"string\">\"z\"</span>: <span class=\"number\">90</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> KeyManager &#123;</span><br><span class=\"line\">  queue: Set&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">  target: <span class=\"built_in\">number</span>[]</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">combineAlias: <span class=\"built_in\">string</span>, hotKeyDict: &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span> &#125; = HotkeyDict</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = <span class=\"keyword\">new</span> Set()</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = KeyManager.extractKeyAlias(combineAlias, hotKeyDict);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> isValid(): <span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.target.every(<span class=\"function\"><span class=\"params\">targetKeyCode</span> =&gt;</span> <span class=\"keyword\">this</span>.queue.has(targetKeyCode)) &amp;&amp; <span class=\"keyword\">this</span>.queue.size === <span class=\"keyword\">this</span>.target.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> add(keyCode: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.add(keyCode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> remove(keyCode: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.delete(keyCode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> reset() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> extractKeyAlias(combineAlias: <span class=\"built_in\">string</span>, hotKeyDict: &#123; [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> combineAlias.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>).split(<span class=\"string\">'+'</span>).map(<span class=\"function\"><span class=\"params\">keyAlias</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(hotKeyDict[keyAlias])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'nonsupport key alias'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> hotKeyDict[keyAlias]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param combineAlias key + key + key + ... + key</span></span><br><span class=\"line\"><span class=\"comment\"> * @param callback 回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useHotKey</span>(<span class=\"params\">combineAlias: <span class=\"built_in\">string</span>, callback: () =&gt; <span class=\"built_in\">void</span></span>): <span class=\"title\">KeyManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyManager = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyManager(combineAlias);</span><br><span class=\"line\">  &#125;, [combineAlias]);</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"keydown\"</span>, handleKeyDown)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"keyup\"</span>, handleKeyUp)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"keydown\"</span>, handleKeyDown)</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"keyup\"</span>, handleKeyUp)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleKeyDown</span>(<span class=\"params\">e: KeyboardEvent</span>) </span>&#123;</span><br><span class=\"line\">      keyManager.add(e.keyCode);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (keyManager.isValid) &#123;</span><br><span class=\"line\">        callback?.();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleKeyUp</span>(<span class=\"params\">e: KeyboardEvent</span>) </span>&#123;</span><br><span class=\"line\">      keyManager.remove(e.keyCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [keyManager, callback])</span><br><span class=\"line\">  <span class=\"keyword\">return</span> keyManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"React multiple entry points","toc":true,"date":"2020-09-10T16:00:00.000Z","_content":"\n如题，本文介绍了 create-react-app 生成的 react 项目，如何在不 eject webpack 的情况下，配置多入口页面。\n\n使用场景：在原有项目结构基础上，以较小的改动，增加新的独立应用。并且此应用的依赖完全独立。\n\n<!-- more -->\n\n## 需要使用到的 package\n\n- [customize-cra](https://github.com/arackaf/customize-cra): Override webpack configurations for create-react-app 2.0\n- [react-app-rewire-multiple-entry](https://github.com/Derek-Hu/react-app-rewire-multiple-entry): Support Multiple Entries in Create-React-App\n\n## 实现\n\n[codesandbox demo](https://codesandbox.io/s/jrbsc?file=/config-overrides.js)\n\n`config-overwrides.js`\n\n```diff\nconst {\n+  override,\n} = require('customize-cra');\n+ const multipleEntry = require('react-app-rewire-multiple-entry')([\n+   // default entry\n+   {\n+     entry: 'src/index.tsx',\n+     template: 'public/index.html',\n+     outPath: '/index.html'\n+   },\n+   // third part entry below\n+   {\n+     entry: 'src/entry-points/map.tsx',\n+     template: 'public/mobile-map.html',\n+     outPath: '/mobile-map.html'\n+   }\n+ ]);\n\n\nmodule.exports = {\n   // The Webpack config to use when compiling your react app for development or production.\n   webpack: override(\n+    multipleEntry.addMultiEntry,\n   ),\n   devtool: 'eval-source-map',\n};\n\n```\n\n配置说明：\n\n- entry: 入口文件，默认为`src/index[.ts/tsx/js]`\n- template: html 模版，默认为 public 目录下的 index.html\n- outPath：通过 url 访问的方式，比如 `/mobile-map.html`，通过 url 访问方式为：`localhost:你的端口号/mobile-map.html`\n","source":"_posts/React-CRA-multiple-entry.md","raw":"---\ntitle: React multiple entry points\ncategories: [前端]\ntags: [react, webpack]\ntoc: true\ndate: 2020/9/11\n---\n\n如题，本文介绍了 create-react-app 生成的 react 项目，如何在不 eject webpack 的情况下，配置多入口页面。\n\n使用场景：在原有项目结构基础上，以较小的改动，增加新的独立应用。并且此应用的依赖完全独立。\n\n<!-- more -->\n\n## 需要使用到的 package\n\n- [customize-cra](https://github.com/arackaf/customize-cra): Override webpack configurations for create-react-app 2.0\n- [react-app-rewire-multiple-entry](https://github.com/Derek-Hu/react-app-rewire-multiple-entry): Support Multiple Entries in Create-React-App\n\n## 实现\n\n[codesandbox demo](https://codesandbox.io/s/jrbsc?file=/config-overrides.js)\n\n`config-overwrides.js`\n\n```diff\nconst {\n+  override,\n} = require('customize-cra');\n+ const multipleEntry = require('react-app-rewire-multiple-entry')([\n+   // default entry\n+   {\n+     entry: 'src/index.tsx',\n+     template: 'public/index.html',\n+     outPath: '/index.html'\n+   },\n+   // third part entry below\n+   {\n+     entry: 'src/entry-points/map.tsx',\n+     template: 'public/mobile-map.html',\n+     outPath: '/mobile-map.html'\n+   }\n+ ]);\n\n\nmodule.exports = {\n   // The Webpack config to use when compiling your react app for development or production.\n   webpack: override(\n+    multipleEntry.addMultiEntry,\n   ),\n   devtool: 'eval-source-map',\n};\n\n```\n\n配置说明：\n\n- entry: 入口文件，默认为`src/index[.ts/tsx/js]`\n- template: html 模版，默认为 public 目录下的 index.html\n- outPath：通过 url 访问的方式，比如 `/mobile-map.html`，通过 url 访问方式为：`localhost:你的端口号/mobile-map.html`\n","slug":"React-CRA-multiple-entry","published":1,"updated":"2022-05-30T05:57:11.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ij000kgoswcan1a70e","content":"<p>如题，本文介绍了 create-react-app 生成的 react 项目，如何在不 eject webpack 的情况下，配置多入口页面。</p>\n<p>使用场景：在原有项目结构基础上，以较小的改动，增加新的独立应用。并且此应用的依赖完全独立。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"需要使用到的-package\"><a href=\"#需要使用到的-package\" class=\"headerlink\" title=\"需要使用到的 package\"></a>需要使用到的 package</h2><ul>\n<li><a href=\"https://github.com/arackaf/customize-cra\" target=\"_blank\" rel=\"noopener\">customize-cra</a>: Override webpack configurations for create-react-app 2.0</li>\n<li><a href=\"https://github.com/Derek-Hu/react-app-rewire-multiple-entry\" target=\"_blank\" rel=\"noopener\">react-app-rewire-multiple-entry</a>: Support Multiple Entries in Create-React-App</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><a href=\"https://codesandbox.io/s/jrbsc?file=/config-overrides.js\" target=\"_blank\" rel=\"noopener\">codesandbox demo</a></p>\n<p><code>config-overwrides.js</code></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;</span><br><span class=\"line\"><span class=\"addition\">+  override,</span></span><br><span class=\"line\">&#125; = require('customize-cra');</span><br><span class=\"line\"><span class=\"addition\">+ const multipleEntry = require('react-app-rewire-multiple-entry')([</span></span><br><span class=\"line\"><span class=\"addition\">+   // default entry</span></span><br><span class=\"line\"><span class=\"addition\">+   &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     entry: 'src/index.tsx',</span></span><br><span class=\"line\"><span class=\"addition\">+     template: 'public/index.html',</span></span><br><span class=\"line\"><span class=\"addition\">+     outPath: '/index.html'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+   // third part entry below</span></span><br><span class=\"line\"><span class=\"addition\">+   &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     entry: 'src/entry-points/map.tsx',</span></span><br><span class=\"line\"><span class=\"addition\">+     template: 'public/mobile-map.html',</span></span><br><span class=\"line\"><span class=\"addition\">+     outPath: '/mobile-map.html'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+ ]);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">   // The Webpack config to use when compiling your react app for development or production.</span><br><span class=\"line\">   webpack: override(</span><br><span class=\"line\"><span class=\"addition\">+    multipleEntry.addMultiEntry,</span></span><br><span class=\"line\">   ),</span><br><span class=\"line\">   devtool: 'eval-source-map',</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>配置说明：</p>\n<ul>\n<li>entry: 入口文件，默认为<code>src/index[.ts/tsx/js]</code></li>\n<li>template: html 模版，默认为 public 目录下的 index.html</li>\n<li>outPath：通过 url 访问的方式，比如 <code>/mobile-map.html</code>，通过 url 访问方式为：<code>localhost:你的端口号/mobile-map.html</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>如题，本文介绍了 create-react-app 生成的 react 项目，如何在不 eject webpack 的情况下，配置多入口页面。</p>\n<p>使用场景：在原有项目结构基础上，以较小的改动，增加新的独立应用。并且此应用的依赖完全独立。</p>","more":"<h2 id=\"需要使用到的-package\"><a href=\"#需要使用到的-package\" class=\"headerlink\" title=\"需要使用到的 package\"></a>需要使用到的 package</h2><ul>\n<li><a href=\"https://github.com/arackaf/customize-cra\" target=\"_blank\" rel=\"noopener\">customize-cra</a>: Override webpack configurations for create-react-app 2.0</li>\n<li><a href=\"https://github.com/Derek-Hu/react-app-rewire-multiple-entry\" target=\"_blank\" rel=\"noopener\">react-app-rewire-multiple-entry</a>: Support Multiple Entries in Create-React-App</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p><a href=\"https://codesandbox.io/s/jrbsc?file=/config-overrides.js\" target=\"_blank\" rel=\"noopener\">codesandbox demo</a></p>\n<p><code>config-overwrides.js</code></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123;</span><br><span class=\"line\"><span class=\"addition\">+  override,</span></span><br><span class=\"line\">&#125; = require('customize-cra');</span><br><span class=\"line\"><span class=\"addition\">+ const multipleEntry = require('react-app-rewire-multiple-entry')([</span></span><br><span class=\"line\"><span class=\"addition\">+   // default entry</span></span><br><span class=\"line\"><span class=\"addition\">+   &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     entry: 'src/index.tsx',</span></span><br><span class=\"line\"><span class=\"addition\">+     template: 'public/index.html',</span></span><br><span class=\"line\"><span class=\"addition\">+     outPath: '/index.html'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+   // third part entry below</span></span><br><span class=\"line\"><span class=\"addition\">+   &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     entry: 'src/entry-points/map.tsx',</span></span><br><span class=\"line\"><span class=\"addition\">+     template: 'public/mobile-map.html',</span></span><br><span class=\"line\"><span class=\"addition\">+     outPath: '/mobile-map.html'</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+ ]);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">   // The Webpack config to use when compiling your react app for development or production.</span><br><span class=\"line\">   webpack: override(</span><br><span class=\"line\"><span class=\"addition\">+    multipleEntry.addMultiEntry,</span></span><br><span class=\"line\">   ),</span><br><span class=\"line\">   devtool: 'eval-source-map',</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>配置说明：</p>\n<ul>\n<li>entry: 入口文件，默认为<code>src/index[.ts/tsx/js]</code></li>\n<li>template: html 模版，默认为 public 目录下的 index.html</li>\n<li>outPath：通过 url 访问的方式，比如 <code>/mobile-map.html</code>，通过 url 访问方式为：<code>localhost:你的端口号/mobile-map.html</code></li>\n</ul>"},{"title":"算法 - LRU","toc":true,"date":"2020-06-16T16:00:00.000Z","_content":"\n# 介绍\n\nLRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”\n\n# 实现\n\n## 链表实现\n\n### 思路\n\nLRU 操作有两种，读和写：\n\n1. 读操作：将数据从原有的位置取出，放入头部\n2. 写操作：\n\n- 缓存位置已满：去链表最后的元素，将新的数据插入头部\n- 缓存未满：将数据加入头部\n\n### 实现\n\n由上思路，可以整理出几种操作：查找`find`，截取`pick`，检查是否超过长度`check`，插入头部`insertHead`\n由这几种操作可以组合成读和写\n**构造函数**\n\n```js\nconst LRUCache = function (capacity) {\n  this.head = new Node(null, null);\n  this.limit = capacity;\n};\nfunction Node(key, value) {\n  this.key = key;\n  this.val = value;\n  this.next = null;\n}\n```\n\n**读操作**\n\n> 如果当前值存在，则从原来位置取出，并放入头怒\n\n```js\nLRU.prototype.get = function (key, value) {\n  // 如果没有找到，则返回null\n  if (this.find(this.key) === -1) return null;\n  this.insertHead(this.pick(key));\n};\n```\n\n**写操作**\n\n> 如果当前的数据已经存在，则取出并放入头部。否则直接写入头部\n\n```js\nLRU.prototype.put = function (key, value) {\n  let node = this.find(key) === -1 ? this.pick(key) : new Node(key, value);\n  this.insertHead(node);\n  this.check();\n};\n```\n\n**辅助功能实现**\n\n```js\nLRUCache.prototype.find = function (key) {\n  // 链表遍历\n  let vaildHeadNode = this.head.next;\n  while (vaildHeadNode) {\n    if (vaildHeadNode.key === key) {\n      return vaildHeadNode;\n    }\n    vaildHeadNode = vaildHeadNode.next;\n  }\n  return -1;\n};\n// 从链表中截取节点\nLRUCache.prototype.pick = function (key) {\n  let node = this.find(key);\n  let node_val = node.val;\n  let node_key = node.key;\n  if (!node.next) {\n    node.val = null;\n    node.key = null;\n    node.next = null;\n  } else {\n    node.val = node.next.val;\n    node.key = node.next.key;\n    node.next = node.next.next;\n  }\n  return new Node(node_key, node_val);\n};\n// 判断长度是否超过限制，如果超过则删除尾部数据\nLRUCache.prototype.check = function () {\n  let count = 0;\n  let move_node = this.head;\n  //  移动到限制的最后一个节点，并进行截取\n  while (count < this.limit && move_node) {\n    move_node = move_node.next;\n    count += 1;\n  }\n  if (move_node && move_node.next) move_node.next = null;\n};\nLRUCache.prototype.insertHead = function (node) {\n  node.next = this.head.next;\n  this.head.next = node;\n};\n```\n","source":"_posts/algorithm- LRU.md","raw":"---\ntitle: 算法 - LRU\ncategories: [算法]\ntags: [algorithm, LRU]\ntoc: true\ndate: 2020/6/17\n---\n\n# 介绍\n\nLRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”\n\n# 实现\n\n## 链表实现\n\n### 思路\n\nLRU 操作有两种，读和写：\n\n1. 读操作：将数据从原有的位置取出，放入头部\n2. 写操作：\n\n- 缓存位置已满：去链表最后的元素，将新的数据插入头部\n- 缓存未满：将数据加入头部\n\n### 实现\n\n由上思路，可以整理出几种操作：查找`find`，截取`pick`，检查是否超过长度`check`，插入头部`insertHead`\n由这几种操作可以组合成读和写\n**构造函数**\n\n```js\nconst LRUCache = function (capacity) {\n  this.head = new Node(null, null);\n  this.limit = capacity;\n};\nfunction Node(key, value) {\n  this.key = key;\n  this.val = value;\n  this.next = null;\n}\n```\n\n**读操作**\n\n> 如果当前值存在，则从原来位置取出，并放入头怒\n\n```js\nLRU.prototype.get = function (key, value) {\n  // 如果没有找到，则返回null\n  if (this.find(this.key) === -1) return null;\n  this.insertHead(this.pick(key));\n};\n```\n\n**写操作**\n\n> 如果当前的数据已经存在，则取出并放入头部。否则直接写入头部\n\n```js\nLRU.prototype.put = function (key, value) {\n  let node = this.find(key) === -1 ? this.pick(key) : new Node(key, value);\n  this.insertHead(node);\n  this.check();\n};\n```\n\n**辅助功能实现**\n\n```js\nLRUCache.prototype.find = function (key) {\n  // 链表遍历\n  let vaildHeadNode = this.head.next;\n  while (vaildHeadNode) {\n    if (vaildHeadNode.key === key) {\n      return vaildHeadNode;\n    }\n    vaildHeadNode = vaildHeadNode.next;\n  }\n  return -1;\n};\n// 从链表中截取节点\nLRUCache.prototype.pick = function (key) {\n  let node = this.find(key);\n  let node_val = node.val;\n  let node_key = node.key;\n  if (!node.next) {\n    node.val = null;\n    node.key = null;\n    node.next = null;\n  } else {\n    node.val = node.next.val;\n    node.key = node.next.key;\n    node.next = node.next.next;\n  }\n  return new Node(node_key, node_val);\n};\n// 判断长度是否超过限制，如果超过则删除尾部数据\nLRUCache.prototype.check = function () {\n  let count = 0;\n  let move_node = this.head;\n  //  移动到限制的最后一个节点，并进行截取\n  while (count < this.limit && move_node) {\n    move_node = move_node.next;\n    count += 1;\n  }\n  if (move_node && move_node.next) move_node.next = null;\n};\nLRUCache.prototype.insertHead = function (node) {\n  node.next = this.head.next;\n  this.head.next = node;\n};\n```\n","slug":"algorithm- LRU","published":1,"updated":"2021-04-22T08:29:35.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7il000lgoswhimzglqc","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><h2 id=\"链表实现\"><a href=\"#链表实现\" class=\"headerlink\" title=\"链表实现\"></a>链表实现</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>LRU 操作有两种，读和写：</p>\n<ol>\n<li>读操作：将数据从原有的位置取出，放入头部</li>\n<li>写操作：</li>\n</ol>\n<ul>\n<li>缓存位置已满：去链表最后的元素，将新的数据插入头部</li>\n<li>缓存未满：将数据加入头部</li>\n</ul>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>由上思路，可以整理出几种操作：查找<code>find</code>，截取<code>pick</code>，检查是否超过长度<code>check</code>，插入头部<code>insertHead</code><br>由这几种操作可以组合成读和写<br><strong>构造函数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> LRUCache = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">capacity</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.head = <span class=\"keyword\">new</span> Node(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.limit = capacity;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.val = value;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>读操作</strong></p>\n<blockquote>\n<p>如果当前值存在，则从原来位置取出，并放入头怒</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRU.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有找到，则返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.find(<span class=\"keyword\">this</span>.key) === <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insertHead(<span class=\"keyword\">this</span>.pick(key));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>写操作</strong></p>\n<blockquote>\n<p>如果当前的数据已经存在，则取出并放入头部。否则直接写入头部</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRU.prototype.put = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = <span class=\"keyword\">this</span>.find(key) === <span class=\"number\">-1</span> ? <span class=\"keyword\">this</span>.pick(key) : <span class=\"keyword\">new</span> Node(key, value);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insertHead(node);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.check();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>辅助功能实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRUCache.prototype.find = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 链表遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> vaildHeadNode = <span class=\"keyword\">this</span>.head.next;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (vaildHeadNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vaildHeadNode.key === key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> vaildHeadNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vaildHeadNode = vaildHeadNode.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 从链表中截取节点</span></span><br><span class=\"line\">LRUCache.prototype.pick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = <span class=\"keyword\">this</span>.find(key);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node_val = node.val;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node_key = node.key;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node.next) &#123;</span><br><span class=\"line\">    node.val = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    node.key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    node.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.key = node.next.key;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(node_key, node_val);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 判断长度是否超过限制，如果超过则删除尾部数据</span></span><br><span class=\"line\">LRUCache.prototype.check = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> move_node = <span class=\"keyword\">this</span>.head;</span><br><span class=\"line\">  <span class=\"comment\">//  移动到限制的最后一个节点，并进行截取</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (count &lt; <span class=\"keyword\">this</span>.limit &amp;&amp; move_node) &#123;</span><br><span class=\"line\">    move_node = move_node.next;</span><br><span class=\"line\">    count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (move_node &amp;&amp; move_node.next) move_node.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">LRUCache.prototype.insertHead = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  node.next = <span class=\"keyword\">this</span>.head.next;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.head.next = node;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><h2 id=\"链表实现\"><a href=\"#链表实现\" class=\"headerlink\" title=\"链表实现\"></a>链表实现</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>LRU 操作有两种，读和写：</p>\n<ol>\n<li>读操作：将数据从原有的位置取出，放入头部</li>\n<li>写操作：</li>\n</ol>\n<ul>\n<li>缓存位置已满：去链表最后的元素，将新的数据插入头部</li>\n<li>缓存未满：将数据加入头部</li>\n</ul>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>由上思路，可以整理出几种操作：查找<code>find</code>，截取<code>pick</code>，检查是否超过长度<code>check</code>，插入头部<code>insertHead</code><br>由这几种操作可以组合成读和写<br><strong>构造函数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> LRUCache = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">capacity</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.head = <span class=\"keyword\">new</span> Node(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.limit = capacity;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.val = value;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>读操作</strong></p>\n<blockquote>\n<p>如果当前值存在，则从原来位置取出，并放入头怒</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRU.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有找到，则返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.find(<span class=\"keyword\">this</span>.key) === <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insertHead(<span class=\"keyword\">this</span>.pick(key));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>写操作</strong></p>\n<blockquote>\n<p>如果当前的数据已经存在，则取出并放入头部。否则直接写入头部</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRU.prototype.put = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = <span class=\"keyword\">this</span>.find(key) === <span class=\"number\">-1</span> ? <span class=\"keyword\">this</span>.pick(key) : <span class=\"keyword\">new</span> Node(key, value);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insertHead(node);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.check();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>辅助功能实现</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRUCache.prototype.find = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 链表遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> vaildHeadNode = <span class=\"keyword\">this</span>.head.next;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (vaildHeadNode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vaildHeadNode.key === key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> vaildHeadNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vaildHeadNode = vaildHeadNode.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 从链表中截取节点</span></span><br><span class=\"line\">LRUCache.prototype.pick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = <span class=\"keyword\">this</span>.find(key);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node_val = node.val;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node_key = node.key;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node.next) &#123;</span><br><span class=\"line\">    node.val = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    node.key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    node.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.key = node.next.key;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(node_key, node_val);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 判断长度是否超过限制，如果超过则删除尾部数据</span></span><br><span class=\"line\">LRUCache.prototype.check = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> move_node = <span class=\"keyword\">this</span>.head;</span><br><span class=\"line\">  <span class=\"comment\">//  移动到限制的最后一个节点，并进行截取</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (count &lt; <span class=\"keyword\">this</span>.limit &amp;&amp; move_node) &#123;</span><br><span class=\"line\">    move_node = move_node.next;</span><br><span class=\"line\">    count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (move_node &amp;&amp; move_node.next) move_node.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">LRUCache.prototype.insertHead = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  node.next = <span class=\"keyword\">this</span>.head.next;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.head.next = node;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"算法-二叉树","toc":true,"date":"2020-08-05T16:00:00.000Z","_content":"\n# 什么是 BST\n\n一句话概括：有序的二叉树\n\n- 若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；\n- 若任意节点的右子树不空，则右子树上所有节点的值均大于或等于它的根节点的值；\n- 任意节点的左、右子树也分别为二叉查找树；\n  > BST 通常采用 linkedList 作为存储结构。\n  > 通过中序遍历能够得到 BST 的从小到大的有序排列（累加相关问题的解决办法）\n\nBST 的时间复杂度最坏为 O(n),此时 BST 表现为线性表形式（只有右/左 单个节点树），为了解决这个问题，衍生出了[AVL](https://zh.wikipedia.org/wiki/AVL%E6%A0%91)，和[红黑树](https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91)\n\n# leetcode\n\n## 1038:二叉搜索树 -> 累加树\n\nGiven the root of a binary search tree with distinct values, modify it so that every node has a new value equal to the sum of the values of the original tree that are greater than or equal to node.val.\n<img src=\"1038.png\" style=\"zoom:50%\" alt=\"二叉搜索树 -> 累加树\">\n\n**分析**\n对于中序遍历的二叉搜索树[1,2,3,4]\n\n- 根据图中可得到的信息为：从右往左累加， 这是一个累加模型， [4,3+4,2+3+4,1+2+3+4]\n  ```js\n  root.val = accSum(root.right) + root.val;\n  ```\n- 对于二叉搜索树，中序遍历出来的结果即为递增有序数列[1,2,3,4]，而逆中序遍历出来的为递减有序数列 [4,3,2,1]\n  ```js\n  中序遍历 伪代码：\n  inorder: node\n    inorder(node.left)\n    operate(node)\n    inorder(node.right)\n  逆中序遍历 伪代码：\n  reverseinorder: node\n    inorder(node.right)\n    operate(node)\n    inorder(node.left)\n  ```\n\n由上面两点可得到解决方法：逆中序遍历节点 + 记录累加值并在遍历的时候进行修改 = 题目要求的累加树\n\n```js\nvar bstToGst = function (root) {\n  let accSum = 0;\n  function reverseInorder(root) {\n    if (!root) return;\n    reverseInorder(root.right);\n    // operation\n    root.val += accSum;\n    accSum = root.val;\n\n    reverseInorder(root.left);\n  }\n};\n```\n\n### 题目小结\n\n二叉搜索树本质上还是有序列表，通过中序遍历能够得到从小到大的排列\n\n## 236 二叉树的最近公共祖先\n\n<img src=\"236.png\" style=\"zoom:50%\" alt=\"二叉树的最近公共祖先\">\n这道题目 主要是通过后序遍历进行状态传递，如果同时满足要求的条件，则证明它是最近公共祖先。\n\n条件 1：如果 p q 分别在当前节点的左右子树上，那么该节点是最近公共祖先\n\n```js\nisInLeftChild && isInRightChild;\n```\n\n条件 2：如果当前节点是他自己的祖先，并且另外一个节点在左右子树的任一个上，那么该节点是最近公共祖先\n\n```js\nisInCur && (isInLeftChild || isInRightChild);\n```\n\n状态传递：后序遍历从下往上传递是否存在的状态（在左右子树或当前节点），只要有一个满足条件，则向上传递 true\n\n```js\n// 节点不存在 传递状态 false\nreturn false;\n// 节点存在 根据情况传递\nreturn isInRightChild || isInLeftChild || isInCur;\n```\n\n结束条件：\n\n1. 当前节点不存在 return false（状态传递）\n2. 满足公共祖先节点要求 return node （结果输出）\n\n```js\nvar lowestCommonAncestor = function (root, p, q) {\n  if (!root) return false;\n  // 递 - 记录层级信息 归 - 回溯层级信息\n  const isInLeftChild = lowestCommonAncestor(root.left, p, q);\n  const isInRightChild = lowestCommonAncestor(root.right, p, q);\n  const isInCur = root.val === p.val || root.val === q.val;\n  if (\n    (isInLeftChild && isInRightChild) ||\n    (isInCur && (isInLeftChild || isInRightChild))\n  ) {\n    return root;\n  }\n  return isInRightChild || isInLeftChild || isInCur;\n};\n```\n\n### 小结\n\n此题最重要的是，理解状态传递的思想，弄明白后序遍历的过程（递 - 记录层级信息 归 - 回溯层级信息）\n","source":"_posts/algorithm-BST.md","raw":"---\ntitle: 算法-二叉树\ncategories: [算法]\ntags: [algorithm, BST]\ntoc: true\ndate: 2020/8/6\n---\n\n# 什么是 BST\n\n一句话概括：有序的二叉树\n\n- 若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；\n- 若任意节点的右子树不空，则右子树上所有节点的值均大于或等于它的根节点的值；\n- 任意节点的左、右子树也分别为二叉查找树；\n  > BST 通常采用 linkedList 作为存储结构。\n  > 通过中序遍历能够得到 BST 的从小到大的有序排列（累加相关问题的解决办法）\n\nBST 的时间复杂度最坏为 O(n),此时 BST 表现为线性表形式（只有右/左 单个节点树），为了解决这个问题，衍生出了[AVL](https://zh.wikipedia.org/wiki/AVL%E6%A0%91)，和[红黑树](https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91)\n\n# leetcode\n\n## 1038:二叉搜索树 -> 累加树\n\nGiven the root of a binary search tree with distinct values, modify it so that every node has a new value equal to the sum of the values of the original tree that are greater than or equal to node.val.\n<img src=\"1038.png\" style=\"zoom:50%\" alt=\"二叉搜索树 -> 累加树\">\n\n**分析**\n对于中序遍历的二叉搜索树[1,2,3,4]\n\n- 根据图中可得到的信息为：从右往左累加， 这是一个累加模型， [4,3+4,2+3+4,1+2+3+4]\n  ```js\n  root.val = accSum(root.right) + root.val;\n  ```\n- 对于二叉搜索树，中序遍历出来的结果即为递增有序数列[1,2,3,4]，而逆中序遍历出来的为递减有序数列 [4,3,2,1]\n  ```js\n  中序遍历 伪代码：\n  inorder: node\n    inorder(node.left)\n    operate(node)\n    inorder(node.right)\n  逆中序遍历 伪代码：\n  reverseinorder: node\n    inorder(node.right)\n    operate(node)\n    inorder(node.left)\n  ```\n\n由上面两点可得到解决方法：逆中序遍历节点 + 记录累加值并在遍历的时候进行修改 = 题目要求的累加树\n\n```js\nvar bstToGst = function (root) {\n  let accSum = 0;\n  function reverseInorder(root) {\n    if (!root) return;\n    reverseInorder(root.right);\n    // operation\n    root.val += accSum;\n    accSum = root.val;\n\n    reverseInorder(root.left);\n  }\n};\n```\n\n### 题目小结\n\n二叉搜索树本质上还是有序列表，通过中序遍历能够得到从小到大的排列\n\n## 236 二叉树的最近公共祖先\n\n<img src=\"236.png\" style=\"zoom:50%\" alt=\"二叉树的最近公共祖先\">\n这道题目 主要是通过后序遍历进行状态传递，如果同时满足要求的条件，则证明它是最近公共祖先。\n\n条件 1：如果 p q 分别在当前节点的左右子树上，那么该节点是最近公共祖先\n\n```js\nisInLeftChild && isInRightChild;\n```\n\n条件 2：如果当前节点是他自己的祖先，并且另外一个节点在左右子树的任一个上，那么该节点是最近公共祖先\n\n```js\nisInCur && (isInLeftChild || isInRightChild);\n```\n\n状态传递：后序遍历从下往上传递是否存在的状态（在左右子树或当前节点），只要有一个满足条件，则向上传递 true\n\n```js\n// 节点不存在 传递状态 false\nreturn false;\n// 节点存在 根据情况传递\nreturn isInRightChild || isInLeftChild || isInCur;\n```\n\n结束条件：\n\n1. 当前节点不存在 return false（状态传递）\n2. 满足公共祖先节点要求 return node （结果输出）\n\n```js\nvar lowestCommonAncestor = function (root, p, q) {\n  if (!root) return false;\n  // 递 - 记录层级信息 归 - 回溯层级信息\n  const isInLeftChild = lowestCommonAncestor(root.left, p, q);\n  const isInRightChild = lowestCommonAncestor(root.right, p, q);\n  const isInCur = root.val === p.val || root.val === q.val;\n  if (\n    (isInLeftChild && isInRightChild) ||\n    (isInCur && (isInLeftChild || isInRightChild))\n  ) {\n    return root;\n  }\n  return isInRightChild || isInLeftChild || isInCur;\n};\n```\n\n### 小结\n\n此题最重要的是，理解状态传递的思想，弄明白后序遍历的过程（递 - 记录层级信息 归 - 回溯层级信息）\n","slug":"algorithm-BST","published":1,"updated":"2021-04-22T08:29:40.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7im000pgosw5ae1fupr","content":"<h1 id=\"什么是-BST\"><a href=\"#什么是-BST\" class=\"headerlink\" title=\"什么是 BST\"></a>什么是 BST</h1><p>一句话概括：有序的二叉树</p>\n<ul>\n<li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li>\n<li>若任意节点的右子树不空，则右子树上所有节点的值均大于或等于它的根节点的值；</li>\n<li>任意节点的左、右子树也分别为二叉查找树；<blockquote>\n<p>BST 通常采用 linkedList 作为存储结构。<br>通过中序遍历能够得到 BST 的从小到大的有序排列（累加相关问题的解决办法）</p>\n</blockquote>\n</li>\n</ul>\n<p>BST 的时间复杂度最坏为 O(n),此时 BST 表现为线性表形式（只有右/左 单个节点树），为了解决这个问题，衍生出了<a href=\"https://zh.wikipedia.org/wiki/AVL%E6%A0%91\" target=\"_blank\" rel=\"noopener\">AVL</a>，和<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91\" target=\"_blank\" rel=\"noopener\">红黑树</a></p>\n<h1 id=\"leetcode\"><a href=\"#leetcode\" class=\"headerlink\" title=\"leetcode\"></a>leetcode</h1><h2 id=\"1038-二叉搜索树-gt-累加树\"><a href=\"#1038-二叉搜索树-gt-累加树\" class=\"headerlink\" title=\"1038:二叉搜索树 -&gt; 累加树\"></a>1038:二叉搜索树 -&gt; 累加树</h2><p>Given the root of a binary search tree with distinct values, modify it so that every node has a new value equal to the sum of the values of the original tree that are greater than or equal to node.val.<br><img src=\"1038.png\" style=\"zoom:50%\" alt=\"二叉搜索树 -> 累加树\"></p>\n<p><strong>分析</strong><br>对于中序遍历的二叉搜索树[1,2,3,4]</p>\n<ul>\n<li>根据图中可得到的信息为：从右往左累加， 这是一个累加模型， [4,3+4,2+3+4,1+2+3+4]<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root.val = accSum(root.right) + root.val;</span><br></pre></td></tr></table></figure></li>\n<li>对于二叉搜索树，中序遍历出来的结果即为递增有序数列[1,2,3,4]，而逆中序遍历出来的为递减有序数列 [4,3,2,1]<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中序遍历 伪代码：</span><br><span class=\"line\">inorder: node</span><br><span class=\"line\">  inorder(node.left)</span><br><span class=\"line\">  operate(node)</span><br><span class=\"line\">  inorder(node.right)</span><br><span class=\"line\">逆中序遍历 伪代码：</span><br><span class=\"line\">reverseinorder: node</span><br><span class=\"line\">  inorder(node.right)</span><br><span class=\"line\">  operate(node)</span><br><span class=\"line\">  inorder(node.left)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>由上面两点可得到解决方法：逆中序遍历节点 + 记录累加值并在遍历的时候进行修改 = 题目要求的累加树</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bstToGst = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> accSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseInorder</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    reverseInorder(root.right);</span><br><span class=\"line\">    <span class=\"comment\">// operation</span></span><br><span class=\"line\">    root.val += accSum;</span><br><span class=\"line\">    accSum = root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    reverseInorder(root.left);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"题目小结\"><a href=\"#题目小结\" class=\"headerlink\" title=\"题目小结\"></a>题目小结</h3><p>二叉搜索树本质上还是有序列表，通过中序遍历能够得到从小到大的排列</p>\n<h2 id=\"236-二叉树的最近公共祖先\"><a href=\"#236-二叉树的最近公共祖先\" class=\"headerlink\" title=\"236 二叉树的最近公共祖先\"></a>236 二叉树的最近公共祖先</h2><img src=\"236.png\" style=\"zoom:50%\" alt=\"二叉树的最近公共祖先\">\n这道题目 主要是通过后序遍历进行状态传递，如果同时满足要求的条件，则证明它是最近公共祖先。\n\n<p>条件 1：如果 p q 分别在当前节点的左右子树上，那么该节点是最近公共祖先</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isInLeftChild &amp;&amp; isInRightChild;</span><br></pre></td></tr></table></figure>\n\n<p>条件 2：如果当前节点是他自己的祖先，并且另外一个节点在左右子树的任一个上，那么该节点是最近公共祖先</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isInCur &amp;&amp; (isInLeftChild || isInRightChild);</span><br></pre></td></tr></table></figure>\n\n<p>状态传递：后序遍历从下往上传递是否存在的状态（在左右子树或当前节点），只要有一个满足条件，则向上传递 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节点不存在 传递状态 false</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// 节点存在 根据情况传递</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> isInRightChild || isInLeftChild || isInCur;</span><br></pre></td></tr></table></figure>\n\n<p>结束条件：</p>\n<ol>\n<li>当前节点不存在 return false（状态传递）</li>\n<li>满足公共祖先节点要求 return node （结果输出）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, p, q</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 递 - 记录层级信息 归 - 回溯层级信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isInLeftChild = lowestCommonAncestor(root.left, p, q);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isInRightChild = lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isInCur = root.val === p.val || root.val === q.val;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (isInLeftChild &amp;&amp; isInRightChild) ||</span><br><span class=\"line\">    (isInCur &amp;&amp; (isInLeftChild || isInRightChild))</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isInRightChild || isInLeftChild || isInCur;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>此题最重要的是，理解状态传递的思想，弄明白后序遍历的过程（递 - 记录层级信息 归 - 回溯层级信息）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是-BST\"><a href=\"#什么是-BST\" class=\"headerlink\" title=\"什么是 BST\"></a>什么是 BST</h1><p>一句话概括：有序的二叉树</p>\n<ul>\n<li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li>\n<li>若任意节点的右子树不空，则右子树上所有节点的值均大于或等于它的根节点的值；</li>\n<li>任意节点的左、右子树也分别为二叉查找树；<blockquote>\n<p>BST 通常采用 linkedList 作为存储结构。<br>通过中序遍历能够得到 BST 的从小到大的有序排列（累加相关问题的解决办法）</p>\n</blockquote>\n</li>\n</ul>\n<p>BST 的时间复杂度最坏为 O(n),此时 BST 表现为线性表形式（只有右/左 单个节点树），为了解决这个问题，衍生出了<a href=\"https://zh.wikipedia.org/wiki/AVL%E6%A0%91\" target=\"_blank\" rel=\"noopener\">AVL</a>，和<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91\" target=\"_blank\" rel=\"noopener\">红黑树</a></p>\n<h1 id=\"leetcode\"><a href=\"#leetcode\" class=\"headerlink\" title=\"leetcode\"></a>leetcode</h1><h2 id=\"1038-二叉搜索树-gt-累加树\"><a href=\"#1038-二叉搜索树-gt-累加树\" class=\"headerlink\" title=\"1038:二叉搜索树 -&gt; 累加树\"></a>1038:二叉搜索树 -&gt; 累加树</h2><p>Given the root of a binary search tree with distinct values, modify it so that every node has a new value equal to the sum of the values of the original tree that are greater than or equal to node.val.<br><img src=\"1038.png\" style=\"zoom:50%\" alt=\"二叉搜索树 -> 累加树\"></p>\n<p><strong>分析</strong><br>对于中序遍历的二叉搜索树[1,2,3,4]</p>\n<ul>\n<li>根据图中可得到的信息为：从右往左累加， 这是一个累加模型， [4,3+4,2+3+4,1+2+3+4]<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root.val = accSum(root.right) + root.val;</span><br></pre></td></tr></table></figure></li>\n<li>对于二叉搜索树，中序遍历出来的结果即为递增有序数列[1,2,3,4]，而逆中序遍历出来的为递减有序数列 [4,3,2,1]<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中序遍历 伪代码：</span><br><span class=\"line\">inorder: node</span><br><span class=\"line\">  inorder(node.left)</span><br><span class=\"line\">  operate(node)</span><br><span class=\"line\">  inorder(node.right)</span><br><span class=\"line\">逆中序遍历 伪代码：</span><br><span class=\"line\">reverseinorder: node</span><br><span class=\"line\">  inorder(node.right)</span><br><span class=\"line\">  operate(node)</span><br><span class=\"line\">  inorder(node.left)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>由上面两点可得到解决方法：逆中序遍历节点 + 记录累加值并在遍历的时候进行修改 = 题目要求的累加树</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bstToGst = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> accSum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseInorder</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    reverseInorder(root.right);</span><br><span class=\"line\">    <span class=\"comment\">// operation</span></span><br><span class=\"line\">    root.val += accSum;</span><br><span class=\"line\">    accSum = root.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    reverseInorder(root.left);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"题目小结\"><a href=\"#题目小结\" class=\"headerlink\" title=\"题目小结\"></a>题目小结</h3><p>二叉搜索树本质上还是有序列表，通过中序遍历能够得到从小到大的排列</p>\n<h2 id=\"236-二叉树的最近公共祖先\"><a href=\"#236-二叉树的最近公共祖先\" class=\"headerlink\" title=\"236 二叉树的最近公共祖先\"></a>236 二叉树的最近公共祖先</h2><img src=\"236.png\" style=\"zoom:50%\" alt=\"二叉树的最近公共祖先\">\n这道题目 主要是通过后序遍历进行状态传递，如果同时满足要求的条件，则证明它是最近公共祖先。\n\n<p>条件 1：如果 p q 分别在当前节点的左右子树上，那么该节点是最近公共祖先</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isInLeftChild &amp;&amp; isInRightChild;</span><br></pre></td></tr></table></figure>\n\n<p>条件 2：如果当前节点是他自己的祖先，并且另外一个节点在左右子树的任一个上，那么该节点是最近公共祖先</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isInCur &amp;&amp; (isInLeftChild || isInRightChild);</span><br></pre></td></tr></table></figure>\n\n<p>状态传递：后序遍历从下往上传递是否存在的状态（在左右子树或当前节点），只要有一个满足条件，则向上传递 true</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节点不存在 传递状态 false</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// 节点存在 根据情况传递</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> isInRightChild || isInLeftChild || isInCur;</span><br></pre></td></tr></table></figure>\n\n<p>结束条件：</p>\n<ol>\n<li>当前节点不存在 return false（状态传递）</li>\n<li>满足公共祖先节点要求 return node （结果输出）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lowestCommonAncestor = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root, p, q</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 递 - 记录层级信息 归 - 回溯层级信息</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> isInLeftChild = lowestCommonAncestor(root.left, p, q);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isInRightChild = lowestCommonAncestor(root.right, p, q);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isInCur = root.val === p.val || root.val === q.val;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    (isInLeftChild &amp;&amp; isInRightChild) ||</span><br><span class=\"line\">    (isInCur &amp;&amp; (isInLeftChild || isInRightChild))</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isInRightChild || isInLeftChild || isInCur;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>此题最重要的是，理解状态传递的思想，弄明白后序遍历的过程（递 - 记录层级信息 归 - 回溯层级信息）</p>\n"},{"_content":"# webpack HandBook - Basic\n\n此文章为[webpack 官方文档](https://webpack.js.org/guides/getting-started/)的学习笔记，从初学者的角度，加了个人理解内容。\n\n学习资源推荐：\n\n+ [webpack the confusing parts](https://rajaraodv.medium.com/webpack-the-confusing-parts-58712f8fcad9)\n+ [webpack 官方文档](https://webpack.js.org/guides/getting-started/)\n\n<!--more-->\n\nentry: 入口文件\n\noutput: 输出文件\n\n```js\nwebpack-demo\n |- package.json\n |- package-lock.json\n |- webpack.config.js\n |- /dist\n    |- index.html\n |- /src\n    |- index.js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n};\n```\n\n## Pulgin vs Loader\n\nLoader: 在**bundle** 生成之前或期间 调用，对文件进行操作\n\nplugin: 在**bundle**生成之后，操作**chunk**或 **bundle**，对其进行进一步的组织，优化。plugin可以注册hook到webpack的构建过程中，甚至可以修改compiler，决定最终的编译内容。\n\n\n\nplugin and Loader workflow: \n\n![Plugin and Loader WorkFlow](https://blog.shancw.net/public/uploads/P7hTM.png)\n\n\n\n## Asset Management (loaders)\n\n**[Modules 的执行顺序](https://stackoverflow.com/a/32234468/11418690)**: 从下往上， 从右往左\n\n### [Loading Css](https://webpack.js.org/guides/asset-management/#loading-css)\n\n在js 中引入css，需要在 module [configuration](https://webpack.js.org/configuration/module):中 使用 `style-loader` 和 `css-loader`\n\n> + style-loader: Inject CSS into the DOM.\n> +  `css-loader` : interprets `@import` and `url()` like `import/require()` and will resolve them.\n\n```js\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n };\n```\n\n`module loader` 的加载顺序是从前往后的，第一个加载的loader会将它的结果（经过它转换的）传递给下一个loader。类似于 `Ramda.pipe`\n\n上述loader 的执行顺序为 `style-loader` -> `css-loader`\n\n> webpack 使用正则表达式，来决定哪些文件应该被加载到对应的loader中\n\n\n\n### [Loading Images & Fonts](https://webpack.js.org/guides/asset-management/#loading-images)\n\n实现js,css文件中导入背景图，icon等图片资源。使用内置的 [Asset Modules](https://webpack.js.org/guides/asset-modules/) 即可\n\n实现css文件中导入字体资源。使用内置的 [Asset Modules](https://webpack.js.org/guides/asset-modules/) 即可\n\n```js\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/i,\n         use: ['style-loader', 'css-loader'],\n       },\n       // 图片资源\n        {\n          test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n          type: 'asset/resource',\n        },\n       // 字体资源\n       {\n          test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n          type: 'asset/resource',\n        },\n     ],\n   },\n };\n```\n\n注意此处的顺序，image loader 加载完图片资源，css-loader 加载css（此处可能会出现 css中定义背景图 `url('./my-image.png'）`)，style-loader 将最终的css资源加载到dom\n\n\n\n [html-loader](https://webpack.js.org/loaders/html-loader) 对 `<img src=\"./my-image.png\" />` 标签的加载过程，和style-loader类似。\n\n\n\n### [Load Json like Data(xml,csv)](https://webpack.js.org/guides/asset-management/#loading-data)\n\n`csv-loader`, `xml-loader`\n\n```js\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/i,\n         use: ['style-loader', 'css-loader'],\n       },\n       {\n         test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n         type: 'asset/resource',\n       },\n       {\n         test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n         type: 'asset/resource',\n       },\n      {\n        test: /\\.(csv|tsv)$/i,\n        use: ['csv-loader'],\n      },\n      {\n        test: /\\.xml$/i,\n        use: ['xml-loader'],\n      },\n     ],\n   },\n };\n```\n\n\n\n## [Output Management(plugins)](https://webpack.js.org/guides/output-management/)\n\navailable plugins: \n\n+ [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin): 自动创建HTML files 入口文件为 `webpack` bundles 服务\n\n\n\n### HtmlWebpackPlugin 配置\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   entry: {\n     index: './src/index.js',\n     print: './src/print.js',\n   },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'Output Management',\n    }),\n  ],\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n     // Cleaning up the /dist folder\n     clean: true,\n   },\n };\n```\n\n\n\n\n\n## Development\n\n\n\n### SourceMap\n\nwebpack bundle 开发源码后，对于报错很难定位准确位置。为了解决这个问题，更好的定位error，JS 提供了source Map。sourceMap可以让我们从compiled code 找到源码所在位置。\n\n> sourceMap的深入了解：[introduction-source-map](https://blog.teamtreehouse.com/introduction-source-maps)\n\nWebpack的配置方式 `webpack.config.js`\n\n```js\n const path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   mode: 'development',\n   entry: {...},\n   devtool: 'inline-source-map',\n   plugins: [...],\n   output: {...},\n };\n```\n\nsourceMap的常用可选项：\n\n+ inline-source-map: 不创建独立的sourceMap文件\n\n+ eval-source-map：为每个module创建一个sourceMap，推荐在开发中使用\n+ hidden-source-map: 一般用于错误收集\n\n> **不同的sourceMap 选项会影响编译速度**， sourceMap 全部可选项参考: [webpack doc - devtool](https://webpack.js.org/configuration/devtool/)\n\n\n\n### Using Webpack-dev-server(host your web file)\n\n>  提供web服务以及热更新\n\n配置方式:\n\n```js\nnpm install --save-dev webpack-dev-server\n```\n\n\n\nwebpack.config.js\n\n```js\n module.exports = {\n\t  mode: 'development',\n    devServer: {\n      static: './dist',\n    },\n   // The optimization.runtimeChunk: 'single' was added \n   // because in this example we have more than one entrypoint on a single HTML page. \n   // Without this, we could get into trouble described here. \n   // Read the Code Splitting chapter for more details.\n  \toptimization: {\n    \truntimeChunk: 'single',\n  \t},\n };\n```\n\npackage.json\n\n```json\n{\n  ...\n  scripts: [\n    'start': 'webpack serve'\n  ]\n}\n```\n\n\n\n### webpack-dev-middleware\n\nwebpack-dev-middleware  可以将webpack 打包后的文件，发送给web服务。webpack-dev-server 内部就是调用了这个工具。\n\n这个工具可以独立于webpack-dev-server使用，比如nodejs web静态服务中使用例子如下：\n\n```js\nconst path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   mode: 'development',\n   ...\n   devtool: 'inline-source-map',\n   devServer: {\n     static: './dist',\n   },\n   output: {\n     \tfilename: '[name].bundle.js',\n     \tpath: path.resolve(__dirname, 'dist'),\n     \tclean: true,\n      // The publicPath will be used within our server script as well in order to make sure files are served correctly on http://localhost:3000\n    \tpublicPath: '/',\n   },\n   ...\n };\n```\n\n`server.js`\n\n```js\nconst express = require('express');\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\n\nconst app = express();\nconst config = require('./webpack.config.js');\nconst compiler = webpack(config);\n\n// Tell express to use the webpack-dev-middleware and use the webpack.config.js\n// configuration file as a base.\napp.use(\n  webpackDevMiddleware(compiler, {\n    publicPath: config.output.publicPath,\n  })\n);\n\n// Serve the files on port 3000.\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!\\n');\n});\n```\n\n\n\n## Code Splitting（代码分离）\n\n代码分离的三种常用方式\n\n+ entry point: 使用entry 配置手动分离代码\n+ prevent duplicate： 使用[Entry dependencies](https://webpack.js.org/configuration/entry-context/#dependencies)  或者 SplitChunksPlugin 去重并分离chunk\n+ 动态导入：在js 模块中，通过inline function import 动态导入\n\n### entry point  \n\n```diff\n module.exports = {\n-  entry: './src/index.js',\n+  mode: 'development',\n+  entry: {\n+    index: './src/index.js',\n+    another: './src/another-module.js',\n+  },\n   output: {\n-    filename: 'main.js',\n+    filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n };\n```\n\nentry 的缺点：\n\n+ 如果入口 chunk 之间包含一些重复的模块，那些重复模块都会被引入到各个 bundle 中\n+ 不够灵活，并且不能动态地将核心应用程序逻辑中的代码拆分出来。\n\n### 预防重复\n\n#### 优化 entry point 的依赖\n\n通过depnedOn 选项，不同chunks之间可以共享modules，属于对entry point的优化\n\n```diff\n const path = require('path');\n\n module.exports = {\n   mode: 'development',\n   entry: {\n-    index: './src/index.js',\n-    another: './src/another-module.js',\n+    index: {\n+      import: './src/index.js',\n+      dependOn: 'shared',\n+    },\n+    another: {\n+      import: './src/another-module.js',\n+      dependOn: 'shared',\n+    },\n+    shared: 'lodash',\n   },\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n// 如果是单页应用，那么还需配置如下配置\n// 防止公用module被多次初始化\n+  optimization: {\n+    runtimeChunk: 'single',\n+  },\n };\n```\n\n#### splitChunksPlugin: 处理chunk 解决重复\n\nsplitChunksPlugin 可以将公共依赖提取到已有的入口chunk或者全新的chunk中。\n\n```diff\n  const path = require('path');\n\n  module.exports = {\n    mode: 'development',\n    entry: {\n      index: './src/index.js',\n      another: './src/another-module.js',\n    },\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist'),\n    },\n+   optimization: {\n+     splitChunks: {\n+       chunks: 'all',\n+     },\n+   },\n  };\n```\n\n### Dynamic Import\n\nhttps://github.com/tc39/proposal-dynamic-import\n\n```diff\n-function getComponent() {\n+async function getComponent() {\n   const element = document.createElement('div');\n+  const { default: _ } = await import('lodash');\n\n-  return import('lodash')\n-    .then(({ default: _ }) => {\n-      const element = document.createElement('div');\n+  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n-      element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n-\n-      return element;\n-    })\n-    .catch((error) => 'An error occurred while loading the component');\n+  return element;\n }\n\n getComponent().then((component) => {\n   document.body.appendChild(component);\n });\n```\n\n### 预获取/预加载模块(prefetch/preload module)\n\n- **prefetch**(预获取)：将来某些导航下可能需要的资源\n- **preload**(预加载)：当前导航下可能需要资源\n\nprefetch 的简单示例中，有一个 `HomePage` 组件，其内部渲染一个 `LoginButton` 组件，点击后按需加载 `LoginModal` 组件。\n\n**LoginButton.js**\n\n```js\n//...\nimport(/* webpackPrefetch: true */ './path/to/LoginModal.js');\n```\n\n这会生成 `<link rel=\"prefetch\" href=\"login-modal-chunk.js\">` 并追加到页面头部，指示着浏览器在**闲置时间预取** `login-modal-chunk.js` 文件。\n\n- [<link rel=\"prefetch/preload />  in webpack](https://medium.com/webpack/link-rel-prefetch-preload-in-webpack-51a52358f84c)\n\n- [Preload, Prefetch And Priorities in Chrome](https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf)\n- [Preloading content with ](https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content)\n\n### [bundle 分析(bundle analysis)](https://webpack.docschina.org/guides/code-splitting/#bundle-analysis)\n\n- [webpack-chart](https://alexkuz.github.io/webpack-chart/): webpack stats 可交互饼图。\n- [webpack-visualizer](https://chrisbateman.github.io/webpack-visualizer/): 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。\n- [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer)：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式。\n- [webpack bundle optimize helper](https://webpack.jakoblind.no/optimize)：这个工具会分析你的 bundle，并提供可操作的改进措施，以减少 bundle 的大小。\n- [bundle-stats](https://github.com/bundle-stats/bundle-stats)：生成一个 bundle 报告（bundle 大小、资源、模块），并比较不同构建之间的结果。\n","source":"_posts/Wepack-Handbook.md","raw":"# webpack HandBook - Basic\n\n此文章为[webpack 官方文档](https://webpack.js.org/guides/getting-started/)的学习笔记，从初学者的角度，加了个人理解内容。\n\n学习资源推荐：\n\n+ [webpack the confusing parts](https://rajaraodv.medium.com/webpack-the-confusing-parts-58712f8fcad9)\n+ [webpack 官方文档](https://webpack.js.org/guides/getting-started/)\n\n<!--more-->\n\nentry: 入口文件\n\noutput: 输出文件\n\n```js\nwebpack-demo\n |- package.json\n |- package-lock.json\n |- webpack.config.js\n |- /dist\n    |- index.html\n |- /src\n    |- index.js\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n};\n```\n\n## Pulgin vs Loader\n\nLoader: 在**bundle** 生成之前或期间 调用，对文件进行操作\n\nplugin: 在**bundle**生成之后，操作**chunk**或 **bundle**，对其进行进一步的组织，优化。plugin可以注册hook到webpack的构建过程中，甚至可以修改compiler，决定最终的编译内容。\n\n\n\nplugin and Loader workflow: \n\n![Plugin and Loader WorkFlow](https://blog.shancw.net/public/uploads/P7hTM.png)\n\n\n\n## Asset Management (loaders)\n\n**[Modules 的执行顺序](https://stackoverflow.com/a/32234468/11418690)**: 从下往上， 从右往左\n\n### [Loading Css](https://webpack.js.org/guides/asset-management/#loading-css)\n\n在js 中引入css，需要在 module [configuration](https://webpack.js.org/configuration/module):中 使用 `style-loader` 和 `css-loader`\n\n> + style-loader: Inject CSS into the DOM.\n> +  `css-loader` : interprets `@import` and `url()` like `import/require()` and will resolve them.\n\n```js\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n };\n```\n\n`module loader` 的加载顺序是从前往后的，第一个加载的loader会将它的结果（经过它转换的）传递给下一个loader。类似于 `Ramda.pipe`\n\n上述loader 的执行顺序为 `style-loader` -> `css-loader`\n\n> webpack 使用正则表达式，来决定哪些文件应该被加载到对应的loader中\n\n\n\n### [Loading Images & Fonts](https://webpack.js.org/guides/asset-management/#loading-images)\n\n实现js,css文件中导入背景图，icon等图片资源。使用内置的 [Asset Modules](https://webpack.js.org/guides/asset-modules/) 即可\n\n实现css文件中导入字体资源。使用内置的 [Asset Modules](https://webpack.js.org/guides/asset-modules/) 即可\n\n```js\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/i,\n         use: ['style-loader', 'css-loader'],\n       },\n       // 图片资源\n        {\n          test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n          type: 'asset/resource',\n        },\n       // 字体资源\n       {\n          test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n          type: 'asset/resource',\n        },\n     ],\n   },\n };\n```\n\n注意此处的顺序，image loader 加载完图片资源，css-loader 加载css（此处可能会出现 css中定义背景图 `url('./my-image.png'）`)，style-loader 将最终的css资源加载到dom\n\n\n\n [html-loader](https://webpack.js.org/loaders/html-loader) 对 `<img src=\"./my-image.png\" />` 标签的加载过程，和style-loader类似。\n\n\n\n### [Load Json like Data(xml,csv)](https://webpack.js.org/guides/asset-management/#loading-data)\n\n`csv-loader`, `xml-loader`\n\n```js\n const path = require('path');\n\n module.exports = {\n   entry: './src/index.js',\n   output: {\n     filename: 'bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n   module: {\n     rules: [\n       {\n         test: /\\.css$/i,\n         use: ['style-loader', 'css-loader'],\n       },\n       {\n         test: /\\.(png|svg|jpg|jpeg|gif)$/i,\n         type: 'asset/resource',\n       },\n       {\n         test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n         type: 'asset/resource',\n       },\n      {\n        test: /\\.(csv|tsv)$/i,\n        use: ['csv-loader'],\n      },\n      {\n        test: /\\.xml$/i,\n        use: ['xml-loader'],\n      },\n     ],\n   },\n };\n```\n\n\n\n## [Output Management(plugins)](https://webpack.js.org/guides/output-management/)\n\navailable plugins: \n\n+ [html-webpack-plugin](https://github.com/jantimon/html-webpack-plugin): 自动创建HTML files 入口文件为 `webpack` bundles 服务\n\n\n\n### HtmlWebpackPlugin 配置\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   entry: {\n     index: './src/index.js',\n     print: './src/print.js',\n   },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'Output Management',\n    }),\n  ],\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n     // Cleaning up the /dist folder\n     clean: true,\n   },\n };\n```\n\n\n\n\n\n## Development\n\n\n\n### SourceMap\n\nwebpack bundle 开发源码后，对于报错很难定位准确位置。为了解决这个问题，更好的定位error，JS 提供了source Map。sourceMap可以让我们从compiled code 找到源码所在位置。\n\n> sourceMap的深入了解：[introduction-source-map](https://blog.teamtreehouse.com/introduction-source-maps)\n\nWebpack的配置方式 `webpack.config.js`\n\n```js\n const path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   mode: 'development',\n   entry: {...},\n   devtool: 'inline-source-map',\n   plugins: [...],\n   output: {...},\n };\n```\n\nsourceMap的常用可选项：\n\n+ inline-source-map: 不创建独立的sourceMap文件\n\n+ eval-source-map：为每个module创建一个sourceMap，推荐在开发中使用\n+ hidden-source-map: 一般用于错误收集\n\n> **不同的sourceMap 选项会影响编译速度**， sourceMap 全部可选项参考: [webpack doc - devtool](https://webpack.js.org/configuration/devtool/)\n\n\n\n### Using Webpack-dev-server(host your web file)\n\n>  提供web服务以及热更新\n\n配置方式:\n\n```js\nnpm install --save-dev webpack-dev-server\n```\n\n\n\nwebpack.config.js\n\n```js\n module.exports = {\n\t  mode: 'development',\n    devServer: {\n      static: './dist',\n    },\n   // The optimization.runtimeChunk: 'single' was added \n   // because in this example we have more than one entrypoint on a single HTML page. \n   // Without this, we could get into trouble described here. \n   // Read the Code Splitting chapter for more details.\n  \toptimization: {\n    \truntimeChunk: 'single',\n  \t},\n };\n```\n\npackage.json\n\n```json\n{\n  ...\n  scripts: [\n    'start': 'webpack serve'\n  ]\n}\n```\n\n\n\n### webpack-dev-middleware\n\nwebpack-dev-middleware  可以将webpack 打包后的文件，发送给web服务。webpack-dev-server 内部就是调用了这个工具。\n\n这个工具可以独立于webpack-dev-server使用，比如nodejs web静态服务中使用例子如下：\n\n```js\nconst path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n module.exports = {\n   mode: 'development',\n   ...\n   devtool: 'inline-source-map',\n   devServer: {\n     static: './dist',\n   },\n   output: {\n     \tfilename: '[name].bundle.js',\n     \tpath: path.resolve(__dirname, 'dist'),\n     \tclean: true,\n      // The publicPath will be used within our server script as well in order to make sure files are served correctly on http://localhost:3000\n    \tpublicPath: '/',\n   },\n   ...\n };\n```\n\n`server.js`\n\n```js\nconst express = require('express');\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\n\nconst app = express();\nconst config = require('./webpack.config.js');\nconst compiler = webpack(config);\n\n// Tell express to use the webpack-dev-middleware and use the webpack.config.js\n// configuration file as a base.\napp.use(\n  webpackDevMiddleware(compiler, {\n    publicPath: config.output.publicPath,\n  })\n);\n\n// Serve the files on port 3000.\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!\\n');\n});\n```\n\n\n\n## Code Splitting（代码分离）\n\n代码分离的三种常用方式\n\n+ entry point: 使用entry 配置手动分离代码\n+ prevent duplicate： 使用[Entry dependencies](https://webpack.js.org/configuration/entry-context/#dependencies)  或者 SplitChunksPlugin 去重并分离chunk\n+ 动态导入：在js 模块中，通过inline function import 动态导入\n\n### entry point  \n\n```diff\n module.exports = {\n-  entry: './src/index.js',\n+  mode: 'development',\n+  entry: {\n+    index: './src/index.js',\n+    another: './src/another-module.js',\n+  },\n   output: {\n-    filename: 'main.js',\n+    filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n };\n```\n\nentry 的缺点：\n\n+ 如果入口 chunk 之间包含一些重复的模块，那些重复模块都会被引入到各个 bundle 中\n+ 不够灵活，并且不能动态地将核心应用程序逻辑中的代码拆分出来。\n\n### 预防重复\n\n#### 优化 entry point 的依赖\n\n通过depnedOn 选项，不同chunks之间可以共享modules，属于对entry point的优化\n\n```diff\n const path = require('path');\n\n module.exports = {\n   mode: 'development',\n   entry: {\n-    index: './src/index.js',\n-    another: './src/another-module.js',\n+    index: {\n+      import: './src/index.js',\n+      dependOn: 'shared',\n+    },\n+    another: {\n+      import: './src/another-module.js',\n+      dependOn: 'shared',\n+    },\n+    shared: 'lodash',\n   },\n   output: {\n     filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n   },\n// 如果是单页应用，那么还需配置如下配置\n// 防止公用module被多次初始化\n+  optimization: {\n+    runtimeChunk: 'single',\n+  },\n };\n```\n\n#### splitChunksPlugin: 处理chunk 解决重复\n\nsplitChunksPlugin 可以将公共依赖提取到已有的入口chunk或者全新的chunk中。\n\n```diff\n  const path = require('path');\n\n  module.exports = {\n    mode: 'development',\n    entry: {\n      index: './src/index.js',\n      another: './src/another-module.js',\n    },\n    output: {\n      filename: '[name].bundle.js',\n      path: path.resolve(__dirname, 'dist'),\n    },\n+   optimization: {\n+     splitChunks: {\n+       chunks: 'all',\n+     },\n+   },\n  };\n```\n\n### Dynamic Import\n\nhttps://github.com/tc39/proposal-dynamic-import\n\n```diff\n-function getComponent() {\n+async function getComponent() {\n   const element = document.createElement('div');\n+  const { default: _ } = await import('lodash');\n\n-  return import('lodash')\n-    .then(({ default: _ }) => {\n-      const element = document.createElement('div');\n+  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n-      element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n-\n-      return element;\n-    })\n-    .catch((error) => 'An error occurred while loading the component');\n+  return element;\n }\n\n getComponent().then((component) => {\n   document.body.appendChild(component);\n });\n```\n\n### 预获取/预加载模块(prefetch/preload module)\n\n- **prefetch**(预获取)：将来某些导航下可能需要的资源\n- **preload**(预加载)：当前导航下可能需要资源\n\nprefetch 的简单示例中，有一个 `HomePage` 组件，其内部渲染一个 `LoginButton` 组件，点击后按需加载 `LoginModal` 组件。\n\n**LoginButton.js**\n\n```js\n//...\nimport(/* webpackPrefetch: true */ './path/to/LoginModal.js');\n```\n\n这会生成 `<link rel=\"prefetch\" href=\"login-modal-chunk.js\">` 并追加到页面头部，指示着浏览器在**闲置时间预取** `login-modal-chunk.js` 文件。\n\n- [<link rel=\"prefetch/preload />  in webpack](https://medium.com/webpack/link-rel-prefetch-preload-in-webpack-51a52358f84c)\n\n- [Preload, Prefetch And Priorities in Chrome](https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf)\n- [Preloading content with ](https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content)\n\n### [bundle 分析(bundle analysis)](https://webpack.docschina.org/guides/code-splitting/#bundle-analysis)\n\n- [webpack-chart](https://alexkuz.github.io/webpack-chart/): webpack stats 可交互饼图。\n- [webpack-visualizer](https://chrisbateman.github.io/webpack-visualizer/): 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。\n- [webpack-bundle-analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer)：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式。\n- [webpack bundle optimize helper](https://webpack.jakoblind.no/optimize)：这个工具会分析你的 bundle，并提供可操作的改进措施，以减少 bundle 的大小。\n- [bundle-stats](https://github.com/bundle-stats/bundle-stats)：生成一个 bundle 报告（bundle 大小、资源、模块），并比较不同构建之间的结果。\n","slug":"Wepack-Handbook","published":1,"date":"2022-05-26T06:43:58.827Z","updated":"2022-05-26T15:30:29.796Z","title":"Wepack-Handbook","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7iq000rgoswedpi2emg","content":"<h1 id=\"webpack-HandBook-Basic\"><a href=\"#webpack-HandBook-Basic\" class=\"headerlink\" title=\"webpack HandBook - Basic\"></a>webpack HandBook - Basic</h1><p>此文章为<a href=\"https://webpack.js.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack 官方文档</a>的学习笔记，从初学者的角度，加了个人理解内容。</p>\n<p>学习资源推荐：</p>\n<ul>\n<li><a href=\"https://rajaraodv.medium.com/webpack-the-confusing-parts-58712f8fcad9\" target=\"_blank\" rel=\"noopener\">webpack the confusing parts</a></li>\n<li><a href=\"https://webpack.js.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack 官方文档</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<p>entry: 入口文件</p>\n<p>output: 输出文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo</span><br><span class=\"line\"> |- package.json</span><br><span class=\"line\"> |- package-lock.json</span><br><span class=\"line\"> |- webpack.config.js</span><br><span class=\"line\"> |- <span class=\"regexp\">/dist</span></span><br><span class=\"line\"><span class=\"regexp\">    |- index.html</span></span><br><span class=\"line\"><span class=\"regexp\"> |- /</span>src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pulgin-vs-Loader\"><a href=\"#Pulgin-vs-Loader\" class=\"headerlink\" title=\"Pulgin vs Loader\"></a>Pulgin vs Loader</h2><p>Loader: 在<strong>bundle</strong> 生成之前或期间 调用，对文件进行操作</p>\n<p>plugin: 在<strong>bundle</strong>生成之后，操作<strong>chunk</strong>或 <strong>bundle</strong>，对其进行进一步的组织，优化。plugin可以注册hook到webpack的构建过程中，甚至可以修改compiler，决定最终的编译内容。</p>\n<p>plugin and Loader workflow: </p>\n<p><img src=\"https://blog.shancw.net/public/uploads/P7hTM.png\" alt=\"Plugin and Loader WorkFlow\"></p>\n<h2 id=\"Asset-Management-loaders\"><a href=\"#Asset-Management-loaders\" class=\"headerlink\" title=\"Asset Management (loaders)\"></a>Asset Management (loaders)</h2><p><strong><a href=\"https://stackoverflow.com/a/32234468/11418690\" target=\"_blank\" rel=\"noopener\">Modules 的执行顺序</a></strong>: 从下往上， 从右往左</p>\n<h3 id=\"Loading-Css\"><a href=\"#Loading-Css\" class=\"headerlink\" title=\"Loading Css\"></a><a href=\"https://webpack.js.org/guides/asset-management/#loading-css\" target=\"_blank\" rel=\"noopener\">Loading Css</a></h3><p>在js 中引入css，需要在 module <a href=\"https://webpack.js.org/configuration/module\" target=\"_blank\" rel=\"noopener\">configuration</a>:中 使用 <code>style-loader</code> 和 <code>css-loader</code></p>\n<blockquote>\n<ul>\n<li>style-loader: Inject CSS into the DOM.</li>\n<li><code>css-loader</code> : interprets <code>@import</code> and <code>url()</code> like <code>import/require()</code> and will resolve them.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">   rules: [</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       test: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">       use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   ],</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>module loader</code> 的加载顺序是从前往后的，第一个加载的loader会将它的结果（经过它转换的）传递给下一个loader。类似于 <code>Ramda.pipe</code></p>\n<p>上述loader 的执行顺序为 <code>style-loader</code> -&gt; <code>css-loader</code></p>\n<blockquote>\n<p>webpack 使用正则表达式，来决定哪些文件应该被加载到对应的loader中</p>\n</blockquote>\n<h3 id=\"Loading-Images-amp-Fonts\"><a href=\"#Loading-Images-amp-Fonts\" class=\"headerlink\" title=\"Loading Images &amp; Fonts\"></a><a href=\"https://webpack.js.org/guides/asset-management/#loading-images\" target=\"_blank\" rel=\"noopener\">Loading Images &amp; Fonts</a></h3><p>实现js,css文件中导入背景图，icon等图片资源。使用内置的 <a href=\"https://webpack.js.org/guides/asset-modules/\" target=\"_blank\" rel=\"noopener\">Asset Modules</a> 即可</p>\n<p>实现css文件中导入字体资源。使用内置的 <a href=\"https://webpack.js.org/guides/asset-modules/\" target=\"_blank\" rel=\"noopener\">Asset Modules</a> 即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 图片资源</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class=\"line\">         type: <span class=\"string\">'asset/resource'</span>,</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 字体资源</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class=\"line\">         type: <span class=\"string\">'asset/resource'</span>,</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注意此处的顺序，image loader 加载完图片资源，css-loader 加载css（此处可能会出现 css中定义背景图 <code>url(&#39;./my-image.png&#39;）</code>)，style-loader 将最终的css资源加载到dom</p>\n<p> <a href=\"https://webpack.js.org/loaders/html-loader\" target=\"_blank\" rel=\"noopener\">html-loader</a> 对 <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code> 标签的加载过程，和style-loader类似。</p>\n<h3 id=\"Load-Json-like-Data-xml-csv\"><a href=\"#Load-Json-like-Data-xml-csv\" class=\"headerlink\" title=\"Load Json like Data(xml,csv)\"></a><a href=\"https://webpack.js.org/guides/asset-management/#loading-data\" target=\"_blank\" rel=\"noopener\">Load Json like Data(xml,csv)</a></h3><p><code>csv-loader</code>, <code>xml-loader</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'asset/resource'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'asset/resource'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       test: <span class=\"regexp\">/\\.(csv|tsv)$/i</span>,</span><br><span class=\"line\">       use: [<span class=\"string\">'csv-loader'</span>],</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       test: <span class=\"regexp\">/\\.xml$/i</span>,</span><br><span class=\"line\">       use: [<span class=\"string\">'xml-loader'</span>],</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Output-Management-plugins\"><a href=\"#Output-Management-plugins\" class=\"headerlink\" title=\"Output Management(plugins)\"></a><a href=\"https://webpack.js.org/guides/output-management/\" target=\"_blank\" rel=\"noopener\">Output Management(plugins)</a></h2><p>available plugins: </p>\n<ul>\n<li><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin</a>: 自动创建HTML files 入口文件为 <code>webpack</code> bundles 服务</li>\n</ul>\n<h3 id=\"HtmlWebpackPlugin-配置\"><a href=\"#HtmlWebpackPlugin-配置\" class=\"headerlink\" title=\"HtmlWebpackPlugin 配置\"></a>HtmlWebpackPlugin 配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   entry: &#123;</span><br><span class=\"line\">     index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">     print: <span class=\"string\">'./src/print.js'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Output Management'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\">     filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">     path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">     <span class=\"comment\">// Cleaning up the /dist folder</span></span><br><span class=\"line\">     clean: <span class=\"literal\">true</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h2><h3 id=\"SourceMap\"><a href=\"#SourceMap\" class=\"headerlink\" title=\"SourceMap\"></a>SourceMap</h3><p>webpack bundle 开发源码后，对于报错很难定位准确位置。为了解决这个问题，更好的定位error，JS 提供了source Map。sourceMap可以让我们从compiled code 找到源码所在位置。</p>\n<blockquote>\n<p>sourceMap的深入了解：<a href=\"https://blog.teamtreehouse.com/introduction-source-maps\" target=\"_blank\" rel=\"noopener\">introduction-source-map</a></p>\n</blockquote>\n<p>Webpack的配置方式 <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;...&#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  plugins: [...],</span><br><span class=\"line\">  output: &#123;...&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>sourceMap的常用可选项：</p>\n<ul>\n<li><p>inline-source-map: 不创建独立的sourceMap文件</p>\n</li>\n<li><p>eval-source-map：为每个module创建一个sourceMap，推荐在开发中使用</p>\n</li>\n<li><p>hidden-source-map: 一般用于错误收集</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>不同的sourceMap 选项会影响编译速度</strong>， sourceMap 全部可选项参考: <a href=\"https://webpack.js.org/configuration/devtool/\" target=\"_blank\" rel=\"noopener\">webpack doc - devtool</a></p>\n</blockquote>\n<h3 id=\"Using-Webpack-dev-server-host-your-web-file\"><a href=\"#Using-Webpack-dev-server-host-your-web-file\" class=\"headerlink\" title=\"Using Webpack-dev-server(host your web file)\"></a>Using Webpack-dev-server(host your web file)</h3><blockquote>\n<p> 提供web服务以及热更新</p>\n</blockquote>\n<p>配置方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n\n\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">   devServer: &#123;</span><br><span class=\"line\">     <span class=\"keyword\">static</span>: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// The optimization.runtimeChunk: 'single' was added </span></span><br><span class=\"line\">  <span class=\"comment\">// because in this example we have more than one entrypoint on a single HTML page. </span></span><br><span class=\"line\">  <span class=\"comment\">// Without this, we could get into trouble described here. </span></span><br><span class=\"line\">  <span class=\"comment\">// Read the Code Splitting chapter for more details.</span></span><br><span class=\"line\"> \toptimization: &#123;</span><br><span class=\"line\">   \truntimeChunk: <span class=\"string\">'single'</span>,</span><br><span class=\"line\"> \t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>package.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  scripts: [</span><br><span class=\"line\">    'start': 'webpack serve'</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"webpack-dev-middleware\"><a href=\"#webpack-dev-middleware\" class=\"headerlink\" title=\"webpack-dev-middleware\"></a>webpack-dev-middleware</h3><p>webpack-dev-middleware  可以将webpack 打包后的文件，发送给web服务。webpack-dev-server 内部就是调用了这个工具。</p>\n<p>这个工具可以独立于webpack-dev-server使用，比如nodejs web静态服务中使用例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">   devServer: &#123;</span><br><span class=\"line\">     <span class=\"keyword\">static</span>: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\">     \tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">     \tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">     \tclean: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// The publicPath will be used within our server script as well in order to make sure files are served correctly on http://localhost:3000</span></span><br><span class=\"line\">    \tpublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>server.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = webpack(config);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// configuration file as a base.</span></span><br><span class=\"line\">app.use(</span><br><span class=\"line\">  webpackDevMiddleware(compiler, &#123;</span><br><span class=\"line\">    publicPath: config.output.publicPath,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serve the files on port 3000.</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Code-Splitting（代码分离）\"><a href=\"#Code-Splitting（代码分离）\" class=\"headerlink\" title=\"Code Splitting（代码分离）\"></a>Code Splitting（代码分离）</h2><p>代码分离的三种常用方式</p>\n<ul>\n<li>entry point: 使用entry 配置手动分离代码</li>\n<li>prevent duplicate： 使用<a href=\"https://webpack.js.org/configuration/entry-context/#dependencies\" target=\"_blank\" rel=\"noopener\">Entry dependencies</a>  或者 SplitChunksPlugin 去重并分离chunk</li>\n<li>动态导入：在js 模块中，通过inline function import 动态导入</li>\n</ul>\n<h3 id=\"entry-point\"><a href=\"#entry-point\" class=\"headerlink\" title=\"entry point\"></a>entry point</h3><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module.exports = &#123;</span><br><span class=\"line\"><span class=\"deletion\">-  entry: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+  mode: 'development',</span></span><br><span class=\"line\"><span class=\"addition\">+  entry: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+    index: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+    another: './src/another-module.js',</span></span><br><span class=\"line\"><span class=\"addition\">+  &#125;,</span></span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-    filename: 'main.js',</span></span><br><span class=\"line\"><span class=\"addition\">+    filename: '[name].bundle.js',</span></span><br><span class=\"line\">     path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>entry 的缺点：</p>\n<ul>\n<li>如果入口 chunk 之间包含一些重复的模块，那些重复模块都会被引入到各个 bundle 中</li>\n<li>不够灵活，并且不能动态地将核心应用程序逻辑中的代码拆分出来。</li>\n</ul>\n<h3 id=\"预防重复\"><a href=\"#预防重复\" class=\"headerlink\" title=\"预防重复\"></a>预防重复</h3><h4 id=\"优化-entry-point-的依赖\"><a href=\"#优化-entry-point-的依赖\" class=\"headerlink\" title=\"优化 entry point 的依赖\"></a>优化 entry point 的依赖</h4><p>通过depnedOn 选项，不同chunks之间可以共享modules，属于对entry point的优化</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\"> module.exports = &#123;</span><br><span class=\"line\">   mode: 'development',</span><br><span class=\"line\">   entry: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-    index: './src/index.js',</span></span><br><span class=\"line\"><span class=\"deletion\">-    another: './src/another-module.js',</span></span><br><span class=\"line\"><span class=\"addition\">+    index: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+      import: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+      dependOn: 'shared',</span></span><br><span class=\"line\"><span class=\"addition\">+    &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+    another: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+      import: './src/another-module.js',</span></span><br><span class=\"line\"><span class=\"addition\">+      dependOn: 'shared',</span></span><br><span class=\"line\"><span class=\"addition\">+    &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+    shared: 'lodash',</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\">     filename: '[name].bundle.js',</span><br><span class=\"line\">     path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">// 如果是单页应用，那么还需配置如下配置</span><br><span class=\"line\">// 防止公用module被多次初始化</span><br><span class=\"line\"><span class=\"addition\">+  optimization: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+    runtimeChunk: 'single',</span></span><br><span class=\"line\"><span class=\"addition\">+  &#125;,</span></span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"splitChunksPlugin-处理chunk-解决重复\"><a href=\"#splitChunksPlugin-处理chunk-解决重复\" class=\"headerlink\" title=\"splitChunksPlugin: 处理chunk 解决重复\"></a>splitChunksPlugin: 处理chunk 解决重复</h4><p>splitChunksPlugin 可以将公共依赖提取到已有的入口chunk或者全新的chunk中。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    mode: 'development',</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      index: './src/index.js',</span><br><span class=\"line\">      another: './src/another-module.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: '[name].bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"addition\">+   optimization: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     splitChunks: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+       chunks: 'all',</span></span><br><span class=\"line\"><span class=\"addition\">+     &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dynamic-Import\"><a href=\"#Dynamic-Import\" class=\"headerlink\" title=\"Dynamic Import\"></a>Dynamic Import</h3><p><a href=\"https://github.com/tc39/proposal-dynamic-import\" target=\"_blank\" rel=\"noopener\">https://github.com/tc39/proposal-dynamic-import</a></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-function getComponent() &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+async function getComponent() &#123;</span></span><br><span class=\"line\">   const element = document.createElement('div');</span><br><span class=\"line\"><span class=\"addition\">+  const &#123; default: _ &#125; = await import('lodash');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-  return import('lodash')</span></span><br><span class=\"line\"><span class=\"deletion\">-    .then((&#123; default: _ &#125;) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-      const element = document.createElement('div');</span></span><br><span class=\"line\"><span class=\"addition\">+  element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-      element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\"><span class=\"deletion\">-      return element;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &#125;)</span></span><br><span class=\"line\"><span class=\"deletion\">-    .catch((error) =&gt; 'An error occurred while loading the component');</span></span><br><span class=\"line\"><span class=\"addition\">+  return element;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> getComponent().then((component) =&gt; &#123;</span><br><span class=\"line\">   document.body.appendChild(component);</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"预获取-预加载模块-prefetch-preload-module\"><a href=\"#预获取-预加载模块-prefetch-preload-module\" class=\"headerlink\" title=\"预获取/预加载模块(prefetch/preload module)\"></a>预获取/预加载模块(prefetch/preload module)</h3><ul>\n<li><strong>prefetch</strong>(预获取)：将来某些导航下可能需要的资源</li>\n<li><strong>preload</strong>(预加载)：当前导航下可能需要资源</li>\n</ul>\n<p>prefetch 的简单示例中，有一个 <code>HomePage</code> 组件，其内部渲染一个 <code>LoginButton</code> 组件，点击后按需加载 <code>LoginModal</code> 组件。</p>\n<p><strong>LoginButton.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackPrefetch: true */</span> <span class=\"string\">'./path/to/LoginModal.js'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这会生成 <code>&lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&gt;</code> 并追加到页面头部，指示着浏览器在<strong>闲置时间预取</strong> <code>login-modal-chunk.js</code> 文件。</p>\n<ul>\n<li><p><a href=\"https://medium.com/webpack/link-rel-prefetch-preload-in-webpack-51a52358f84c\" target=\"_blank\" rel=\"noopener\">&lt;link rel=”prefetch/preload /&gt;  in webpack</a></p>\n</li>\n<li><p><a href=\"https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf\" target=\"_blank\" rel=\"noopener\">Preload, Prefetch And Priorities in Chrome</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\" target=\"_blank\" rel=\"noopener\">Preloading content with </a></p>\n</li>\n</ul>\n<h3 id=\"bundle-分析-bundle-analysis\"><a href=\"#bundle-分析-bundle-analysis\" class=\"headerlink\" title=\"bundle 分析(bundle analysis)\"></a><a href=\"https://webpack.docschina.org/guides/code-splitting/#bundle-analysis\" target=\"_blank\" rel=\"noopener\">bundle 分析(bundle analysis)</a></h3><ul>\n<li><a href=\"https://alexkuz.github.io/webpack-chart/\" target=\"_blank\" rel=\"noopener\">webpack-chart</a>: webpack stats 可交互饼图。</li>\n<li><a href=\"https://chrisbateman.github.io/webpack-visualizer/\" target=\"_blank\" rel=\"noopener\">webpack-visualizer</a>: 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。</li>\n<li><a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener\">webpack-bundle-analyzer</a>：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式。</li>\n<li><a href=\"https://webpack.jakoblind.no/optimize\" target=\"_blank\" rel=\"noopener\">webpack bundle optimize helper</a>：这个工具会分析你的 bundle，并提供可操作的改进措施，以减少 bundle 的大小。</li>\n<li><a href=\"https://github.com/bundle-stats/bundle-stats\" target=\"_blank\" rel=\"noopener\">bundle-stats</a>：生成一个 bundle 报告（bundle 大小、资源、模块），并比较不同构建之间的结果。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"webpack-HandBook-Basic\"><a href=\"#webpack-HandBook-Basic\" class=\"headerlink\" title=\"webpack HandBook - Basic\"></a>webpack HandBook - Basic</h1><p>此文章为<a href=\"https://webpack.js.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack 官方文档</a>的学习笔记，从初学者的角度，加了个人理解内容。</p>\n<p>学习资源推荐：</p>\n<ul>\n<li><a href=\"https://rajaraodv.medium.com/webpack-the-confusing-parts-58712f8fcad9\" target=\"_blank\" rel=\"noopener\">webpack the confusing parts</a></li>\n<li><a href=\"https://webpack.js.org/guides/getting-started/\" target=\"_blank\" rel=\"noopener\">webpack 官方文档</a></li>\n</ul>","more":"<p>entry: 入口文件</p>\n<p>output: 输出文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-demo</span><br><span class=\"line\"> |- package.json</span><br><span class=\"line\"> |- package-lock.json</span><br><span class=\"line\"> |- webpack.config.js</span><br><span class=\"line\"> |- <span class=\"regexp\">/dist</span></span><br><span class=\"line\"><span class=\"regexp\">    |- index.html</span></span><br><span class=\"line\"><span class=\"regexp\"> |- /</span>src</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pulgin-vs-Loader\"><a href=\"#Pulgin-vs-Loader\" class=\"headerlink\" title=\"Pulgin vs Loader\"></a>Pulgin vs Loader</h2><p>Loader: 在<strong>bundle</strong> 生成之前或期间 调用，对文件进行操作</p>\n<p>plugin: 在<strong>bundle</strong>生成之后，操作<strong>chunk</strong>或 <strong>bundle</strong>，对其进行进一步的组织，优化。plugin可以注册hook到webpack的构建过程中，甚至可以修改compiler，决定最终的编译内容。</p>\n<p>plugin and Loader workflow: </p>\n<p><img src=\"https://blog.shancw.net/public/uploads/P7hTM.png\" alt=\"Plugin and Loader WorkFlow\"></p>\n<h2 id=\"Asset-Management-loaders\"><a href=\"#Asset-Management-loaders\" class=\"headerlink\" title=\"Asset Management (loaders)\"></a>Asset Management (loaders)</h2><p><strong><a href=\"https://stackoverflow.com/a/32234468/11418690\" target=\"_blank\" rel=\"noopener\">Modules 的执行顺序</a></strong>: 从下往上， 从右往左</p>\n<h3 id=\"Loading-Css\"><a href=\"#Loading-Css\" class=\"headerlink\" title=\"Loading Css\"></a><a href=\"https://webpack.js.org/guides/asset-management/#loading-css\" target=\"_blank\" rel=\"noopener\">Loading Css</a></h3><p>在js 中引入css，需要在 module <a href=\"https://webpack.js.org/configuration/module\" target=\"_blank\" rel=\"noopener\">configuration</a>:中 使用 <code>style-loader</code> 和 <code>css-loader</code></p>\n<blockquote>\n<ul>\n<li>style-loader: Inject CSS into the DOM.</li>\n<li><code>css-loader</code> : interprets <code>@import</code> and <code>url()</code> like <code>import/require()</code> and will resolve them.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">   rules: [</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       test: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">       use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">   ],</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>module loader</code> 的加载顺序是从前往后的，第一个加载的loader会将它的结果（经过它转换的）传递给下一个loader。类似于 <code>Ramda.pipe</code></p>\n<p>上述loader 的执行顺序为 <code>style-loader</code> -&gt; <code>css-loader</code></p>\n<blockquote>\n<p>webpack 使用正则表达式，来决定哪些文件应该被加载到对应的loader中</p>\n</blockquote>\n<h3 id=\"Loading-Images-amp-Fonts\"><a href=\"#Loading-Images-amp-Fonts\" class=\"headerlink\" title=\"Loading Images &amp; Fonts\"></a><a href=\"https://webpack.js.org/guides/asset-management/#loading-images\" target=\"_blank\" rel=\"noopener\">Loading Images &amp; Fonts</a></h3><p>实现js,css文件中导入背景图，icon等图片资源。使用内置的 <a href=\"https://webpack.js.org/guides/asset-modules/\" target=\"_blank\" rel=\"noopener\">Asset Modules</a> 即可</p>\n<p>实现css文件中导入字体资源。使用内置的 <a href=\"https://webpack.js.org/guides/asset-modules/\" target=\"_blank\" rel=\"noopener\">Asset Modules</a> 即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 图片资源</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class=\"line\">         type: <span class=\"string\">'asset/resource'</span>,</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 字体资源</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class=\"line\">         type: <span class=\"string\">'asset/resource'</span>,</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注意此处的顺序，image loader 加载完图片资源，css-loader 加载css（此处可能会出现 css中定义背景图 <code>url(&#39;./my-image.png&#39;）</code>)，style-loader 将最终的css资源加载到dom</p>\n<p> <a href=\"https://webpack.js.org/loaders/html-loader\" target=\"_blank\" rel=\"noopener\">html-loader</a> 对 <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code> 标签的加载过程，和style-loader类似。</p>\n<h3 id=\"Load-Json-like-Data-xml-csv\"><a href=\"#Load-Json-like-Data-xml-csv\" class=\"headerlink\" title=\"Load Json like Data(xml,csv)\"></a><a href=\"https://webpack.js.org/guides/asset-management/#loading-data\" target=\"_blank\" rel=\"noopener\">Load Json like Data(xml,csv)</a></h3><p><code>csv-loader</code>, <code>xml-loader</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/i</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'asset/resource'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'asset/resource'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       test: <span class=\"regexp\">/\\.(csv|tsv)$/i</span>,</span><br><span class=\"line\">       use: [<span class=\"string\">'csv-loader'</span>],</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       test: <span class=\"regexp\">/\\.xml$/i</span>,</span><br><span class=\"line\">       use: [<span class=\"string\">'xml-loader'</span>],</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Output-Management-plugins\"><a href=\"#Output-Management-plugins\" class=\"headerlink\" title=\"Output Management(plugins)\"></a><a href=\"https://webpack.js.org/guides/output-management/\" target=\"_blank\" rel=\"noopener\">Output Management(plugins)</a></h2><p>available plugins: </p>\n<ul>\n<li><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin</a>: 自动创建HTML files 入口文件为 <code>webpack</code> bundles 服务</li>\n</ul>\n<h3 id=\"HtmlWebpackPlugin-配置\"><a href=\"#HtmlWebpackPlugin-配置\" class=\"headerlink\" title=\"HtmlWebpackPlugin 配置\"></a>HtmlWebpackPlugin 配置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   entry: &#123;</span><br><span class=\"line\">     index: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">     print: <span class=\"string\">'./src/print.js'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Output Management'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\">     filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">     path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">     <span class=\"comment\">// Cleaning up the /dist folder</span></span><br><span class=\"line\">     clean: <span class=\"literal\">true</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h2><h3 id=\"SourceMap\"><a href=\"#SourceMap\" class=\"headerlink\" title=\"SourceMap\"></a>SourceMap</h3><p>webpack bundle 开发源码后，对于报错很难定位准确位置。为了解决这个问题，更好的定位error，JS 提供了source Map。sourceMap可以让我们从compiled code 找到源码所在位置。</p>\n<blockquote>\n<p>sourceMap的深入了解：<a href=\"https://blog.teamtreehouse.com/introduction-source-maps\" target=\"_blank\" rel=\"noopener\">introduction-source-map</a></p>\n</blockquote>\n<p>Webpack的配置方式 <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;...&#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  plugins: [...],</span><br><span class=\"line\">  output: &#123;...&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>sourceMap的常用可选项：</p>\n<ul>\n<li><p>inline-source-map: 不创建独立的sourceMap文件</p>\n</li>\n<li><p>eval-source-map：为每个module创建一个sourceMap，推荐在开发中使用</p>\n</li>\n<li><p>hidden-source-map: 一般用于错误收集</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>不同的sourceMap 选项会影响编译速度</strong>， sourceMap 全部可选项参考: <a href=\"https://webpack.js.org/configuration/devtool/\" target=\"_blank\" rel=\"noopener\">webpack doc - devtool</a></p>\n</blockquote>\n<h3 id=\"Using-Webpack-dev-server-host-your-web-file\"><a href=\"#Using-Webpack-dev-server-host-your-web-file\" class=\"headerlink\" title=\"Using Webpack-dev-server(host your web file)\"></a>Using Webpack-dev-server(host your web file)</h3><blockquote>\n<p> 提供web服务以及热更新</p>\n</blockquote>\n<p>配置方式:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>\n\n\n\n<p>webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">   devServer: &#123;</span><br><span class=\"line\">     <span class=\"keyword\">static</span>: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// The optimization.runtimeChunk: 'single' was added </span></span><br><span class=\"line\">  <span class=\"comment\">// because in this example we have more than one entrypoint on a single HTML page. </span></span><br><span class=\"line\">  <span class=\"comment\">// Without this, we could get into trouble described here. </span></span><br><span class=\"line\">  <span class=\"comment\">// Read the Code Splitting chapter for more details.</span></span><br><span class=\"line\"> \toptimization: &#123;</span><br><span class=\"line\">   \truntimeChunk: <span class=\"string\">'single'</span>,</span><br><span class=\"line\"> \t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>package.json</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  scripts: [</span><br><span class=\"line\">    'start': 'webpack serve'</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"webpack-dev-middleware\"><a href=\"#webpack-dev-middleware\" class=\"headerlink\" title=\"webpack-dev-middleware\"></a>webpack-dev-middleware</h3><p>webpack-dev-middleware  可以将webpack 打包后的文件，发送给web服务。webpack-dev-server 内部就是调用了这个工具。</p>\n<p>这个工具可以独立于webpack-dev-server使用，比如nodejs web静态服务中使用例子如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">   devServer: &#123;</span><br><span class=\"line\">     <span class=\"keyword\">static</span>: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\">     \tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">     \tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">     \tclean: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// The publicPath will be used within our server script as well in order to make sure files are served correctly on http://localhost:3000</span></span><br><span class=\"line\">    \tpublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>server.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = webpack(config);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// configuration file as a base.</span></span><br><span class=\"line\">app.use(</span><br><span class=\"line\">  webpackDevMiddleware(compiler, &#123;</span><br><span class=\"line\">    publicPath: config.output.publicPath,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serve the files on port 3000.</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Code-Splitting（代码分离）\"><a href=\"#Code-Splitting（代码分离）\" class=\"headerlink\" title=\"Code Splitting（代码分离）\"></a>Code Splitting（代码分离）</h2><p>代码分离的三种常用方式</p>\n<ul>\n<li>entry point: 使用entry 配置手动分离代码</li>\n<li>prevent duplicate： 使用<a href=\"https://webpack.js.org/configuration/entry-context/#dependencies\" target=\"_blank\" rel=\"noopener\">Entry dependencies</a>  或者 SplitChunksPlugin 去重并分离chunk</li>\n<li>动态导入：在js 模块中，通过inline function import 动态导入</li>\n</ul>\n<h3 id=\"entry-point\"><a href=\"#entry-point\" class=\"headerlink\" title=\"entry point\"></a>entry point</h3><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> module.exports = &#123;</span><br><span class=\"line\"><span class=\"deletion\">-  entry: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+  mode: 'development',</span></span><br><span class=\"line\"><span class=\"addition\">+  entry: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+    index: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+    another: './src/another-module.js',</span></span><br><span class=\"line\"><span class=\"addition\">+  &#125;,</span></span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-    filename: 'main.js',</span></span><br><span class=\"line\"><span class=\"addition\">+    filename: '[name].bundle.js',</span></span><br><span class=\"line\">     path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>entry 的缺点：</p>\n<ul>\n<li>如果入口 chunk 之间包含一些重复的模块，那些重复模块都会被引入到各个 bundle 中</li>\n<li>不够灵活，并且不能动态地将核心应用程序逻辑中的代码拆分出来。</li>\n</ul>\n<h3 id=\"预防重复\"><a href=\"#预防重复\" class=\"headerlink\" title=\"预防重复\"></a>预防重复</h3><h4 id=\"优化-entry-point-的依赖\"><a href=\"#优化-entry-point-的依赖\" class=\"headerlink\" title=\"优化 entry point 的依赖\"></a>优化 entry point 的依赖</h4><p>通过depnedOn 选项，不同chunks之间可以共享modules，属于对entry point的优化</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\"> module.exports = &#123;</span><br><span class=\"line\">   mode: 'development',</span><br><span class=\"line\">   entry: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-    index: './src/index.js',</span></span><br><span class=\"line\"><span class=\"deletion\">-    another: './src/another-module.js',</span></span><br><span class=\"line\"><span class=\"addition\">+    index: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+      import: './src/index.js',</span></span><br><span class=\"line\"><span class=\"addition\">+      dependOn: 'shared',</span></span><br><span class=\"line\"><span class=\"addition\">+    &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+    another: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+      import: './src/another-module.js',</span></span><br><span class=\"line\"><span class=\"addition\">+      dependOn: 'shared',</span></span><br><span class=\"line\"><span class=\"addition\">+    &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+    shared: 'lodash',</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\">     filename: '[name].bundle.js',</span><br><span class=\"line\">     path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">// 如果是单页应用，那么还需配置如下配置</span><br><span class=\"line\">// 防止公用module被多次初始化</span><br><span class=\"line\"><span class=\"addition\">+  optimization: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+    runtimeChunk: 'single',</span></span><br><span class=\"line\"><span class=\"addition\">+  &#125;,</span></span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"splitChunksPlugin-处理chunk-解决重复\"><a href=\"#splitChunksPlugin-处理chunk-解决重复\" class=\"headerlink\" title=\"splitChunksPlugin: 处理chunk 解决重复\"></a>splitChunksPlugin: 处理chunk 解决重复</h4><p>splitChunksPlugin 可以将公共依赖提取到已有的入口chunk或者全新的chunk中。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  const path = require('path');</span><br><span class=\"line\"></span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    mode: 'development',</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">      index: './src/index.js',</span><br><span class=\"line\">      another: './src/another-module.js',</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">      filename: '[name].bundle.js',</span><br><span class=\"line\">      path: path.resolve(__dirname, 'dist'),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"addition\">+   optimization: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     splitChunks: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+       chunks: 'all',</span></span><br><span class=\"line\"><span class=\"addition\">+     &#125;,</span></span><br><span class=\"line\"><span class=\"addition\">+   &#125;,</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dynamic-Import\"><a href=\"#Dynamic-Import\" class=\"headerlink\" title=\"Dynamic Import\"></a>Dynamic Import</h3><p><a href=\"https://github.com/tc39/proposal-dynamic-import\" target=\"_blank\" rel=\"noopener\">https://github.com/tc39/proposal-dynamic-import</a></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-function getComponent() &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+async function getComponent() &#123;</span></span><br><span class=\"line\">   const element = document.createElement('div');</span><br><span class=\"line\"><span class=\"addition\">+  const &#123; default: _ &#125; = await import('lodash');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-  return import('lodash')</span></span><br><span class=\"line\"><span class=\"deletion\">-    .then((&#123; default: _ &#125;) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-      const element = document.createElement('div');</span></span><br><span class=\"line\"><span class=\"addition\">+  element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">-      element.innerHTML = _.join(['Hello', 'webpack'], ' ');</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\"><span class=\"deletion\">-      return element;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &#125;)</span></span><br><span class=\"line\"><span class=\"deletion\">-    .catch((error) =&gt; 'An error occurred while loading the component');</span></span><br><span class=\"line\"><span class=\"addition\">+  return element;</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> getComponent().then((component) =&gt; &#123;</span><br><span class=\"line\">   document.body.appendChild(component);</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"预获取-预加载模块-prefetch-preload-module\"><a href=\"#预获取-预加载模块-prefetch-preload-module\" class=\"headerlink\" title=\"预获取/预加载模块(prefetch/preload module)\"></a>预获取/预加载模块(prefetch/preload module)</h3><ul>\n<li><strong>prefetch</strong>(预获取)：将来某些导航下可能需要的资源</li>\n<li><strong>preload</strong>(预加载)：当前导航下可能需要资源</li>\n</ul>\n<p>prefetch 的简单示例中，有一个 <code>HomePage</code> 组件，其内部渲染一个 <code>LoginButton</code> 组件，点击后按需加载 <code>LoginModal</code> 组件。</p>\n<p><strong>LoginButton.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackPrefetch: true */</span> <span class=\"string\">'./path/to/LoginModal.js'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这会生成 <code>&lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&gt;</code> 并追加到页面头部，指示着浏览器在<strong>闲置时间预取</strong> <code>login-modal-chunk.js</code> 文件。</p>\n<ul>\n<li><p><a href=\"https://medium.com/webpack/link-rel-prefetch-preload-in-webpack-51a52358f84c\" target=\"_blank\" rel=\"noopener\">&lt;link rel=”prefetch/preload /&gt;  in webpack</a></p>\n</li>\n<li><p><a href=\"https://medium.com/reloading/preload-prefetch-and-priorities-in-chrome-776165961bbf\" target=\"_blank\" rel=\"noopener\">Preload, Prefetch And Priorities in Chrome</a></p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\" target=\"_blank\" rel=\"noopener\">Preloading content with </a></p>\n</li>\n</ul>\n<h3 id=\"bundle-分析-bundle-analysis\"><a href=\"#bundle-分析-bundle-analysis\" class=\"headerlink\" title=\"bundle 分析(bundle analysis)\"></a><a href=\"https://webpack.docschina.org/guides/code-splitting/#bundle-analysis\" target=\"_blank\" rel=\"noopener\">bundle 分析(bundle analysis)</a></h3><ul>\n<li><a href=\"https://alexkuz.github.io/webpack-chart/\" target=\"_blank\" rel=\"noopener\">webpack-chart</a>: webpack stats 可交互饼图。</li>\n<li><a href=\"https://chrisbateman.github.io/webpack-visualizer/\" target=\"_blank\" rel=\"noopener\">webpack-visualizer</a>: 可视化并分析你的 bundle，检查哪些模块占用空间，哪些可能是重复使用的。</li>\n<li><a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\" target=\"_blank\" rel=\"noopener\">webpack-bundle-analyzer</a>：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式。</li>\n<li><a href=\"https://webpack.jakoblind.no/optimize\" target=\"_blank\" rel=\"noopener\">webpack bundle optimize helper</a>：这个工具会分析你的 bundle，并提供可操作的改进措施，以减少 bundle 的大小。</li>\n<li><a href=\"https://github.com/bundle-stats/bundle-stats\" target=\"_blank\" rel=\"noopener\">bundle-stats</a>：生成一个 bundle 报告（bundle 大小、资源、模块），并比较不同构建之间的结果。</li>\n</ul>"},{"title":"Type Challenges","toc":true,"date":"2022-05-02T16:00:00.000Z","_content":"\nTypescript 类型体操，重学 TS\n\n<!-- more -->\n\n## Easy\n\n### [Pick](https://tsch.js.org/4)\n\n```tsx\n// Implement the built-in `Pick<T, K>` generic without using it.\n\n// Constructs a type by picking the set of properties `K` from `T`\n\n// For example\n\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype TodoPreview = MyPick<Todo, \"title\" | \"completed\">;\n\nconst todo: TodoPreview = {\n  title: \"Clean room\",\n  completed: false,\n};\n\n// answer\ntype MyPick<T, K extends keyof T> = {\n  [k in K]: T[k];\n};\n```\n\n#### 涉及到的知识点：\n\n##### [extends](https://www.typescriptlang.org/docs/handbook/2/generics.html#generic-constraints)\n\n用于范型约束，限制范型可能出现的种类\n\n##### [keyof](https://www.typescriptlang.org/docs/handbook/2/keyof-types.html)\n\nkeyof 操作符，接受一个 object，返回其 key 的集合\n\n```typescript\ntype Point = {\n  x: number;\n  y: number;\n};\ntype p = keyof Point; // ==> type p = 'x'| 'y'\n```\n\n##### [in](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing)\n\nin 操作符用于判断 object 是否有特定的属性\n\n```typescript\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n\nfunction move(animal: Fish | Bird) {\n  if (\"swim\" in animal) {\n    return animal.swim();\n  }\n\n  return animal.fly();\n}\n```\n\n### [implement Readonly](https://github.com/type-challenges/type-challenges/blob/main/questions/00007-easy-readonly/README.md)\n\nImplement the built-in `Readonly<T>` generic without using it.\n\nConstructs a type with all properties of T set to readonly, meaning the properties of the constructed type cannot be reassigned.\n\nFor example\n\n```typescript\ninterface Todo {\n  title: string\n  description: string\n}\n\nconst todo: MyReadonly<Todo> = {\n  title: \"Hey\",\n  description: \"foobar\"\n}\n\ntodo.title = \"Hello\" // Error: cannot reassign a readonly property\ntodo.description = \"barFoo\" // Error: cannot reassign a readonly property\n```\n\n#### 涉及到的知识点：\n\n##### readonly\n\n只读，会将iterable 对象的所有key设置为只读\n\n```typescript\ntype MyReadOnly<T> = {\n  readonly [key in keyof T]: T[key]\n}\n```\n\n\n\n### Tuple to Object\n\nGive an array, transform into an object type and the key/value must in the given array.\n\nFor example\n\n```typescript\nconst tuple = ['tesla', 'model 3', 'model X', 'model Y'] as const\n\ntype result = TupleToObject<typeof tuple> // expected { tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}\n```\n\n\n\nanswer:\n\n```typescript\ntype TupleToObject<T extends string[]> = {\n  [valye in T[number]]: value\n}\n```\n\n知识点：\n\n\n\n##### [Indexed Access Types](https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html)\n\n```typescript\ntype Person = { age: number; name: string; alive: boolean };\n\ntype Age = Person[\"age\"]; //-> type Age = number\n```\n\n##### Mapped Types\n\n using `number` to get the type of an array’s elements\n\n![image-20220504223237103](https://blog.shancw.net/public/uploads/image-20220504223237103.png)\n\n##### [typeof](https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content)\n\nTypeScript adds a `typeof` operator you can use in a *type* context to refer to the *type* of a variable or property:\n\n\n\n\n\n### First Of Array\n\nImplement a generic `First<T>` that takes an Array `T` and returns it's first element's type.\n\nFor example\n\n```typescript\ntype arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype head1 = First<arr1> // expected to be 'a'\ntype head2 = First<arr2> // expected to be 3\n```\n\nanswer：\n\n```typescript\ntype First<T extends unknown[]> = T['length'] extends 0 ? T[0] : never\n```\n\n\n\n#### 知识点\n\n+ [Conditional Type Constraints](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#conditional-type-constraints)\n\n  `First<T extends unknown[]> = T['length']` 对于这块内容, T extends unknown[] 限制了 T的范围是数组，因此可以通过[indexed Access Types](https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html) 来获取 T['length']\n\n  `T extends something ? TypeA : TypeB` 就是条件类型约束的写法\n\n+ [unkown any 区别](https://stackoverflow.com/questions/51439843/unknown-vs-any/51439876#51439876)\n\n  unkown 是 type-safe 的 any，任何类型都可以声明为unknown，但如果在使用之前没有做任何类型指定，那么针对unknown的任何操作都会抛出错误\n\n  ```typescript\n  let vAny: any = 10;          // We can assign anything to any\n  let vUnknown: unknown =  10; // We can assign anything to unknown just like any \n  \n  \n  let s1: string = vAny;     // Any is assignable to anything \n  let s2: string = vUnknown; // Invalid; we can't assign vUnknown to any other type (without an explicit assertion)\n  \n  vAny.method();     // Ok; anything goes with any\n  vUnknown.method(); // Not ok; we don't know anything about this variable\n  ```\n\n  \n\n### [MyAwaited](https://github.com/type-challenges/type-challenges/blob/main/questions/00189-easy-awaited/README.md)\n\nIf we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type? For example if we have `Promise<ExampleType>` how to get ExampleType?\n\nanswer\n\n```typescript\n/* _____________ Your Code Here _____________ */\n\ntype MyAwaited<T> = T extends Promise<infer item> \n  ? item extends Promise<any> \n    ? MyAwaited<item> \n    : item \n  : never\n/* _____________ Test Cases _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype X = Promise<string>\ntype Y = Promise<{ field: number }>\ntype Z = Promise<Promise<string | number>>\n\ntype cases = [\n  Expect<Equal<MyAwaited<X>, string>>,\n  Expect<Equal<MyAwaited<Y>, { field: number }>>,\n  Expect<Equal<MyAwaited<Z>, string | number>>,\n]\n\n// @ts-expect-error\ntype error = MyAwaited<number>\n\n```\n\n\n\n#### 知识点\n\n+ [infer](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types) 补充类型推断时候可能出现的范型\n\n  Conditional types provide us with a way to infer from types we compare against in the true branch using the `infer` keyword.\n\n  我们可以使用infer对 条件判断类型 true的那部分内容，进行推断\n\n  **以flatten 为例**\n\n  ```typescript\n  type Flatten<T> = T extends any[] ? T[number] : T;\n  ```\n\n  When `Flatten` is given an array type, it uses an indexed access with `number` to fetch out `string[]`’s element type. Otherwise, it just returns the type it was given.\n\n  当Flatten接收的类型是array，那么使用 indexed access + number 来获取Array具体元素的值\n\n  **使用infer来进行改写**\n\n  ```typescript\n  type Flatten<T> = T extends Array<infer Item> ? Item : T\n  ```\n\n+ [use infer in Typescript](https://blog.logrocket.com/understanding-infer-typescript/#:~:text=Using%20infer%20in%20TypeScript,to%20be%20referenced%20or%20returned.)\n\n### [Implement Concat](https://github.com/type-challenges/type-challenges/blob/main/questions/00533-easy-concat/README.md)\n\nImplement the JavaScript `Array.concat` function in the type system. A type takes the two arguments. The output should be a new array that includes inputs in ltr order\n\nFor example\n\n```typescript\ntype Result = Concat<[1], [2]> // expected to be [1, 2]\n```\n\n```typescript\n/* _____________ Your Code Here _____________ */\n\ntype Concat<T extends unknown[], U extends unknown[]> = [...T, ...U]\n\n/* _____________ Test Cases _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Concat<[], []>, []>>,\n  Expect<Equal<Concat<[], [1]>, [1]>>,\n  Expect<Equal<Concat<[1, 2], [3, 4]>, [1, 2, 3, 4]>>,\n  Expect<Equal<Concat<['1', 2, '3'], [false, boolean, '4']>, ['1', 2, '3', false, boolean, '4']>>,\n]\n\n```\n\n#### 知识点\n\n+ [可变tuple 类型](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#variadic-tuple-types)\n\n  ts 4.0 往后支持 范型的解构赋值\n\n## 非ts challenge 库内容\n\n+ [将enum 作为 对象的key](https://stackoverflow.com/questions/44243060/use-enum-as-restricted-key-type-in-typescript)\n\n  key从如下enum获取\n\n  ```typescript\n  export enum ProgressOutlookType {\n    //图片\n    PICTURE = 'PICTURE',\n    //视频\n    VIDEO='VIDEO',\n    //720云\n    CLOUD_720='CLOUD_720',\n  }\n  ```\n\n  value需要设置为 `ProgressOutlookSaveDTO`\n\n  + [Version1: keyof + typeof](https://stackoverflow.com/a/59213781/11418690)\n\n    ```typescript\n    [key in keyof typeof ProgressOutlookType]: FormProps<ProgressOutlookSaveDTO>\n    ```\n\n    + keyof: https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#handbook-content\n    + typeof: https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content\n\n  + [Version2: UtilType Record](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\n\n    ```typescript\n    Record<ProgressOutlookType, FormProps<ProgressOutlookSaveDTO>>\n    ```\n\n    \n\n","source":"_posts/Type Challenges.md","raw":"---\ntitle: Type Challenges\ncategories: [前端]\ntags: [typescript, promise]\ntoc: true\ndate: 2022/5/3\n---\n\nTypescript 类型体操，重学 TS\n\n<!-- more -->\n\n## Easy\n\n### [Pick](https://tsch.js.org/4)\n\n```tsx\n// Implement the built-in `Pick<T, K>` generic without using it.\n\n// Constructs a type by picking the set of properties `K` from `T`\n\n// For example\n\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype TodoPreview = MyPick<Todo, \"title\" | \"completed\">;\n\nconst todo: TodoPreview = {\n  title: \"Clean room\",\n  completed: false,\n};\n\n// answer\ntype MyPick<T, K extends keyof T> = {\n  [k in K]: T[k];\n};\n```\n\n#### 涉及到的知识点：\n\n##### [extends](https://www.typescriptlang.org/docs/handbook/2/generics.html#generic-constraints)\n\n用于范型约束，限制范型可能出现的种类\n\n##### [keyof](https://www.typescriptlang.org/docs/handbook/2/keyof-types.html)\n\nkeyof 操作符，接受一个 object，返回其 key 的集合\n\n```typescript\ntype Point = {\n  x: number;\n  y: number;\n};\ntype p = keyof Point; // ==> type p = 'x'| 'y'\n```\n\n##### [in](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing)\n\nin 操作符用于判断 object 是否有特定的属性\n\n```typescript\ntype Fish = { swim: () => void };\ntype Bird = { fly: () => void };\n\nfunction move(animal: Fish | Bird) {\n  if (\"swim\" in animal) {\n    return animal.swim();\n  }\n\n  return animal.fly();\n}\n```\n\n### [implement Readonly](https://github.com/type-challenges/type-challenges/blob/main/questions/00007-easy-readonly/README.md)\n\nImplement the built-in `Readonly<T>` generic without using it.\n\nConstructs a type with all properties of T set to readonly, meaning the properties of the constructed type cannot be reassigned.\n\nFor example\n\n```typescript\ninterface Todo {\n  title: string\n  description: string\n}\n\nconst todo: MyReadonly<Todo> = {\n  title: \"Hey\",\n  description: \"foobar\"\n}\n\ntodo.title = \"Hello\" // Error: cannot reassign a readonly property\ntodo.description = \"barFoo\" // Error: cannot reassign a readonly property\n```\n\n#### 涉及到的知识点：\n\n##### readonly\n\n只读，会将iterable 对象的所有key设置为只读\n\n```typescript\ntype MyReadOnly<T> = {\n  readonly [key in keyof T]: T[key]\n}\n```\n\n\n\n### Tuple to Object\n\nGive an array, transform into an object type and the key/value must in the given array.\n\nFor example\n\n```typescript\nconst tuple = ['tesla', 'model 3', 'model X', 'model Y'] as const\n\ntype result = TupleToObject<typeof tuple> // expected { tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}\n```\n\n\n\nanswer:\n\n```typescript\ntype TupleToObject<T extends string[]> = {\n  [valye in T[number]]: value\n}\n```\n\n知识点：\n\n\n\n##### [Indexed Access Types](https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html)\n\n```typescript\ntype Person = { age: number; name: string; alive: boolean };\n\ntype Age = Person[\"age\"]; //-> type Age = number\n```\n\n##### Mapped Types\n\n using `number` to get the type of an array’s elements\n\n![image-20220504223237103](https://blog.shancw.net/public/uploads/image-20220504223237103.png)\n\n##### [typeof](https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content)\n\nTypeScript adds a `typeof` operator you can use in a *type* context to refer to the *type* of a variable or property:\n\n\n\n\n\n### First Of Array\n\nImplement a generic `First<T>` that takes an Array `T` and returns it's first element's type.\n\nFor example\n\n```typescript\ntype arr1 = ['a', 'b', 'c']\ntype arr2 = [3, 2, 1]\n\ntype head1 = First<arr1> // expected to be 'a'\ntype head2 = First<arr2> // expected to be 3\n```\n\nanswer：\n\n```typescript\ntype First<T extends unknown[]> = T['length'] extends 0 ? T[0] : never\n```\n\n\n\n#### 知识点\n\n+ [Conditional Type Constraints](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#conditional-type-constraints)\n\n  `First<T extends unknown[]> = T['length']` 对于这块内容, T extends unknown[] 限制了 T的范围是数组，因此可以通过[indexed Access Types](https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html) 来获取 T['length']\n\n  `T extends something ? TypeA : TypeB` 就是条件类型约束的写法\n\n+ [unkown any 区别](https://stackoverflow.com/questions/51439843/unknown-vs-any/51439876#51439876)\n\n  unkown 是 type-safe 的 any，任何类型都可以声明为unknown，但如果在使用之前没有做任何类型指定，那么针对unknown的任何操作都会抛出错误\n\n  ```typescript\n  let vAny: any = 10;          // We can assign anything to any\n  let vUnknown: unknown =  10; // We can assign anything to unknown just like any \n  \n  \n  let s1: string = vAny;     // Any is assignable to anything \n  let s2: string = vUnknown; // Invalid; we can't assign vUnknown to any other type (without an explicit assertion)\n  \n  vAny.method();     // Ok; anything goes with any\n  vUnknown.method(); // Not ok; we don't know anything about this variable\n  ```\n\n  \n\n### [MyAwaited](https://github.com/type-challenges/type-challenges/blob/main/questions/00189-easy-awaited/README.md)\n\nIf we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type? For example if we have `Promise<ExampleType>` how to get ExampleType?\n\nanswer\n\n```typescript\n/* _____________ Your Code Here _____________ */\n\ntype MyAwaited<T> = T extends Promise<infer item> \n  ? item extends Promise<any> \n    ? MyAwaited<item> \n    : item \n  : never\n/* _____________ Test Cases _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype X = Promise<string>\ntype Y = Promise<{ field: number }>\ntype Z = Promise<Promise<string | number>>\n\ntype cases = [\n  Expect<Equal<MyAwaited<X>, string>>,\n  Expect<Equal<MyAwaited<Y>, { field: number }>>,\n  Expect<Equal<MyAwaited<Z>, string | number>>,\n]\n\n// @ts-expect-error\ntype error = MyAwaited<number>\n\n```\n\n\n\n#### 知识点\n\n+ [infer](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types) 补充类型推断时候可能出现的范型\n\n  Conditional types provide us with a way to infer from types we compare against in the true branch using the `infer` keyword.\n\n  我们可以使用infer对 条件判断类型 true的那部分内容，进行推断\n\n  **以flatten 为例**\n\n  ```typescript\n  type Flatten<T> = T extends any[] ? T[number] : T;\n  ```\n\n  When `Flatten` is given an array type, it uses an indexed access with `number` to fetch out `string[]`’s element type. Otherwise, it just returns the type it was given.\n\n  当Flatten接收的类型是array，那么使用 indexed access + number 来获取Array具体元素的值\n\n  **使用infer来进行改写**\n\n  ```typescript\n  type Flatten<T> = T extends Array<infer Item> ? Item : T\n  ```\n\n+ [use infer in Typescript](https://blog.logrocket.com/understanding-infer-typescript/#:~:text=Using%20infer%20in%20TypeScript,to%20be%20referenced%20or%20returned.)\n\n### [Implement Concat](https://github.com/type-challenges/type-challenges/blob/main/questions/00533-easy-concat/README.md)\n\nImplement the JavaScript `Array.concat` function in the type system. A type takes the two arguments. The output should be a new array that includes inputs in ltr order\n\nFor example\n\n```typescript\ntype Result = Concat<[1], [2]> // expected to be [1, 2]\n```\n\n```typescript\n/* _____________ Your Code Here _____________ */\n\ntype Concat<T extends unknown[], U extends unknown[]> = [...T, ...U]\n\n/* _____________ Test Cases _____________ */\nimport type { Equal, Expect } from '@type-challenges/utils'\n\ntype cases = [\n  Expect<Equal<Concat<[], []>, []>>,\n  Expect<Equal<Concat<[], [1]>, [1]>>,\n  Expect<Equal<Concat<[1, 2], [3, 4]>, [1, 2, 3, 4]>>,\n  Expect<Equal<Concat<['1', 2, '3'], [false, boolean, '4']>, ['1', 2, '3', false, boolean, '4']>>,\n]\n\n```\n\n#### 知识点\n\n+ [可变tuple 类型](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#variadic-tuple-types)\n\n  ts 4.0 往后支持 范型的解构赋值\n\n## 非ts challenge 库内容\n\n+ [将enum 作为 对象的key](https://stackoverflow.com/questions/44243060/use-enum-as-restricted-key-type-in-typescript)\n\n  key从如下enum获取\n\n  ```typescript\n  export enum ProgressOutlookType {\n    //图片\n    PICTURE = 'PICTURE',\n    //视频\n    VIDEO='VIDEO',\n    //720云\n    CLOUD_720='CLOUD_720',\n  }\n  ```\n\n  value需要设置为 `ProgressOutlookSaveDTO`\n\n  + [Version1: keyof + typeof](https://stackoverflow.com/a/59213781/11418690)\n\n    ```typescript\n    [key in keyof typeof ProgressOutlookType]: FormProps<ProgressOutlookSaveDTO>\n    ```\n\n    + keyof: https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#handbook-content\n    + typeof: https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content\n\n  + [Version2: UtilType Record](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type)\n\n    ```typescript\n    Record<ProgressOutlookType, FormProps<ProgressOutlookSaveDTO>>\n    ```\n\n    \n\n","slug":"Type Challenges","published":1,"updated":"2022-05-12T14:56:09.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7it000wgoswbbsl7zos","content":"<p>Typescript 类型体操，重学 TS</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><h3 id=\"Pick\"><a href=\"#Pick\" class=\"headerlink\" title=\"Pick\"></a><a href=\"https://tsch.js.org/4\" target=\"_blank\" rel=\"noopener\">Pick</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Implement the built-in &#96;Pick&lt;T, K&gt;&#96; generic without using it.</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Constructs a type by picking the set of properties &#96;K&#96; from &#96;T&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; For example</span><br><span class=\"line\"></span><br><span class=\"line\">interface Todo &#123;</span><br><span class=\"line\">  title: string;</span><br><span class=\"line\">  description: string;</span><br><span class=\"line\">  completed: boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type TodoPreview &#x3D; MyPick&lt;Todo, &quot;title&quot; | &quot;completed&quot;&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">const todo: TodoPreview &#x3D; &#123;</span><br><span class=\"line\">  title: &quot;Clean room&quot;,</span><br><span class=\"line\">  completed: false,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; answer</span><br><span class=\"line\">type MyPick&lt;T, K extends keyof T&gt; &#x3D; &#123;</span><br><span class=\"line\">  [k in K]: T[k];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"涉及到的知识点：\"><a href=\"#涉及到的知识点：\" class=\"headerlink\" title=\"涉及到的知识点：\"></a>涉及到的知识点：</h4><h5 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/generics.html#generic-constraints\" target=\"_blank\" rel=\"noopener\">extends</a></h5><p>用于范型约束，限制范型可能出现的种类</p>\n<h5 id=\"keyof\"><a href=\"#keyof\" class=\"headerlink\" title=\"keyof\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/keyof-types.html\" target=\"_blank\" rel=\"noopener\">keyof</a></h5><p>keyof 操作符，接受一个 object，返回其 key 的集合</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Point = &#123;</span><br><span class=\"line\">  x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> p = keyof Point; <span class=\"comment\">// ==&gt; type p = 'x'| 'y'</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\" target=\"_blank\" rel=\"noopener\">in</a></h5><p>in 操作符用于判断 object 是否有特定的属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Fish = &#123; swim: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Bird = &#123; fly: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">animal: Fish | Bird</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"swim\"</span> <span class=\"keyword\">in</span> animal) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animal.swim();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> animal.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"implement-Readonly\"><a href=\"#implement-Readonly\" class=\"headerlink\" title=\"implement Readonly\"></a><a href=\"https://github.com/type-challenges/type-challenges/blob/main/questions/00007-easy-readonly/README.md\" target=\"_blank\" rel=\"noopener\">implement Readonly</a></h3><p>Implement the built-in <code>Readonly&lt;T&gt;</code> generic without using it.</p>\n<p>Constructs a type with all properties of T set to readonly, meaning the properties of the constructed type cannot be reassigned.</p>\n<p>For example</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Todo &#123;</span><br><span class=\"line\">  title: <span class=\"built_in\">string</span></span><br><span class=\"line\">  description: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> todo: MyReadonly&lt;Todo&gt; = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">\"Hey\"</span>,</span><br><span class=\"line\">  description: <span class=\"string\">\"foobar\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">todo.title = <span class=\"string\">\"Hello\"</span> <span class=\"comment\">// Error: cannot reassign a readonly property</span></span><br><span class=\"line\">todo.description = <span class=\"string\">\"barFoo\"</span> <span class=\"comment\">// Error: cannot reassign a readonly property</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"涉及到的知识点：-1\"><a href=\"#涉及到的知识点：-1\" class=\"headerlink\" title=\"涉及到的知识点：\"></a>涉及到的知识点：</h4><h5 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h5><p>只读，会将iterable 对象的所有key设置为只读</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyReadOnly&lt;T&gt; = &#123;</span><br><span class=\"line\">  readonly [key <span class=\"keyword\">in</span> keyof T]: T[key]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Tuple-to-Object\"><a href=\"#Tuple-to-Object\" class=\"headerlink\" title=\"Tuple to Object\"></a>Tuple to Object</h3><p>Give an array, transform into an object type and the key/value must in the given array.</p>\n<p>For example</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tuple = [<span class=\"string\">'tesla'</span>, <span class=\"string\">'model 3'</span>, <span class=\"string\">'model X'</span>, <span class=\"string\">'model Y'</span>] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> result = TupleToObject&lt;<span class=\"keyword\">typeof</span> tuple&gt; <span class=\"comment\">// expected &#123; tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>answer:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TupleToObject&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>[]&gt; = &#123;</span><br><span class=\"line\">  [valye <span class=\"keyword\">in</span> T[<span class=\"built_in\">number</span>]]: value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>知识点：</p>\n<h5 id=\"Indexed-Access-Types\"><a href=\"#Indexed-Access-Types\" class=\"headerlink\" title=\"Indexed Access Types\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html\" target=\"_blank\" rel=\"noopener\">Indexed Access Types</a></h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person = &#123; age: <span class=\"built_in\">number</span>; name: <span class=\"built_in\">string</span>; alive: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Age = Person[<span class=\"string\">\"age\"</span>]; <span class=\"comment\">//-&gt; type Age = number</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Mapped-Types\"><a href=\"#Mapped-Types\" class=\"headerlink\" title=\"Mapped Types\"></a>Mapped Types</h5><p> using <code>number</code> to get the type of an array’s elements</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220504223237103.png\" alt=\"image-20220504223237103\"></p>\n<h5 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content\" target=\"_blank\" rel=\"noopener\">typeof</a></h5><p>TypeScript adds a <code>typeof</code> operator you can use in a <em>type</em> context to refer to the <em>type</em> of a variable or property:</p>\n<h3 id=\"First-Of-Array\"><a href=\"#First-Of-Array\" class=\"headerlink\" title=\"First Of Array\"></a>First Of Array</h3><p>Implement a generic <code>First&lt;T&gt;</code> that takes an Array <code>T</code> and returns it’s first element’s type.</p>\n<p>For example</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"keyword\">type</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> head1 = First&lt;arr1&gt; <span class=\"comment\">// expected to be 'a'</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> head2 = First&lt;arr2&gt; <span class=\"comment\">// expected to be 3</span></span><br></pre></td></tr></table></figure>\n\n<p>answer：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> First&lt;T <span class=\"keyword\">extends</span> unknown[]&gt; = T[<span class=\"string\">'length'</span>] <span class=\"keyword\">extends</span> <span class=\"number\">0</span> ? T[<span class=\"number\">0</span>] : never</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h4><ul>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#conditional-type-constraints\" target=\"_blank\" rel=\"noopener\">Conditional Type Constraints</a></p>\n<p><code>First&lt;T extends unknown[]&gt; = T[&#39;length&#39;]</code> 对于这块内容, T extends unknown[] 限制了 T的范围是数组，因此可以通过<a href=\"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html\" target=\"_blank\" rel=\"noopener\">indexed Access Types</a> 来获取 T[‘length’]</p>\n<p><code>T extends something ? TypeA : TypeB</code> 就是条件类型约束的写法</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/51439843/unknown-vs-any/51439876#51439876\" target=\"_blank\" rel=\"noopener\">unkown any 区别</a></p>\n<p>unkown 是 type-safe 的 any，任何类型都可以声明为unknown，但如果在使用之前没有做任何类型指定，那么针对unknown的任何操作都会抛出错误</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vAny: <span class=\"built_in\">any</span> = <span class=\"number\">10</span>;          <span class=\"comment\">// We can assign anything to any</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> vUnknown: unknown =  <span class=\"number\">10</span>; <span class=\"comment\">// We can assign anything to unknown just like any </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s1: <span class=\"built_in\">string</span> = vAny;     <span class=\"comment\">// Any is assignable to anything </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s2: <span class=\"built_in\">string</span> = vUnknown; <span class=\"comment\">// Invalid; we can't assign vUnknown to any other type (without an explicit assertion)</span></span><br><span class=\"line\"></span><br><span class=\"line\">vAny.method();     <span class=\"comment\">// Ok; anything goes with any</span></span><br><span class=\"line\">vUnknown.method(); <span class=\"comment\">// Not ok; we don't know anything about this variable</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"MyAwaited\"><a href=\"#MyAwaited\" class=\"headerlink\" title=\"MyAwaited\"></a><a href=\"https://github.com/type-challenges/type-challenges/blob/main/questions/00189-easy-awaited/README.md\" target=\"_blank\" rel=\"noopener\">MyAwaited</a></h3><p>If we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type? For example if we have <code>Promise&lt;ExampleType&gt;</code> how to get ExampleType?</p>\n<p>answer</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* _____________ Your Code Here _____________ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyAwaited&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">Promise</span>&lt;infer item&gt; </span><br><span class=\"line\">  ? item <span class=\"keyword\">extends</span> <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">any</span>&gt; </span><br><span class=\"line\">    ? MyAwaited&lt;item&gt; </span><br><span class=\"line\">    : item </span><br><span class=\"line\">  : never</span><br><span class=\"line\"><span class=\"comment\">/* _____________ Test Cases _____________ */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; Equal, Expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@type-challenges/utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> X = <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Y = <span class=\"built_in\">Promise</span>&lt;&#123; field: <span class=\"built_in\">number</span> &#125;&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Z = <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cases = [</span><br><span class=\"line\">  Expect&lt;Equal&lt;MyAwaited&lt;X&gt;, <span class=\"built_in\">string</span>&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;MyAwaited&lt;Y&gt;, &#123; field: <span class=\"built_in\">number</span> &#125;&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;MyAwaited&lt;Z&gt;, <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&gt;&gt;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> error = MyAwaited&lt;<span class=\"built_in\">number</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"知识点-1\"><a href=\"#知识点-1\" class=\"headerlink\" title=\"知识点\"></a>知识点</h4><ul>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types\" target=\"_blank\" rel=\"noopener\">infer</a> 补充类型推断时候可能出现的范型</p>\n<p>Conditional types provide us with a way to infer from types we compare against in the true branch using the <code>infer</code> keyword.</p>\n<p>我们可以使用infer对 条件判断类型 true的那部分内容，进行推断</p>\n<p><strong>以flatten 为例</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Flatten&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span>[] ? T[<span class=\"built_in\">number</span>] : T;</span><br></pre></td></tr></table></figure>\n\n<p>When <code>Flatten</code> is given an array type, it uses an indexed access with <code>number</code> to fetch out <code>string[]</code>’s element type. Otherwise, it just returns the type it was given.</p>\n<p>当Flatten接收的类型是array，那么使用 indexed access + number 来获取Array具体元素的值</p>\n<p><strong>使用infer来进行改写</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Flatten&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">Array</span>&lt;infer Item&gt; ? Item : T</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://blog.logrocket.com/understanding-infer-typescript/#:~:text=Using%20infer%20in%20TypeScript,to%20be%20referenced%20or%20returned.\" target=\"_blank\" rel=\"noopener\">use infer in Typescript</a></p>\n</li>\n</ul>\n<h3 id=\"Implement-Concat\"><a href=\"#Implement-Concat\" class=\"headerlink\" title=\"Implement Concat\"></a><a href=\"https://github.com/type-challenges/type-challenges/blob/main/questions/00533-easy-concat/README.md\" target=\"_blank\" rel=\"noopener\">Implement Concat</a></h3><p>Implement the JavaScript <code>Array.concat</code> function in the type system. A type takes the two arguments. The output should be a new array that includes inputs in ltr order</p>\n<p>For example</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Result = Concat&lt;[<span class=\"number\">1</span>], [<span class=\"number\">2</span>]&gt; <span class=\"comment\">// expected to be [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* _____________ Your Code Here _____________ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Concat&lt;T <span class=\"keyword\">extends</span> unknown[], U <span class=\"keyword\">extends</span> unknown[]&gt; = [...T, ...U]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* _____________ Test Cases _____________ */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; Equal, Expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@type-challenges/utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cases = [</span><br><span class=\"line\">  Expect&lt;Equal&lt;Concat&lt;[], []&gt;, []&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;Concat&lt;[], [<span class=\"number\">1</span>]&gt;, [<span class=\"number\">1</span>]&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;Concat&lt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]&gt;, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;Concat&lt;[<span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"string\">'3'</span>], [<span class=\"literal\">false</span>, <span class=\"built_in\">boolean</span>, <span class=\"string\">'4'</span>]&gt;, [<span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"string\">'3'</span>, <span class=\"literal\">false</span>, <span class=\"built_in\">boolean</span>, <span class=\"string\">'4'</span>]&gt;&gt;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"知识点-2\"><a href=\"#知识点-2\" class=\"headerlink\" title=\"知识点\"></a>知识点</h4><ul>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#variadic-tuple-types\" target=\"_blank\" rel=\"noopener\">可变tuple 类型</a></p>\n<p>ts 4.0 往后支持 范型的解构赋值</p>\n</li>\n</ul>\n<h2 id=\"非ts-challenge-库内容\"><a href=\"#非ts-challenge-库内容\" class=\"headerlink\" title=\"非ts challenge 库内容\"></a>非ts challenge 库内容</h2><ul>\n<li><p><a href=\"https://stackoverflow.com/questions/44243060/use-enum-as-restricted-key-type-in-typescript\" target=\"_blank\" rel=\"noopener\">将enum 作为 对象的key</a></p>\n<p>key从如下enum获取</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> ProgressOutlookType &#123;</span><br><span class=\"line\">  <span class=\"comment\">//图片</span></span><br><span class=\"line\">  PICTURE = <span class=\"string\">'PICTURE'</span>,</span><br><span class=\"line\">  <span class=\"comment\">//视频</span></span><br><span class=\"line\">  VIDEO=<span class=\"string\">'VIDEO'</span>,</span><br><span class=\"line\">  <span class=\"comment\">//720云</span></span><br><span class=\"line\">  CLOUD_720=<span class=\"string\">'CLOUD_720'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>value需要设置为 <code>ProgressOutlookSaveDTO</code></p>\n<ul>\n<li><p><a href=\"https://stackoverflow.com/a/59213781/11418690\" target=\"_blank\" rel=\"noopener\">Version1: keyof + typeof</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[key <span class=\"keyword\">in</span> keyof <span class=\"keyword\">typeof</span> ProgressOutlookType]: FormProps&lt;ProgressOutlookSaveDTO&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>keyof: <a href=\"https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#handbook-content\" target=\"_blank\" rel=\"noopener\">https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#handbook-content</a></li>\n<li>typeof: <a href=\"https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content\" target=\"_blank\" rel=\"noopener\">https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type\" target=\"_blank\" rel=\"noopener\">Version2: UtilType Record</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Record&lt;ProgressOutlookType, FormProps&lt;ProgressOutlookSaveDTO&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Typescript 类型体操，重学 TS</p>","more":"<h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><h3 id=\"Pick\"><a href=\"#Pick\" class=\"headerlink\" title=\"Pick\"></a><a href=\"https://tsch.js.org/4\" target=\"_blank\" rel=\"noopener\">Pick</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Implement the built-in &#96;Pick&lt;T, K&gt;&#96; generic without using it.</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Constructs a type by picking the set of properties &#96;K&#96; from &#96;T&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; For example</span><br><span class=\"line\"></span><br><span class=\"line\">interface Todo &#123;</span><br><span class=\"line\">  title: string;</span><br><span class=\"line\">  description: string;</span><br><span class=\"line\">  completed: boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type TodoPreview &#x3D; MyPick&lt;Todo, &quot;title&quot; | &quot;completed&quot;&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">const todo: TodoPreview &#x3D; &#123;</span><br><span class=\"line\">  title: &quot;Clean room&quot;,</span><br><span class=\"line\">  completed: false,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; answer</span><br><span class=\"line\">type MyPick&lt;T, K extends keyof T&gt; &#x3D; &#123;</span><br><span class=\"line\">  [k in K]: T[k];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"涉及到的知识点：\"><a href=\"#涉及到的知识点：\" class=\"headerlink\" title=\"涉及到的知识点：\"></a>涉及到的知识点：</h4><h5 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/generics.html#generic-constraints\" target=\"_blank\" rel=\"noopener\">extends</a></h5><p>用于范型约束，限制范型可能出现的种类</p>\n<h5 id=\"keyof\"><a href=\"#keyof\" class=\"headerlink\" title=\"keyof\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/keyof-types.html\" target=\"_blank\" rel=\"noopener\">keyof</a></h5><p>keyof 操作符，接受一个 object，返回其 key 的集合</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Point = &#123;</span><br><span class=\"line\">  x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> p = keyof Point; <span class=\"comment\">// ==&gt; type p = 'x'| 'y'</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-in-operator-narrowing\" target=\"_blank\" rel=\"noopener\">in</a></h5><p>in 操作符用于判断 object 是否有特定的属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Fish = &#123; swim: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Bird = &#123; fly: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">animal: Fish | Bird</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">\"swim\"</span> <span class=\"keyword\">in</span> animal) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animal.swim();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> animal.fly();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"implement-Readonly\"><a href=\"#implement-Readonly\" class=\"headerlink\" title=\"implement Readonly\"></a><a href=\"https://github.com/type-challenges/type-challenges/blob/main/questions/00007-easy-readonly/README.md\" target=\"_blank\" rel=\"noopener\">implement Readonly</a></h3><p>Implement the built-in <code>Readonly&lt;T&gt;</code> generic without using it.</p>\n<p>Constructs a type with all properties of T set to readonly, meaning the properties of the constructed type cannot be reassigned.</p>\n<p>For example</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Todo &#123;</span><br><span class=\"line\">  title: <span class=\"built_in\">string</span></span><br><span class=\"line\">  description: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> todo: MyReadonly&lt;Todo&gt; = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">\"Hey\"</span>,</span><br><span class=\"line\">  description: <span class=\"string\">\"foobar\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">todo.title = <span class=\"string\">\"Hello\"</span> <span class=\"comment\">// Error: cannot reassign a readonly property</span></span><br><span class=\"line\">todo.description = <span class=\"string\">\"barFoo\"</span> <span class=\"comment\">// Error: cannot reassign a readonly property</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"涉及到的知识点：-1\"><a href=\"#涉及到的知识点：-1\" class=\"headerlink\" title=\"涉及到的知识点：\"></a>涉及到的知识点：</h4><h5 id=\"readonly\"><a href=\"#readonly\" class=\"headerlink\" title=\"readonly\"></a>readonly</h5><p>只读，会将iterable 对象的所有key设置为只读</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyReadOnly&lt;T&gt; = &#123;</span><br><span class=\"line\">  readonly [key <span class=\"keyword\">in</span> keyof T]: T[key]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Tuple-to-Object\"><a href=\"#Tuple-to-Object\" class=\"headerlink\" title=\"Tuple to Object\"></a>Tuple to Object</h3><p>Give an array, transform into an object type and the key/value must in the given array.</p>\n<p>For example</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tuple = [<span class=\"string\">'tesla'</span>, <span class=\"string\">'model 3'</span>, <span class=\"string\">'model X'</span>, <span class=\"string\">'model Y'</span>] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> result = TupleToObject&lt;<span class=\"keyword\">typeof</span> tuple&gt; <span class=\"comment\">// expected &#123; tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>answer:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TupleToObject&lt;T <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>[]&gt; = &#123;</span><br><span class=\"line\">  [valye <span class=\"keyword\">in</span> T[<span class=\"built_in\">number</span>]]: value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>知识点：</p>\n<h5 id=\"Indexed-Access-Types\"><a href=\"#Indexed-Access-Types\" class=\"headerlink\" title=\"Indexed Access Types\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html\" target=\"_blank\" rel=\"noopener\">Indexed Access Types</a></h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person = &#123; age: <span class=\"built_in\">number</span>; name: <span class=\"built_in\">string</span>; alive: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Age = Person[<span class=\"string\">\"age\"</span>]; <span class=\"comment\">//-&gt; type Age = number</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Mapped-Types\"><a href=\"#Mapped-Types\" class=\"headerlink\" title=\"Mapped Types\"></a>Mapped Types</h5><p> using <code>number</code> to get the type of an array’s elements</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220504223237103.png\" alt=\"image-20220504223237103\"></p>\n<h5 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a><a href=\"https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content\" target=\"_blank\" rel=\"noopener\">typeof</a></h5><p>TypeScript adds a <code>typeof</code> operator you can use in a <em>type</em> context to refer to the <em>type</em> of a variable or property:</p>\n<h3 id=\"First-Of-Array\"><a href=\"#First-Of-Array\" class=\"headerlink\" title=\"First Of Array\"></a>First Of Array</h3><p>Implement a generic <code>First&lt;T&gt;</code> that takes an Array <code>T</code> and returns it’s first element’s type.</p>\n<p>For example</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"keyword\">type</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> head1 = First&lt;arr1&gt; <span class=\"comment\">// expected to be 'a'</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> head2 = First&lt;arr2&gt; <span class=\"comment\">// expected to be 3</span></span><br></pre></td></tr></table></figure>\n\n<p>answer：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> First&lt;T <span class=\"keyword\">extends</span> unknown[]&gt; = T[<span class=\"string\">'length'</span>] <span class=\"keyword\">extends</span> <span class=\"number\">0</span> ? T[<span class=\"number\">0</span>] : never</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h4><ul>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#conditional-type-constraints\" target=\"_blank\" rel=\"noopener\">Conditional Type Constraints</a></p>\n<p><code>First&lt;T extends unknown[]&gt; = T[&#39;length&#39;]</code> 对于这块内容, T extends unknown[] 限制了 T的范围是数组，因此可以通过<a href=\"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html\" target=\"_blank\" rel=\"noopener\">indexed Access Types</a> 来获取 T[‘length’]</p>\n<p><code>T extends something ? TypeA : TypeB</code> 就是条件类型约束的写法</p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/51439843/unknown-vs-any/51439876#51439876\" target=\"_blank\" rel=\"noopener\">unkown any 区别</a></p>\n<p>unkown 是 type-safe 的 any，任何类型都可以声明为unknown，但如果在使用之前没有做任何类型指定，那么针对unknown的任何操作都会抛出错误</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vAny: <span class=\"built_in\">any</span> = <span class=\"number\">10</span>;          <span class=\"comment\">// We can assign anything to any</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> vUnknown: unknown =  <span class=\"number\">10</span>; <span class=\"comment\">// We can assign anything to unknown just like any </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s1: <span class=\"built_in\">string</span> = vAny;     <span class=\"comment\">// Any is assignable to anything </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s2: <span class=\"built_in\">string</span> = vUnknown; <span class=\"comment\">// Invalid; we can't assign vUnknown to any other type (without an explicit assertion)</span></span><br><span class=\"line\"></span><br><span class=\"line\">vAny.method();     <span class=\"comment\">// Ok; anything goes with any</span></span><br><span class=\"line\">vUnknown.method(); <span class=\"comment\">// Not ok; we don't know anything about this variable</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"MyAwaited\"><a href=\"#MyAwaited\" class=\"headerlink\" title=\"MyAwaited\"></a><a href=\"https://github.com/type-challenges/type-challenges/blob/main/questions/00189-easy-awaited/README.md\" target=\"_blank\" rel=\"noopener\">MyAwaited</a></h3><p>If we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type? For example if we have <code>Promise&lt;ExampleType&gt;</code> how to get ExampleType?</p>\n<p>answer</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* _____________ Your Code Here _____________ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyAwaited&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">Promise</span>&lt;infer item&gt; </span><br><span class=\"line\">  ? item <span class=\"keyword\">extends</span> <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">any</span>&gt; </span><br><span class=\"line\">    ? MyAwaited&lt;item&gt; </span><br><span class=\"line\">    : item </span><br><span class=\"line\">  : never</span><br><span class=\"line\"><span class=\"comment\">/* _____________ Test Cases _____________ */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; Equal, Expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@type-challenges/utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> X = <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Y = <span class=\"built_in\">Promise</span>&lt;&#123; field: <span class=\"built_in\">number</span> &#125;&gt;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Z = <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cases = [</span><br><span class=\"line\">  Expect&lt;Equal&lt;MyAwaited&lt;X&gt;, <span class=\"built_in\">string</span>&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;MyAwaited&lt;Y&gt;, &#123; field: <span class=\"built_in\">number</span> &#125;&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;MyAwaited&lt;Z&gt;, <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&gt;&gt;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> error = MyAwaited&lt;<span class=\"built_in\">number</span>&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"知识点-1\"><a href=\"#知识点-1\" class=\"headerlink\" title=\"知识点\"></a>知识点</h4><ul>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types\" target=\"_blank\" rel=\"noopener\">infer</a> 补充类型推断时候可能出现的范型</p>\n<p>Conditional types provide us with a way to infer from types we compare against in the true branch using the <code>infer</code> keyword.</p>\n<p>我们可以使用infer对 条件判断类型 true的那部分内容，进行推断</p>\n<p><strong>以flatten 为例</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Flatten&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span>[] ? T[<span class=\"built_in\">number</span>] : T;</span><br></pre></td></tr></table></figure>\n\n<p>When <code>Flatten</code> is given an array type, it uses an indexed access with <code>number</code> to fetch out <code>string[]</code>’s element type. Otherwise, it just returns the type it was given.</p>\n<p>当Flatten接收的类型是array，那么使用 indexed access + number 来获取Array具体元素的值</p>\n<p><strong>使用infer来进行改写</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Flatten&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">Array</span>&lt;infer Item&gt; ? Item : T</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://blog.logrocket.com/understanding-infer-typescript/#:~:text=Using%20infer%20in%20TypeScript,to%20be%20referenced%20or%20returned.\" target=\"_blank\" rel=\"noopener\">use infer in Typescript</a></p>\n</li>\n</ul>\n<h3 id=\"Implement-Concat\"><a href=\"#Implement-Concat\" class=\"headerlink\" title=\"Implement Concat\"></a><a href=\"https://github.com/type-challenges/type-challenges/blob/main/questions/00533-easy-concat/README.md\" target=\"_blank\" rel=\"noopener\">Implement Concat</a></h3><p>Implement the JavaScript <code>Array.concat</code> function in the type system. A type takes the two arguments. The output should be a new array that includes inputs in ltr order</p>\n<p>For example</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Result = Concat&lt;[<span class=\"number\">1</span>], [<span class=\"number\">2</span>]&gt; <span class=\"comment\">// expected to be [1, 2]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* _____________ Your Code Here _____________ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Concat&lt;T <span class=\"keyword\">extends</span> unknown[], U <span class=\"keyword\">extends</span> unknown[]&gt; = [...T, ...U]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* _____________ Test Cases _____________ */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; Equal, Expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@type-challenges/utils'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> cases = [</span><br><span class=\"line\">  Expect&lt;Equal&lt;Concat&lt;[], []&gt;, []&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;Concat&lt;[], [<span class=\"number\">1</span>]&gt;, [<span class=\"number\">1</span>]&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;Concat&lt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]&gt;, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]&gt;&gt;,</span><br><span class=\"line\">  Expect&lt;Equal&lt;Concat&lt;[<span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"string\">'3'</span>], [<span class=\"literal\">false</span>, <span class=\"built_in\">boolean</span>, <span class=\"string\">'4'</span>]&gt;, [<span class=\"string\">'1'</span>, <span class=\"number\">2</span>, <span class=\"string\">'3'</span>, <span class=\"literal\">false</span>, <span class=\"built_in\">boolean</span>, <span class=\"string\">'4'</span>]&gt;&gt;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"知识点-2\"><a href=\"#知识点-2\" class=\"headerlink\" title=\"知识点\"></a>知识点</h4><ul>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#variadic-tuple-types\" target=\"_blank\" rel=\"noopener\">可变tuple 类型</a></p>\n<p>ts 4.0 往后支持 范型的解构赋值</p>\n</li>\n</ul>\n<h2 id=\"非ts-challenge-库内容\"><a href=\"#非ts-challenge-库内容\" class=\"headerlink\" title=\"非ts challenge 库内容\"></a>非ts challenge 库内容</h2><ul>\n<li><p><a href=\"https://stackoverflow.com/questions/44243060/use-enum-as-restricted-key-type-in-typescript\" target=\"_blank\" rel=\"noopener\">将enum 作为 对象的key</a></p>\n<p>key从如下enum获取</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">enum</span> ProgressOutlookType &#123;</span><br><span class=\"line\">  <span class=\"comment\">//图片</span></span><br><span class=\"line\">  PICTURE = <span class=\"string\">'PICTURE'</span>,</span><br><span class=\"line\">  <span class=\"comment\">//视频</span></span><br><span class=\"line\">  VIDEO=<span class=\"string\">'VIDEO'</span>,</span><br><span class=\"line\">  <span class=\"comment\">//720云</span></span><br><span class=\"line\">  CLOUD_720=<span class=\"string\">'CLOUD_720'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>value需要设置为 <code>ProgressOutlookSaveDTO</code></p>\n<ul>\n<li><p><a href=\"https://stackoverflow.com/a/59213781/11418690\" target=\"_blank\" rel=\"noopener\">Version1: keyof + typeof</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[key <span class=\"keyword\">in</span> keyof <span class=\"keyword\">typeof</span> ProgressOutlookType]: FormProps&lt;ProgressOutlookSaveDTO&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>keyof: <a href=\"https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#handbook-content\" target=\"_blank\" rel=\"noopener\">https://www.typescriptlang.org/docs/handbook/2/keyof-types.html#handbook-content</a></li>\n<li>typeof: <a href=\"https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content\" target=\"_blank\" rel=\"noopener\">https://www.typescriptlang.org/docs/handbook/2/typeof-types.html#handbook-content</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type\" target=\"_blank\" rel=\"noopener\">Version2: UtilType Record</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Record&lt;ProgressOutlookType, FormProps&lt;ProgressOutlookSaveDTO&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>"},{"title":"算法-合并有序链表","toc":true,"date":"2020-06-21T16:00:00.000Z","_content":"\nhttps://leetcode-cn.com/problems/merge-two-sorted-lists/\n\n![image-20211213085535759](https://tva1.sinaimg.cn/large/008i3skNgy1gxbx9fcs5tj30dn0mymy9.jpg)\n\n题目解读：合并两个有序递增链表，未强调空间复杂度。\n\n这个算法的逻辑类似于「拉拉链」，l1, l2 类似于拉链两侧的锯齿，指针 p 就好像拉链的拉索，将两个有序链表合并。\n\n代码中还用到一个链表的算法题中是很常见的「虚拟头结点」技巧，也就是 dummy 节点。你可以试试，如果不使用 dummy 虚拟节点，代码会复杂很多，而有了 dummy 节点这个占位符，可以避免处理空指针的情况，降低代码的复杂性。\n\n<!-- more -->\n\n# iteration\n\n思路：维护一个新的链表 ans 作为最终结果，通过两个指针 p1, p2，记录对应链表的起始位置。循环比较两个指针指向的节点的值，将最小值加入链表 ans 中，并移动较小的指针。\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeTwoLists = function (list1, list2) {\n  let dummyHead = new ListNode(null);\n  let move = dummyHead;\n  while (list1 && list2) {\n    if (list1.val > list2.val) {\n      move.next = new ListNode(list2.val);\n      list2 = list2.next;\n    } else {\n      move.next = new ListNode(list1.val);\n      list1 = list1.next;\n    }\n    // move.next = list1.val > list2.val ? new ListNode(list2.val) : new ListNode(list1.val);\n    move = move.next;\n  }\n  if (list1) {\n    move.next = list1;\n  }\n  if (list2) {\n    move.next = list2;\n  }\n  return dummyHead.next;\n};\n```\n\n# recursive\n\nl1 表示链表 1，l2 表示链表 2\n\n思路：分析基本情况和一般情况。\n\n**base case**: 其中一个链表为 null，需要返回另外一个链表\n\n```js\nmergeTowLinkedList:\n\tif l1 == null return l2\n\tif l2 == null return l1\n```\n\n**normal case:** 两个链表都不为 0, 需要比较大小，并将较小的和已经合并好的链表链接\n\n```js\nmergeTwoLinkedList: if (l1.val < l2.val)\n  l1.next = mergeTwoLinedList(l1.next, l2);\nelse l2.next = mergeTwoLinkedList(l1, l2.next);\n```\n\n**疑问：**\n\n- 为什么 l1.next = mergeTwoLinedList(l1.next, l2); 而不是 l1.next = mergeTwoLinedList(l1, l2.next);\n\n  l1 表示当前节点，那么已经合并好的链表就应该是 l1.next 和 l2,因此函数调用 mergeTwoLinedList(l1.next, l2)。\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function (l1, l2) {\n  if (l1 == null) {\n    return l2;\n  } else if (l2 == null) {\n    return l1;\n  }\n\n  if (l1.val < l2.val) {\n    l1.next = mergeTwoLists(l1.next, l2);\n    return l1;\n  } else {\n    l2.next = mergeTwoLists(l1, l2.next);\n    return l2;\n  }\n};\n```\n","source":"_posts/algorithm-linked-list-merge-two.md","raw":"---\ntitle: 算法-合并有序链表\ncategories: [算法]\ntags: [linkedList]\ntoc: true\ndate: 2020/6/22\n---\n\nhttps://leetcode-cn.com/problems/merge-two-sorted-lists/\n\n![image-20211213085535759](https://tva1.sinaimg.cn/large/008i3skNgy1gxbx9fcs5tj30dn0mymy9.jpg)\n\n题目解读：合并两个有序递增链表，未强调空间复杂度。\n\n这个算法的逻辑类似于「拉拉链」，l1, l2 类似于拉链两侧的锯齿，指针 p 就好像拉链的拉索，将两个有序链表合并。\n\n代码中还用到一个链表的算法题中是很常见的「虚拟头结点」技巧，也就是 dummy 节点。你可以试试，如果不使用 dummy 虚拟节点，代码会复杂很多，而有了 dummy 节点这个占位符，可以避免处理空指针的情况，降低代码的复杂性。\n\n<!-- more -->\n\n# iteration\n\n思路：维护一个新的链表 ans 作为最终结果，通过两个指针 p1, p2，记录对应链表的起始位置。循环比较两个指针指向的节点的值，将最小值加入链表 ans 中，并移动较小的指针。\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} list1\n * @param {ListNode} list2\n * @return {ListNode}\n */\nvar mergeTwoLists = function (list1, list2) {\n  let dummyHead = new ListNode(null);\n  let move = dummyHead;\n  while (list1 && list2) {\n    if (list1.val > list2.val) {\n      move.next = new ListNode(list2.val);\n      list2 = list2.next;\n    } else {\n      move.next = new ListNode(list1.val);\n      list1 = list1.next;\n    }\n    // move.next = list1.val > list2.val ? new ListNode(list2.val) : new ListNode(list1.val);\n    move = move.next;\n  }\n  if (list1) {\n    move.next = list1;\n  }\n  if (list2) {\n    move.next = list2;\n  }\n  return dummyHead.next;\n};\n```\n\n# recursive\n\nl1 表示链表 1，l2 表示链表 2\n\n思路：分析基本情况和一般情况。\n\n**base case**: 其中一个链表为 null，需要返回另外一个链表\n\n```js\nmergeTowLinkedList:\n\tif l1 == null return l2\n\tif l2 == null return l1\n```\n\n**normal case:** 两个链表都不为 0, 需要比较大小，并将较小的和已经合并好的链表链接\n\n```js\nmergeTwoLinkedList: if (l1.val < l2.val)\n  l1.next = mergeTwoLinedList(l1.next, l2);\nelse l2.next = mergeTwoLinkedList(l1, l2.next);\n```\n\n**疑问：**\n\n- 为什么 l1.next = mergeTwoLinedList(l1.next, l2); 而不是 l1.next = mergeTwoLinedList(l1, l2.next);\n\n  l1 表示当前节点，那么已经合并好的链表就应该是 l1.next 和 l2,因此函数调用 mergeTwoLinedList(l1.next, l2)。\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = function (l1, l2) {\n  if (l1 == null) {\n    return l2;\n  } else if (l2 == null) {\n    return l1;\n  }\n\n  if (l1.val < l2.val) {\n    l1.next = mergeTwoLists(l1.next, l2);\n    return l1;\n  } else {\n    l2.next = mergeTwoLists(l1, l2.next);\n    return l2;\n  }\n};\n```\n","slug":"algorithm-linked-list-merge-two","published":1,"updated":"2021-12-15T00:46:57.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7iv000zgosw94ej3zim","content":"<p><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gxbx9fcs5tj30dn0mymy9.jpg\" alt=\"image-20211213085535759\"></p>\n<p>题目解读：合并两个有序递增链表，未强调空间复杂度。</p>\n<p>这个算法的逻辑类似于「拉拉链」，l1, l2 类似于拉链两侧的锯齿，指针 p 就好像拉链的拉索，将两个有序链表合并。</p>\n<p>代码中还用到一个链表的算法题中是很常见的「虚拟头结点」技巧，也就是 dummy 节点。你可以试试，如果不使用 dummy 虚拟节点，代码会复杂很多，而有了 dummy 节点这个占位符，可以避免处理空指针的情况，降低代码的复杂性。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"iteration\"><a href=\"#iteration\" class=\"headerlink\" title=\"iteration\"></a>iteration</h1><p>思路：维护一个新的链表 ans 作为最终结果，通过两个指针 p1, p2，记录对应链表的起始位置。循环比较两个指针指向的节点的值，将最小值加入链表 ans 中，并移动较小的指针。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">list1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">list2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">list1, list2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dummyHead = <span class=\"keyword\">new</span> ListNode(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> move = dummyHead;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1.val &gt; list2.val) &#123;</span><br><span class=\"line\">      move.next = <span class=\"keyword\">new</span> ListNode(list2.val);</span><br><span class=\"line\">      list2 = list2.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      move.next = <span class=\"keyword\">new</span> ListNode(list1.val);</span><br><span class=\"line\">      list1 = list1.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// move.next = list1.val &gt; list2.val ? new ListNode(list2.val) : new ListNode(list1.val);</span></span><br><span class=\"line\">    move = move.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list1) &#123;</span><br><span class=\"line\">    move.next = list1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list2) &#123;</span><br><span class=\"line\">    move.next = list2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyHead.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"recursive\"><a href=\"#recursive\" class=\"headerlink\" title=\"recursive\"></a>recursive</h1><p>l1 表示链表 1，l2 表示链表 2</p>\n<p>思路：分析基本情况和一般情况。</p>\n<p><strong>base case</strong>: 其中一个链表为 null，需要返回另外一个链表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mergeTowLinkedList:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l1 == <span class=\"literal\">null</span> <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l2 == <span class=\"literal\">null</span> <span class=\"keyword\">return</span> l1</span><br></pre></td></tr></table></figure>\n\n<p><strong>normal case:</strong> 两个链表都不为 0, 需要比较大小，并将较小的和已经合并好的链表链接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mergeTwoLinkedList: <span class=\"keyword\">if</span> (l1.val &lt; l2.val)</span><br><span class=\"line\">  l1.next = mergeTwoLinedList(l1.next, l2);</span><br><span class=\"line\"><span class=\"keyword\">else</span> l2.next = mergeTwoLinkedList(l1, l2.next);</span><br></pre></td></tr></table></figure>\n\n<p><strong>疑问：</strong></p>\n<ul>\n<li><p>为什么 l1.next = mergeTwoLinedList(l1.next, l2); 而不是 l1.next = mergeTwoLinedList(l1, l2.next);</p>\n<p>l1 表示当前节点，那么已经合并好的链表就应该是 l1.next 和 l2,因此函数调用 mergeTwoLinedList(l1.next, l2)。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">l1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">l2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l1 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l2 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">    l1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    l2.next = mergeTwoLists(l1, l2.next);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNgy1gxbx9fcs5tj30dn0mymy9.jpg\" alt=\"image-20211213085535759\"></p>\n<p>题目解读：合并两个有序递增链表，未强调空间复杂度。</p>\n<p>这个算法的逻辑类似于「拉拉链」，l1, l2 类似于拉链两侧的锯齿，指针 p 就好像拉链的拉索，将两个有序链表合并。</p>\n<p>代码中还用到一个链表的算法题中是很常见的「虚拟头结点」技巧，也就是 dummy 节点。你可以试试，如果不使用 dummy 虚拟节点，代码会复杂很多，而有了 dummy 节点这个占位符，可以避免处理空指针的情况，降低代码的复杂性。</p>","more":"<h1 id=\"iteration\"><a href=\"#iteration\" class=\"headerlink\" title=\"iteration\"></a>iteration</h1><p>思路：维护一个新的链表 ans 作为最终结果，通过两个指针 p1, p2，记录对应链表的起始位置。循环比较两个指针指向的节点的值，将最小值加入链表 ans 中，并移动较小的指针。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = (next===undefined ? null : next)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">list1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">list2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">list1, list2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dummyHead = <span class=\"keyword\">new</span> ListNode(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> move = dummyHead;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1.val &gt; list2.val) &#123;</span><br><span class=\"line\">      move.next = <span class=\"keyword\">new</span> ListNode(list2.val);</span><br><span class=\"line\">      list2 = list2.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      move.next = <span class=\"keyword\">new</span> ListNode(list1.val);</span><br><span class=\"line\">      list1 = list1.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// move.next = list1.val &gt; list2.val ? new ListNode(list2.val) : new ListNode(list1.val);</span></span><br><span class=\"line\">    move = move.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list1) &#123;</span><br><span class=\"line\">    move.next = list1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list2) &#123;</span><br><span class=\"line\">    move.next = list2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyHead.next;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"recursive\"><a href=\"#recursive\" class=\"headerlink\" title=\"recursive\"></a>recursive</h1><p>l1 表示链表 1，l2 表示链表 2</p>\n<p>思路：分析基本情况和一般情况。</p>\n<p><strong>base case</strong>: 其中一个链表为 null，需要返回另外一个链表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mergeTowLinkedList:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l1 == <span class=\"literal\">null</span> <span class=\"keyword\">return</span> l2</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l2 == <span class=\"literal\">null</span> <span class=\"keyword\">return</span> l1</span><br></pre></td></tr></table></figure>\n\n<p><strong>normal case:</strong> 两个链表都不为 0, 需要比较大小，并将较小的和已经合并好的链表链接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mergeTwoLinkedList: <span class=\"keyword\">if</span> (l1.val &lt; l2.val)</span><br><span class=\"line\">  l1.next = mergeTwoLinedList(l1.next, l2);</span><br><span class=\"line\"><span class=\"keyword\">else</span> l2.next = mergeTwoLinkedList(l1, l2.next);</span><br></pre></td></tr></table></figure>\n\n<p><strong>疑问：</strong></p>\n<ul>\n<li><p>为什么 l1.next = mergeTwoLinedList(l1.next, l2); 而不是 l1.next = mergeTwoLinedList(l1, l2.next);</p>\n<p>l1 表示当前节点，那么已经合并好的链表就应该是 l1.next 和 l2,因此函数调用 mergeTwoLinedList(l1.next, l2)。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">l1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">l2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeTwoLists = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">l1, l2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l1 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l2 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">    l1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    l2.next = mergeTwoLists(l1, l2.next);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"算法-二叉树-刷题","toc":true,"date":"2021-06-22T16:00:00.000Z","_content":"\nleetcode 二叉树题目刷题，解题\n\n<!-- more -->\n\n# 116\n\n给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下:\n\n```js\nfunction Node(val) {\n  this.val = val;\n  this.left = null;\n  this.right = null;\n  this.next = null;\n}\n```\n\n题目链接：[116. Populating Next Right Pointers in Each Node](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)\n\n题目的意思是，把二叉树的每一层节点都用 next 指针连接起来。\n\n![](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)\n\n```js\nvar connect = function (root) {\n  if (!root) return null;\n\n  // 函数定义：传入两个相邻节点，将其关联起来\n  connectCore(root.left, root.right);\n\n  return root;\n\n  function connectCore(left, right) {\n    if (!left || !right) return;\n\n    left.next = right;\n\n    connectCore(left.left, left.right);\n    connectCore(right.left, right.right);\n    connectCore(left.right, right.left);\n  }\n};\n```\n\n# 114\n\n这道题目需要深刻意识到后续遍历压栈的重要性\n每次 flatten 都会保存当时的 root 变量 快照。\n前一次 flatten 和 后一次 flatten 之间 通过 root.right 联系在一起。不需要通过 返回值来实现关联不同栈\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar flatten = function (root) {\n  if (!root) return null;\n\n  flatten(root.left);\n  flatten(root.right);\n\n  const leftChild = root.left;\n  const rightChild = root.right;\n\n  root.right = leftChild;\n  root.left = null;\n\n  while (root.right) {\n    root = root.right;\n  }\n\n  root.right = rightChild;\n};\n```\n\n# 297 二叉树的序列化和反序列化\n\n[leetcode: 297](https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/)\n\ntips: 前序遍历的形式多种多样，不能局限于传统的形式。\n\n这道题目的难点在于如何对前序遍历得到的字符串进行 deSerialize。\n\n```py\ndef preOrder(TreeNode root):\n  if !root:\n    return\n  preOrder(root.left)\n  preOrder(root.right)\n```\n\n通过后序遍历得到序列化后的字符串，格式为前序遍历。\n\n比如对于如下二叉树，返回的结果为 `[5,4,3,2,#,#,#,#,#]`\n\n```js\n               5\n         4           3\n     2         null   null\nnull  null\n```\n\n得到了序列化后的字符串，就得到了前序遍历的顺序，我们只需要对着字符串的顺序重新进行一次前序遍历就可以重建这颗树。代码如下\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function (root) {\n  return serializeCore(root);\n  function serializeCore(root) {\n    if (!root) return \"#\";\n    const left = serializeCore(root.left);\n    const right = serializeCore(root.right);\n    return `${root.val},${left},${right}`;\n  }\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function (data) {\n  const nodeList = data.split(\",\");\n  return deserializeCore(nodeList);\n  function deserializeCore(nodeList) {\n    if (!nodeList.length) return null;\n    if (nodeList[0] === \"#\") {\n      nodeList.shift();\n      return null;\n    }\n    const root = new TreeNode(nodeList.shift());\n    root.left = deserializeCore(nodeList);\n    root.right = deserializeCore(nodeList);\n    return root;\n  }\n};\n```\n\n# 652 寻找重复子树\n\n[leetcode 652](https://leetcode-cn.com/problems/find-duplicate-subtrees/)\n\n这道题目可以简化为，在一堆物品中寻找存在重复的物品。寻找重复项，必定需要遍历所有物品，将所有查看过的记录下来，方便下一个物体比较。\n伪代码如下：\n\n```py\n# 维护一个table 来记录已经访问过的，每种类别只需要记录一次\ntable = hashTable\ndef findCommon(list):\n  # 遍历这一堆物品\n  for item in list:\n    # 记录访问过的物品\n    if hashTable[item]: hashTable[item] += 1\n    else hashTable[item] = 1\n  return table中计数大于1的item\n```\n\n对应到这道题目，物品就是**节点对应的子树**，框架稍微改变下如下：\n\n```py\ntable = hashTable\nansList = hashSet\ndef findCommon(root):\n  if !root: return null\n  # 记录访问过的\n  if table.get(root 对应的子树):\n    ansList.add(table.get(root 对应的子树))\n  else:\n    table.set(root 对应的子树): root\n  # 通过前序遍历整颗树\n  findCommon(root.left)\n  findCommon(root.right)\n```\n\n那么如果获取到 root 的子树呢？leetcode 297，也就是上一题，提供了一个思路：序列化。\n\n```py\ndef serialize(root):\n  if !root: return '#'\n  leftString = serialize(root.left)\n  rightString = serialize(root.right)\n\n  return root.val + leftString + ',' + rightString + ','\n```\n\n因此完整代码如下:\n\n```js\nvar findDuplicateSubtrees = function (root) {\n  const map = {};\n  const result = new Set();\n\n  travel(root);\n  function travel(root) {\n    if (!root) return;\n    if (map[serialize(root)]) {\n      result.add(map[serialize(root)]);\n    } else {\n      map[serialize(root)] = root;\n    }\n    travel(root.left);\n    travel(root.right);\n  }\n  return [...result];\n};\n\n// 后序遍历得到序列化结果\nfunction serialize(node) {\n  if (!node) return \"#\";\n  const leftChild = serialize(node.left);\n  const rightChild = serialize(node.right);\n  return `${node.val},${leftChild},${rightChild}`;\n}\n```\n","source":"_posts/algorithm-binary-tree.md","raw":"---\ntitle: 算法-二叉树-刷题\ncategories: [算法]\ntags: [二叉树]\ntoc: true\ndate: 2021/6/23\n---\n\nleetcode 二叉树题目刷题，解题\n\n<!-- more -->\n\n# 116\n\n给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下:\n\n```js\nfunction Node(val) {\n  this.val = val;\n  this.left = null;\n  this.right = null;\n  this.next = null;\n}\n```\n\n题目链接：[116. Populating Next Right Pointers in Each Node](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)\n\n题目的意思是，把二叉树的每一层节点都用 next 指针连接起来。\n\n![](https://leetcode.com/problems/populating-next-right-pointers-in-each-node/)\n\n```js\nvar connect = function (root) {\n  if (!root) return null;\n\n  // 函数定义：传入两个相邻节点，将其关联起来\n  connectCore(root.left, root.right);\n\n  return root;\n\n  function connectCore(left, right) {\n    if (!left || !right) return;\n\n    left.next = right;\n\n    connectCore(left.left, left.right);\n    connectCore(right.left, right.right);\n    connectCore(left.right, right.left);\n  }\n};\n```\n\n# 114\n\n这道题目需要深刻意识到后续遍历压栈的重要性\n每次 flatten 都会保存当时的 root 变量 快照。\n前一次 flatten 和 后一次 flatten 之间 通过 root.right 联系在一起。不需要通过 返回值来实现关联不同栈\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {void} Do not return anything, modify root in-place instead.\n */\nvar flatten = function (root) {\n  if (!root) return null;\n\n  flatten(root.left);\n  flatten(root.right);\n\n  const leftChild = root.left;\n  const rightChild = root.right;\n\n  root.right = leftChild;\n  root.left = null;\n\n  while (root.right) {\n    root = root.right;\n  }\n\n  root.right = rightChild;\n};\n```\n\n# 297 二叉树的序列化和反序列化\n\n[leetcode: 297](https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/)\n\ntips: 前序遍历的形式多种多样，不能局限于传统的形式。\n\n这道题目的难点在于如何对前序遍历得到的字符串进行 deSerialize。\n\n```py\ndef preOrder(TreeNode root):\n  if !root:\n    return\n  preOrder(root.left)\n  preOrder(root.right)\n```\n\n通过后序遍历得到序列化后的字符串，格式为前序遍历。\n\n比如对于如下二叉树，返回的结果为 `[5,4,3,2,#,#,#,#,#]`\n\n```js\n               5\n         4           3\n     2         null   null\nnull  null\n```\n\n得到了序列化后的字符串，就得到了前序遍历的顺序，我们只需要对着字符串的顺序重新进行一次前序遍历就可以重建这颗树。代码如下\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function (root) {\n  return serializeCore(root);\n  function serializeCore(root) {\n    if (!root) return \"#\";\n    const left = serializeCore(root.left);\n    const right = serializeCore(root.right);\n    return `${root.val},${left},${right}`;\n  }\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function (data) {\n  const nodeList = data.split(\",\");\n  return deserializeCore(nodeList);\n  function deserializeCore(nodeList) {\n    if (!nodeList.length) return null;\n    if (nodeList[0] === \"#\") {\n      nodeList.shift();\n      return null;\n    }\n    const root = new TreeNode(nodeList.shift());\n    root.left = deserializeCore(nodeList);\n    root.right = deserializeCore(nodeList);\n    return root;\n  }\n};\n```\n\n# 652 寻找重复子树\n\n[leetcode 652](https://leetcode-cn.com/problems/find-duplicate-subtrees/)\n\n这道题目可以简化为，在一堆物品中寻找存在重复的物品。寻找重复项，必定需要遍历所有物品，将所有查看过的记录下来，方便下一个物体比较。\n伪代码如下：\n\n```py\n# 维护一个table 来记录已经访问过的，每种类别只需要记录一次\ntable = hashTable\ndef findCommon(list):\n  # 遍历这一堆物品\n  for item in list:\n    # 记录访问过的物品\n    if hashTable[item]: hashTable[item] += 1\n    else hashTable[item] = 1\n  return table中计数大于1的item\n```\n\n对应到这道题目，物品就是**节点对应的子树**，框架稍微改变下如下：\n\n```py\ntable = hashTable\nansList = hashSet\ndef findCommon(root):\n  if !root: return null\n  # 记录访问过的\n  if table.get(root 对应的子树):\n    ansList.add(table.get(root 对应的子树))\n  else:\n    table.set(root 对应的子树): root\n  # 通过前序遍历整颗树\n  findCommon(root.left)\n  findCommon(root.right)\n```\n\n那么如果获取到 root 的子树呢？leetcode 297，也就是上一题，提供了一个思路：序列化。\n\n```py\ndef serialize(root):\n  if !root: return '#'\n  leftString = serialize(root.left)\n  rightString = serialize(root.right)\n\n  return root.val + leftString + ',' + rightString + ','\n```\n\n因此完整代码如下:\n\n```js\nvar findDuplicateSubtrees = function (root) {\n  const map = {};\n  const result = new Set();\n\n  travel(root);\n  function travel(root) {\n    if (!root) return;\n    if (map[serialize(root)]) {\n      result.add(map[serialize(root)]);\n    } else {\n      map[serialize(root)] = root;\n    }\n    travel(root.left);\n    travel(root.right);\n  }\n  return [...result];\n};\n\n// 后序遍历得到序列化结果\nfunction serialize(node) {\n  if (!node) return \"#\";\n  const leftChild = serialize(node.left);\n  const rightChild = serialize(node.right);\n  return `${node.val},${leftChild},${rightChild}`;\n}\n```\n","slug":"algorithm-binary-tree","published":1,"updated":"2021-06-30T06:16:49.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ix0012gosw2d9qblv1","content":"<p>leetcode 二叉树题目刷题，解题</p>\n<a id=\"more\"></a>\n\n<h1 id=\"116\"><a href=\"#116\" class=\"headerlink\" title=\"116\"></a>116</h1><p>给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>题目链接：<a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/\" target=\"_blank\" rel=\"noopener\">116. Populating Next Right Pointers in Each Node</a></p>\n<p>题目的意思是，把二叉树的每一层节点都用 next 指针连接起来。</p>\n<p><img src=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/\" alt=\"\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connect = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 函数定义：传入两个相邻节点，将其关联起来</span></span><br><span class=\"line\">  connectCore(root.left, root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectCore</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!left || !right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    left.next = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    connectCore(left.left, left.right);</span><br><span class=\"line\">    connectCore(right.left, right.right);</span><br><span class=\"line\">    connectCore(left.right, right.left);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"114\"><a href=\"#114\" class=\"headerlink\" title=\"114\"></a>114</h1><p>这道题目需要深刻意识到后续遍历压栈的重要性<br>每次 flatten 都会保存当时的 root 变量 快照。<br>前一次 flatten 和 后一次 flatten 之间 通过 root.right 联系在一起。不需要通过 返回值来实现关联不同栈</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val, left, right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = (left===undefined ? null : left)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.right = (right===undefined ? null : right)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify root in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flatten = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  flatten(root.left);</span><br><span class=\"line\">  flatten(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftChild = root.left;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightChild = root.right;</span><br><span class=\"line\"></span><br><span class=\"line\">  root.right = leftChild;</span><br><span class=\"line\">  root.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root.right) &#123;</span><br><span class=\"line\">    root = root.right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  root.right = rightChild;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"297-二叉树的序列化和反序列化\"><a href=\"#297-二叉树的序列化和反序列化\" class=\"headerlink\" title=\"297 二叉树的序列化和反序列化\"></a>297 二叉树的序列化和反序列化</h1><p><a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\" target=\"_blank\" rel=\"noopener\">leetcode: 297</a></p>\n<p>tips: 前序遍历的形式多种多样，不能局限于传统的形式。</p>\n<p>这道题目的难点在于如何对前序遍历得到的字符串进行 deSerialize。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preOrder</span><span class=\"params\">(TreeNode root)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !root:</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  preOrder(root.left)</span><br><span class=\"line\">  preOrder(root.right)</span><br></pre></td></tr></table></figure>\n\n<p>通过后序遍历得到序列化后的字符串，格式为前序遍历。</p>\n<p>比如对于如下二叉树，返回的结果为 <code>[5,4,3,2,#,#,#,#,#]</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">               <span class=\"number\">5</span></span><br><span class=\"line\">         <span class=\"number\">4</span>           <span class=\"number\">3</span></span><br><span class=\"line\">     <span class=\"number\">2</span>         <span class=\"literal\">null</span>   <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"literal\">null</span>  <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>得到了序列化后的字符串，就得到了前序遍历的顺序，我们只需要对着字符串的顺序重新进行一次前序遍历就可以重建这颗树。代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Encodes a tree to a single string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> serializeCore(root);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serializeCore</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = serializeCore(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = serializeCore(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;root.val&#125;</span>,<span class=\"subst\">$&#123;left&#125;</span>,<span class=\"subst\">$&#123;right&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">data</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;TreeNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodeList = data.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> deserializeCore(nodeList);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deserializeCore</span>(<span class=\"params\">nodeList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nodeList.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nodeList[<span class=\"number\">0</span>] === <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      nodeList.shift();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> TreeNode(nodeList.shift());</span><br><span class=\"line\">    root.left = deserializeCore(nodeList);</span><br><span class=\"line\">    root.right = deserializeCore(nodeList);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"652-寻找重复子树\"><a href=\"#652-寻找重复子树\" class=\"headerlink\" title=\"652 寻找重复子树\"></a>652 寻找重复子树</h1><p><a href=\"https://leetcode-cn.com/problems/find-duplicate-subtrees/\" target=\"_blank\" rel=\"noopener\">leetcode 652</a></p>\n<p>这道题目可以简化为，在一堆物品中寻找存在重复的物品。寻找重复项，必定需要遍历所有物品，将所有查看过的记录下来，方便下一个物体比较。<br>伪代码如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 维护一个table 来记录已经访问过的，每种类别只需要记录一次</span></span><br><span class=\"line\">table = hashTable</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findCommon</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 遍历这一堆物品</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    <span class=\"comment\"># 记录访问过的物品</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> hashTable[item]: hashTable[item] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> hashTable[item] = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> table中计数大于<span class=\"number\">1</span>的item</span><br></pre></td></tr></table></figure>\n\n<p>对应到这道题目，物品就是<strong>节点对应的子树</strong>，框架稍微改变下如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table = hashTable</span><br><span class=\"line\">ansList = hashSet</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findCommon</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !root: <span class=\"keyword\">return</span> null</span><br><span class=\"line\">  <span class=\"comment\"># 记录访问过的</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> table.get(root 对应的子树):</span><br><span class=\"line\">    ansList.add(table.get(root 对应的子树))</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    table.set(root 对应的子树): root</span><br><span class=\"line\">  <span class=\"comment\"># 通过前序遍历整颗树</span></span><br><span class=\"line\">  findCommon(root.left)</span><br><span class=\"line\">  findCommon(root.right)</span><br></pre></td></tr></table></figure>\n\n<p>那么如果获取到 root 的子树呢？leetcode 297，也就是上一题，提供了一个思路：序列化。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serialize</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !root: <span class=\"keyword\">return</span> <span class=\"string\">'#'</span></span><br><span class=\"line\">  leftString = serialize(root.left)</span><br><span class=\"line\">  rightString = serialize(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> root.val + leftString + <span class=\"string\">','</span> + rightString + <span class=\"string\">','</span></span><br></pre></td></tr></table></figure>\n\n<p>因此完整代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findDuplicateSubtrees = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  travel(root);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travel</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map[serialize(root)]) &#123;</span><br><span class=\"line\">      result.add(map[serialize(root)]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      map[serialize(root)] = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    travel(root.left);</span><br><span class=\"line\">    travel(root.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...result];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后序遍历得到序列化结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serialize</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> <span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftChild = serialize(node.left);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightChild = serialize(node.right);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;node.val&#125;</span>,<span class=\"subst\">$&#123;leftChild&#125;</span>,<span class=\"subst\">$&#123;rightChild&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>leetcode 二叉树题目刷题，解题</p>","more":"<h1 id=\"116\"><a href=\"#116\" class=\"headerlink\" title=\"116\"></a>116</h1><p>给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>题目链接：<a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/\" target=\"_blank\" rel=\"noopener\">116. Populating Next Right Pointers in Each Node</a></p>\n<p>题目的意思是，把二叉树的每一层节点都用 next 指针连接起来。</p>\n<p><img src=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/\" alt=\"\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> connect = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 函数定义：传入两个相邻节点，将其关联起来</span></span><br><span class=\"line\">  connectCore(root.left, root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectCore</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!left || !right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    left.next = right;</span><br><span class=\"line\"></span><br><span class=\"line\">    connectCore(left.left, left.right);</span><br><span class=\"line\">    connectCore(right.left, right.right);</span><br><span class=\"line\">    connectCore(left.right, right.left);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"114\"><a href=\"#114\" class=\"headerlink\" title=\"114\"></a>114</h1><p>这道题目需要深刻意识到后续遍历压栈的重要性<br>每次 flatten 都会保存当时的 root 变量 快照。<br>前一次 flatten 和 后一次 flatten 之间 通过 root.right 联系在一起。不需要通过 返回值来实现关联不同栈</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val, left, right) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = (left===undefined ? null : left)</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.right = (right===undefined ? null : right)</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify root in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flatten = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  flatten(root.left);</span><br><span class=\"line\">  flatten(root.right);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftChild = root.left;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightChild = root.right;</span><br><span class=\"line\"></span><br><span class=\"line\">  root.right = leftChild;</span><br><span class=\"line\">  root.left = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (root.right) &#123;</span><br><span class=\"line\">    root = root.right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  root.right = rightChild;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"297-二叉树的序列化和反序列化\"><a href=\"#297-二叉树的序列化和反序列化\" class=\"headerlink\" title=\"297 二叉树的序列化和反序列化\"></a>297 二叉树的序列化和反序列化</h1><p><a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\" target=\"_blank\" rel=\"noopener\">leetcode: 297</a></p>\n<p>tips: 前序遍历的形式多种多样，不能局限于传统的形式。</p>\n<p>这道题目的难点在于如何对前序遍历得到的字符串进行 deSerialize。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preOrder</span><span class=\"params\">(TreeNode root)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !root:</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  preOrder(root.left)</span><br><span class=\"line\">  preOrder(root.right)</span><br></pre></td></tr></table></figure>\n\n<p>通过后序遍历得到序列化后的字符串，格式为前序遍历。</p>\n<p>比如对于如下二叉树，返回的结果为 <code>[5,4,3,2,#,#,#,#,#]</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">               <span class=\"number\">5</span></span><br><span class=\"line\">         <span class=\"number\">4</span>           <span class=\"number\">3</span></span><br><span class=\"line\">     <span class=\"number\">2</span>         <span class=\"literal\">null</span>   <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"literal\">null</span>  <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<p>得到了序列化后的字符串，就得到了前序遍历的顺序，我们只需要对着字符串的顺序重新进行一次前序遍历就可以重建这颗树。代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Encodes a tree to a single string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;TreeNode&#125;</span> <span class=\"variable\">root</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> serializeCore(root);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serializeCore</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = serializeCore(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = serializeCore(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;root.val&#125;</span>,<span class=\"subst\">$&#123;left&#125;</span>,<span class=\"subst\">$&#123;right&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">data</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;TreeNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nodeList = data.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> deserializeCore(nodeList);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deserializeCore</span>(<span class=\"params\">nodeList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nodeList.length) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nodeList[<span class=\"number\">0</span>] === <span class=\"string\">\"#\"</span>) &#123;</span><br><span class=\"line\">      nodeList.shift();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> TreeNode(nodeList.shift());</span><br><span class=\"line\">    root.left = deserializeCore(nodeList);</span><br><span class=\"line\">    root.right = deserializeCore(nodeList);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"652-寻找重复子树\"><a href=\"#652-寻找重复子树\" class=\"headerlink\" title=\"652 寻找重复子树\"></a>652 寻找重复子树</h1><p><a href=\"https://leetcode-cn.com/problems/find-duplicate-subtrees/\" target=\"_blank\" rel=\"noopener\">leetcode 652</a></p>\n<p>这道题目可以简化为，在一堆物品中寻找存在重复的物品。寻找重复项，必定需要遍历所有物品，将所有查看过的记录下来，方便下一个物体比较。<br>伪代码如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 维护一个table 来记录已经访问过的，每种类别只需要记录一次</span></span><br><span class=\"line\">table = hashTable</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findCommon</span><span class=\"params\">(list)</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 遍历这一堆物品</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> list:</span><br><span class=\"line\">    <span class=\"comment\"># 记录访问过的物品</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> hashTable[item]: hashTable[item] += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> hashTable[item] = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> table中计数大于<span class=\"number\">1</span>的item</span><br></pre></td></tr></table></figure>\n\n<p>对应到这道题目，物品就是<strong>节点对应的子树</strong>，框架稍微改变下如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table = hashTable</span><br><span class=\"line\">ansList = hashSet</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findCommon</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !root: <span class=\"keyword\">return</span> null</span><br><span class=\"line\">  <span class=\"comment\"># 记录访问过的</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> table.get(root 对应的子树):</span><br><span class=\"line\">    ansList.add(table.get(root 对应的子树))</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    table.set(root 对应的子树): root</span><br><span class=\"line\">  <span class=\"comment\"># 通过前序遍历整颗树</span></span><br><span class=\"line\">  findCommon(root.left)</span><br><span class=\"line\">  findCommon(root.right)</span><br></pre></td></tr></table></figure>\n\n<p>那么如果获取到 root 的子树呢？leetcode 297，也就是上一题，提供了一个思路：序列化。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serialize</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !root: <span class=\"keyword\">return</span> <span class=\"string\">'#'</span></span><br><span class=\"line\">  leftString = serialize(root.left)</span><br><span class=\"line\">  rightString = serialize(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> root.val + leftString + <span class=\"string\">','</span> + rightString + <span class=\"string\">','</span></span><br></pre></td></tr></table></figure>\n\n<p>因此完整代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findDuplicateSubtrees = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  travel(root);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travel</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (map[serialize(root)]) &#123;</span><br><span class=\"line\">      result.add(map[serialize(root)]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      map[serialize(root)] = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    travel(root.left);</span><br><span class=\"line\">    travel(root.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...result];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后序遍历得到序列化结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serialize</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> <span class=\"string\">\"#\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftChild = serialize(node.left);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightChild = serialize(node.right);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;node.val&#125;</span>,<span class=\"subst\">$&#123;leftChild&#125;</span>,<span class=\"subst\">$&#123;rightChild&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"算法 - 二叉堆","toc":true,"date":"2021-06-19T16:00:00.000Z","_content":"\n参考：[labuladong 图文详解二叉堆，实现优先级队列](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484495&idx=1&sn=bbfeba9bb5cfd50598e2a4d08c839ee9&chksm=9bd7fa47aca073512e094110a7fe7d9bac052be114d1db72fe07b7efa6beb915f51b3f19291e&scene=21#wechat_redirect)\n二叉堆，以数组的方式模拟二叉树，主要操作有两个, sink（下沉）和 swim(上浮)，用以维护二叉堆的性质。其主要应用有两个，首先是一种排序方法「堆排序」，第二是一种很有用的数据结构「优先级队列」。\n\n这篇文章以二叉堆来实现优先级队列。以后会增加二叉堆的堆排序实现\n\n<!-- more  -->\n\n# 什么是二叉堆\n\n二叉堆是用数组来实现的完全二叉树。通过数组索引实现节点间的关联,如果<span class=\"text-red text-bold\"> 把 arr[1] 作为整棵树的根</span>，\n每个节点的父节点和左右孩子的索引都可以通过简单的运算得到。，如下代码为索引实现父节点，子节点的方式：\n\n```js\nparent (index) {\n  return parseInt(index / 2);\n}\n\nleftChild(index) {\n  return index * 2;\n}\n\nrightChild(index) {\n  return index * 2 + 1\n}\n```\n\n二叉堆还分为最大堆和最小堆。<span class=\"text-red\"> 最大堆的性质是：每个节点都大于等于它的两个子节点。类似的，最小堆的性质是：每个节点都小于等于它的子节点</span>。\n\n# 最大堆实现优先级队列\n\n优先级队列结构有一个很有用的功能，你插入或者删除元素的时候，元素会自动排序。主要 API 为 insert 和 delete，基本结构如下\n\n```js\nclass MaxBinaryHeap {\n  constructor(compareFn) {\n    this.pq = ['__BLANK__'];\n    this.size = 0;\n    this.compareFn = compareFn || ((a, b) => a < b);\n  },\n  // **********核心功能**********\n  // 上浮\n  swim(index) {}\n  // 下潜\n  sink(index) {}\n  // 插入新数据\n  insert(num) {}\n  // 删除最大值\n  deleteMax() {}\n  // **********utils**********\n  delete(index) {}\n  // 大小比较，Index a对应的值 是否比 Index b 对应的值小\n  less(a, b) {\n    return this.compareFn(this.pq[a], this.pq[b]);\n  }\n  // 交换\n  exchange(index1, index2) {\n    [this.pq[index1], this.pq[index2]] = [this.pq[index2], this.pq[index1]]\n    return index2;\n  }\n  // 返回最大值\n  get max() {\n    return this.pq[1];\n  }\n  // 子节点 left\n  childLeft(index) {\n    return this.pq[index * 2];\n  }\n  childRight(index) {\n    return this.pq[index * 2 + 1];\n  }\n  // 父节点\n  parent(index) {\n    return this.pq[parseInt(index / 2)];\n  }\n}\n```\n\n## 实现 swim 和 sink\n\n维护堆结构，当插入和删除指定元素的时候，会破坏最大堆的性质。因此需要对破坏最大堆性质的节点进行位置调整。\n\n- 如果某个节点 A 比它的子节点（中的一个）小，那么 A 就不配做父节点，应该下去，下面那个更大的节点上来做父节点，这就是对 A 进行下沉。\n\n  ```js\n  // 下潜\n  sink(index) {\n    let tempIndex = index;\n    while(this.pq[tempIndex] < Math.max(this.childLeft(tempIndex), this.childRight(tempIndex))) {\n      const biggerChildIndex = this.childLeft(tempIndex) < this.childRight(tempIndex) ? tempIndex * 2 + 1 : tempIndex * 2;\n        this.exchange(tempIndex, biggerChildIndex)\n        tempIndex = biggerChildIndex;\n    }\n  }\n  ```\n\n- 如果某个节点 A 比它的父节点大，那么 A 不应该做子节点，应该把父节点换下来，自己去做父节点，这就是对 A 的上浮。\n  ```js\n  swim(index) {\n    let tempIndex = index;\n    while(tempIndex > 1 && this.less(parseInt(tempIndex / 2), tempIndex)) {\n      this.exchange(parseInt(tempIndex / 2), tempIndex);\n      tempIndex = parseInt(tempIndex / 2);\n    }\n  }\n  ```\n\n## 实现 delMax 和 insert\n\ninsert 方法先把要插入的元素添加到堆底的最后，然后让其上浮到正确位置。\n\n```js\n// 插入新数据\ninsert(num) {\n  this.size += 1;\n  this.pq[this.size] = num;\n  this.swim(this.size);\n}\n```\n\ndelMax 方法先把堆顶元素 A 和堆底最后的元素 B 对调，然后删除 A，最后让 B 下沉到正确位置。\n\n```js\ndeleteMax() {\n  this.delete(1);\n  return this.max;\n}\n\ndelete(index) {\n  this.exchange(index, this.size);\n  this.pq.splice(this.size);\n  this.size -= 1;\n  this.sink(index);\n}\n```\n\n# 应用\n\n## 实现合并 K 个有序链表的算法\n\n[leetcode: 23](https://leetcode.com/problems/merge-k-sorted-lists/)\n\n实现合并 k 个有序链表的算法需要用到优先级队列（Priority Queue），这种数据结构是「二叉堆」最重要的应用。\n\n[原文](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484499&idx=1&sn=64f75d4bdbb4c5777ba199aae804d138&chksm=9bd7fa5baca0734dc51f588af913140560b994e3811dac6a7fa8ccfc2a31aca327f1faf964c2&scene=21#wechat_redirect)\n\n### 最小堆实现合并 k 个链表\n\n```js\nfunction mergeKLists(lists) {\n  const linkedListHeap = new BinaryHeap(\n    (node1, node2) => node1 && node2 && node1.val < node2.val\n  );\n  let movePointer = new ListNode();\n  const head = movePointer;\n  for (let head of lists) {\n    if (head) {\n      linkedListHeap.insert(head);\n    }\n  }\n\n  while (linkedListHeap.size > 0) {\n    let tempNode = linkedListHeap.pop();\n    movePointer.next = tempNode;\n    movePointer = movePointer.next;\n    if (tempNode.next) {\n      linkedListHeap.insert(tempNode.next);\n    }\n  }\n  return head.next;\n}\n```\n\n### 实现二叉堆\n\n```js\nclass MinBinaryHeap {\n  constructor(compareFn) {\n    this.size = 0;\n    this.pq = [\"_\"];\n    this.isLeftLessRight = compareFn || ((a, b) => !!a && !!b && a < b);\n  }\n\n  insert(val) {\n    this.size += 1;\n    this.pq[this.size] = val;\n    this.swim(this.size);\n  }\n\n  delMin() {\n    this.swap(1, this.size);\n    const popped = this.pq.pop();\n    this.sink(1);\n    this.size -= 1;\n    return popped;\n  }\n\n  pop() {\n    if (this.size >= 1) {\n      return this.delMin();\n    }\n  }\n\n  swim(index) {\n    let tmp = index;\n    while (tmp > 1 && this.isLeftLessRight(this.pq[tmp], this.parent(tmp))) {\n      this.swap(parseInt(tmp / 2), tmp);\n      tmp = parseInt(tmp / 2);\n    }\n  }\n\n  sink(index) {\n    let tmp = index;\n    while (\n      this.isLeftLessRight(this.childLeft(tmp), this.pq[tmp]) ||\n      this.isLeftLessRight(this.childRight(tmp), this.pq[tmp])\n    ) {\n      let childIndex = tmp;\n      if (this.childLeft(tmp) && this.childRight(tmp)) {\n        childIndex = this.isLeftLessRight(\n          this.childLeft(tmp),\n          this.childRight(tmp)\n        )\n          ? tmp * 2\n          : tmp * 2 + 1;\n      } else if (this.childLeft(tmp)) {\n        childIndex = tmp * 2;\n      } else if (this.childRight(tmp)) {\n        childIndex = tmp * 2 + 1;\n      }\n\n      this.swap(childIndex, tmp);\n      tmp = childIndex;\n    }\n  }\n\n  swap(a, b) {\n    [this.pq[a], this.pq[b]] = [this.pq[b], this.pq[a]];\n  }\n\n  childLeft(index) {\n    return this.pq[index * 2];\n  }\n\n  childRight(index) {\n    return this.pq[index * 2 + 1];\n  }\n\n  parent(index) {\n    return this.pq[parseInt(index / 2)];\n  }\n}\n```\n","source":"_posts/algorithm-binary-heap.md","raw":"---\ntitle: 算法 - 二叉堆\ncategories: [算法]\ntags: []\ntoc: true\ndate: 2021/6/20\n---\n\n参考：[labuladong 图文详解二叉堆，实现优先级队列](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484495&idx=1&sn=bbfeba9bb5cfd50598e2a4d08c839ee9&chksm=9bd7fa47aca073512e094110a7fe7d9bac052be114d1db72fe07b7efa6beb915f51b3f19291e&scene=21#wechat_redirect)\n二叉堆，以数组的方式模拟二叉树，主要操作有两个, sink（下沉）和 swim(上浮)，用以维护二叉堆的性质。其主要应用有两个，首先是一种排序方法「堆排序」，第二是一种很有用的数据结构「优先级队列」。\n\n这篇文章以二叉堆来实现优先级队列。以后会增加二叉堆的堆排序实现\n\n<!-- more  -->\n\n# 什么是二叉堆\n\n二叉堆是用数组来实现的完全二叉树。通过数组索引实现节点间的关联,如果<span class=\"text-red text-bold\"> 把 arr[1] 作为整棵树的根</span>，\n每个节点的父节点和左右孩子的索引都可以通过简单的运算得到。，如下代码为索引实现父节点，子节点的方式：\n\n```js\nparent (index) {\n  return parseInt(index / 2);\n}\n\nleftChild(index) {\n  return index * 2;\n}\n\nrightChild(index) {\n  return index * 2 + 1\n}\n```\n\n二叉堆还分为最大堆和最小堆。<span class=\"text-red\"> 最大堆的性质是：每个节点都大于等于它的两个子节点。类似的，最小堆的性质是：每个节点都小于等于它的子节点</span>。\n\n# 最大堆实现优先级队列\n\n优先级队列结构有一个很有用的功能，你插入或者删除元素的时候，元素会自动排序。主要 API 为 insert 和 delete，基本结构如下\n\n```js\nclass MaxBinaryHeap {\n  constructor(compareFn) {\n    this.pq = ['__BLANK__'];\n    this.size = 0;\n    this.compareFn = compareFn || ((a, b) => a < b);\n  },\n  // **********核心功能**********\n  // 上浮\n  swim(index) {}\n  // 下潜\n  sink(index) {}\n  // 插入新数据\n  insert(num) {}\n  // 删除最大值\n  deleteMax() {}\n  // **********utils**********\n  delete(index) {}\n  // 大小比较，Index a对应的值 是否比 Index b 对应的值小\n  less(a, b) {\n    return this.compareFn(this.pq[a], this.pq[b]);\n  }\n  // 交换\n  exchange(index1, index2) {\n    [this.pq[index1], this.pq[index2]] = [this.pq[index2], this.pq[index1]]\n    return index2;\n  }\n  // 返回最大值\n  get max() {\n    return this.pq[1];\n  }\n  // 子节点 left\n  childLeft(index) {\n    return this.pq[index * 2];\n  }\n  childRight(index) {\n    return this.pq[index * 2 + 1];\n  }\n  // 父节点\n  parent(index) {\n    return this.pq[parseInt(index / 2)];\n  }\n}\n```\n\n## 实现 swim 和 sink\n\n维护堆结构，当插入和删除指定元素的时候，会破坏最大堆的性质。因此需要对破坏最大堆性质的节点进行位置调整。\n\n- 如果某个节点 A 比它的子节点（中的一个）小，那么 A 就不配做父节点，应该下去，下面那个更大的节点上来做父节点，这就是对 A 进行下沉。\n\n  ```js\n  // 下潜\n  sink(index) {\n    let tempIndex = index;\n    while(this.pq[tempIndex] < Math.max(this.childLeft(tempIndex), this.childRight(tempIndex))) {\n      const biggerChildIndex = this.childLeft(tempIndex) < this.childRight(tempIndex) ? tempIndex * 2 + 1 : tempIndex * 2;\n        this.exchange(tempIndex, biggerChildIndex)\n        tempIndex = biggerChildIndex;\n    }\n  }\n  ```\n\n- 如果某个节点 A 比它的父节点大，那么 A 不应该做子节点，应该把父节点换下来，自己去做父节点，这就是对 A 的上浮。\n  ```js\n  swim(index) {\n    let tempIndex = index;\n    while(tempIndex > 1 && this.less(parseInt(tempIndex / 2), tempIndex)) {\n      this.exchange(parseInt(tempIndex / 2), tempIndex);\n      tempIndex = parseInt(tempIndex / 2);\n    }\n  }\n  ```\n\n## 实现 delMax 和 insert\n\ninsert 方法先把要插入的元素添加到堆底的最后，然后让其上浮到正确位置。\n\n```js\n// 插入新数据\ninsert(num) {\n  this.size += 1;\n  this.pq[this.size] = num;\n  this.swim(this.size);\n}\n```\n\ndelMax 方法先把堆顶元素 A 和堆底最后的元素 B 对调，然后删除 A，最后让 B 下沉到正确位置。\n\n```js\ndeleteMax() {\n  this.delete(1);\n  return this.max;\n}\n\ndelete(index) {\n  this.exchange(index, this.size);\n  this.pq.splice(this.size);\n  this.size -= 1;\n  this.sink(index);\n}\n```\n\n# 应用\n\n## 实现合并 K 个有序链表的算法\n\n[leetcode: 23](https://leetcode.com/problems/merge-k-sorted-lists/)\n\n实现合并 k 个有序链表的算法需要用到优先级队列（Priority Queue），这种数据结构是「二叉堆」最重要的应用。\n\n[原文](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484499&idx=1&sn=64f75d4bdbb4c5777ba199aae804d138&chksm=9bd7fa5baca0734dc51f588af913140560b994e3811dac6a7fa8ccfc2a31aca327f1faf964c2&scene=21#wechat_redirect)\n\n### 最小堆实现合并 k 个链表\n\n```js\nfunction mergeKLists(lists) {\n  const linkedListHeap = new BinaryHeap(\n    (node1, node2) => node1 && node2 && node1.val < node2.val\n  );\n  let movePointer = new ListNode();\n  const head = movePointer;\n  for (let head of lists) {\n    if (head) {\n      linkedListHeap.insert(head);\n    }\n  }\n\n  while (linkedListHeap.size > 0) {\n    let tempNode = linkedListHeap.pop();\n    movePointer.next = tempNode;\n    movePointer = movePointer.next;\n    if (tempNode.next) {\n      linkedListHeap.insert(tempNode.next);\n    }\n  }\n  return head.next;\n}\n```\n\n### 实现二叉堆\n\n```js\nclass MinBinaryHeap {\n  constructor(compareFn) {\n    this.size = 0;\n    this.pq = [\"_\"];\n    this.isLeftLessRight = compareFn || ((a, b) => !!a && !!b && a < b);\n  }\n\n  insert(val) {\n    this.size += 1;\n    this.pq[this.size] = val;\n    this.swim(this.size);\n  }\n\n  delMin() {\n    this.swap(1, this.size);\n    const popped = this.pq.pop();\n    this.sink(1);\n    this.size -= 1;\n    return popped;\n  }\n\n  pop() {\n    if (this.size >= 1) {\n      return this.delMin();\n    }\n  }\n\n  swim(index) {\n    let tmp = index;\n    while (tmp > 1 && this.isLeftLessRight(this.pq[tmp], this.parent(tmp))) {\n      this.swap(parseInt(tmp / 2), tmp);\n      tmp = parseInt(tmp / 2);\n    }\n  }\n\n  sink(index) {\n    let tmp = index;\n    while (\n      this.isLeftLessRight(this.childLeft(tmp), this.pq[tmp]) ||\n      this.isLeftLessRight(this.childRight(tmp), this.pq[tmp])\n    ) {\n      let childIndex = tmp;\n      if (this.childLeft(tmp) && this.childRight(tmp)) {\n        childIndex = this.isLeftLessRight(\n          this.childLeft(tmp),\n          this.childRight(tmp)\n        )\n          ? tmp * 2\n          : tmp * 2 + 1;\n      } else if (this.childLeft(tmp)) {\n        childIndex = tmp * 2;\n      } else if (this.childRight(tmp)) {\n        childIndex = tmp * 2 + 1;\n      }\n\n      this.swap(childIndex, tmp);\n      tmp = childIndex;\n    }\n  }\n\n  swap(a, b) {\n    [this.pq[a], this.pq[b]] = [this.pq[b], this.pq[a]];\n  }\n\n  childLeft(index) {\n    return this.pq[index * 2];\n  }\n\n  childRight(index) {\n    return this.pq[index * 2 + 1];\n  }\n\n  parent(index) {\n    return this.pq[parseInt(index / 2)];\n  }\n}\n```\n","slug":"algorithm-binary-heap","published":1,"updated":"2022-05-03T11:21:28.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7j00014goswhogg85z0","content":"<p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484495&idx=1&sn=bbfeba9bb5cfd50598e2a4d08c839ee9&chksm=9bd7fa47aca073512e094110a7fe7d9bac052be114d1db72fe07b7efa6beb915f51b3f19291e&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">labuladong 图文详解二叉堆，实现优先级队列</a><br>二叉堆，以数组的方式模拟二叉树，主要操作有两个, sink（下沉）和 swim(上浮)，用以维护二叉堆的性质。其主要应用有两个，首先是一种排序方法「堆排序」，第二是一种很有用的数据结构「优先级队列」。</p>\n<p>这篇文章以二叉堆来实现优先级队列。以后会增加二叉堆的堆排序实现</p>\n<a id=\"more\"></a>\n\n<h1 id=\"什么是二叉堆\"><a href=\"#什么是二叉堆\" class=\"headerlink\" title=\"什么是二叉堆\"></a>什么是二叉堆</h1><p>二叉堆是用数组来实现的完全二叉树。通过数组索引实现节点间的关联,如果<span class=\"text-red text-bold\"> 把 arr[1] 作为整棵树的根</span>，<br>每个节点的父节点和左右孩子的索引都可以通过简单的运算得到。，如下代码为索引实现父节点，子节点的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent (index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(index / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">leftChild(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rightChild(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index * <span class=\"number\">2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二叉堆还分为最大堆和最小堆。<span class=\"text-red\"> 最大堆的性质是：每个节点都大于等于它的两个子节点。类似的，最小堆的性质是：每个节点都小于等于它的子节点</span>。</p>\n<h1 id=\"最大堆实现优先级队列\"><a href=\"#最大堆实现优先级队列\" class=\"headerlink\" title=\"最大堆实现优先级队列\"></a>最大堆实现优先级队列</h1><p>优先级队列结构有一个很有用的功能，你插入或者删除元素的时候，元素会自动排序。主要 API 为 insert 和 delete，基本结构如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxBinaryHeap</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(compareFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pq = [<span class=\"string\">'__BLANK__'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.compareFn = compareFn || <span class=\"function\">(<span class=\"params\">(a, b</span>) =&gt;</span> a &lt; b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// **********核心功能**********</span></span><br><span class=\"line\">  <span class=\"comment\">// 上浮</span></span><br><span class=\"line\">  swim(index) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 下潜</span></span><br><span class=\"line\">  sink(index) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 插入新数据</span></span><br><span class=\"line\">  insert(num) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除最大值</span></span><br><span class=\"line\">  deleteMax() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// **********utils**********</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span>(index) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 大小比较，Index a对应的值 是否比 Index b 对应的值小</span></span><br><span class=\"line\">  less(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.compareFn(<span class=\"keyword\">this</span>.pq[a], <span class=\"keyword\">this</span>.pq[b]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 交换</span></span><br><span class=\"line\">  exchange(index1, index2) &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">this</span>.pq[index1], <span class=\"keyword\">this</span>.pq[index2]] = [<span class=\"keyword\">this</span>.pq[index2], <span class=\"keyword\">this</span>.pq[index1]]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回最大值</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> max() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 子节点 left</span></span><br><span class=\"line\">  childLeft(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[index * <span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  childRight(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[index * <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">  parent(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[<span class=\"built_in\">parseInt</span>(index / <span class=\"number\">2</span>)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-swim-和-sink\"><a href=\"#实现-swim-和-sink\" class=\"headerlink\" title=\"实现 swim 和 sink\"></a>实现 swim 和 sink</h2><p>维护堆结构，当插入和删除指定元素的时候，会破坏最大堆的性质。因此需要对破坏最大堆性质的节点进行位置调整。</p>\n<ul>\n<li><p>如果某个节点 A 比它的子节点（中的一个）小，那么 A 就不配做父节点，应该下去，下面那个更大的节点上来做父节点，这就是对 A 进行下沉。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下潜</span></span><br><span class=\"line\">sink(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempIndex = index;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"keyword\">this</span>.pq[tempIndex] &lt; <span class=\"built_in\">Math</span>.max(<span class=\"keyword\">this</span>.childLeft(tempIndex), <span class=\"keyword\">this</span>.childRight(tempIndex))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> biggerChildIndex = <span class=\"keyword\">this</span>.childLeft(tempIndex) &lt; <span class=\"keyword\">this</span>.childRight(tempIndex) ? tempIndex * <span class=\"number\">2</span> + <span class=\"number\">1</span> : tempIndex * <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.exchange(tempIndex, biggerChildIndex)</span><br><span class=\"line\">      tempIndex = biggerChildIndex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果某个节点 A 比它的父节点大，那么 A 不应该做子节点，应该把父节点换下来，自己去做父节点，这就是对 A 的上浮。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swim(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempIndex = index;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(tempIndex &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"keyword\">this</span>.less(<span class=\"built_in\">parseInt</span>(tempIndex / <span class=\"number\">2</span>), tempIndex)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.exchange(<span class=\"built_in\">parseInt</span>(tempIndex / <span class=\"number\">2</span>), tempIndex);</span><br><span class=\"line\">    tempIndex = <span class=\"built_in\">parseInt</span>(tempIndex / <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"实现-delMax-和-insert\"><a href=\"#实现-delMax-和-insert\" class=\"headerlink\" title=\"实现 delMax 和 insert\"></a>实现 delMax 和 insert</h2><p>insert 方法先把要插入的元素添加到堆底的最后，然后让其上浮到正确位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入新数据</span></span><br><span class=\"line\">insert(num) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.pq[<span class=\"keyword\">this</span>.size] = num;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.swim(<span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>delMax 方法先把堆顶元素 A 和堆底最后的元素 B 对调，然后删除 A，最后让 B 下沉到正确位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteMax() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span>(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.exchange(index, <span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.pq.splice(<span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size -= <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sink(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"实现合并-K-个有序链表的算法\"><a href=\"#实现合并-K-个有序链表的算法\" class=\"headerlink\" title=\"实现合并 K 个有序链表的算法\"></a>实现合并 K 个有序链表的算法</h2><p><a href=\"https://leetcode.com/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener\">leetcode: 23</a></p>\n<p>实现合并 k 个有序链表的算法需要用到优先级队列（Priority Queue），这种数据结构是「二叉堆」最重要的应用。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484499&idx=1&sn=64f75d4bdbb4c5777ba199aae804d138&chksm=9bd7fa5baca0734dc51f588af913140560b994e3811dac6a7fa8ccfc2a31aca327f1faf964c2&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<h3 id=\"最小堆实现合并-k-个链表\"><a href=\"#最小堆实现合并-k-个链表\" class=\"headerlink\" title=\"最小堆实现合并 k 个链表\"></a>最小堆实现合并 k 个链表</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeKLists</span>(<span class=\"params\">lists</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> linkedListHeap = <span class=\"keyword\">new</span> BinaryHeap(</span><br><span class=\"line\">    (node1, node2) =&gt; node1 &amp;&amp; node2 &amp;&amp; node1.val &lt; node2.val</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">let</span> movePointer = <span class=\"keyword\">new</span> ListNode();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> head = movePointer;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> head <span class=\"keyword\">of</span> lists) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head) &#123;</span><br><span class=\"line\">      linkedListHeap.insert(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (linkedListHeap.size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempNode = linkedListHeap.pop();</span><br><span class=\"line\">    movePointer.next = tempNode;</span><br><span class=\"line\">    movePointer = movePointer.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tempNode.next) &#123;</span><br><span class=\"line\">      linkedListHeap.insert(tempNode.next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现二叉堆\"><a href=\"#实现二叉堆\" class=\"headerlink\" title=\"实现二叉堆\"></a>实现二叉堆</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinBinaryHeap</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(compareFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pq = [<span class=\"string\">\"_\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isLeftLessRight = compareFn || <span class=\"function\">(<span class=\"params\">(a, b</span>) =&gt;</span> !!a &amp;&amp; !!b &amp;&amp; a &lt; b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pq[<span class=\"keyword\">this</span>.size] = val;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.swim(<span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  delMin() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.swap(<span class=\"number\">1</span>, <span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> popped = <span class=\"keyword\">this</span>.pq.pop();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sink(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> popped;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pop() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.size &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.delMin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  swim(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = index;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"keyword\">this</span>.isLeftLessRight(<span class=\"keyword\">this</span>.pq[tmp], <span class=\"keyword\">this</span>.parent(tmp))) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.swap(<span class=\"built_in\">parseInt</span>(tmp / <span class=\"number\">2</span>), tmp);</span><br><span class=\"line\">      tmp = <span class=\"built_in\">parseInt</span>(tmp / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sink(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = index;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isLeftLessRight(<span class=\"keyword\">this</span>.childLeft(tmp), <span class=\"keyword\">this</span>.pq[tmp]) ||</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isLeftLessRight(<span class=\"keyword\">this</span>.childRight(tmp), <span class=\"keyword\">this</span>.pq[tmp])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childIndex = tmp;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.childLeft(tmp) &amp;&amp; <span class=\"keyword\">this</span>.childRight(tmp)) &#123;</span><br><span class=\"line\">        childIndex = <span class=\"keyword\">this</span>.isLeftLessRight(</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.childLeft(tmp),</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.childRight(tmp)</span><br><span class=\"line\">        )</span><br><span class=\"line\">          ? tmp * <span class=\"number\">2</span></span><br><span class=\"line\">          : tmp * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.childLeft(tmp)) &#123;</span><br><span class=\"line\">        childIndex = tmp * <span class=\"number\">2</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.childRight(tmp)) &#123;</span><br><span class=\"line\">        childIndex = tmp * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.swap(childIndex, tmp);</span><br><span class=\"line\">      tmp = childIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  swap(a, b) &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">this</span>.pq[a], <span class=\"keyword\">this</span>.pq[b]] = [<span class=\"keyword\">this</span>.pq[b], <span class=\"keyword\">this</span>.pq[a]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  childLeft(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[index * <span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  childRight(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[index * <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parent(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[<span class=\"built_in\">parseInt</span>(index / <span class=\"number\">2</span>)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484495&idx=1&sn=bbfeba9bb5cfd50598e2a4d08c839ee9&chksm=9bd7fa47aca073512e094110a7fe7d9bac052be114d1db72fe07b7efa6beb915f51b3f19291e&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">labuladong 图文详解二叉堆，实现优先级队列</a><br>二叉堆，以数组的方式模拟二叉树，主要操作有两个, sink（下沉）和 swim(上浮)，用以维护二叉堆的性质。其主要应用有两个，首先是一种排序方法「堆排序」，第二是一种很有用的数据结构「优先级队列」。</p>\n<p>这篇文章以二叉堆来实现优先级队列。以后会增加二叉堆的堆排序实现</p>","more":"<h1 id=\"什么是二叉堆\"><a href=\"#什么是二叉堆\" class=\"headerlink\" title=\"什么是二叉堆\"></a>什么是二叉堆</h1><p>二叉堆是用数组来实现的完全二叉树。通过数组索引实现节点间的关联,如果<span class=\"text-red text-bold\"> 把 arr[1] 作为整棵树的根</span>，<br>每个节点的父节点和左右孩子的索引都可以通过简单的运算得到。，如下代码为索引实现父节点，子节点的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent (index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(index / <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">leftChild(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">rightChild(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index * <span class=\"number\">2</span> + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二叉堆还分为最大堆和最小堆。<span class=\"text-red\"> 最大堆的性质是：每个节点都大于等于它的两个子节点。类似的，最小堆的性质是：每个节点都小于等于它的子节点</span>。</p>\n<h1 id=\"最大堆实现优先级队列\"><a href=\"#最大堆实现优先级队列\" class=\"headerlink\" title=\"最大堆实现优先级队列\"></a>最大堆实现优先级队列</h1><p>优先级队列结构有一个很有用的功能，你插入或者删除元素的时候，元素会自动排序。主要 API 为 insert 和 delete，基本结构如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxBinaryHeap</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(compareFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pq = [<span class=\"string\">'__BLANK__'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.compareFn = compareFn || <span class=\"function\">(<span class=\"params\">(a, b</span>) =&gt;</span> a &lt; b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// **********核心功能**********</span></span><br><span class=\"line\">  <span class=\"comment\">// 上浮</span></span><br><span class=\"line\">  swim(index) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 下潜</span></span><br><span class=\"line\">  sink(index) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 插入新数据</span></span><br><span class=\"line\">  insert(num) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 删除最大值</span></span><br><span class=\"line\">  deleteMax() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// **********utils**********</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span>(index) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 大小比较，Index a对应的值 是否比 Index b 对应的值小</span></span><br><span class=\"line\">  less(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.compareFn(<span class=\"keyword\">this</span>.pq[a], <span class=\"keyword\">this</span>.pq[b]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 交换</span></span><br><span class=\"line\">  exchange(index1, index2) &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">this</span>.pq[index1], <span class=\"keyword\">this</span>.pq[index2]] = [<span class=\"keyword\">this</span>.pq[index2], <span class=\"keyword\">this</span>.pq[index1]]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回最大值</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span> max() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 子节点 left</span></span><br><span class=\"line\">  childLeft(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[index * <span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  childRight(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[index * <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">  parent(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[<span class=\"built_in\">parseInt</span>(index / <span class=\"number\">2</span>)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现-swim-和-sink\"><a href=\"#实现-swim-和-sink\" class=\"headerlink\" title=\"实现 swim 和 sink\"></a>实现 swim 和 sink</h2><p>维护堆结构，当插入和删除指定元素的时候，会破坏最大堆的性质。因此需要对破坏最大堆性质的节点进行位置调整。</p>\n<ul>\n<li><p>如果某个节点 A 比它的子节点（中的一个）小，那么 A 就不配做父节点，应该下去，下面那个更大的节点上来做父节点，这就是对 A 进行下沉。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下潜</span></span><br><span class=\"line\">sink(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempIndex = index;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"keyword\">this</span>.pq[tempIndex] &lt; <span class=\"built_in\">Math</span>.max(<span class=\"keyword\">this</span>.childLeft(tempIndex), <span class=\"keyword\">this</span>.childRight(tempIndex))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> biggerChildIndex = <span class=\"keyword\">this</span>.childLeft(tempIndex) &lt; <span class=\"keyword\">this</span>.childRight(tempIndex) ? tempIndex * <span class=\"number\">2</span> + <span class=\"number\">1</span> : tempIndex * <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.exchange(tempIndex, biggerChildIndex)</span><br><span class=\"line\">      tempIndex = biggerChildIndex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果某个节点 A 比它的父节点大，那么 A 不应该做子节点，应该把父节点换下来，自己去做父节点，这就是对 A 的上浮。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swim(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tempIndex = index;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(tempIndex &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"keyword\">this</span>.less(<span class=\"built_in\">parseInt</span>(tempIndex / <span class=\"number\">2</span>), tempIndex)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.exchange(<span class=\"built_in\">parseInt</span>(tempIndex / <span class=\"number\">2</span>), tempIndex);</span><br><span class=\"line\">    tempIndex = <span class=\"built_in\">parseInt</span>(tempIndex / <span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"实现-delMax-和-insert\"><a href=\"#实现-delMax-和-insert\" class=\"headerlink\" title=\"实现 delMax 和 insert\"></a>实现 delMax 和 insert</h2><p>insert 方法先把要插入的元素添加到堆底的最后，然后让其上浮到正确位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入新数据</span></span><br><span class=\"line\">insert(num) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.pq[<span class=\"keyword\">this</span>.size] = num;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.swim(<span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>delMax 方法先把堆顶元素 A 和堆底最后的元素 B 对调，然后删除 A，最后让 B 下沉到正确位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteMax() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.delete(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.max;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span>(index) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.exchange(index, <span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.pq.splice(<span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size -= <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sink(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"实现合并-K-个有序链表的算法\"><a href=\"#实现合并-K-个有序链表的算法\" class=\"headerlink\" title=\"实现合并 K 个有序链表的算法\"></a>实现合并 K 个有序链表的算法</h2><p><a href=\"https://leetcode.com/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener\">leetcode: 23</a></p>\n<p>实现合并 k 个有序链表的算法需要用到优先级队列（Priority Queue），这种数据结构是「二叉堆」最重要的应用。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484499&idx=1&sn=64f75d4bdbb4c5777ba199aae804d138&chksm=9bd7fa5baca0734dc51f588af913140560b994e3811dac6a7fa8ccfc2a31aca327f1faf964c2&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<h3 id=\"最小堆实现合并-k-个链表\"><a href=\"#最小堆实现合并-k-个链表\" class=\"headerlink\" title=\"最小堆实现合并 k 个链表\"></a>最小堆实现合并 k 个链表</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeKLists</span>(<span class=\"params\">lists</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> linkedListHeap = <span class=\"keyword\">new</span> BinaryHeap(</span><br><span class=\"line\">    (node1, node2) =&gt; node1 &amp;&amp; node2 &amp;&amp; node1.val &lt; node2.val</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">let</span> movePointer = <span class=\"keyword\">new</span> ListNode();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> head = movePointer;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> head <span class=\"keyword\">of</span> lists) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head) &#123;</span><br><span class=\"line\">      linkedListHeap.insert(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (linkedListHeap.size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempNode = linkedListHeap.pop();</span><br><span class=\"line\">    movePointer.next = tempNode;</span><br><span class=\"line\">    movePointer = movePointer.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tempNode.next) &#123;</span><br><span class=\"line\">      linkedListHeap.insert(tempNode.next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现二叉堆\"><a href=\"#实现二叉堆\" class=\"headerlink\" title=\"实现二叉堆\"></a>实现二叉堆</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinBinaryHeap</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(compareFn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pq = [<span class=\"string\">\"_\"</span>];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.isLeftLessRight = compareFn || <span class=\"function\">(<span class=\"params\">(a, b</span>) =&gt;</span> !!a &amp;&amp; !!b &amp;&amp; a &lt; b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pq[<span class=\"keyword\">this</span>.size] = val;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.swim(<span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  delMin() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.swap(<span class=\"number\">1</span>, <span class=\"keyword\">this</span>.size);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> popped = <span class=\"keyword\">this</span>.pq.pop();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sink(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> popped;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pop() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.size &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.delMin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  swim(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = index;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tmp &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"keyword\">this</span>.isLeftLessRight(<span class=\"keyword\">this</span>.pq[tmp], <span class=\"keyword\">this</span>.parent(tmp))) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.swap(<span class=\"built_in\">parseInt</span>(tmp / <span class=\"number\">2</span>), tmp);</span><br><span class=\"line\">      tmp = <span class=\"built_in\">parseInt</span>(tmp / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sink(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = index;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isLeftLessRight(<span class=\"keyword\">this</span>.childLeft(tmp), <span class=\"keyword\">this</span>.pq[tmp]) ||</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.isLeftLessRight(<span class=\"keyword\">this</span>.childRight(tmp), <span class=\"keyword\">this</span>.pq[tmp])</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> childIndex = tmp;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.childLeft(tmp) &amp;&amp; <span class=\"keyword\">this</span>.childRight(tmp)) &#123;</span><br><span class=\"line\">        childIndex = <span class=\"keyword\">this</span>.isLeftLessRight(</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.childLeft(tmp),</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.childRight(tmp)</span><br><span class=\"line\">        )</span><br><span class=\"line\">          ? tmp * <span class=\"number\">2</span></span><br><span class=\"line\">          : tmp * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.childLeft(tmp)) &#123;</span><br><span class=\"line\">        childIndex = tmp * <span class=\"number\">2</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.childRight(tmp)) &#123;</span><br><span class=\"line\">        childIndex = tmp * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.swap(childIndex, tmp);</span><br><span class=\"line\">      tmp = childIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  swap(a, b) &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">this</span>.pq[a], <span class=\"keyword\">this</span>.pq[b]] = [<span class=\"keyword\">this</span>.pq[b], <span class=\"keyword\">this</span>.pq[a]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  childLeft(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[index * <span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  childRight(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[index * <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parent(index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pq[<span class=\"built_in\">parseInt</span>(index / <span class=\"number\">2</span>)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"算法-5 个链表常见操作","toc":true,"date":"2020-06-21T16:00:00.000Z","_content":"\n## 单链表反转\n\n关联 leetcode:[206](https://leetcode-cn.com/problems/reverse-linked-list/) [92](https://leetcode-cn.com/problems/reverse-linked-list-ii/)\n\n1. 迭代原地修改法\n   时间复杂度：O(n),空间复杂度：O(1)\n\n```js\nfunction reverseList_iterate_in_place(head) {\n  let prev = null;\n  let cur = head;\n  while (cur) {\n    next = cur.next;\n    cur.next = prev;\n    prev = cur;\n    cur = next;\n  }\n  return prev;\n}\n```\n\n2. 迭代,额外空间\n   时间复杂度：O(n),空间复杂度：O(n)\n\n```js\nfunction Node(val) {\n  return {\n    val,\n    next: null,\n  };\n}\nfunction reverseList_iterate_copy(head) {\n  let newHead = null;\n  while (head) {\n    // 创建新节点\n    let newNode = new Node(head.val);\n    // 在已存在的head 之前插入\n    newNode.next = newHead;\n    // 移动head\n    newHead = newNode;\n    // 原版head 向后移动\n    head = head.next;\n    console.log(newHead);\n  }\n  return newHead;\n}\n```\n\n3. 递归法\n   时间复杂度：O(n),空间复杂度：O(n)\n\n```js\nfunction reverseList_recursion(head, newHead = null) {\n  if (!head) return newHead;\n  const curNode = new Node(head.val);\n  curNode.next = newHead;\n  return reverseList_recursion(head.next, curNode);\n}\n```\n\n## 链表中环的检测\n\n关联 leetcode:\n\n- [判断链表是否有环 811](https://leetcode-cn.com/problems/linked-list-cycle/)\n- [判断链表是否有环，如果有则返回入口 142](https://leetcode-cn.com/problems/linked-list-cycle-ii/)\n\n### 判断方法\n\n- 快慢指针\n- 通过额外空间存储 Set / Map\n\n快慢指针\n时间复杂度：O(n/2),空间复杂度：O(1)\n\n```js\nfunction isCircle_point(head) {\n  let slow = head;\n  let fast = head.next;\n  while (fast && fast.next) {\n    if (slow === fast) return true;\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  return false;\n}\n```\n\n额外空间(set 方法)\n时间复杂度：O(n),空间复杂度：O(n)\n\n```js\nfunction isCircle_set(head) {\n  let dir = new Set();\n  let move_head = head;\n  while (move_head) {\n    let prev_len = dir.size;\n    dir.add(move_head);\n    if (dir.size === prev_len) return true;\n    move_head = move_head.next;\n  }\n  return false;\n}\n```\n\n### 获取入口\n\n时间复杂度：快慢指针 O(n/2) + 遍历 O(n)\n空间复杂度：O(1)\n分析:\n\n- 设慢指针的路径为 s ，那么快指针路径为 2s\n- 将慢指针走过的路径分为 进入环前-a 和 进入环与快指针相遇-b 两端 则有：s = a + b\n- 将环的路径设置为 c ，那么有 之前绕整个环跑的 n 圈的路程 nc，加上最后这一次遇见 Slower 的路程 s： 2s = s + nc\n\n```js\n2s = s + nc\ns = a + b\n即：\na + b = nc\n\na = nc - b\n  = kc + (c-b)\n```\n\n所以 入口距离为 环长度 - 相遇前已经走过的路径 。 也就等于从相遇的地方走回入口处 c-b\n\n```js\n// a = c - b\nfunction circle_entry(head) {\n  // 返回h相遇点\n  function isCircle(head) {\n    let slow = head;\n    let fast = head.next;\n    while (fast && fast.next) {\n      if (slow === fast) {\n        return fast;\n      }\n      slow = slow.next;\n      fast = fast.next.next;\n    }\n    return null;\n  }\n  // 返回环入口\n  function findCircle(start, meet) {\n    return !!meet\n      ? start === meet\n        ? start\n        : findCircle(start.next, meet.next)\n      : -1;\n  }\n  return findCircle(head, isCircle(head));\n}\n```\n\n## 两个有序链表的合并\n\n### 原地修改\n\n### 额外 O(n+m)空间\n\n关联 leetcode [21](https://leetcode-cn.com/problems/merge-two-sorted-lists/) [23](https://leetcode-cn.com/problems/merge-two-sorted-lists/)\n\n## 删除链表中倒数第 n 个节点\n\n> 倒数第几个：快指针比慢指针快了几次 -> 让快指针优先行动 n 次,再遍历直到快指针到结束，此时的慢指针就是要删除的位置\n\n关联 leetcode [19](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)\n","source":"_posts/algorithm-linkedlist-example.md","raw":"---\ntitle: 算法-5 个链表常见操作\ncategories: [算法]\ntags: [linkedList]\ntoc: true\ndate: 2020/6/22\n---\n\n## 单链表反转\n\n关联 leetcode:[206](https://leetcode-cn.com/problems/reverse-linked-list/) [92](https://leetcode-cn.com/problems/reverse-linked-list-ii/)\n\n1. 迭代原地修改法\n   时间复杂度：O(n),空间复杂度：O(1)\n\n```js\nfunction reverseList_iterate_in_place(head) {\n  let prev = null;\n  let cur = head;\n  while (cur) {\n    next = cur.next;\n    cur.next = prev;\n    prev = cur;\n    cur = next;\n  }\n  return prev;\n}\n```\n\n2. 迭代,额外空间\n   时间复杂度：O(n),空间复杂度：O(n)\n\n```js\nfunction Node(val) {\n  return {\n    val,\n    next: null,\n  };\n}\nfunction reverseList_iterate_copy(head) {\n  let newHead = null;\n  while (head) {\n    // 创建新节点\n    let newNode = new Node(head.val);\n    // 在已存在的head 之前插入\n    newNode.next = newHead;\n    // 移动head\n    newHead = newNode;\n    // 原版head 向后移动\n    head = head.next;\n    console.log(newHead);\n  }\n  return newHead;\n}\n```\n\n3. 递归法\n   时间复杂度：O(n),空间复杂度：O(n)\n\n```js\nfunction reverseList_recursion(head, newHead = null) {\n  if (!head) return newHead;\n  const curNode = new Node(head.val);\n  curNode.next = newHead;\n  return reverseList_recursion(head.next, curNode);\n}\n```\n\n## 链表中环的检测\n\n关联 leetcode:\n\n- [判断链表是否有环 811](https://leetcode-cn.com/problems/linked-list-cycle/)\n- [判断链表是否有环，如果有则返回入口 142](https://leetcode-cn.com/problems/linked-list-cycle-ii/)\n\n### 判断方法\n\n- 快慢指针\n- 通过额外空间存储 Set / Map\n\n快慢指针\n时间复杂度：O(n/2),空间复杂度：O(1)\n\n```js\nfunction isCircle_point(head) {\n  let slow = head;\n  let fast = head.next;\n  while (fast && fast.next) {\n    if (slow === fast) return true;\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  return false;\n}\n```\n\n额外空间(set 方法)\n时间复杂度：O(n),空间复杂度：O(n)\n\n```js\nfunction isCircle_set(head) {\n  let dir = new Set();\n  let move_head = head;\n  while (move_head) {\n    let prev_len = dir.size;\n    dir.add(move_head);\n    if (dir.size === prev_len) return true;\n    move_head = move_head.next;\n  }\n  return false;\n}\n```\n\n### 获取入口\n\n时间复杂度：快慢指针 O(n/2) + 遍历 O(n)\n空间复杂度：O(1)\n分析:\n\n- 设慢指针的路径为 s ，那么快指针路径为 2s\n- 将慢指针走过的路径分为 进入环前-a 和 进入环与快指针相遇-b 两端 则有：s = a + b\n- 将环的路径设置为 c ，那么有 之前绕整个环跑的 n 圈的路程 nc，加上最后这一次遇见 Slower 的路程 s： 2s = s + nc\n\n```js\n2s = s + nc\ns = a + b\n即：\na + b = nc\n\na = nc - b\n  = kc + (c-b)\n```\n\n所以 入口距离为 环长度 - 相遇前已经走过的路径 。 也就等于从相遇的地方走回入口处 c-b\n\n```js\n// a = c - b\nfunction circle_entry(head) {\n  // 返回h相遇点\n  function isCircle(head) {\n    let slow = head;\n    let fast = head.next;\n    while (fast && fast.next) {\n      if (slow === fast) {\n        return fast;\n      }\n      slow = slow.next;\n      fast = fast.next.next;\n    }\n    return null;\n  }\n  // 返回环入口\n  function findCircle(start, meet) {\n    return !!meet\n      ? start === meet\n        ? start\n        : findCircle(start.next, meet.next)\n      : -1;\n  }\n  return findCircle(head, isCircle(head));\n}\n```\n\n## 两个有序链表的合并\n\n### 原地修改\n\n### 额外 O(n+m)空间\n\n关联 leetcode [21](https://leetcode-cn.com/problems/merge-two-sorted-lists/) [23](https://leetcode-cn.com/problems/merge-two-sorted-lists/)\n\n## 删除链表中倒数第 n 个节点\n\n> 倒数第几个：快指针比慢指针快了几次 -> 让快指针优先行动 n 次,再遍历直到快指针到结束，此时的慢指针就是要删除的位置\n\n关联 leetcode [19](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)\n","slug":"algorithm-linkedlist-example","published":1,"updated":"2021-06-13T08:12:19.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7j20016gosw6ijth7is","content":"<h2 id=\"单链表反转\"><a href=\"#单链表反转\" class=\"headerlink\" title=\"单链表反转\"></a>单链表反转</h2><p>关联 leetcode:<a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">206</a> <a href=\"https://leetcode-cn.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">92</a></p>\n<ol>\n<li>迭代原地修改法<br>时间复杂度：O(n),空间复杂度：O(1)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseList_iterate_in_place</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cur) &#123;</span><br><span class=\"line\">    next = cur.next;</span><br><span class=\"line\">    cur.next = prev;</span><br><span class=\"line\">    prev = cur;</span><br><span class=\"line\">    cur = next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>迭代,额外空间<br>时间复杂度：O(n),空间复杂度：O(n)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    val,</span><br><span class=\"line\">    next: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseList_iterate_copy</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newHead = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (head) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(head.val);</span><br><span class=\"line\">    <span class=\"comment\">// 在已存在的head 之前插入</span></span><br><span class=\"line\">    newNode.next = newHead;</span><br><span class=\"line\">    <span class=\"comment\">// 移动head</span></span><br><span class=\"line\">    newHead = newNode;</span><br><span class=\"line\">    <span class=\"comment\">// 原版head 向后移动</span></span><br><span class=\"line\">    head = head.next;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newHead);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>递归法<br>时间复杂度：O(n),空间复杂度：O(n)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseList_recursion</span>(<span class=\"params\">head, newHead = null</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head) <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> curNode = <span class=\"keyword\">new</span> Node(head.val);</span><br><span class=\"line\">  curNode.next = newHead;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reverseList_recursion(head.next, curNode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表中环的检测\"><a href=\"#链表中环的检测\" class=\"headerlink\" title=\"链表中环的检测\"></a>链表中环的检测</h2><p>关联 leetcode:</p>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener\">判断链表是否有环 811</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\" target=\"_blank\" rel=\"noopener\">判断链表是否有环，如果有则返回入口 142</a></li>\n</ul>\n<h3 id=\"判断方法\"><a href=\"#判断方法\" class=\"headerlink\" title=\"判断方法\"></a>判断方法</h3><ul>\n<li>快慢指针</li>\n<li>通过额外空间存储 Set / Map</li>\n</ul>\n<p>快慢指针<br>时间复杂度：O(n/2),空间复杂度：O(1)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCircle_point</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fast = head.next;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow === fast) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>额外空间(set 方法)<br>时间复杂度：O(n),空间复杂度：O(n)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCircle_set</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dir = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> move_head = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (move_head) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prev_len = dir.size;</span><br><span class=\"line\">    dir.add(move_head);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir.size === prev_len) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    move_head = move_head.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取入口\"><a href=\"#获取入口\" class=\"headerlink\" title=\"获取入口\"></a>获取入口</h3><p>时间复杂度：快慢指针 O(n/2) + 遍历 O(n)<br>空间复杂度：O(1)<br>分析:</p>\n<ul>\n<li>设慢指针的路径为 s ，那么快指针路径为 2s</li>\n<li>将慢指针走过的路径分为 进入环前-a 和 进入环与快指针相遇-b 两端 则有：s = a + b</li>\n<li>将环的路径设置为 c ，那么有 之前绕整个环跑的 n 圈的路程 nc，加上最后这一次遇见 Slower 的路程 s： 2s = s + nc</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>s = s + nc</span><br><span class=\"line\">s = a + b</span><br><span class=\"line\">即：</span><br><span class=\"line\">a + b = nc</span><br><span class=\"line\"></span><br><span class=\"line\">a = nc - b</span><br><span class=\"line\">  = kc + (c-b)</span><br></pre></td></tr></table></figure>\n\n<p>所以 入口距离为 环长度 - 相遇前已经走过的路径 。 也就等于从相遇的地方走回入口处 c-b</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a = c - b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circle_entry</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回h相遇点</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCircle</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (slow === fast) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fast;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      slow = slow.next;</span><br><span class=\"line\">      fast = fast.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回环入口</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCircle</span>(<span class=\"params\">start, meet</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!meet</span><br><span class=\"line\">      ? start === meet</span><br><span class=\"line\">        ? start</span><br><span class=\"line\">        : findCircle(start.next, meet.next)</span><br><span class=\"line\">      : <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> findCircle(head, isCircle(head));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两个有序链表的合并\"><a href=\"#两个有序链表的合并\" class=\"headerlink\" title=\"两个有序链表的合并\"></a>两个有序链表的合并</h2><h3 id=\"原地修改\"><a href=\"#原地修改\" class=\"headerlink\" title=\"原地修改\"></a>原地修改</h3><h3 id=\"额外-O-n-m-空间\"><a href=\"#额外-O-n-m-空间\" class=\"headerlink\" title=\"额外 O(n+m)空间\"></a>额外 O(n+m)空间</h3><p>关联 leetcode <a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">21</a> <a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">23</a></p>\n<h2 id=\"删除链表中倒数第-n-个节点\"><a href=\"#删除链表中倒数第-n-个节点\" class=\"headerlink\" title=\"删除链表中倒数第 n 个节点\"></a>删除链表中倒数第 n 个节点</h2><blockquote>\n<p>倒数第几个：快指针比慢指针快了几次 -&gt; 让快指针优先行动 n 次,再遍历直到快指针到结束，此时的慢指针就是要删除的位置</p>\n</blockquote>\n<p>关联 leetcode <a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener\">19</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单链表反转\"><a href=\"#单链表反转\" class=\"headerlink\" title=\"单链表反转\"></a>单链表反转</h2><p>关联 leetcode:<a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">206</a> <a href=\"https://leetcode-cn.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">92</a></p>\n<ol>\n<li>迭代原地修改法<br>时间复杂度：O(n),空间复杂度：O(1)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseList_iterate_in_place</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cur) &#123;</span><br><span class=\"line\">    next = cur.next;</span><br><span class=\"line\">    cur.next = prev;</span><br><span class=\"line\">    prev = cur;</span><br><span class=\"line\">    cur = next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>迭代,额外空间<br>时间复杂度：O(n),空间复杂度：O(n)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Node</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    val,</span><br><span class=\"line\">    next: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseList_iterate_copy</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newHead = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (head) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建新节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> Node(head.val);</span><br><span class=\"line\">    <span class=\"comment\">// 在已存在的head 之前插入</span></span><br><span class=\"line\">    newNode.next = newHead;</span><br><span class=\"line\">    <span class=\"comment\">// 移动head</span></span><br><span class=\"line\">    newHead = newNode;</span><br><span class=\"line\">    <span class=\"comment\">// 原版head 向后移动</span></span><br><span class=\"line\">    head = head.next;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newHead);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>递归法<br>时间复杂度：O(n),空间复杂度：O(n)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseList_recursion</span>(<span class=\"params\">head, newHead = null</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head) <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> curNode = <span class=\"keyword\">new</span> Node(head.val);</span><br><span class=\"line\">  curNode.next = newHead;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reverseList_recursion(head.next, curNode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表中环的检测\"><a href=\"#链表中环的检测\" class=\"headerlink\" title=\"链表中环的检测\"></a>链表中环的检测</h2><p>关联 leetcode:</p>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\" target=\"_blank\" rel=\"noopener\">判断链表是否有环 811</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\" target=\"_blank\" rel=\"noopener\">判断链表是否有环，如果有则返回入口 142</a></li>\n</ul>\n<h3 id=\"判断方法\"><a href=\"#判断方法\" class=\"headerlink\" title=\"判断方法\"></a>判断方法</h3><ul>\n<li>快慢指针</li>\n<li>通过额外空间存储 Set / Map</li>\n</ul>\n<p>快慢指针<br>时间复杂度：O(n/2),空间复杂度：O(1)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCircle_point</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fast = head.next;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow === fast) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>额外空间(set 方法)<br>时间复杂度：O(n),空间复杂度：O(n)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCircle_set</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dir = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> move_head = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (move_head) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prev_len = dir.size;</span><br><span class=\"line\">    dir.add(move_head);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir.size === prev_len) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    move_head = move_head.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取入口\"><a href=\"#获取入口\" class=\"headerlink\" title=\"获取入口\"></a>获取入口</h3><p>时间复杂度：快慢指针 O(n/2) + 遍历 O(n)<br>空间复杂度：O(1)<br>分析:</p>\n<ul>\n<li>设慢指针的路径为 s ，那么快指针路径为 2s</li>\n<li>将慢指针走过的路径分为 进入环前-a 和 进入环与快指针相遇-b 两端 则有：s = a + b</li>\n<li>将环的路径设置为 c ，那么有 之前绕整个环跑的 n 圈的路程 nc，加上最后这一次遇见 Slower 的路程 s： 2s = s + nc</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>s = s + nc</span><br><span class=\"line\">s = a + b</span><br><span class=\"line\">即：</span><br><span class=\"line\">a + b = nc</span><br><span class=\"line\"></span><br><span class=\"line\">a = nc - b</span><br><span class=\"line\">  = kc + (c-b)</span><br></pre></td></tr></table></figure>\n\n<p>所以 入口距离为 环长度 - 相遇前已经走过的路径 。 也就等于从相遇的地方走回入口处 c-b</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a = c - b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circle_entry</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 返回h相遇点</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isCircle</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (slow === fast) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fast;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      slow = slow.next;</span><br><span class=\"line\">      fast = fast.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回环入口</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCircle</span>(<span class=\"params\">start, meet</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!meet</span><br><span class=\"line\">      ? start === meet</span><br><span class=\"line\">        ? start</span><br><span class=\"line\">        : findCircle(start.next, meet.next)</span><br><span class=\"line\">      : <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> findCircle(head, isCircle(head));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两个有序链表的合并\"><a href=\"#两个有序链表的合并\" class=\"headerlink\" title=\"两个有序链表的合并\"></a>两个有序链表的合并</h2><h3 id=\"原地修改\"><a href=\"#原地修改\" class=\"headerlink\" title=\"原地修改\"></a>原地修改</h3><h3 id=\"额外-O-n-m-空间\"><a href=\"#额外-O-n-m-空间\" class=\"headerlink\" title=\"额外 O(n+m)空间\"></a>额外 O(n+m)空间</h3><p>关联 leetcode <a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">21</a> <a href=\"https://leetcode-cn.com/problems/merge-two-sorted-lists/\" target=\"_blank\" rel=\"noopener\">23</a></p>\n<h2 id=\"删除链表中倒数第-n-个节点\"><a href=\"#删除链表中倒数第-n-个节点\" class=\"headerlink\" title=\"删除链表中倒数第 n 个节点\"></a>删除链表中倒数第 n 个节点</h2><blockquote>\n<p>倒数第几个：快指针比慢指针快了几次 -&gt; 让快指针优先行动 n 次,再遍历直到快指针到结束，此时的慢指针就是要删除的位置</p>\n</blockquote>\n<p>关联 leetcode <a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\" rel=\"noopener\">19</a></p>\n"},{"title":"算法-二分搜索","toc":true,"date":"2021-06-13T16:00:00.000Z","_content":"\n> 参考：[labuladong：我作了首诗，保你闭着眼睛也能写对二分查找](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485044&idx=1&sn=e6b95782141c17abe206bfe2323a4226&chksm=9bd7f87caca0716aa5add0ddddce0bfe06f1f878aafb35113644ebf0cf0bfe51659da1c1b733&scene=21#wechat_redirect)\n\n通用模版\n\n```js\nfunction right_bound(nums, target) {\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n\n    if (nums[mid] === target) {\n      ...\n    } else if (target < nums[mid]) {\n      right = ...;\n    } else if (target > nums[mid]) {\n      left = ...;\n    }\n  }\n  return ...;\n}\n```\n\n<!-- more -->\n\n# 寻找一个数\n\n```js\nfunction searchTarget(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n\n    if (nums[mid] === target) return mid;\n    else if (target < nums[mid]) {\n      right = target - 1;\n    } else if (target > nums[mid]) {\n      left = target + 1;\n    }\n  }\n  return null;\n}\n```\n\n# 边界判断\n\n当出现[1,2,2,2,2,2]这种情况时候，如果需要返回最左侧，或者最右侧的 2 的时候，上面的算法是无法实现的，需要进行如下修改。\n\n## 左边界\n\n下面代码的核心内容为\n\n```js\nif (nums[mid] === target) {\n  right = mid - 1;\n}\n```\n\n```js\nfunction left_bound(nums, target) {\n  // 边界情况判断\n  if (nums[0] > target || nums[nums.length - 1] < target) return -1;\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n\n    if (nums[mid] === target) {\n      right = mid - 1;\n    } else if (target < nums[mid]) {\n      right = mid - 1;\n    } else if (target > nums[mid]) {\n      left = mid + 1;\n    }\n  }\n  return left;\n}\n```\n\n## 右边界\n\n下面代码的核心内容为\n\n```js\nif (nums[mid] === target) {\n  left = mid + 1;\n}\n```\n\n```js\nfunction right_bound(nums, target) {\n  // 边界情况判断\n  if (nums[0] > target || nums[nums.length - 1] < target) return -1;\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n\n    if (nums[mid] === target) {\n      left = mid + 1;\n    } else if (target < nums[mid]) {\n      right = mid - 1;\n    } else if (target > nums[mid]) {\n      left = mid + 1;\n    }\n  }\n  return right;\n}\n```\n\n# 边界情况如何去判断\n\n想象极限情况 [2,2] -> [2] left，right 如何变化，比如左边界判断如下图：\n![图1](/images/algorithm/binarySearch-left-bound.jpeg)\n\n# leetcode\n\n## 35: Search Insert Position\n\n[题目描述: Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.](https://leetcode.com/problems/search-insert-position/)\n\n和 <span class=\"text-red\"> 寻找一个数 </span>类似，多了如果没有找到，则返回应该插入的位置。\n\n首先，分析<span class=\"text-red\"> 寻找一个数 </span>没有匹配到的极限情况：\n\n对于[8, 10] 我们寻找 9，走完核心逻辑，left = 1; right = 0。这正好符合插入位置的要求。\n\n接着，考虑极限情况，如果 target，比列表所有数都小，那么应该插入在列表头部，如果 target 比列表最大值都大，那么应该插入在列表的末尾。\n\n综上，完整代码为\n\n```js\nfunction right_bound(nums, target) {\n+  if (target < nums[0]) return 0;\n+  if (target > nums[nums.length - 1]) return nums.length;\n\n   let left = 0;\n   let right = nums.length - 1;\n\n   while (left <= right) {\n     const mid = parseInt(left + (right - left) / 2);\n\n     if (nums[mid] === target) {\n       return mid;\n     } else if (target < nums[mid]) {\n       right = mid - 1;\n     } else if (target > nums[mid]) {\n       left = mid + 1;\n     }\n   }\n+  return left;\n}\n```\n","source":"_posts/algorithm-binarySearch.md","raw":"---\ntitle: 算法-二分搜索\ncategories: [算法]\ntags: [binarySearch]\ntoc: true\ndate: 2021/6/14\n---\n\n> 参考：[labuladong：我作了首诗，保你闭着眼睛也能写对二分查找](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485044&idx=1&sn=e6b95782141c17abe206bfe2323a4226&chksm=9bd7f87caca0716aa5add0ddddce0bfe06f1f878aafb35113644ebf0cf0bfe51659da1c1b733&scene=21#wechat_redirect)\n\n通用模版\n\n```js\nfunction right_bound(nums, target) {\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n\n    if (nums[mid] === target) {\n      ...\n    } else if (target < nums[mid]) {\n      right = ...;\n    } else if (target > nums[mid]) {\n      left = ...;\n    }\n  }\n  return ...;\n}\n```\n\n<!-- more -->\n\n# 寻找一个数\n\n```js\nfunction searchTarget(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n\n    if (nums[mid] === target) return mid;\n    else if (target < nums[mid]) {\n      right = target - 1;\n    } else if (target > nums[mid]) {\n      left = target + 1;\n    }\n  }\n  return null;\n}\n```\n\n# 边界判断\n\n当出现[1,2,2,2,2,2]这种情况时候，如果需要返回最左侧，或者最右侧的 2 的时候，上面的算法是无法实现的，需要进行如下修改。\n\n## 左边界\n\n下面代码的核心内容为\n\n```js\nif (nums[mid] === target) {\n  right = mid - 1;\n}\n```\n\n```js\nfunction left_bound(nums, target) {\n  // 边界情况判断\n  if (nums[0] > target || nums[nums.length - 1] < target) return -1;\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n\n    if (nums[mid] === target) {\n      right = mid - 1;\n    } else if (target < nums[mid]) {\n      right = mid - 1;\n    } else if (target > nums[mid]) {\n      left = mid + 1;\n    }\n  }\n  return left;\n}\n```\n\n## 右边界\n\n下面代码的核心内容为\n\n```js\nif (nums[mid] === target) {\n  left = mid + 1;\n}\n```\n\n```js\nfunction right_bound(nums, target) {\n  // 边界情况判断\n  if (nums[0] > target || nums[nums.length - 1] < target) return -1;\n\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n\n    if (nums[mid] === target) {\n      left = mid + 1;\n    } else if (target < nums[mid]) {\n      right = mid - 1;\n    } else if (target > nums[mid]) {\n      left = mid + 1;\n    }\n  }\n  return right;\n}\n```\n\n# 边界情况如何去判断\n\n想象极限情况 [2,2] -> [2] left，right 如何变化，比如左边界判断如下图：\n![图1](/images/algorithm/binarySearch-left-bound.jpeg)\n\n# leetcode\n\n## 35: Search Insert Position\n\n[题目描述: Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.](https://leetcode.com/problems/search-insert-position/)\n\n和 <span class=\"text-red\"> 寻找一个数 </span>类似，多了如果没有找到，则返回应该插入的位置。\n\n首先，分析<span class=\"text-red\"> 寻找一个数 </span>没有匹配到的极限情况：\n\n对于[8, 10] 我们寻找 9，走完核心逻辑，left = 1; right = 0。这正好符合插入位置的要求。\n\n接着，考虑极限情况，如果 target，比列表所有数都小，那么应该插入在列表头部，如果 target 比列表最大值都大，那么应该插入在列表的末尾。\n\n综上，完整代码为\n\n```js\nfunction right_bound(nums, target) {\n+  if (target < nums[0]) return 0;\n+  if (target > nums[nums.length - 1]) return nums.length;\n\n   let left = 0;\n   let right = nums.length - 1;\n\n   while (left <= right) {\n     const mid = parseInt(left + (right - left) / 2);\n\n     if (nums[mid] === target) {\n       return mid;\n     } else if (target < nums[mid]) {\n       right = mid - 1;\n     } else if (target > nums[mid]) {\n       left = mid + 1;\n     }\n   }\n+  return left;\n}\n```\n","slug":"algorithm-binarySearch","published":1,"updated":"2021-06-14T10:50:33.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7j6001agoswgumwcuhx","content":"<blockquote>\n<p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485044&idx=1&sn=e6b95782141c17abe206bfe2323a4226&chksm=9bd7f87caca0716aa5add0ddddce0bfe06f1f878aafb35113644ebf0cf0bfe51659da1c1b733&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">labuladong：我作了首诗，保你闭着眼睛也能写对二分查找</a></p>\n</blockquote>\n<p>通用模版</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">right_bound</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">      right = ...;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      left = ...;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ...;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"寻找一个数\"><a href=\"#寻找一个数\" class=\"headerlink\" title=\"寻找一个数\"></a>寻找一个数</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchTarget</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">      right = target - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      left = target + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"边界判断\"><a href=\"#边界判断\" class=\"headerlink\" title=\"边界判断\"></a>边界判断</h1><p>当出现[1,2,2,2,2,2]这种情况时候，如果需要返回最左侧，或者最右侧的 2 的时候，上面的算法是无法实现的，需要进行如下修改。</p>\n<h2 id=\"左边界\"><a href=\"#左边界\" class=\"headerlink\" title=\"左边界\"></a>左边界</h2><p>下面代码的核心内容为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">  right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">left_bound</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界情况判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &gt; target || nums[nums.length - <span class=\"number\">1</span>] &lt; target) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"右边界\"><a href=\"#右边界\" class=\"headerlink\" title=\"右边界\"></a>右边界</h2><p>下面代码的核心内容为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">  left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">right_bound</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界情况判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &gt; target || nums[nums.length - <span class=\"number\">1</span>] &lt; target) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"边界情况如何去判断\"><a href=\"#边界情况如何去判断\" class=\"headerlink\" title=\"边界情况如何去判断\"></a>边界情况如何去判断</h1><p>想象极限情况 [2,2] -&gt; [2] left，right 如何变化，比如左边界判断如下图：<br><img src=\"/images/algorithm/binarySearch-left-bound.jpeg\" alt=\"图1\"></p>\n<h1 id=\"leetcode\"><a href=\"#leetcode\" class=\"headerlink\" title=\"leetcode\"></a>leetcode</h1><h2 id=\"35-Search-Insert-Position\"><a href=\"#35-Search-Insert-Position\" class=\"headerlink\" title=\"35: Search Insert Position\"></a>35: Search Insert Position</h2><p><a href=\"https://leetcode.com/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener\">题目描述: Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</a></p>\n<p>和 <span class=\"text-red\"> 寻找一个数 </span>类似，多了如果没有找到，则返回应该插入的位置。</p>\n<p>首先，分析<span class=\"text-red\"> 寻找一个数 </span>没有匹配到的极限情况：</p>\n<p>对于[8, 10] 我们寻找 9，走完核心逻辑，left = 1; right = 0。这正好符合插入位置的要求。</p>\n<p>接着，考虑极限情况，如果 target，比列表所有数都小，那么应该插入在列表头部，如果 target 比列表最大值都大，那么应该插入在列表的末尾。</p>\n<p>综上，完整代码为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">right_bound</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (target &lt; nums[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (target &gt; nums[nums.length - <span class=\"number\">1</span>]) <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">       right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">       left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485044&idx=1&sn=e6b95782141c17abe206bfe2323a4226&chksm=9bd7f87caca0716aa5add0ddddce0bfe06f1f878aafb35113644ebf0cf0bfe51659da1c1b733&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">labuladong：我作了首诗，保你闭着眼睛也能写对二分查找</a></p>\n</blockquote>\n<p>通用模版</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">right_bound</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">      right = ...;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      left = ...;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ...;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"寻找一个数\"><a href=\"#寻找一个数\" class=\"headerlink\" title=\"寻找一个数\"></a>寻找一个数</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchTarget</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">      right = target - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      left = target + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"边界判断\"><a href=\"#边界判断\" class=\"headerlink\" title=\"边界判断\"></a>边界判断</h1><p>当出现[1,2,2,2,2,2]这种情况时候，如果需要返回最左侧，或者最右侧的 2 的时候，上面的算法是无法实现的，需要进行如下修改。</p>\n<h2 id=\"左边界\"><a href=\"#左边界\" class=\"headerlink\" title=\"左边界\"></a>左边界</h2><p>下面代码的核心内容为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">  right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">left_bound</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界情况判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &gt; target || nums[nums.length - <span class=\"number\">1</span>] &lt; target) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"右边界\"><a href=\"#右边界\" class=\"headerlink\" title=\"右边界\"></a>右边界</h2><p>下面代码的核心内容为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">  left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">right_bound</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界情况判断</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &gt; target || nums[nums.length - <span class=\"number\">1</span>] &lt; target) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"边界情况如何去判断\"><a href=\"#边界情况如何去判断\" class=\"headerlink\" title=\"边界情况如何去判断\"></a>边界情况如何去判断</h1><p>想象极限情况 [2,2] -&gt; [2] left，right 如何变化，比如左边界判断如下图：<br><img src=\"/images/algorithm/binarySearch-left-bound.jpeg\" alt=\"图1\"></p>\n<h1 id=\"leetcode\"><a href=\"#leetcode\" class=\"headerlink\" title=\"leetcode\"></a>leetcode</h1><h2 id=\"35-Search-Insert-Position\"><a href=\"#35-Search-Insert-Position\" class=\"headerlink\" title=\"35: Search Insert Position\"></a>35: Search Insert Position</h2><p><a href=\"https://leetcode.com/problems/search-insert-position/\" target=\"_blank\" rel=\"noopener\">题目描述: Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</a></p>\n<p>和 <span class=\"text-red\"> 寻找一个数 </span>类似，多了如果没有找到，则返回应该插入的位置。</p>\n<p>首先，分析<span class=\"text-red\"> 寻找一个数 </span>没有匹配到的极限情况：</p>\n<p>对于[8, 10] 我们寻找 9，走完核心逻辑，left = 1; right = 0。这正好符合插入位置的要求。</p>\n<p>接着，考虑极限情况，如果 target，比列表所有数都小，那么应该插入在列表头部，如果 target 比列表最大值都大，那么应该插入在列表的末尾。</p>\n<p>综上，完整代码为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">right_bound</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (target &lt; nums[<span class=\"number\">0</span>]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">+  <span class=\"keyword\">if</span> (target &gt; nums[nums.length - <span class=\"number\">1</span>]) <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (nums[mid] === target) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[mid]) &#123;</span><br><span class=\"line\">       right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; nums[mid]) &#123;</span><br><span class=\"line\">       left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">+  <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"算法 - 反转链表","toc":true,"date":"2021-06-09T16:00:00.000Z","_content":"\n这篇文章包含，反转链表，反转前 N 个链表，反转指定 M-N 之间的链表 的递归解法。\n这篇文章主要内容参考[labuladong: 递归反转链表：如何拆解复杂问题](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484467&idx=1&sn=beb3ae89993b812eeaa6bbdeda63c494&chksm=9bd7fa3baca0732dc3f9ae9202ecaf5c925b4048514eeca6ac81bc340930a82fc62bb67681fa&scene=21#wechat_redirect)，再次基础上加上了自己的理解\n\n<!-- more -->\n\n## 反转链表\n\n[leetcode 206](https://leetcode.com/problems/reverse-linked-list/)\n\n<span style=\"color: green\">函数定义：输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点。</span>\n\n<span style=\"color: red\"> 我们执行 reverse(head),将会执行如下递归操作 </span>\n\n```js\nreverse(head);\n  --> const last = reverse(head.next);\n```\n\n![图1](/images/algorithm/reverse-linkedList-1.png)\n\n按照上述<span style=\"color: green\">函数定义：</span>，那么 reverse(head.next)的期望结果应该如下\n\n![图2](/images/algorithm/reverse-linkedList-2.png)\n\n### 如果确保 last 就是反转后的头节点？\n\n- Base Case： `if(head.next == null) return head`，当 head 节点只有一个（递归得到的尾节点或者链表为单个节点情况），我们将其返回，得到链表的尾节点\n\n- return: last, 返回 last，保证返回的值一直是链表的尾节点\n\n```js\nfunction reverse(head) {\n  if (head.next == null) return head;\n  const last = reverse(head.next);\n  return last;\n}\n```\n\n<span class=\"text-large\">调整图 2 的链表节点指向</span>  \n假设 head 为 1，那么 head.next 就指向 2, head.next.next 就是 2 的指针 next\nhead.next.next = head; 将 2 的指针指向 1\n\n![图3](/images/algorithm/reverse-linkedList-3.png)\n\n此时 1 还是指向 2，将其指向 null，完成反转\n\n![图4](/images/algorithm/reverse-linkedList-4.png)\n\n<span class=\"text-large\">综上，最后的代码为</span>\n\n```js\nfunction reverse(head) {\n  if (!head || head.next === null) return head;\n  const last = reverse(head.next);\n  head.next.next = head;\n  head.next = null;\n  return last;\n}\n```\n\n> 增加 !head 是为了处理 head 不存在的极端 case\n\n## 反转前 N 个链表\n\n```java\n// 将链表的前 n 个节点反转（n <= 链表长度）\nListNode reverseN(ListNode head, int n)\n```\n\n反转前 N 个链表，和反转整个链表，整体没有太大区别。区别在于，除了需要记录节点 N，还需要记录 N+1 节点，用于连接反转后的链表和未反转的链表\n\n![图1](/images/algorithm/reverse-linkedListN-1.png)\n\n```js\nlet sucessor = null;\nfunction reverseN(head, n) {\n  if (n === 1) {\n    sucessor = head.next;\n    return head;\n  }\n  const tail = reverse(head.next, n - 1);\n  head.next.next = head;\n  head.next = sucessor;\n  return tail;\n}\n```\n\nsucessor 节点作用\n\n![图2](/images/algorithm/reverse-linkedListN-2.png)\n反转前 N 个节点，除了记录 tail，还需要记录切分处的后继节点 sucessor，用于反转后的尾节点连接。\n如图中， 节点 1，想要连接到节点 4，需要知道节点 4 在哪才行。\n\n## 反转指定区间的链表\n\n[leetcode 92](https://leetcode.com/problems/reverse-linked-list-ii/)\n\n```java\nListNode reverseBetween(ListNode head, int m, int n)\n```\n\n如果 m == 1，就相当于反转前 N 个链表\n\n```js\nvar reverseBetween = function (head, left, right) {\n  if (left === 1) {\n    return reverse(head, right);\n  }\n  // 以example1 为例，当left - 1为1 的时候，此时反转情况如下 1 -> 2 -> reverse(3->4)->5\n  const newHead = reverseBetween(head.next, left - 1, right - 1);\n  head.next = newHead;\n  return head;\n};\n```\n\n![图1](/images/algorithm/reverse-linkedListMN.jpeg)\n完整代码\n\n```js\nfunction reverse(head, k) {\n  let count = 0;\n  let sucessor = null;\n\n  let originHead = head;\n\n  let newHead = reverseCore(head);\n\n  originHead.next = sucessor;\n\n  return newHead;\n\n  function reverseCore(head) {\n    count += 1;\n    if (count === k || !head || !head.next) {\n      sucessor = head.next;\n      return head;\n    }\n    const newHead = reverseCore(head.next);\n    head.next.next = head;\n    head.next = null;\n    return newHead;\n  }\n}\n```\n\n## 分组反转链表 = 多区间反转\n\n[leetcode 25. Reverse Nodes in k-Group](https://leetcode.com/problems/reverse-nodes-in-k-group/)\n\n对于链表：1->2->3->4->5，分组大小为 2\n反转操作为： reverseBetween(1->2) -> reverseBetween(3->4) -> 5\n\n代码：\n\n```js\nvar reverseKGroup = function (head, k) {\n  let startIndex = 1;\n  let size = 0;\n  let countHead = head;\n  while (countHead) {\n    size += 1;\n    countHead = countHead.next;\n  }\n  while (startIndex + k - 1 <= size) {\n    head = reverseBetween(head, startIndex, startIndex + k - 1);\n    startIndex = startIndex + k;\n  }\n  return head;\n};\n```\n","source":"_posts/algorithm-linkedlist-reverseLinkedList.md","raw":"---\ntitle: 算法 - 反转链表\ncategories: [算法]\ntags: [linkedList]\ntoc: true\ndate: 2021/6/10\n---\n\n这篇文章包含，反转链表，反转前 N 个链表，反转指定 M-N 之间的链表 的递归解法。\n这篇文章主要内容参考[labuladong: 递归反转链表：如何拆解复杂问题](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484467&idx=1&sn=beb3ae89993b812eeaa6bbdeda63c494&chksm=9bd7fa3baca0732dc3f9ae9202ecaf5c925b4048514eeca6ac81bc340930a82fc62bb67681fa&scene=21#wechat_redirect)，再次基础上加上了自己的理解\n\n<!-- more -->\n\n## 反转链表\n\n[leetcode 206](https://leetcode.com/problems/reverse-linked-list/)\n\n<span style=\"color: green\">函数定义：输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点。</span>\n\n<span style=\"color: red\"> 我们执行 reverse(head),将会执行如下递归操作 </span>\n\n```js\nreverse(head);\n  --> const last = reverse(head.next);\n```\n\n![图1](/images/algorithm/reverse-linkedList-1.png)\n\n按照上述<span style=\"color: green\">函数定义：</span>，那么 reverse(head.next)的期望结果应该如下\n\n![图2](/images/algorithm/reverse-linkedList-2.png)\n\n### 如果确保 last 就是反转后的头节点？\n\n- Base Case： `if(head.next == null) return head`，当 head 节点只有一个（递归得到的尾节点或者链表为单个节点情况），我们将其返回，得到链表的尾节点\n\n- return: last, 返回 last，保证返回的值一直是链表的尾节点\n\n```js\nfunction reverse(head) {\n  if (head.next == null) return head;\n  const last = reverse(head.next);\n  return last;\n}\n```\n\n<span class=\"text-large\">调整图 2 的链表节点指向</span>  \n假设 head 为 1，那么 head.next 就指向 2, head.next.next 就是 2 的指针 next\nhead.next.next = head; 将 2 的指针指向 1\n\n![图3](/images/algorithm/reverse-linkedList-3.png)\n\n此时 1 还是指向 2，将其指向 null，完成反转\n\n![图4](/images/algorithm/reverse-linkedList-4.png)\n\n<span class=\"text-large\">综上，最后的代码为</span>\n\n```js\nfunction reverse(head) {\n  if (!head || head.next === null) return head;\n  const last = reverse(head.next);\n  head.next.next = head;\n  head.next = null;\n  return last;\n}\n```\n\n> 增加 !head 是为了处理 head 不存在的极端 case\n\n## 反转前 N 个链表\n\n```java\n// 将链表的前 n 个节点反转（n <= 链表长度）\nListNode reverseN(ListNode head, int n)\n```\n\n反转前 N 个链表，和反转整个链表，整体没有太大区别。区别在于，除了需要记录节点 N，还需要记录 N+1 节点，用于连接反转后的链表和未反转的链表\n\n![图1](/images/algorithm/reverse-linkedListN-1.png)\n\n```js\nlet sucessor = null;\nfunction reverseN(head, n) {\n  if (n === 1) {\n    sucessor = head.next;\n    return head;\n  }\n  const tail = reverse(head.next, n - 1);\n  head.next.next = head;\n  head.next = sucessor;\n  return tail;\n}\n```\n\nsucessor 节点作用\n\n![图2](/images/algorithm/reverse-linkedListN-2.png)\n反转前 N 个节点，除了记录 tail，还需要记录切分处的后继节点 sucessor，用于反转后的尾节点连接。\n如图中， 节点 1，想要连接到节点 4，需要知道节点 4 在哪才行。\n\n## 反转指定区间的链表\n\n[leetcode 92](https://leetcode.com/problems/reverse-linked-list-ii/)\n\n```java\nListNode reverseBetween(ListNode head, int m, int n)\n```\n\n如果 m == 1，就相当于反转前 N 个链表\n\n```js\nvar reverseBetween = function (head, left, right) {\n  if (left === 1) {\n    return reverse(head, right);\n  }\n  // 以example1 为例，当left - 1为1 的时候，此时反转情况如下 1 -> 2 -> reverse(3->4)->5\n  const newHead = reverseBetween(head.next, left - 1, right - 1);\n  head.next = newHead;\n  return head;\n};\n```\n\n![图1](/images/algorithm/reverse-linkedListMN.jpeg)\n完整代码\n\n```js\nfunction reverse(head, k) {\n  let count = 0;\n  let sucessor = null;\n\n  let originHead = head;\n\n  let newHead = reverseCore(head);\n\n  originHead.next = sucessor;\n\n  return newHead;\n\n  function reverseCore(head) {\n    count += 1;\n    if (count === k || !head || !head.next) {\n      sucessor = head.next;\n      return head;\n    }\n    const newHead = reverseCore(head.next);\n    head.next.next = head;\n    head.next = null;\n    return newHead;\n  }\n}\n```\n\n## 分组反转链表 = 多区间反转\n\n[leetcode 25. Reverse Nodes in k-Group](https://leetcode.com/problems/reverse-nodes-in-k-group/)\n\n对于链表：1->2->3->4->5，分组大小为 2\n反转操作为： reverseBetween(1->2) -> reverseBetween(3->4) -> 5\n\n代码：\n\n```js\nvar reverseKGroup = function (head, k) {\n  let startIndex = 1;\n  let size = 0;\n  let countHead = head;\n  while (countHead) {\n    size += 1;\n    countHead = countHead.next;\n  }\n  while (startIndex + k - 1 <= size) {\n    head = reverseBetween(head, startIndex, startIndex + k - 1);\n    startIndex = startIndex + k;\n  }\n  return head;\n};\n```\n","slug":"algorithm-linkedlist-reverseLinkedList","published":1,"updated":"2021-06-24T15:37:32.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7j8001bgosw5ltdcn8z","content":"<p>这篇文章包含，反转链表，反转前 N 个链表，反转指定 M-N 之间的链表 的递归解法。<br>这篇文章主要内容参考<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484467&idx=1&sn=beb3ae89993b812eeaa6bbdeda63c494&chksm=9bd7fa3baca0732dc3f9ae9202ecaf5c925b4048514eeca6ac81bc340930a82fc62bb67681fa&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">labuladong: 递归反转链表：如何拆解复杂问题</a>，再次基础上加上了自己的理解</p>\n<a id=\"more\"></a>\n\n<h2 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h2><p><a href=\"https://leetcode.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">leetcode 206</a></p>\n<p><span style=\"color: green\">函数定义：输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点。</span></p>\n<p><span style=\"color: red\"> 我们执行 reverse(head),将会执行如下递归操作 </span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reverse(head);</span><br><span class=\"line\">  --&gt; <span class=\"keyword\">const</span> last = reverse(head.next);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/algorithm/reverse-linkedList-1.png\" alt=\"图1\"></p>\n<p>按照上述<span style=\"color: green\">函数定义：</span>，那么 reverse(head.next)的期望结果应该如下</p>\n<p><img src=\"/images/algorithm/reverse-linkedList-2.png\" alt=\"图2\"></p>\n<h3 id=\"如果确保-last-就是反转后的头节点？\"><a href=\"#如果确保-last-就是反转后的头节点？\" class=\"headerlink\" title=\"如果确保 last 就是反转后的头节点？\"></a>如果确保 last 就是反转后的头节点？</h3><ul>\n<li><p>Base Case： <code>if(head.next == null) return head</code>，当 head 节点只有一个（递归得到的尾节点或者链表为单个节点情况），我们将其返回，得到链表的尾节点</p>\n</li>\n<li><p>return: last, 返回 last，保证返回的值一直是链表的尾节点</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (head.next == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> last = reverse(head.next);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"text-large\">调整图 2 的链表节点指向</span><br>假设 head 为 1，那么 head.next 就指向 2, head.next.next 就是 2 的指针 next<br>head.next.next = head; 将 2 的指针指向 1</p>\n<p><img src=\"/images/algorithm/reverse-linkedList-3.png\" alt=\"图3\"></p>\n<p>此时 1 还是指向 2，将其指向 null，完成反转</p>\n<p><img src=\"/images/algorithm/reverse-linkedList-4.png\" alt=\"图4\"></p>\n<p><span class=\"text-large\">综上，最后的代码为</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || head.next === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> last = reverse(head.next);</span><br><span class=\"line\">  head.next.next = head;</span><br><span class=\"line\">  head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>增加 !head 是为了处理 head 不存在的极端 case</p>\n</blockquote>\n<h2 id=\"反转前-N-个链表\"><a href=\"#反转前-N-个链表\" class=\"headerlink\" title=\"反转前 N 个链表\"></a>反转前 N 个链表</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将链表的前 n 个节点反转（n &lt;= 链表长度）</span></span><br><span class=\"line\"><span class=\"function\">ListNode <span class=\"title\">reverseN</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> n)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>反转前 N 个链表，和反转整个链表，整体没有太大区别。区别在于，除了需要记录节点 N，还需要记录 N+1 节点，用于连接反转后的链表和未反转的链表</p>\n<p><img src=\"/images/algorithm/reverse-linkedListN-1.png\" alt=\"图1\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sucessor = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseN</span>(<span class=\"params\">head, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    sucessor = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tail = reverse(head.next, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  head.next.next = head;</span><br><span class=\"line\">  head.next = sucessor;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>sucessor 节点作用</p>\n<p><img src=\"/images/algorithm/reverse-linkedListN-2.png\" alt=\"图2\"><br>反转前 N 个节点，除了记录 tail，还需要记录切分处的后继节点 sucessor，用于反转后的尾节点连接。<br>如图中， 节点 1，想要连接到节点 4，需要知道节点 4 在哪才行。</p>\n<h2 id=\"反转指定区间的链表\"><a href=\"#反转指定区间的链表\" class=\"headerlink\" title=\"反转指定区间的链表\"></a>反转指定区间的链表</h2><p><a href=\"https://leetcode.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">leetcode 92</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode <span class=\"title\">reverseBetween</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果 m == 1，就相当于反转前 N 个链表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseBetween = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head, left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reverse(head, right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 以example1 为例，当left - 1为1 的时候，此时反转情况如下 1 -&gt; 2 -&gt; reverse(3-&gt;4)-&gt;5</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newHead = reverseBetween(head.next, left - <span class=\"number\">1</span>, right - <span class=\"number\">1</span>);</span><br><span class=\"line\">  head.next = newHead;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/algorithm/reverse-linkedListMN.jpeg\" alt=\"图1\"><br>完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sucessor = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> originHead = head;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newHead = reverseCore(head);</span><br><span class=\"line\"></span><br><span class=\"line\">  originHead.next = sucessor;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseCore</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === k || !head || !head.next) &#123;</span><br><span class=\"line\">      sucessor = head.next;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newHead = reverseCore(head.next);</span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分组反转链表-多区间反转\"><a href=\"#分组反转链表-多区间反转\" class=\"headerlink\" title=\"分组反转链表 = 多区间反转\"></a>分组反转链表 = 多区间反转</h2><p><a href=\"https://leetcode.com/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener\">leetcode 25. Reverse Nodes in k-Group</a></p>\n<p>对于链表：1-&gt;2-&gt;3-&gt;4-&gt;5，分组大小为 2<br>反转操作为： reverseBetween(1-&gt;2) -&gt; reverseBetween(3-&gt;4) -&gt; 5</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseKGroup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> startIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countHead = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (countHead) &#123;</span><br><span class=\"line\">    size += <span class=\"number\">1</span>;</span><br><span class=\"line\">    countHead = countHead.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (startIndex + k - <span class=\"number\">1</span> &lt;= size) &#123;</span><br><span class=\"line\">    head = reverseBetween(head, startIndex, startIndex + k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    startIndex = startIndex + k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>这篇文章包含，反转链表，反转前 N 个链表，反转指定 M-N 之间的链表 的递归解法。<br>这篇文章主要内容参考<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484467&idx=1&sn=beb3ae89993b812eeaa6bbdeda63c494&chksm=9bd7fa3baca0732dc3f9ae9202ecaf5c925b4048514eeca6ac81bc340930a82fc62bb67681fa&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">labuladong: 递归反转链表：如何拆解复杂问题</a>，再次基础上加上了自己的理解</p>","more":"<h2 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h2><p><a href=\"https://leetcode.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">leetcode 206</a></p>\n<p><span style=\"color: green\">函数定义：输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点。</span></p>\n<p><span style=\"color: red\"> 我们执行 reverse(head),将会执行如下递归操作 </span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reverse(head);</span><br><span class=\"line\">  --&gt; <span class=\"keyword\">const</span> last = reverse(head.next);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/algorithm/reverse-linkedList-1.png\" alt=\"图1\"></p>\n<p>按照上述<span style=\"color: green\">函数定义：</span>，那么 reverse(head.next)的期望结果应该如下</p>\n<p><img src=\"/images/algorithm/reverse-linkedList-2.png\" alt=\"图2\"></p>\n<h3 id=\"如果确保-last-就是反转后的头节点？\"><a href=\"#如果确保-last-就是反转后的头节点？\" class=\"headerlink\" title=\"如果确保 last 就是反转后的头节点？\"></a>如果确保 last 就是反转后的头节点？</h3><ul>\n<li><p>Base Case： <code>if(head.next == null) return head</code>，当 head 节点只有一个（递归得到的尾节点或者链表为单个节点情况），我们将其返回，得到链表的尾节点</p>\n</li>\n<li><p>return: last, 返回 last，保证返回的值一直是链表的尾节点</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (head.next == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> last = reverse(head.next);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"text-large\">调整图 2 的链表节点指向</span><br>假设 head 为 1，那么 head.next 就指向 2, head.next.next 就是 2 的指针 next<br>head.next.next = head; 将 2 的指针指向 1</p>\n<p><img src=\"/images/algorithm/reverse-linkedList-3.png\" alt=\"图3\"></p>\n<p>此时 1 还是指向 2，将其指向 null，完成反转</p>\n<p><img src=\"/images/algorithm/reverse-linkedList-4.png\" alt=\"图4\"></p>\n<p><span class=\"text-large\">综上，最后的代码为</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || head.next === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> last = reverse(head.next);</span><br><span class=\"line\">  head.next.next = head;</span><br><span class=\"line\">  head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>增加 !head 是为了处理 head 不存在的极端 case</p>\n</blockquote>\n<h2 id=\"反转前-N-个链表\"><a href=\"#反转前-N-个链表\" class=\"headerlink\" title=\"反转前 N 个链表\"></a>反转前 N 个链表</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将链表的前 n 个节点反转（n &lt;= 链表长度）</span></span><br><span class=\"line\"><span class=\"function\">ListNode <span class=\"title\">reverseN</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> n)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>反转前 N 个链表，和反转整个链表，整体没有太大区别。区别在于，除了需要记录节点 N，还需要记录 N+1 节点，用于连接反转后的链表和未反转的链表</p>\n<p><img src=\"/images/algorithm/reverse-linkedListN-1.png\" alt=\"图1\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sucessor = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseN</span>(<span class=\"params\">head, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    sucessor = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tail = reverse(head.next, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  head.next.next = head;</span><br><span class=\"line\">  head.next = sucessor;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>sucessor 节点作用</p>\n<p><img src=\"/images/algorithm/reverse-linkedListN-2.png\" alt=\"图2\"><br>反转前 N 个节点，除了记录 tail，还需要记录切分处的后继节点 sucessor，用于反转后的尾节点连接。<br>如图中， 节点 1，想要连接到节点 4，需要知道节点 4 在哪才行。</p>\n<h2 id=\"反转指定区间的链表\"><a href=\"#反转指定区间的链表\" class=\"headerlink\" title=\"反转指定区间的链表\"></a>反转指定区间的链表</h2><p><a href=\"https://leetcode.com/problems/reverse-linked-list-ii/\" target=\"_blank\" rel=\"noopener\">leetcode 92</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode <span class=\"title\">reverseBetween</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>如果 m == 1，就相当于反转前 N 个链表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseBetween = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head, left, right</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reverse(head, right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 以example1 为例，当left - 1为1 的时候，此时反转情况如下 1 -&gt; 2 -&gt; reverse(3-&gt;4)-&gt;5</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newHead = reverseBetween(head.next, left - <span class=\"number\">1</span>, right - <span class=\"number\">1</span>);</span><br><span class=\"line\">  head.next = newHead;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/algorithm/reverse-linkedListMN.jpeg\" alt=\"图1\"><br>完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sucessor = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> originHead = head;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newHead = reverseCore(head);</span><br><span class=\"line\"></span><br><span class=\"line\">  originHead.next = sucessor;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseCore</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count === k || !head || !head.next) &#123;</span><br><span class=\"line\">      sucessor = head.next;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newHead = reverseCore(head.next);</span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分组反转链表-多区间反转\"><a href=\"#分组反转链表-多区间反转\" class=\"headerlink\" title=\"分组反转链表 = 多区间反转\"></a>分组反转链表 = 多区间反转</h2><p><a href=\"https://leetcode.com/problems/reverse-nodes-in-k-group/\" target=\"_blank\" rel=\"noopener\">leetcode 25. Reverse Nodes in k-Group</a></p>\n<p>对于链表：1-&gt;2-&gt;3-&gt;4-&gt;5，分组大小为 2<br>反转操作为： reverseBetween(1-&gt;2) -&gt; reverseBetween(3-&gt;4) -&gt; 5</p>\n<p>代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseKGroup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">head, k</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> startIndex = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countHead = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (countHead) &#123;</span><br><span class=\"line\">    size += <span class=\"number\">1</span>;</span><br><span class=\"line\">    countHead = countHead.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (startIndex + k - <span class=\"number\">1</span> &lt;= size) &#123;</span><br><span class=\"line\">    head = reverseBetween(head, startIndex, startIndex + k - <span class=\"number\">1</span>);</span><br><span class=\"line\">    startIndex = startIndex + k;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"算法 - 回文链表","toc":true,"date":"2020-06-17T16:00:00.000Z","_content":"\n# 请判断一个链表是否为回文链表\n\n> 要求为时间复杂度 O(n) 空间复杂度 O(1)\n\n[关联 leetcode234](https://leetcode-cn.com/problems/palindrome-linked-list/)\n例子 1:\n\n```js\n输入：1->2\n输出：false\n```\n\n例子 2:\n\n```js\n输入：1->2->2->1\n输出：true\n```\n\n## 解决方法 1:半栈法\n\n时间复杂度:O(n) 空间复杂度 O(n/2)\n\n> 快慢指针遍历链表时间复杂度 O(n/2)，在此期间，使用栈保存慢指针的引用。遍历结束后，慢指针指向中间点\n> 慢指针接着遍历剩余链表，并逐个将栈中保存的指针引用进行出栈与慢指针对应的值进行比较 时间复杂度 O(n/2) 空间复杂度 O(1)\n> 时间复杂度：O(n) 空间复杂度 O(n/2)\n\n```js\nconst isPalindrome = (head) => {\n  // 快慢指针遍历链表\n  let fast = head;\n  let slow = head;\n  let stack = [];\n  while (fast && fast.next) {\n    stack.push(slow);\n    fast = fast.next.next;\n    slow = slow.next;\n  }\n  // 栈弹出\n  if (fast) slow = slow.next; //当fast存在的情况下，为奇数， slow 进入下半段。否则slow 已为下半段\n  while (slow) {\n    const last = stack.pop();\n    if (slow.val !== last.val) return false;\n    slow = slow.next;\n  }\n  return true;\n};\n```\n\n## 解决方法 2: 原地修改法\n\n时间复杂度:O(n) 空间复杂度 O(1)\n参考：[Palindrome Linked List](https://github.com/andavid/leetcode-java/blob/master/note/234/README.md)\n\n> 使用快慢两个指针找到链表中点，慢指针每次前进一步，快指针每次前进两步。在慢指针前进的过程中，同时修改其 next 指针，使得链表前半部分反序。最后比较中点两侧的链表是否相等。\n> 这个解法主要关注原地修改链表指针，并能够保持关联的方式\n\n```js\nconst isPalindrome = (head) => {\n  let prev = null;\n  let fast = head;\n  let slow = head;\n  while (fast && fast.next) {\n    fast = fast.next.next;\n    let next = slow.next;\n    slow.next = prev;\n    prev = slow;\n    slow = next;\n  }\n  //如果是奇数个，则slow 手动进入下半段\n  if (fast) {\n    slow = slow.next;\n  }\n  // 比较前后两段\n  while (slow) {\n    if (slow.val !== prev.val) return false;\n    slow = slow.next;\n    prev = prev.next;\n  }\n  return true;\n};\n```\n\n# 小结\n\n- 原地修改链表指向，并不丢失整个链表，可以通过 prev 前置指针来进行操作\n- 快慢指针判断链表奇偶，在遍历结束后可以通过 fast 是否为 null 判断\n","source":"_posts/algorithm-palindrome-linkedList.md","raw":"---\ntitle: 算法 - 回文链表\ncategories: [算法]\ntags: [algorithm, linkedList]\ntoc: true\ndate: 2020/6/18\n---\n\n# 请判断一个链表是否为回文链表\n\n> 要求为时间复杂度 O(n) 空间复杂度 O(1)\n\n[关联 leetcode234](https://leetcode-cn.com/problems/palindrome-linked-list/)\n例子 1:\n\n```js\n输入：1->2\n输出：false\n```\n\n例子 2:\n\n```js\n输入：1->2->2->1\n输出：true\n```\n\n## 解决方法 1:半栈法\n\n时间复杂度:O(n) 空间复杂度 O(n/2)\n\n> 快慢指针遍历链表时间复杂度 O(n/2)，在此期间，使用栈保存慢指针的引用。遍历结束后，慢指针指向中间点\n> 慢指针接着遍历剩余链表，并逐个将栈中保存的指针引用进行出栈与慢指针对应的值进行比较 时间复杂度 O(n/2) 空间复杂度 O(1)\n> 时间复杂度：O(n) 空间复杂度 O(n/2)\n\n```js\nconst isPalindrome = (head) => {\n  // 快慢指针遍历链表\n  let fast = head;\n  let slow = head;\n  let stack = [];\n  while (fast && fast.next) {\n    stack.push(slow);\n    fast = fast.next.next;\n    slow = slow.next;\n  }\n  // 栈弹出\n  if (fast) slow = slow.next; //当fast存在的情况下，为奇数， slow 进入下半段。否则slow 已为下半段\n  while (slow) {\n    const last = stack.pop();\n    if (slow.val !== last.val) return false;\n    slow = slow.next;\n  }\n  return true;\n};\n```\n\n## 解决方法 2: 原地修改法\n\n时间复杂度:O(n) 空间复杂度 O(1)\n参考：[Palindrome Linked List](https://github.com/andavid/leetcode-java/blob/master/note/234/README.md)\n\n> 使用快慢两个指针找到链表中点，慢指针每次前进一步，快指针每次前进两步。在慢指针前进的过程中，同时修改其 next 指针，使得链表前半部分反序。最后比较中点两侧的链表是否相等。\n> 这个解法主要关注原地修改链表指针，并能够保持关联的方式\n\n```js\nconst isPalindrome = (head) => {\n  let prev = null;\n  let fast = head;\n  let slow = head;\n  while (fast && fast.next) {\n    fast = fast.next.next;\n    let next = slow.next;\n    slow.next = prev;\n    prev = slow;\n    slow = next;\n  }\n  //如果是奇数个，则slow 手动进入下半段\n  if (fast) {\n    slow = slow.next;\n  }\n  // 比较前后两段\n  while (slow) {\n    if (slow.val !== prev.val) return false;\n    slow = slow.next;\n    prev = prev.next;\n  }\n  return true;\n};\n```\n\n# 小结\n\n- 原地修改链表指向，并不丢失整个链表，可以通过 prev 前置指针来进行操作\n- 快慢指针判断链表奇偶，在遍历结束后可以通过 fast 是否为 null 判断\n","slug":"algorithm-palindrome-linkedList","published":1,"updated":"2021-04-22T08:30:31.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jd001fgoswb6sl69l1","content":"<h1 id=\"请判断一个链表是否为回文链表\"><a href=\"#请判断一个链表是否为回文链表\" class=\"headerlink\" title=\"请判断一个链表是否为回文链表\"></a>请判断一个链表是否为回文链表</h1><blockquote>\n<p>要求为时间复杂度 O(n) 空间复杂度 O(1)</p>\n</blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/palindrome-linked-list/\" target=\"_blank\" rel=\"noopener\">关联 leetcode234</a><br>例子 1:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span></span><br><span class=\"line\">输出：<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>例子 2:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span></span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法-1-半栈法\"><a href=\"#解决方法-1-半栈法\" class=\"headerlink\" title=\"解决方法 1:半栈法\"></a>解决方法 1:半栈法</h2><p>时间复杂度:O(n) 空间复杂度 O(n/2)</p>\n<blockquote>\n<p>快慢指针遍历链表时间复杂度 O(n/2)，在此期间，使用栈保存慢指针的引用。遍历结束后，慢指针指向中间点<br>慢指针接着遍历剩余链表，并逐个将栈中保存的指针引用进行出栈与慢指针对应的值进行比较 时间复杂度 O(n/2) 空间复杂度 O(1)<br>时间复杂度：O(n) 空间复杂度 O(n/2)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isPalindrome = <span class=\"function\">(<span class=\"params\">head</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 快慢指针遍历链表</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    stack.push(slow);</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 栈弹出</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fast) slow = slow.next; <span class=\"comment\">//当fast存在的情况下，为奇数， slow 进入下半段。否则slow 已为下半段</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (slow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> last = stack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow.val !== last.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法-2-原地修改法\"><a href=\"#解决方法-2-原地修改法\" class=\"headerlink\" title=\"解决方法 2: 原地修改法\"></a>解决方法 2: 原地修改法</h2><p>时间复杂度:O(n) 空间复杂度 O(1)<br>参考：<a href=\"https://github.com/andavid/leetcode-java/blob/master/note/234/README.md\" target=\"_blank\" rel=\"noopener\">Palindrome Linked List</a></p>\n<blockquote>\n<p>使用快慢两个指针找到链表中点，慢指针每次前进一步，快指针每次前进两步。在慢指针前进的过程中，同时修改其 next 指针，使得链表前半部分反序。最后比较中点两侧的链表是否相等。<br>这个解法主要关注原地修改链表指针，并能够保持关联的方式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isPalindrome = <span class=\"function\">(<span class=\"params\">head</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = slow.next;</span><br><span class=\"line\">    slow.next = prev;</span><br><span class=\"line\">    prev = slow;</span><br><span class=\"line\">    slow = next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//如果是奇数个，则slow 手动进入下半段</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fast) &#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 比较前后两段</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (slow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow.val !== prev.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    prev = prev.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><ul>\n<li>原地修改链表指向，并不丢失整个链表，可以通过 prev 前置指针来进行操作</li>\n<li>快慢指针判断链表奇偶，在遍历结束后可以通过 fast 是否为 null 判断</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"请判断一个链表是否为回文链表\"><a href=\"#请判断一个链表是否为回文链表\" class=\"headerlink\" title=\"请判断一个链表是否为回文链表\"></a>请判断一个链表是否为回文链表</h1><blockquote>\n<p>要求为时间复杂度 O(n) 空间复杂度 O(1)</p>\n</blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/palindrome-linked-list/\" target=\"_blank\" rel=\"noopener\">关联 leetcode234</a><br>例子 1:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span></span><br><span class=\"line\">输出：<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>例子 2:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：<span class=\"number\">1</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">2</span>-&gt;<span class=\"number\">1</span></span><br><span class=\"line\">输出：<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法-1-半栈法\"><a href=\"#解决方法-1-半栈法\" class=\"headerlink\" title=\"解决方法 1:半栈法\"></a>解决方法 1:半栈法</h2><p>时间复杂度:O(n) 空间复杂度 O(n/2)</p>\n<blockquote>\n<p>快慢指针遍历链表时间复杂度 O(n/2)，在此期间，使用栈保存慢指针的引用。遍历结束后，慢指针指向中间点<br>慢指针接着遍历剩余链表，并逐个将栈中保存的指针引用进行出栈与慢指针对应的值进行比较 时间复杂度 O(n/2) 空间复杂度 O(1)<br>时间复杂度：O(n) 空间复杂度 O(n/2)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isPalindrome = <span class=\"function\">(<span class=\"params\">head</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 快慢指针遍历链表</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    stack.push(slow);</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 栈弹出</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fast) slow = slow.next; <span class=\"comment\">//当fast存在的情况下，为奇数， slow 进入下半段。否则slow 已为下半段</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (slow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> last = stack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow.val !== last.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法-2-原地修改法\"><a href=\"#解决方法-2-原地修改法\" class=\"headerlink\" title=\"解决方法 2: 原地修改法\"></a>解决方法 2: 原地修改法</h2><p>时间复杂度:O(n) 空间复杂度 O(1)<br>参考：<a href=\"https://github.com/andavid/leetcode-java/blob/master/note/234/README.md\" target=\"_blank\" rel=\"noopener\">Palindrome Linked List</a></p>\n<blockquote>\n<p>使用快慢两个指针找到链表中点，慢指针每次前进一步，快指针每次前进两步。在慢指针前进的过程中，同时修改其 next 指针，使得链表前半部分反序。最后比较中点两侧的链表是否相等。<br>这个解法主要关注原地修改链表指针，并能够保持关联的方式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isPalindrome = <span class=\"function\">(<span class=\"params\">head</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = slow.next;</span><br><span class=\"line\">    slow.next = prev;</span><br><span class=\"line\">    prev = slow;</span><br><span class=\"line\">    slow = next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//如果是奇数个，则slow 手动进入下半段</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fast) &#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 比较前后两段</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (slow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slow.val !== prev.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    prev = prev.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><ul>\n<li>原地修改链表指向，并不丢失整个链表，可以通过 prev 前置指针来进行操作</li>\n<li>快慢指针判断链表奇偶，在遍历结束后可以通过 fast 是否为 null 判断</li>\n</ul>\n"},{"title":"算法-链表-回文链表判断","toc":true,"date":"2021-06-12T16:00:00.000Z","_content":"\n> 参考**[labuladong 如何高效判断回文单链表？](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484822&idx=1&sn=44742c9a3557038c8da7150100d94db9&chksm=9bd7fb9eaca0728876e1146306a09f5453bcd5c35c4a264304ea6189faa83ec12a00322f0246&scene=21#wechat_redirect)** > [leetcode: 234 Palindrome LinkedList](https://leetcode.com/problems/palindrome-linked-list/)\n\n1. 借助递归的性质，巧妙解决回文链表问题\n\n链表兼具递归结构，树结构不过是链表的衍生。那么，<span class=\"text-red text-bold\"> 链表其实也可以有前序遍历和后序遍历：</span>\n\n```js\nvoid traverse(ListNode head) {\n    // 前序遍历代码\n    traverse(head.next);\n    // 后序遍历代码\n}\n```\n\n2. 使用快慢指针，迭代的方式解决\n\n```js\nlet slow = head;\nlet fast = head;\nwhile (fast && fast.next) {\n  slow = slow.next;\n  fast = fast.next.next;\n}\n```\n\n<!-- more -->\n\n# 递归\n\n对于链表 `linkedList([1,2,3,4,5,6])`，后序遍历的结果为 `6 5 4 3 2 1`。\n\n```java\nvoid traverse(ListNode head) {\n    // 前序遍历代码\n    traverse(head.next);\n    // 后序遍历代码\n    print(head.val);\n}\n```\n\n<span class=\"text-red\">借助链表的后序遍历，我们可以倒着获取链表节点，此时如果我们保留了原始的 head，就能够实现首尾节点的比较。</span>\n\n```js\nfunction isPalindrome(head) {\n  const left = head;\n  function traverse(right) {\n    if (!right) return true; // 只有left一个节点，符合回文要求\n    const ans = traverse(right.next);\n    ans = ans && left.val === right.val;\n    left = left.next; // left 右移动，而right 在这个快照结束后，就变成了 它的前面节点\n  }\n}\n```\n\n![图1](/images/algorithm/linkedList-isPalindrome.jpeg)\n\n# 迭代\n\n思路：将链表分为两块，然后遍历这两块是否完全一致。\n\n## 使用快慢指针，得到分界点。\n\n```js\nfunction getRightHalf(head) {\n  const slow = head;\n  const fast = head;\n  while (fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n}\n```\n\n链表有可能为奇数个，也有可能为偶数个。它的快慢指针分布如图:\n![图 2](/images/algorithm/linkedList-isPalindrome2.jpeg)\n奇数情况下，需要手动移动慢指针，让其和偶数情况保持一致。\n\n```js\nif (fast) slow = slow.next;\n```\n\n## 将右侧链表的反转\n\n```js\nfunction reverse(head) {\n  if (!head || !head.next) return head;\n  const newHead = reverse(head.next);\n  head.next.next = head;\n  head.next = null;\n  return newHead;\n}\n```\n\n## 遍历\n\n```js\nfunction isPalindrome(head) {\n  const rightOriginHalf = getRightHalf(head);\n  const rightHead = reverse(rightOriginHalf);\n  while (right) {\n    if (right.val !== head.val) return false;\n    head = head.next;\n    right = right.next;\n  }\n  return true;\n}\n```\n","source":"_posts/algorithm-linkedList-isPalindrome.md","raw":"---\ntitle: 算法-链表-回文链表判断\ncategories: [算法]\ntags: [递归, linkedList]\ntoc: true\ndate: 2021/6/13\n---\n\n> 参考**[labuladong 如何高效判断回文单链表？](https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484822&idx=1&sn=44742c9a3557038c8da7150100d94db9&chksm=9bd7fb9eaca0728876e1146306a09f5453bcd5c35c4a264304ea6189faa83ec12a00322f0246&scene=21#wechat_redirect)** > [leetcode: 234 Palindrome LinkedList](https://leetcode.com/problems/palindrome-linked-list/)\n\n1. 借助递归的性质，巧妙解决回文链表问题\n\n链表兼具递归结构，树结构不过是链表的衍生。那么，<span class=\"text-red text-bold\"> 链表其实也可以有前序遍历和后序遍历：</span>\n\n```js\nvoid traverse(ListNode head) {\n    // 前序遍历代码\n    traverse(head.next);\n    // 后序遍历代码\n}\n```\n\n2. 使用快慢指针，迭代的方式解决\n\n```js\nlet slow = head;\nlet fast = head;\nwhile (fast && fast.next) {\n  slow = slow.next;\n  fast = fast.next.next;\n}\n```\n\n<!-- more -->\n\n# 递归\n\n对于链表 `linkedList([1,2,3,4,5,6])`，后序遍历的结果为 `6 5 4 3 2 1`。\n\n```java\nvoid traverse(ListNode head) {\n    // 前序遍历代码\n    traverse(head.next);\n    // 后序遍历代码\n    print(head.val);\n}\n```\n\n<span class=\"text-red\">借助链表的后序遍历，我们可以倒着获取链表节点，此时如果我们保留了原始的 head，就能够实现首尾节点的比较。</span>\n\n```js\nfunction isPalindrome(head) {\n  const left = head;\n  function traverse(right) {\n    if (!right) return true; // 只有left一个节点，符合回文要求\n    const ans = traverse(right.next);\n    ans = ans && left.val === right.val;\n    left = left.next; // left 右移动，而right 在这个快照结束后，就变成了 它的前面节点\n  }\n}\n```\n\n![图1](/images/algorithm/linkedList-isPalindrome.jpeg)\n\n# 迭代\n\n思路：将链表分为两块，然后遍历这两块是否完全一致。\n\n## 使用快慢指针，得到分界点。\n\n```js\nfunction getRightHalf(head) {\n  const slow = head;\n  const fast = head;\n  while (fast && fast.next) {\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n}\n```\n\n链表有可能为奇数个，也有可能为偶数个。它的快慢指针分布如图:\n![图 2](/images/algorithm/linkedList-isPalindrome2.jpeg)\n奇数情况下，需要手动移动慢指针，让其和偶数情况保持一致。\n\n```js\nif (fast) slow = slow.next;\n```\n\n## 将右侧链表的反转\n\n```js\nfunction reverse(head) {\n  if (!head || !head.next) return head;\n  const newHead = reverse(head.next);\n  head.next.next = head;\n  head.next = null;\n  return newHead;\n}\n```\n\n## 遍历\n\n```js\nfunction isPalindrome(head) {\n  const rightOriginHalf = getRightHalf(head);\n  const rightHead = reverse(rightOriginHalf);\n  while (right) {\n    if (right.val !== head.val) return false;\n    head = head.next;\n    right = right.next;\n  }\n  return true;\n}\n```\n","slug":"algorithm-linkedList-isPalindrome","published":1,"updated":"2021-06-24T09:52:03.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7je001hgoswgy3c4rhx","content":"<blockquote>\n<p>参考<strong><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484822&idx=1&sn=44742c9a3557038c8da7150100d94db9&chksm=9bd7fb9eaca0728876e1146306a09f5453bcd5c35c4a264304ea6189faa83ec12a00322f0246&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">labuladong 如何高效判断回文单链表？</a></strong> &gt; <a href=\"https://leetcode.com/problems/palindrome-linked-list/\" target=\"_blank\" rel=\"noopener\">leetcode: 234 Palindrome LinkedList</a></p>\n</blockquote>\n<ol>\n<li>借助递归的性质，巧妙解决回文链表问题</li>\n</ol>\n<p>链表兼具递归结构，树结构不过是链表的衍生。那么，<span class=\"text-red text-bold\"> 链表其实也可以有前序遍历和后序遍历：</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> traverse(ListNode head) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 前序遍历代码</span></span><br><span class=\"line\">    traverse(head.next);</span><br><span class=\"line\">    <span class=\"comment\">// 后序遍历代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用快慢指针，迭代的方式解决</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">  slow = slow.next;</span><br><span class=\"line\">  fast = fast.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h1><p>对于链表 <code>linkedList([1,2,3,4,5,6])</code>，后序遍历的结果为 <code>6 5 4 3 2 1</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 前序遍历代码</span></span><br><span class=\"line\">    traverse(head.next);</span><br><span class=\"line\">    <span class=\"comment\">// 后序遍历代码</span></span><br><span class=\"line\">    print(head.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"text-red\">借助链表的后序遍历，我们可以倒着获取链表节点，此时如果我们保留了原始的 head，就能够实现首尾节点的比较。</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> left = head;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverse</span>(<span class=\"params\">right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!right) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 只有left一个节点，符合回文要求</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ans = traverse(right.next);</span><br><span class=\"line\">    ans = ans &amp;&amp; left.val === right.val;</span><br><span class=\"line\">    left = left.next; <span class=\"comment\">// left 右移动，而right 在这个快照结束后，就变成了 它的前面节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/algorithm/linkedList-isPalindrome.jpeg\" alt=\"图1\"></p>\n<h1 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h1><p>思路：将链表分为两块，然后遍历这两块是否完全一致。</p>\n<h2 id=\"使用快慢指针，得到分界点。\"><a href=\"#使用快慢指针，得到分界点。\" class=\"headerlink\" title=\"使用快慢指针，得到分界点。\"></a>使用快慢指针，得到分界点。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRightHalf</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fast = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>链表有可能为奇数个，也有可能为偶数个。它的快慢指针分布如图:<br><img src=\"/images/algorithm/linkedList-isPalindrome2.jpeg\" alt=\"图 2\"><br>奇数情况下，需要手动移动慢指针，让其和偶数情况保持一致。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (fast) slow = slow.next;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将右侧链表的反转\"><a href=\"#将右侧链表的反转\" class=\"headerlink\" title=\"将右侧链表的反转\"></a>将右侧链表的反转</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || !head.next) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newHead = reverse(head.next);</span><br><span class=\"line\">  head.next.next = head;</span><br><span class=\"line\">  head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightOriginHalf = getRightHalf(head);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightHead = reverse(rightOriginHalf);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right.val !== head.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    head = head.next;</span><br><span class=\"line\">    right = right.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>参考<strong><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484822&idx=1&sn=44742c9a3557038c8da7150100d94db9&chksm=9bd7fb9eaca0728876e1146306a09f5453bcd5c35c4a264304ea6189faa83ec12a00322f0246&scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">labuladong 如何高效判断回文单链表？</a></strong> &gt; <a href=\"https://leetcode.com/problems/palindrome-linked-list/\" target=\"_blank\" rel=\"noopener\">leetcode: 234 Palindrome LinkedList</a></p>\n</blockquote>\n<ol>\n<li>借助递归的性质，巧妙解决回文链表问题</li>\n</ol>\n<p>链表兼具递归结构，树结构不过是链表的衍生。那么，<span class=\"text-red text-bold\"> 链表其实也可以有前序遍历和后序遍历：</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> traverse(ListNode head) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 前序遍历代码</span></span><br><span class=\"line\">    traverse(head.next);</span><br><span class=\"line\">    <span class=\"comment\">// 后序遍历代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用快慢指针，迭代的方式解决</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> slow = head;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fast = head;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">  slow = slow.next;</span><br><span class=\"line\">  fast = fast.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h1><p>对于链表 <code>linkedList([1,2,3,4,5,6])</code>，后序遍历的结果为 <code>6 5 4 3 2 1</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 前序遍历代码</span></span><br><span class=\"line\">    traverse(head.next);</span><br><span class=\"line\">    <span class=\"comment\">// 后序遍历代码</span></span><br><span class=\"line\">    print(head.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"text-red\">借助链表的后序遍历，我们可以倒着获取链表节点，此时如果我们保留了原始的 head，就能够实现首尾节点的比较。</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> left = head;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverse</span>(<span class=\"params\">right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!right) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 只有left一个节点，符合回文要求</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ans = traverse(right.next);</span><br><span class=\"line\">    ans = ans &amp;&amp; left.val === right.val;</span><br><span class=\"line\">    left = left.next; <span class=\"comment\">// left 右移动，而right 在这个快照结束后，就变成了 它的前面节点</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/algorithm/linkedList-isPalindrome.jpeg\" alt=\"图1\"></p>\n<h1 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h1><p>思路：将链表分为两块，然后遍历这两块是否完全一致。</p>\n<h2 id=\"使用快慢指针，得到分界点。\"><a href=\"#使用快慢指针，得到分界点。\" class=\"headerlink\" title=\"使用快慢指针，得到分界点。\"></a>使用快慢指针，得到分界点。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRightHalf</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> slow = head;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fast = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fast &amp;&amp; fast.next) &#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>链表有可能为奇数个，也有可能为偶数个。它的快慢指针分布如图:<br><img src=\"/images/algorithm/linkedList-isPalindrome2.jpeg\" alt=\"图 2\"><br>奇数情况下，需要手动移动慢指针，让其和偶数情况保持一致。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (fast) slow = slow.next;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将右侧链表的反转\"><a href=\"#将右侧链表的反转\" class=\"headerlink\" title=\"将右侧链表的反转\"></a>将右侧链表的反转</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverse</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || !head.next) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newHead = reverse(head.next);</span><br><span class=\"line\">  head.next.next = head;</span><br><span class=\"line\">  head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightOriginHalf = getRightHalf(head);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rightHead = reverse(rightOriginHalf);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right.val !== head.val) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    head = head.next;</span><br><span class=\"line\">    right = right.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用github webhook自动部署hexo & docker 部署","toc":true,"date":"2021-04-24T16:00:00.000Z","_content":"\n需要使用到的工具：nginx, nodejs, pm2(npm package), koa(npm package), github webhook.\n\n流程：\n\n1. pm2 维护一个 nodejs web 服务\n2. 用户提交 commit 后触发 webhook，向 nodejs web 服务发送请求。\n3. web 服务接收到请求，执行自动执行脚本\n<!-- more -->\n\n## 1. 写自动部署脚本 + web 服务\n\n### 创建自动构建脚本目录\n\n```bash\n> mkdir git-webhooks && cd git-webhooks\n```\n\n### 创建 hook：blog-hook.js\n\n> 我这里的博客地址为 /home/shancw/Project/blogs\n\n- git pull origin master\n- npm run build # 生成 hexo 静态文件\n\n```js\nconst util = require(\"util\");\nconst exec = util.promisify(require(\"child_process\").exec);\nasync function main() {\n  await exec(\"cd /home/shancw/Project/blogs && git pull origin master\");\n  await exec(\"cd /home/shancw/Project/blogs && npm run build\");\n}\n\nmodule.exports = {\n  main,\n};\n```\n\n### 创建 web 服务(开启端口为 4001): index.js\n\n```js\nconst Koa = require(\"koa\");\n\nconst app = new Koa();\nconst exec = require(\"./blog-hook.js\").main;\napp.use(async (ctx) => {\n  console.log(\"blog webhook trigger! start deploy\");\n  exec();\n});\n\napp.listen(4001);\n```\n\n### 目录结构：\n\n- git-webhooks\n  - index.js\n  - blog-hook.js\n\n## 2. 配置 nginx 转发\n\n> linux 的 nginx 位置：/etc/nginx\n> 自定义配置位置 /etc/nginx/conf.d\n\n### 在 conf.d 下添加 github webhook 的要触发的 web 服务地址\n\nwww.limiaomiao.site/auto-deploy/ -> http://localhost:4001/\n\n```bash\n# blog-deploy.conf\nserver {\n  server_name www.limiaomiao.site limiaomiao.site;\n  location /auto-deploy/ {\n    proxy_pass http://localhost:4001/;\n  }\n}\n```\n\n### 在 conf.d 下添加 hexo 静态文件代理\n\n```bash\n# blog static.conf\nserver {\n    listen 80;\n    server_name blog.limiaomiao.site;\n    root /home/shancw/Project/blogs/public;   #这是我们的资源文件目录...\n    index index.html index.htm index.nginx-debian.html;\n}\n```\n\n### 调整 hexo 博客的\\_config.yml 文件的 URL\n\n```yml\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://blog.limiaomiao.site/\nroot: /\n```\n\n## 在 github blog 项目下开启 github hook\n\npayload url 为步骤二中 nginx 转发的 url\n<img src=\"webhook.jpg\" />\n","source":"_posts/auto-deploy.md","raw":"---\ntitle: 使用github webhook自动部署hexo & docker 部署\ncategories: [杂项]\ntags: []\ntoc: true\ndate: 2021/4/25\n---\n\n需要使用到的工具：nginx, nodejs, pm2(npm package), koa(npm package), github webhook.\n\n流程：\n\n1. pm2 维护一个 nodejs web 服务\n2. 用户提交 commit 后触发 webhook，向 nodejs web 服务发送请求。\n3. web 服务接收到请求，执行自动执行脚本\n<!-- more -->\n\n## 1. 写自动部署脚本 + web 服务\n\n### 创建自动构建脚本目录\n\n```bash\n> mkdir git-webhooks && cd git-webhooks\n```\n\n### 创建 hook：blog-hook.js\n\n> 我这里的博客地址为 /home/shancw/Project/blogs\n\n- git pull origin master\n- npm run build # 生成 hexo 静态文件\n\n```js\nconst util = require(\"util\");\nconst exec = util.promisify(require(\"child_process\").exec);\nasync function main() {\n  await exec(\"cd /home/shancw/Project/blogs && git pull origin master\");\n  await exec(\"cd /home/shancw/Project/blogs && npm run build\");\n}\n\nmodule.exports = {\n  main,\n};\n```\n\n### 创建 web 服务(开启端口为 4001): index.js\n\n```js\nconst Koa = require(\"koa\");\n\nconst app = new Koa();\nconst exec = require(\"./blog-hook.js\").main;\napp.use(async (ctx) => {\n  console.log(\"blog webhook trigger! start deploy\");\n  exec();\n});\n\napp.listen(4001);\n```\n\n### 目录结构：\n\n- git-webhooks\n  - index.js\n  - blog-hook.js\n\n## 2. 配置 nginx 转发\n\n> linux 的 nginx 位置：/etc/nginx\n> 自定义配置位置 /etc/nginx/conf.d\n\n### 在 conf.d 下添加 github webhook 的要触发的 web 服务地址\n\nwww.limiaomiao.site/auto-deploy/ -> http://localhost:4001/\n\n```bash\n# blog-deploy.conf\nserver {\n  server_name www.limiaomiao.site limiaomiao.site;\n  location /auto-deploy/ {\n    proxy_pass http://localhost:4001/;\n  }\n}\n```\n\n### 在 conf.d 下添加 hexo 静态文件代理\n\n```bash\n# blog static.conf\nserver {\n    listen 80;\n    server_name blog.limiaomiao.site;\n    root /home/shancw/Project/blogs/public;   #这是我们的资源文件目录...\n    index index.html index.htm index.nginx-debian.html;\n}\n```\n\n### 调整 hexo 博客的\\_config.yml 文件的 URL\n\n```yml\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://blog.limiaomiao.site/\nroot: /\n```\n\n## 在 github blog 项目下开启 github hook\n\npayload url 为步骤二中 nginx 转发的 url\n<img src=\"webhook.jpg\" />\n","slug":"auto-deploy","published":1,"updated":"2021-07-29T02:41:52.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jg001mgoswb1rh4asq","content":"<p>需要使用到的工具：nginx, nodejs, pm2(npm package), koa(npm package), github webhook.</p>\n<p>流程：</p>\n<ol>\n<li>pm2 维护一个 nodejs web 服务</li>\n<li>用户提交 commit 后触发 webhook，向 nodejs web 服务发送请求。</li>\n<li>web 服务接收到请求，执行自动执行脚本<a id=\"more\"></a>\n\n</li>\n</ol>\n<h2 id=\"1-写自动部署脚本-web-服务\"><a href=\"#1-写自动部署脚本-web-服务\" class=\"headerlink\" title=\"1. 写自动部署脚本 + web 服务\"></a>1. 写自动部署脚本 + web 服务</h2><h3 id=\"创建自动构建脚本目录\"><a href=\"#创建自动构建脚本目录\" class=\"headerlink\" title=\"创建自动构建脚本目录\"></a>创建自动构建脚本目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir git-webhooks &amp;&amp; <span class=\"built_in\">cd</span> git-webhooks</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-hook：blog-hook-js\"><a href=\"#创建-hook：blog-hook-js\" class=\"headerlink\" title=\"创建 hook：blog-hook.js\"></a>创建 hook：blog-hook.js</h3><blockquote>\n<p>我这里的博客地址为 /home/shancw/Project/blogs</p>\n</blockquote>\n<ul>\n<li>git pull origin master</li>\n<li>npm run build # 生成 hexo 静态文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">\"util\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> exec = util.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>).exec);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> exec(<span class=\"string\">\"cd /home/shancw/Project/blogs &amp;&amp; git pull origin master\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> exec(<span class=\"string\">\"cd /home/shancw/Project/blogs &amp;&amp; npm run build\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  main,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-web-服务-开启端口为-4001-index-js\"><a href=\"#创建-web-服务-开启端口为-4001-index-js\" class=\"headerlink\" title=\"创建 web 服务(开启端口为 4001): index.js\"></a>创建 web 服务(开启端口为 4001): index.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">\"./blog-hook.js\"</span>).main;</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"blog webhook trigger! start deploy\"</span>);</span><br><span class=\"line\">  exec();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4001</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"目录结构：\"><a href=\"#目录结构：\" class=\"headerlink\" title=\"目录结构：\"></a>目录结构：</h3><ul>\n<li>git-webhooks<ul>\n<li>index.js</li>\n<li>blog-hook.js</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-配置-nginx-转发\"><a href=\"#2-配置-nginx-转发\" class=\"headerlink\" title=\"2. 配置 nginx 转发\"></a>2. 配置 nginx 转发</h2><blockquote>\n<p>linux 的 nginx 位置：/etc/nginx<br>自定义配置位置 /etc/nginx/conf.d</p>\n</blockquote>\n<h3 id=\"在-conf-d-下添加-github-webhook-的要触发的-web-服务地址\"><a href=\"#在-conf-d-下添加-github-webhook-的要触发的-web-服务地址\" class=\"headerlink\" title=\"在 conf.d 下添加 github webhook 的要触发的 web 服务地址\"></a>在 conf.d 下添加 github webhook 的要触发的 web 服务地址</h3><p><a href=\"http://www.limiaomiao.site/auto-deploy/\" target=\"_blank\" rel=\"noopener\">www.limiaomiao.site/auto-deploy/</a> -&gt; <a href=\"http://localhost:4001/\" target=\"_blank\" rel=\"noopener\">http://localhost:4001/</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># blog-deploy.conf</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name www.limiaomiao.site limiaomiao.site;</span><br><span class=\"line\">  location /auto-deploy/ &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:4001/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-conf-d-下添加-hexo-静态文件代理\"><a href=\"#在-conf-d-下添加-hexo-静态文件代理\" class=\"headerlink\" title=\"在 conf.d 下添加 hexo 静态文件代理\"></a>在 conf.d 下添加 hexo 静态文件代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># blog static.conf</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.limiaomiao.site;</span><br><span class=\"line\">    root /home/shancw/Project/blogs/public;   <span class=\"comment\">#这是我们的资源文件目录...</span></span><br><span class=\"line\">    index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调整-hexo-博客的-config-yml-文件的-URL\"><a href=\"#调整-hexo-博客的-config-yml-文件的-URL\" class=\"headerlink\" title=\"调整 hexo 博客的_config.yml 文件的 URL\"></a>调整 hexo 博客的_config.yml 文件的 URL</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://blog.limiaomiao.site/</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在-github-blog-项目下开启-github-hook\"><a href=\"#在-github-blog-项目下开启-github-hook\" class=\"headerlink\" title=\"在 github blog 项目下开启 github hook\"></a>在 github blog 项目下开启 github hook</h2><p>payload url 为步骤二中 nginx 转发的 url<br><img src=\"webhook.jpg\" /></p>\n","site":{"data":{}},"excerpt":"<p>需要使用到的工具：nginx, nodejs, pm2(npm package), koa(npm package), github webhook.</p>\n<p>流程：</p>\n<ol>\n<li>pm2 维护一个 nodejs web 服务</li>\n<li>用户提交 commit 后触发 webhook，向 nodejs web 服务发送请求。</li>\n<li>web 服务接收到请求，执行自动执行脚本","more":"</li>\n</ol>\n<h2 id=\"1-写自动部署脚本-web-服务\"><a href=\"#1-写自动部署脚本-web-服务\" class=\"headerlink\" title=\"1. 写自动部署脚本 + web 服务\"></a>1. 写自动部署脚本 + web 服务</h2><h3 id=\"创建自动构建脚本目录\"><a href=\"#创建自动构建脚本目录\" class=\"headerlink\" title=\"创建自动构建脚本目录\"></a>创建自动构建脚本目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mkdir git-webhooks &amp;&amp; <span class=\"built_in\">cd</span> git-webhooks</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-hook：blog-hook-js\"><a href=\"#创建-hook：blog-hook-js\" class=\"headerlink\" title=\"创建 hook：blog-hook.js\"></a>创建 hook：blog-hook.js</h3><blockquote>\n<p>我这里的博客地址为 /home/shancw/Project/blogs</p>\n</blockquote>\n<ul>\n<li>git pull origin master</li>\n<li>npm run build # 生成 hexo 静态文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">\"util\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> exec = util.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">\"child_process\"</span>).exec);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> exec(<span class=\"string\">\"cd /home/shancw/Project/blogs &amp;&amp; git pull origin master\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> exec(<span class=\"string\">\"cd /home/shancw/Project/blogs &amp;&amp; npm run build\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  main,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-web-服务-开启端口为-4001-index-js\"><a href=\"#创建-web-服务-开启端口为-4001-index-js\" class=\"headerlink\" title=\"创建 web 服务(开启端口为 4001): index.js\"></a>创建 web 服务(开启端口为 4001): index.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">\"./blog-hook.js\"</span>).main;</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> (ctx) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"blog webhook trigger! start deploy\"</span>);</span><br><span class=\"line\">  exec();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">4001</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"目录结构：\"><a href=\"#目录结构：\" class=\"headerlink\" title=\"目录结构：\"></a>目录结构：</h3><ul>\n<li>git-webhooks<ul>\n<li>index.js</li>\n<li>blog-hook.js</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-配置-nginx-转发\"><a href=\"#2-配置-nginx-转发\" class=\"headerlink\" title=\"2. 配置 nginx 转发\"></a>2. 配置 nginx 转发</h2><blockquote>\n<p>linux 的 nginx 位置：/etc/nginx<br>自定义配置位置 /etc/nginx/conf.d</p>\n</blockquote>\n<h3 id=\"在-conf-d-下添加-github-webhook-的要触发的-web-服务地址\"><a href=\"#在-conf-d-下添加-github-webhook-的要触发的-web-服务地址\" class=\"headerlink\" title=\"在 conf.d 下添加 github webhook 的要触发的 web 服务地址\"></a>在 conf.d 下添加 github webhook 的要触发的 web 服务地址</h3><p><a href=\"http://www.limiaomiao.site/auto-deploy/\" target=\"_blank\" rel=\"noopener\">www.limiaomiao.site/auto-deploy/</a> -&gt; <a href=\"http://localhost:4001/\" target=\"_blank\" rel=\"noopener\">http://localhost:4001/</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># blog-deploy.conf</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name www.limiaomiao.site limiaomiao.site;</span><br><span class=\"line\">  location /auto-deploy/ &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:4001/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-conf-d-下添加-hexo-静态文件代理\"><a href=\"#在-conf-d-下添加-hexo-静态文件代理\" class=\"headerlink\" title=\"在 conf.d 下添加 hexo 静态文件代理\"></a>在 conf.d 下添加 hexo 静态文件代理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># blog static.conf</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.limiaomiao.site;</span><br><span class=\"line\">    root /home/shancw/Project/blogs/public;   <span class=\"comment\">#这是我们的资源文件目录...</span></span><br><span class=\"line\">    index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调整-hexo-博客的-config-yml-文件的-URL\"><a href=\"#调整-hexo-博客的-config-yml-文件的-URL\" class=\"headerlink\" title=\"调整 hexo 博客的_config.yml 文件的 URL\"></a>调整 hexo 博客的_config.yml 文件的 URL</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://blog.limiaomiao.site/</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在-github-blog-项目下开启-github-hook\"><a href=\"#在-github-blog-项目下开启-github-hook\" class=\"headerlink\" title=\"在 github blog 项目下开启 github hook\"></a>在 github blog 项目下开启 github hook</h2><p>payload url 为步骤二中 nginx 转发的 url<br><img src=\"webhook.jpg\" /></p>"},{"title":"单调栈，单调队列思想的接触与使用","toc":true,"date":"2021-06-20T16:00:00.000Z","_content":"\n单调栈，每次新元素入栈后，栈内的元素都保持有序。和二叉堆维护有序不同在与，<span class=\"text-red\">单调栈实现更简单，不保留所有的栈元素</span>。\n![单调栈](/images/algorithm/monotonic-describe.png)\n\n<!-- more -->\n\n# 模版题目: [链接-496.next greater element](https://leetcode.com/problems/next-greater-element-i/)\n\n```js\nfunction nextGreaterElement(numList) {\n  const ans = [];\n  const stack = [];\n  for (let i = numList.length - 1; i >= 0; i--) {\n    while (stack.length && top(stack) < numList[i]) {\n      stack.pop();\n    }\n    ans[i] = stack.length ? top(stack) : -1;\n    stack.push(numList[i]);\n  }\n  return ans;\n}\n\nfunction top(arr) {\n  if (!(arr instanceof Array)) throw new TypeError(\"stack type must be array\");\n  return arr[arr.length - 1];\n}\n```\n\n# 滑动窗口的最大值 [239: Sliding Window Maximum](https://leetcode.com/problems/sliding-window-maximum/)\n\n```js\nclass monotonicQueue {\n  constructor() {\n    this.queue = [];\n  }\n\n  push(item) {\n    while (this.peek() <= item) {\n      this.queue.pop();\n    }\n    this.queue.push(item);\n  }\n\n  peek() {\n    return this.queue[this.queue.length - 1];\n  }\n\n  pop(num) {\n    if (num == this.max()) {\n      this.queue.shift();\n    }\n  }\n\n  max() {\n    return this.queue[0];\n  }\n}\n\nfunction maxSlidingWindow(nums, size) {\n  const queue = new monotonicQueue();\n  let ans = [];\n  let left = 0;\n  let right = size - 1;\n\n  for (let i = left; i <= right; i++) {\n    queue.push(nums[i]);\n  }\n  ans.push(queue.max());\n\n  while (right < nums.length) {\n    queue.pop(nums[left]);\n    left += 1;\n    right += 1;\n    if (typeof nums[right] == \"number\") {\n      queue.push(nums[right]);\n      ans.push(queue.max());\n    }\n  }\n\n  return ans;\n}\n\nconsole.log(maxSlidingWindow([9, 11], 2));\n```\n","source":"_posts/algorithm-monotonic.md","raw":"---\ntitle: 单调栈，单调队列思想的接触与使用\ncategories: [算法]\ntags: []\ntoc: true\ndate: 2021/6/21\n---\n\n单调栈，每次新元素入栈后，栈内的元素都保持有序。和二叉堆维护有序不同在与，<span class=\"text-red\">单调栈实现更简单，不保留所有的栈元素</span>。\n![单调栈](/images/algorithm/monotonic-describe.png)\n\n<!-- more -->\n\n# 模版题目: [链接-496.next greater element](https://leetcode.com/problems/next-greater-element-i/)\n\n```js\nfunction nextGreaterElement(numList) {\n  const ans = [];\n  const stack = [];\n  for (let i = numList.length - 1; i >= 0; i--) {\n    while (stack.length && top(stack) < numList[i]) {\n      stack.pop();\n    }\n    ans[i] = stack.length ? top(stack) : -1;\n    stack.push(numList[i]);\n  }\n  return ans;\n}\n\nfunction top(arr) {\n  if (!(arr instanceof Array)) throw new TypeError(\"stack type must be array\");\n  return arr[arr.length - 1];\n}\n```\n\n# 滑动窗口的最大值 [239: Sliding Window Maximum](https://leetcode.com/problems/sliding-window-maximum/)\n\n```js\nclass monotonicQueue {\n  constructor() {\n    this.queue = [];\n  }\n\n  push(item) {\n    while (this.peek() <= item) {\n      this.queue.pop();\n    }\n    this.queue.push(item);\n  }\n\n  peek() {\n    return this.queue[this.queue.length - 1];\n  }\n\n  pop(num) {\n    if (num == this.max()) {\n      this.queue.shift();\n    }\n  }\n\n  max() {\n    return this.queue[0];\n  }\n}\n\nfunction maxSlidingWindow(nums, size) {\n  const queue = new monotonicQueue();\n  let ans = [];\n  let left = 0;\n  let right = size - 1;\n\n  for (let i = left; i <= right; i++) {\n    queue.push(nums[i]);\n  }\n  ans.push(queue.max());\n\n  while (right < nums.length) {\n    queue.pop(nums[left]);\n    left += 1;\n    right += 1;\n    if (typeof nums[right] == \"number\") {\n      queue.push(nums[right]);\n      ans.push(queue.max());\n    }\n  }\n\n  return ans;\n}\n\nconsole.log(maxSlidingWindow([9, 11], 2));\n```\n","slug":"algorithm-monotonic","published":1,"updated":"2021-06-21T07:08:53.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jh001pgoswfvktgd58","content":"<p>单调栈，每次新元素入栈后，栈内的元素都保持有序。和二叉堆维护有序不同在与，<span class=\"text-red\">单调栈实现更简单，不保留所有的栈元素</span>。<br><img src=\"/images/algorithm/monotonic-describe.png\" alt=\"单调栈\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"模版题目-链接-496-next-greater-element\"><a href=\"#模版题目-链接-496-next-greater-element\" class=\"headerlink\" title=\"模版题目: 链接-496.next greater element\"></a>模版题目: <a href=\"https://leetcode.com/problems/next-greater-element-i/\" target=\"_blank\" rel=\"noopener\">链接-496.next greater element</a></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextGreaterElement</span>(<span class=\"params\">numList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ans = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = numList.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length &amp;&amp; top(stack) &lt; numList[i]) &#123;</span><br><span class=\"line\">      stack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans[i] = stack.length ? top(stack) : <span class=\"number\">-1</span>;</span><br><span class=\"line\">    stack.push(numList[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">top</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"stack type must be array\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[arr.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"滑动窗口的最大值-239-Sliding-Window-Maximum\"><a href=\"#滑动窗口的最大值-239-Sliding-Window-Maximum\" class=\"headerlink\" title=\"滑动窗口的最大值 239: Sliding Window Maximum\"></a>滑动窗口的最大值 <a href=\"https://leetcode.com/problems/sliding-window-maximum/\" target=\"_blank\" rel=\"noopener\">239: Sliding Window Maximum</a></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">monotonicQueue</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  push(item) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.peek() &lt;= item) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.queue.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.push(item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  peek() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.queue[<span class=\"keyword\">this</span>.queue.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pop(num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"keyword\">this</span>.max()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.queue.shift();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  max() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.queue[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxSlidingWindow</span>(<span class=\"params\">nums, size</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> monotonicQueue();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = size - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">    queue.push(nums[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ans.push(queue.max());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt; nums.length) &#123;</span><br><span class=\"line\">    queue.pop(nums[left]);</span><br><span class=\"line\">    left += <span class=\"number\">1</span>;</span><br><span class=\"line\">    right += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nums[right] == <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">      queue.push(nums[right]);</span><br><span class=\"line\">      ans.push(queue.max());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maxSlidingWindow([<span class=\"number\">9</span>, <span class=\"number\">11</span>], <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>单调栈，每次新元素入栈后，栈内的元素都保持有序。和二叉堆维护有序不同在与，<span class=\"text-red\">单调栈实现更简单，不保留所有的栈元素</span>。<br><img src=\"/images/algorithm/monotonic-describe.png\" alt=\"单调栈\"></p>","more":"<h1 id=\"模版题目-链接-496-next-greater-element\"><a href=\"#模版题目-链接-496-next-greater-element\" class=\"headerlink\" title=\"模版题目: 链接-496.next greater element\"></a>模版题目: <a href=\"https://leetcode.com/problems/next-greater-element-i/\" target=\"_blank\" rel=\"noopener\">链接-496.next greater element</a></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nextGreaterElement</span>(<span class=\"params\">numList</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ans = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = numList.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length &amp;&amp; top(stack) &lt; numList[i]) &#123;</span><br><span class=\"line\">      stack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans[i] = stack.length ? top(stack) : <span class=\"number\">-1</span>;</span><br><span class=\"line\">    stack.push(numList[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">top</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(arr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"stack type must be array\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[arr.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"滑动窗口的最大值-239-Sliding-Window-Maximum\"><a href=\"#滑动窗口的最大值-239-Sliding-Window-Maximum\" class=\"headerlink\" title=\"滑动窗口的最大值 239: Sliding Window Maximum\"></a>滑动窗口的最大值 <a href=\"https://leetcode.com/problems/sliding-window-maximum/\" target=\"_blank\" rel=\"noopener\">239: Sliding Window Maximum</a></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">monotonicQueue</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  push(item) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.peek() &lt;= item) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.queue.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.push(item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  peek() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.queue[<span class=\"keyword\">this</span>.queue.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pop(num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"keyword\">this</span>.max()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.queue.shift();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  max() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.queue[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxSlidingWindow</span>(<span class=\"params\">nums, size</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> monotonicQueue();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = size - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">    queue.push(nums[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ans.push(queue.max());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt; nums.length) &#123;</span><br><span class=\"line\">    queue.pop(nums[left]);</span><br><span class=\"line\">    left += <span class=\"number\">1</span>;</span><br><span class=\"line\">    right += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nums[right] == <span class=\"string\">\"number\"</span>) &#123;</span><br><span class=\"line\">      queue.push(nums[right]);</span><br><span class=\"line\">      ans.push(queue.max());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(maxSlidingWindow([<span class=\"number\">9</span>, <span class=\"number\">11</span>], <span class=\"number\">2</span>));</span><br></pre></td></tr></table></figure>"},{"title":"算法 - 双指针 - twoSum","toc":true,"date":"2021-06-14T16:00:00.000Z","_content":"\ntwoSum 问题 除了使用 哈希表时间换空间外,<span class=\"text-red\">对于有序递增的 twoSum 集合, 比如[1,3,4,6,7]</span> 还可以使用双指针的方式实现，时间复杂度为 O(n)，可优化为 O(logn)。\n\n<!-- more -->\n\nO(n) 时间复杂度\n\n```js\nfunction twoSum(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n  while (left < right) {\n    const tempSum = nums[left] + nums[right];\n    if (tempSum == target) return [left + 1, right + 1];\n    else if (tempSum < target) {\n      left += 1;\n    } else if (tempSum > target) {\n      right -= 1;\n    }\n  }\n  return false;\n}\n```\n\nO(logn) 时间复杂度\n\n使用二分搜索，降低指针移动的次数，从 O(n) -> O(logn)\n\n```js\nfunction twoSum(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n  while (left < right) {\n    const tempSum = nums[left] + nums[right];\n    if (tempSum == target) return [left + 1, right + 1];\n    else if (tempSum < target) {\n      left = binary_search(nums, target - nums[right], \"right\");\n    } else if (tempSum > target) {\n      right = binary_search(nums, target - nums[left], \"left\");\n    }\n  }\n  return false;\n}\nfunction binary_search(nums, target, mode) {\n  let left = 0;\n  let right = nums.length - 1;\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n    if (nums[mid] === target) return mid;\n    else if (nums[mid] > target) {\n      right = mid - 1;\n    } else if (nums[mid] < target) {\n      left = mid + 1;\n    }\n  }\n  return mode === \"left\" ? right : left;\n}\n```\n","source":"_posts/algorithm-towPointer-twoSumII.md","raw":"---\ntitle: 算法 - 双指针 - twoSum\ncategories: [算法]\ntags: []\ntoc: true\ndate: 2021/6/15\n---\n\ntwoSum 问题 除了使用 哈希表时间换空间外,<span class=\"text-red\">对于有序递增的 twoSum 集合, 比如[1,3,4,6,7]</span> 还可以使用双指针的方式实现，时间复杂度为 O(n)，可优化为 O(logn)。\n\n<!-- more -->\n\nO(n) 时间复杂度\n\n```js\nfunction twoSum(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n  while (left < right) {\n    const tempSum = nums[left] + nums[right];\n    if (tempSum == target) return [left + 1, right + 1];\n    else if (tempSum < target) {\n      left += 1;\n    } else if (tempSum > target) {\n      right -= 1;\n    }\n  }\n  return false;\n}\n```\n\nO(logn) 时间复杂度\n\n使用二分搜索，降低指针移动的次数，从 O(n) -> O(logn)\n\n```js\nfunction twoSum(nums, target) {\n  let left = 0;\n  let right = nums.length - 1;\n  while (left < right) {\n    const tempSum = nums[left] + nums[right];\n    if (tempSum == target) return [left + 1, right + 1];\n    else if (tempSum < target) {\n      left = binary_search(nums, target - nums[right], \"right\");\n    } else if (tempSum > target) {\n      right = binary_search(nums, target - nums[left], \"left\");\n    }\n  }\n  return false;\n}\nfunction binary_search(nums, target, mode) {\n  let left = 0;\n  let right = nums.length - 1;\n  while (left <= right) {\n    const mid = parseInt(left + (right - left) / 2);\n    if (nums[mid] === target) return mid;\n    else if (nums[mid] > target) {\n      right = mid - 1;\n    } else if (nums[mid] < target) {\n      left = mid + 1;\n    }\n  }\n  return mode === \"left\" ? right : left;\n}\n```\n","slug":"algorithm-towPointer-twoSumII","published":1,"updated":"2021-06-15T02:48:29.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ji001tgoswec0ghwl7","content":"<p>twoSum 问题 除了使用 哈希表时间换空间外,<span class=\"text-red\">对于有序递增的 twoSum 集合, 比如[1,3,4,6,7]</span> 还可以使用双指针的方式实现，时间复杂度为 O(n)，可优化为 O(logn)。</p>\n<a id=\"more\"></a>\n\n<p>O(n) 时间复杂度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twoSum</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tempSum = nums[left] + nums[right];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tempSum == target) <span class=\"keyword\">return</span> [left + <span class=\"number\">1</span>, right + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempSum &lt; target) &#123;</span><br><span class=\"line\">      left += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempSum &gt; target) &#123;</span><br><span class=\"line\">      right -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>O(logn) 时间复杂度</p>\n<p>使用二分搜索，降低指针移动的次数，从 O(n) -&gt; O(logn)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twoSum</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tempSum = nums[left] + nums[right];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tempSum == target) <span class=\"keyword\">return</span> [left + <span class=\"number\">1</span>, right + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempSum &lt; target) &#123;</span><br><span class=\"line\">      left = binary_search(nums, target - nums[right], <span class=\"string\">\"right\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempSum &gt; target) &#123;</span><br><span class=\"line\">      right = binary_search(nums, target - nums[left], <span class=\"string\">\"left\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">nums, target, mode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mode === <span class=\"string\">\"left\"</span> ? right : left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>twoSum 问题 除了使用 哈希表时间换空间外,<span class=\"text-red\">对于有序递增的 twoSum 集合, 比如[1,3,4,6,7]</span> 还可以使用双指针的方式实现，时间复杂度为 O(n)，可优化为 O(logn)。</p>","more":"<p>O(n) 时间复杂度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twoSum</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tempSum = nums[left] + nums[right];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tempSum == target) <span class=\"keyword\">return</span> [left + <span class=\"number\">1</span>, right + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempSum &lt; target) &#123;</span><br><span class=\"line\">      left += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempSum &gt; target) &#123;</span><br><span class=\"line\">      right -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>O(logn) 时间复杂度</p>\n<p>使用二分搜索，降低指针移动的次数，从 O(n) -&gt; O(logn)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twoSum</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tempSum = nums[left] + nums[right];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tempSum == target) <span class=\"keyword\">return</span> [left + <span class=\"number\">1</span>, right + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempSum &lt; target) &#123;</span><br><span class=\"line\">      left = binary_search(nums, target - nums[right], <span class=\"string\">\"right\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tempSum &gt; target) &#123;</span><br><span class=\"line\">      right = binary_search(nums, target - nums[left], <span class=\"string\">\"left\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">nums, target, mode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = <span class=\"built_in\">parseInt</span>(left + (right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === target) <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mode === <span class=\"string\">\"left\"</span> ? right : left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"【转载】clash 配置记录","toc":true,"date":"2022-03-17T16:00:00.000Z","_content":"\n[joylau: Clash 基本配置记录](http://blog.joylau.cn/2020/05/01/Clash-Config/)\n\n<!-- more -->\n\n```yaml\n---\n#---------------------------------------------------#\n## 配置文件需要放置在 $HOME/.config/clash/config.yml\n##\n## 如果您不知道如何操作，请参阅 SS-Rule-Snippet 的 Wiki：\n## https://github.com/Hackl0us/SS-Rule-Snippet/wiki/clash(X)\n#---------------------------------------------------#\n\n# HTTP 代理端口\nport: 7890\n\n# SOCKS5 代理端口\nsocks-port: 7891\n\n# Linux 和 macOS 的 redir 代理端口 (如需使用此功能，请取消注释)\n# redir-port: 7892\n\n# 允许局域网的连接（可用来共享代理）\nallow-lan: false\n# bind-address: \"*\"\n# 此功能仅在 allow-lan 设置为 true 时生效，支持三种参数：\n# \"*\"                           绑定所有的 IP 地址\n# 192.168.122.11                绑定一个的 IPv4 地址\n# \"[aaaa::a8aa:ff:fe09:57d8]\"   绑定一个 IPv6 地址\n\n# 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）\nmode: Rule\n\n# 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。\n# 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。\nlog-level: silent\n\n# clash 的 RESTful API\nexternal-controller: 127.0.0.1:9090\n\n# 您可以将静态网页资源（如 clash-dashboard）放置在一个目录中，clash 将会服务于 `${API}/ui`\n# 参数应填写配置目录的相对路径或绝对路径。\n# external-ui: folder\n\n# RESTful API 的口令 (可选)\n# secret: \"\"\n\n# 实验性功能\nexperimental:\n  ignore-resolve-fail: true # 忽略 DNS 解析失败，默认值为 true\n\n# 本地 SOCKS5 / HTTP(S) 服务认证\n# authentication:\n#  - \"user1:pass1\"\n#  - \"user2:pass2\"\n\n# # 实验性功能 hosts, 支持通配符 (例如 *.clash.dev 甚至 *.foo.*.example.com)\n# # 静态的域名 比 通配域名 具有更高的优先级 (foo.example.com 优先于 *.example.com)\n# # 注意: hosts 在 fake-ip 模式下不生效\n# hosts:\n#   '*.clash.dev': 127.0.0.1\n#   'alpha.clash.dev': '::1'\n\ndns:\n  enable: true\n  ipv6: false\n  # listen: 0.0.0.0:53\n  # enhanced-mode: redir-host # 或 fake-ip\n  # # fake-ip-range: 198.18.0.1/16 # 如果你不知道这个参数的作用，请勿修改\n  # fake-ip-filter: # fake-ip 白名单列表\n  #   - '*.lan'\n  #   - localhost.ptlogin2.qq.com\n\n  nameserver:\n    - 1.2.4.8\n    - 114.114.114.114\n    - 223.5.5.5\n    - tls://13800000000.rubyfish.cn:853\n    #- https://13800000000.rubyfish.cn/\n\n  fallback: # 与 nameserver 内的服务器列表同时发起请求，当规则符合 GEOIP 在 CN 以外时，fallback 列表内的域名服务器生效。\n    - tls://13800000000.rubyfish.cn:853\n    - tls://1.0.0.1:853\n    - tls://dns.google:853\n\n    #- https://13800000000.rubyfish.cn/\n    #- https://cloudflare-dns.com/dns-query\n    #- https://dns.google/dns-query\n\n  fallback-filter:\n    geoip: true # 默认\n    ipcidr: # 在这个网段内的 IP 地址会被考虑为被污染的 IP\n      - 240.0.0.0/4\n\n# 1. clash DNS 请求逻辑：\n#   (1) 当访问一个域名时， nameserver 与 fallback 列表内的所有服务器并发请求，得到域名对应的 IP 地址。\n#   (2) clash 将选取 nameserver 列表内，解析最快的结果。\n#   (3) 若解析结果中，IP 地址属于 国外，那么 clash 将选择 fallback 列表内，解析最快的结果。\n#\n#   因此，我在 nameserver 和 fallback 内都放置了无污染、解析速度较快的国内 DNS 服务器，以达到最快的解析速度。\n#   但是 fallback 列表内服务器会用在解析境外网站，为了结果绝对无污染，我仅保留了支持 DoT/DoH 的两个服务器。\n#\n# 2. clash DNS 配置注意事项：\n#   (1) 如果您为了确保 DNS 解析结果无污染，请仅保留列表内以 tls:// 或 https:// 开头的 DNS 服务器，但是通常对于国内域名没有必要。\n#   (2) 如果您不在乎可能解析到污染的结果，更加追求速度。请将 nameserver 列表的服务器插入至 fallback 列表内，并移除重复项。\n#\n# 3. 关于 DNS over HTTPS (DoH) 和 DNS over TLS (DoT) 的选择：\n#   对于两项技术双方各执一词，而且会无休止的争论，各有利弊。各位请根据具体需求自行选择，但是配置文件内默认启用 DoT，因为目前国内没有封锁或管制。\n#   DoH: 以 https:// 开头的 DNS 服务器。拥有更好的伪装性，且几乎不可能被运营商或网络管理封锁，但查询效率和安全性可能略低。\n#   DoT: 以 tls:// 开头的 DNS 服务器。拥有更高的安全性和查询效率，但端口有可能被管制或封锁。\n#   若要了解更多关于 DoH/DoT 相关技术，请自行查阅规范文档。\n\nProxy:\n  # shadowsocks\n  # 所支持的加密方式与 go-shadowsocks2 保持一致\n  # 支持加密方式：\n  #   aes-128-gcm aes-192-gcm aes-256-gcm\n  #   aes-128-cfb aes-192-cfb aes-256-cfb\n  #   aes-128-ctr aes-192-ctr aes-256-ctr\n  #   rc4-md5 chacha20 chacha20-ietf xchacha20\n  #   chacha20-ietf-poly1305 xchacha20-ietf-poly1305\n\n  - name: \"ss1\"\n    type: ss\n    server: server\n    port: 443\n    cipher: chacha20-ietf-poly1305\n    password: \"password\"\n    # udp: true\n\n  - name: \"ss2\"\n    type: ss\n    server: server\n    port: 443\n    cipher: AEAD_CHACHA20_POLY1305\n    password: \"password\"\n    plugin: obfs\n    plugin-opts:\n      mode: tls # 混淆模式，可以选择 http 或 tls\n      host: bing.com # 混淆域名，需要和服务器配置保持一致\n\n  - name: \"ss3\"\n    type: ss\n    server: server\n    port: 443\n    cipher: AEAD_CHACHA20_POLY1305\n    password: \"password\"\n    plugin: v2ray-plugin\n    plugin-opts:\n      mode: websocket # 暂时不支持 QUIC 协议\n      # tls: true # wss\n      # skip-cert-verify: true\n      # host: bing.com\n      # path: \"/\"\n      # headers:\n      #   custom: value\n\n  # vmess\n  # 支持加密方式：auto / aes-128-gcm / chacha20-poly1305 / none\n  - name: \"vmess\"\n    type: vmess\n    server: server\n    port: 443\n    uuid: uuid\n    alterId: 32\n    cipher: auto\n    # udp: true\n    # tls: true\n    # skip-cert-verify: true\n    # network: ws\n    # ws-path: /path\n    # ws-headers:\n    #   Host: v2ray.com\n\n  # socks5\n  - name: \"socks\"\n    type: socks5\n    server: server\n    port: 443\n    # username: username\n    # password: password\n    # tls: true\n    # skip-cert-verify: true\n    # udp: true\n\n  # http\n  - name: \"http\"\n    type: http\n    server: server\n    port: 443\n    # username: username\n    # password: password\n    # tls: true # https\n    # skip-cert-verify: true\n\n  # snell\n  - name: \"snell\"\n    type: snell\n    server: server\n    port: 44046\n    psk: yourpsk\n    # obfs-opts:\n    # mode: http # 或 tls\n    # host: bing.com\n\nProxy Group:\n  # url-test 可以自动选择与指定 URL 测速后，延迟最短的服务器\n  - name: \"auto\"\n    type: url-test\n    proxies:\n      - ss1\n      - ss2\n      - vmess1\n    url: \"http://www.gstatic.com/generate_204\"\n    interval: 300\n\n  # fallback 可以尽量按照用户书写的服务器顺序，在确保服务器可用的情况下，自动选择服务器\n  - name: \"fallback-auto\"\n    type: fallback\n    proxies:\n      - ss1\n      - ss2\n      - vmess1\n    url: \"http://www.gstatic.com/generate_204\"\n    interval: 300\n\n  # load-balance 可以使相同 eTLD 请求在同一条代理线路上\n  - name: \"load-balance\"\n    type: load-balance\n    proxies:\n      - ss1\n      - ss2\n      - vmess1\n    url: \"http://www.gstatic.com/generate_204\"\n    interval: 300\n\n  # select 用来允许用户手动选择 代理服务器 或 服务器组\n  # 您也可以使用 RESTful API 去切换服务器，这种方式推荐在 GUI 中使用\n  - name: Proxy\n    type: select\n    proxies:\n      - ss1\n      - ss2\n      - vmess1\n      - auto\n\nRule:\n  # 抗 DNS 污染\n  - DOMAIN-KEYWORD,amazon,Proxy\n  - DOMAIN-KEYWORD,google,Proxy\n  - DOMAIN-KEYWORD,gmail,Proxy\n  - DOMAIN-KEYWORD,youtube,Proxy\n  - DOMAIN-KEYWORD,facebook,Proxy\n  - DOMAIN-SUFFIX,fb.me,Proxy\n  - DOMAIN-SUFFIX,fbcdn.net,Proxy\n  - DOMAIN-KEYWORD,twitter,Proxy\n  - DOMAIN-KEYWORD,instagram,Proxy\n  - DOMAIN-KEYWORD,dropbox,Proxy\n  - DOMAIN-SUFFIX,twimg.com,Proxy\n  - DOMAIN-KEYWORD,blogspot,Proxy\n  - DOMAIN-SUFFIX,youtu.be,Proxy\n  - DOMAIN-KEYWORD,whatsapp,Proxy\n\n  # 常见广告域名屏蔽\n  - DOMAIN-KEYWORD,admarvel,REJECT\n  - DOMAIN-KEYWORD,admaster,REJECT\n  - DOMAIN-KEYWORD,adsage,REJECT\n  - DOMAIN-KEYWORD,adsmogo,REJECT\n  - DOMAIN-KEYWORD,adsrvmedia,REJECT\n  - DOMAIN-KEYWORD,adwords,REJECT\n  - DOMAIN-KEYWORD,adservice,REJECT\n  - DOMAIN-KEYWORD,domob,REJECT\n  - DOMAIN-KEYWORD,duomeng,REJECT\n  - DOMAIN-KEYWORD,dwtrack,REJECT\n  - DOMAIN-KEYWORD,guanggao,REJECT\n  - DOMAIN-KEYWORD,lianmeng,REJECT\n  - DOMAIN-SUFFIX,mmstat.com,REJECT\n  - DOMAIN-KEYWORD,omgmta,REJECT\n  - DOMAIN-KEYWORD,openx,REJECT\n  - DOMAIN-KEYWORD,partnerad,REJECT\n  - DOMAIN-KEYWORD,pingfore,REJECT\n  - DOMAIN-KEYWORD,supersonicads,REJECT\n  - DOMAIN-KEYWORD,uedas,REJECT\n  - DOMAIN-KEYWORD,umeng,REJECT\n  - DOMAIN-KEYWORD,usage,REJECT\n  - DOMAIN-KEYWORD,wlmonitor,REJECT\n  - DOMAIN-KEYWORD,zjtoolbar,REJECT\n\n  # LAN\n  - DOMAIN-SUFFIX,local,DIRECT\n  - IP-CIDR,127.0.0.0/8,DIRECT\n  - IP-CIDR,172.16.0.0/12,DIRECT\n  - IP-CIDR,192.168.0.0/16,DIRECT\n  - IP-CIDR,10.0.0.0/8,DIRECT\n  - IP-CIDR,17.0.0.0/8,DIRECT\n  - IP-CIDR,100.64.0.0/10,DIRECT\n\n  # 最终规则\n  - GEOIP,CN,DIRECT\n  - MATCH,Proxy\n```\n","source":"_posts/clash-config-reference.md","raw":"---\ntitle: 【转载】clash 配置记录\ncategories: []\ntags: []\ntoc: true\ndate: 2022/3/18\n---\n\n[joylau: Clash 基本配置记录](http://blog.joylau.cn/2020/05/01/Clash-Config/)\n\n<!-- more -->\n\n```yaml\n---\n#---------------------------------------------------#\n## 配置文件需要放置在 $HOME/.config/clash/config.yml\n##\n## 如果您不知道如何操作，请参阅 SS-Rule-Snippet 的 Wiki：\n## https://github.com/Hackl0us/SS-Rule-Snippet/wiki/clash(X)\n#---------------------------------------------------#\n\n# HTTP 代理端口\nport: 7890\n\n# SOCKS5 代理端口\nsocks-port: 7891\n\n# Linux 和 macOS 的 redir 代理端口 (如需使用此功能，请取消注释)\n# redir-port: 7892\n\n# 允许局域网的连接（可用来共享代理）\nallow-lan: false\n# bind-address: \"*\"\n# 此功能仅在 allow-lan 设置为 true 时生效，支持三种参数：\n# \"*\"                           绑定所有的 IP 地址\n# 192.168.122.11                绑定一个的 IPv4 地址\n# \"[aaaa::a8aa:ff:fe09:57d8]\"   绑定一个 IPv6 地址\n\n# 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）\nmode: Rule\n\n# 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。\n# 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。\nlog-level: silent\n\n# clash 的 RESTful API\nexternal-controller: 127.0.0.1:9090\n\n# 您可以将静态网页资源（如 clash-dashboard）放置在一个目录中，clash 将会服务于 `${API}/ui`\n# 参数应填写配置目录的相对路径或绝对路径。\n# external-ui: folder\n\n# RESTful API 的口令 (可选)\n# secret: \"\"\n\n# 实验性功能\nexperimental:\n  ignore-resolve-fail: true # 忽略 DNS 解析失败，默认值为 true\n\n# 本地 SOCKS5 / HTTP(S) 服务认证\n# authentication:\n#  - \"user1:pass1\"\n#  - \"user2:pass2\"\n\n# # 实验性功能 hosts, 支持通配符 (例如 *.clash.dev 甚至 *.foo.*.example.com)\n# # 静态的域名 比 通配域名 具有更高的优先级 (foo.example.com 优先于 *.example.com)\n# # 注意: hosts 在 fake-ip 模式下不生效\n# hosts:\n#   '*.clash.dev': 127.0.0.1\n#   'alpha.clash.dev': '::1'\n\ndns:\n  enable: true\n  ipv6: false\n  # listen: 0.0.0.0:53\n  # enhanced-mode: redir-host # 或 fake-ip\n  # # fake-ip-range: 198.18.0.1/16 # 如果你不知道这个参数的作用，请勿修改\n  # fake-ip-filter: # fake-ip 白名单列表\n  #   - '*.lan'\n  #   - localhost.ptlogin2.qq.com\n\n  nameserver:\n    - 1.2.4.8\n    - 114.114.114.114\n    - 223.5.5.5\n    - tls://13800000000.rubyfish.cn:853\n    #- https://13800000000.rubyfish.cn/\n\n  fallback: # 与 nameserver 内的服务器列表同时发起请求，当规则符合 GEOIP 在 CN 以外时，fallback 列表内的域名服务器生效。\n    - tls://13800000000.rubyfish.cn:853\n    - tls://1.0.0.1:853\n    - tls://dns.google:853\n\n    #- https://13800000000.rubyfish.cn/\n    #- https://cloudflare-dns.com/dns-query\n    #- https://dns.google/dns-query\n\n  fallback-filter:\n    geoip: true # 默认\n    ipcidr: # 在这个网段内的 IP 地址会被考虑为被污染的 IP\n      - 240.0.0.0/4\n\n# 1. clash DNS 请求逻辑：\n#   (1) 当访问一个域名时， nameserver 与 fallback 列表内的所有服务器并发请求，得到域名对应的 IP 地址。\n#   (2) clash 将选取 nameserver 列表内，解析最快的结果。\n#   (3) 若解析结果中，IP 地址属于 国外，那么 clash 将选择 fallback 列表内，解析最快的结果。\n#\n#   因此，我在 nameserver 和 fallback 内都放置了无污染、解析速度较快的国内 DNS 服务器，以达到最快的解析速度。\n#   但是 fallback 列表内服务器会用在解析境外网站，为了结果绝对无污染，我仅保留了支持 DoT/DoH 的两个服务器。\n#\n# 2. clash DNS 配置注意事项：\n#   (1) 如果您为了确保 DNS 解析结果无污染，请仅保留列表内以 tls:// 或 https:// 开头的 DNS 服务器，但是通常对于国内域名没有必要。\n#   (2) 如果您不在乎可能解析到污染的结果，更加追求速度。请将 nameserver 列表的服务器插入至 fallback 列表内，并移除重复项。\n#\n# 3. 关于 DNS over HTTPS (DoH) 和 DNS over TLS (DoT) 的选择：\n#   对于两项技术双方各执一词，而且会无休止的争论，各有利弊。各位请根据具体需求自行选择，但是配置文件内默认启用 DoT，因为目前国内没有封锁或管制。\n#   DoH: 以 https:// 开头的 DNS 服务器。拥有更好的伪装性，且几乎不可能被运营商或网络管理封锁，但查询效率和安全性可能略低。\n#   DoT: 以 tls:// 开头的 DNS 服务器。拥有更高的安全性和查询效率，但端口有可能被管制或封锁。\n#   若要了解更多关于 DoH/DoT 相关技术，请自行查阅规范文档。\n\nProxy:\n  # shadowsocks\n  # 所支持的加密方式与 go-shadowsocks2 保持一致\n  # 支持加密方式：\n  #   aes-128-gcm aes-192-gcm aes-256-gcm\n  #   aes-128-cfb aes-192-cfb aes-256-cfb\n  #   aes-128-ctr aes-192-ctr aes-256-ctr\n  #   rc4-md5 chacha20 chacha20-ietf xchacha20\n  #   chacha20-ietf-poly1305 xchacha20-ietf-poly1305\n\n  - name: \"ss1\"\n    type: ss\n    server: server\n    port: 443\n    cipher: chacha20-ietf-poly1305\n    password: \"password\"\n    # udp: true\n\n  - name: \"ss2\"\n    type: ss\n    server: server\n    port: 443\n    cipher: AEAD_CHACHA20_POLY1305\n    password: \"password\"\n    plugin: obfs\n    plugin-opts:\n      mode: tls # 混淆模式，可以选择 http 或 tls\n      host: bing.com # 混淆域名，需要和服务器配置保持一致\n\n  - name: \"ss3\"\n    type: ss\n    server: server\n    port: 443\n    cipher: AEAD_CHACHA20_POLY1305\n    password: \"password\"\n    plugin: v2ray-plugin\n    plugin-opts:\n      mode: websocket # 暂时不支持 QUIC 协议\n      # tls: true # wss\n      # skip-cert-verify: true\n      # host: bing.com\n      # path: \"/\"\n      # headers:\n      #   custom: value\n\n  # vmess\n  # 支持加密方式：auto / aes-128-gcm / chacha20-poly1305 / none\n  - name: \"vmess\"\n    type: vmess\n    server: server\n    port: 443\n    uuid: uuid\n    alterId: 32\n    cipher: auto\n    # udp: true\n    # tls: true\n    # skip-cert-verify: true\n    # network: ws\n    # ws-path: /path\n    # ws-headers:\n    #   Host: v2ray.com\n\n  # socks5\n  - name: \"socks\"\n    type: socks5\n    server: server\n    port: 443\n    # username: username\n    # password: password\n    # tls: true\n    # skip-cert-verify: true\n    # udp: true\n\n  # http\n  - name: \"http\"\n    type: http\n    server: server\n    port: 443\n    # username: username\n    # password: password\n    # tls: true # https\n    # skip-cert-verify: true\n\n  # snell\n  - name: \"snell\"\n    type: snell\n    server: server\n    port: 44046\n    psk: yourpsk\n    # obfs-opts:\n    # mode: http # 或 tls\n    # host: bing.com\n\nProxy Group:\n  # url-test 可以自动选择与指定 URL 测速后，延迟最短的服务器\n  - name: \"auto\"\n    type: url-test\n    proxies:\n      - ss1\n      - ss2\n      - vmess1\n    url: \"http://www.gstatic.com/generate_204\"\n    interval: 300\n\n  # fallback 可以尽量按照用户书写的服务器顺序，在确保服务器可用的情况下，自动选择服务器\n  - name: \"fallback-auto\"\n    type: fallback\n    proxies:\n      - ss1\n      - ss2\n      - vmess1\n    url: \"http://www.gstatic.com/generate_204\"\n    interval: 300\n\n  # load-balance 可以使相同 eTLD 请求在同一条代理线路上\n  - name: \"load-balance\"\n    type: load-balance\n    proxies:\n      - ss1\n      - ss2\n      - vmess1\n    url: \"http://www.gstatic.com/generate_204\"\n    interval: 300\n\n  # select 用来允许用户手动选择 代理服务器 或 服务器组\n  # 您也可以使用 RESTful API 去切换服务器，这种方式推荐在 GUI 中使用\n  - name: Proxy\n    type: select\n    proxies:\n      - ss1\n      - ss2\n      - vmess1\n      - auto\n\nRule:\n  # 抗 DNS 污染\n  - DOMAIN-KEYWORD,amazon,Proxy\n  - DOMAIN-KEYWORD,google,Proxy\n  - DOMAIN-KEYWORD,gmail,Proxy\n  - DOMAIN-KEYWORD,youtube,Proxy\n  - DOMAIN-KEYWORD,facebook,Proxy\n  - DOMAIN-SUFFIX,fb.me,Proxy\n  - DOMAIN-SUFFIX,fbcdn.net,Proxy\n  - DOMAIN-KEYWORD,twitter,Proxy\n  - DOMAIN-KEYWORD,instagram,Proxy\n  - DOMAIN-KEYWORD,dropbox,Proxy\n  - DOMAIN-SUFFIX,twimg.com,Proxy\n  - DOMAIN-KEYWORD,blogspot,Proxy\n  - DOMAIN-SUFFIX,youtu.be,Proxy\n  - DOMAIN-KEYWORD,whatsapp,Proxy\n\n  # 常见广告域名屏蔽\n  - DOMAIN-KEYWORD,admarvel,REJECT\n  - DOMAIN-KEYWORD,admaster,REJECT\n  - DOMAIN-KEYWORD,adsage,REJECT\n  - DOMAIN-KEYWORD,adsmogo,REJECT\n  - DOMAIN-KEYWORD,adsrvmedia,REJECT\n  - DOMAIN-KEYWORD,adwords,REJECT\n  - DOMAIN-KEYWORD,adservice,REJECT\n  - DOMAIN-KEYWORD,domob,REJECT\n  - DOMAIN-KEYWORD,duomeng,REJECT\n  - DOMAIN-KEYWORD,dwtrack,REJECT\n  - DOMAIN-KEYWORD,guanggao,REJECT\n  - DOMAIN-KEYWORD,lianmeng,REJECT\n  - DOMAIN-SUFFIX,mmstat.com,REJECT\n  - DOMAIN-KEYWORD,omgmta,REJECT\n  - DOMAIN-KEYWORD,openx,REJECT\n  - DOMAIN-KEYWORD,partnerad,REJECT\n  - DOMAIN-KEYWORD,pingfore,REJECT\n  - DOMAIN-KEYWORD,supersonicads,REJECT\n  - DOMAIN-KEYWORD,uedas,REJECT\n  - DOMAIN-KEYWORD,umeng,REJECT\n  - DOMAIN-KEYWORD,usage,REJECT\n  - DOMAIN-KEYWORD,wlmonitor,REJECT\n  - DOMAIN-KEYWORD,zjtoolbar,REJECT\n\n  # LAN\n  - DOMAIN-SUFFIX,local,DIRECT\n  - IP-CIDR,127.0.0.0/8,DIRECT\n  - IP-CIDR,172.16.0.0/12,DIRECT\n  - IP-CIDR,192.168.0.0/16,DIRECT\n  - IP-CIDR,10.0.0.0/8,DIRECT\n  - IP-CIDR,17.0.0.0/8,DIRECT\n  - IP-CIDR,100.64.0.0/10,DIRECT\n\n  # 最终规则\n  - GEOIP,CN,DIRECT\n  - MATCH,Proxy\n```\n","slug":"clash-config-reference","published":1,"updated":"2022-03-18T15:03:48.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jj001xgosw6f2agqm8","content":"<p><a href=\"http://blog.joylau.cn/2020/05/01/Clash-Config/\" target=\"_blank\" rel=\"noopener\">joylau: Clash 基本配置记录</a></p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------#</span></span><br><span class=\"line\"><span class=\"comment\">## 配置文件需要放置在 $HOME/.config/clash/config.yml</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## 如果您不知道如何操作，请参阅 SS-Rule-Snippet 的 Wiki：</span></span><br><span class=\"line\"><span class=\"comment\">## https://github.com/Hackl0us/SS-Rule-Snippet/wiki/clash(X)</span></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTP 代理端口</span></span><br><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">7890</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SOCKS5 代理端口</span></span><br><span class=\"line\"><span class=\"attr\">socks-port:</span> <span class=\"number\">7891</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux 和 macOS 的 redir 代理端口 (如需使用此功能，请取消注释)</span></span><br><span class=\"line\"><span class=\"comment\"># redir-port: 7892</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许局域网的连接（可用来共享代理）</span></span><br><span class=\"line\"><span class=\"attr\">allow-lan:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># bind-address: \"*\"</span></span><br><span class=\"line\"><span class=\"comment\"># 此功能仅在 allow-lan 设置为 true 时生效，支持三种参数：</span></span><br><span class=\"line\"><span class=\"comment\"># \"*\"                           绑定所有的 IP 地址</span></span><br><span class=\"line\"><span class=\"comment\"># 192.168.122.11                绑定一个的 IPv4 地址</span></span><br><span class=\"line\"><span class=\"comment\"># \"[aaaa::a8aa:ff:fe09:57d8]\"   绑定一个 IPv6 地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">Rule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。</span></span><br><span class=\"line\"><span class=\"comment\"># 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。</span></span><br><span class=\"line\"><span class=\"attr\">log-level:</span> <span class=\"string\">silent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># clash 的 RESTful API</span></span><br><span class=\"line\"><span class=\"attr\">external-controller:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9090</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 您可以将静态网页资源（如 clash-dashboard）放置在一个目录中，clash 将会服务于 `$&#123;API&#125;/ui`</span></span><br><span class=\"line\"><span class=\"comment\"># 参数应填写配置目录的相对路径或绝对路径。</span></span><br><span class=\"line\"><span class=\"comment\"># external-ui: folder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RESTful API 的口令 (可选)</span></span><br><span class=\"line\"><span class=\"comment\"># secret: \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实验性功能</span></span><br><span class=\"line\"><span class=\"attr\">experimental:</span></span><br><span class=\"line\">  <span class=\"attr\">ignore-resolve-fail:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 忽略 DNS 解析失败，默认值为 true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地 SOCKS5 / HTTP(S) 服务认证</span></span><br><span class=\"line\"><span class=\"comment\"># authentication:</span></span><br><span class=\"line\"><span class=\"comment\">#  - \"user1:pass1\"</span></span><br><span class=\"line\"><span class=\"comment\">#  - \"user2:pass2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># # 实验性功能 hosts, 支持通配符 (例如 *.clash.dev 甚至 *.foo.*.example.com)</span></span><br><span class=\"line\"><span class=\"comment\"># # 静态的域名 比 通配域名 具有更高的优先级 (foo.example.com 优先于 *.example.com)</span></span><br><span class=\"line\"><span class=\"comment\"># # 注意: hosts 在 fake-ip 模式下不生效</span></span><br><span class=\"line\"><span class=\"comment\"># hosts:</span></span><br><span class=\"line\"><span class=\"comment\">#   '*.clash.dev': 127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\">#   'alpha.clash.dev': '::1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ipv6:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># listen: 0.0.0.0:53</span></span><br><span class=\"line\">  <span class=\"comment\"># enhanced-mode: redir-host # 或 fake-ip</span></span><br><span class=\"line\">  <span class=\"comment\"># # fake-ip-range: 198.18.0.1/16 # 如果你不知道这个参数的作用，请勿修改</span></span><br><span class=\"line\">  <span class=\"comment\"># fake-ip-filter: # fake-ip 白名单列表</span></span><br><span class=\"line\">  <span class=\"comment\">#   - '*.lan'</span></span><br><span class=\"line\">  <span class=\"comment\">#   - localhost.ptlogin2.qq.com</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">nameserver:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1.2</span><span class=\"number\">.4</span><span class=\"number\">.8</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">223.5</span><span class=\"number\">.5</span><span class=\"number\">.5</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tls://13800000000.rubyfish.cn:853</span></span><br><span class=\"line\">    <span class=\"comment\">#- https://13800000000.rubyfish.cn/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">fallback:</span> <span class=\"comment\"># 与 nameserver 内的服务器列表同时发起请求，当规则符合 GEOIP 在 CN 以外时，fallback 列表内的域名服务器生效。</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tls://13800000000.rubyfish.cn:853</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tls://1.0.0.1:853</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tls://dns.google:853</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#- https://13800000000.rubyfish.cn/</span></span><br><span class=\"line\">    <span class=\"comment\">#- https://cloudflare-dns.com/dns-query</span></span><br><span class=\"line\">    <span class=\"comment\">#- https://dns.google/dns-query</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">fallback-filter:</span></span><br><span class=\"line\">    <span class=\"attr\">geoip:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 默认</span></span><br><span class=\"line\">    <span class=\"attr\">ipcidr:</span> <span class=\"comment\"># 在这个网段内的 IP 地址会被考虑为被污染的 IP</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">240.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. clash DNS 请求逻辑：</span></span><br><span class=\"line\"><span class=\"comment\">#   (1) 当访问一个域名时， nameserver 与 fallback 列表内的所有服务器并发请求，得到域名对应的 IP 地址。</span></span><br><span class=\"line\"><span class=\"comment\">#   (2) clash 将选取 nameserver 列表内，解析最快的结果。</span></span><br><span class=\"line\"><span class=\"comment\">#   (3) 若解析结果中，IP 地址属于 国外，那么 clash 将选择 fallback 列表内，解析最快的结果。</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   因此，我在 nameserver 和 fallback 内都放置了无污染、解析速度较快的国内 DNS 服务器，以达到最快的解析速度。</span></span><br><span class=\"line\"><span class=\"comment\">#   但是 fallback 列表内服务器会用在解析境外网站，为了结果绝对无污染，我仅保留了支持 DoT/DoH 的两个服务器。</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 2. clash DNS 配置注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">#   (1) 如果您为了确保 DNS 解析结果无污染，请仅保留列表内以 tls:// 或 https:// 开头的 DNS 服务器，但是通常对于国内域名没有必要。</span></span><br><span class=\"line\"><span class=\"comment\">#   (2) 如果您不在乎可能解析到污染的结果，更加追求速度。请将 nameserver 列表的服务器插入至 fallback 列表内，并移除重复项。</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 关于 DNS over HTTPS (DoH) 和 DNS over TLS (DoT) 的选择：</span></span><br><span class=\"line\"><span class=\"comment\">#   对于两项技术双方各执一词，而且会无休止的争论，各有利弊。各位请根据具体需求自行选择，但是配置文件内默认启用 DoT，因为目前国内没有封锁或管制。</span></span><br><span class=\"line\"><span class=\"comment\">#   DoH: 以 https:// 开头的 DNS 服务器。拥有更好的伪装性，且几乎不可能被运营商或网络管理封锁，但查询效率和安全性可能略低。</span></span><br><span class=\"line\"><span class=\"comment\">#   DoT: 以 tls:// 开头的 DNS 服务器。拥有更高的安全性和查询效率，但端口有可能被管制或封锁。</span></span><br><span class=\"line\"><span class=\"comment\">#   若要了解更多关于 DoH/DoT 相关技术，请自行查阅规范文档。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Proxy:</span></span><br><span class=\"line\">  <span class=\"comment\"># shadowsocks</span></span><br><span class=\"line\">  <span class=\"comment\"># 所支持的加密方式与 go-shadowsocks2 保持一致</span></span><br><span class=\"line\">  <span class=\"comment\"># 支持加密方式：</span></span><br><span class=\"line\">  <span class=\"comment\">#   aes-128-gcm aes-192-gcm aes-256-gcm</span></span><br><span class=\"line\">  <span class=\"comment\">#   aes-128-cfb aes-192-cfb aes-256-cfb</span></span><br><span class=\"line\">  <span class=\"comment\">#   aes-128-ctr aes-192-ctr aes-256-ctr</span></span><br><span class=\"line\">  <span class=\"comment\">#   rc4-md5 chacha20 chacha20-ietf xchacha20</span></span><br><span class=\"line\">  <span class=\"comment\">#   chacha20-ietf-poly1305 xchacha20-ietf-poly1305</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"ss1\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">chacha20-ietf-poly1305</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">\"password\"</span></span><br><span class=\"line\">    <span class=\"comment\"># udp: true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"ss2\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">AEAD_CHACHA20_POLY1305</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">\"password\"</span></span><br><span class=\"line\">    <span class=\"attr\">plugin:</span> <span class=\"string\">obfs</span></span><br><span class=\"line\">    <span class=\"attr\">plugin-opts:</span></span><br><span class=\"line\">      <span class=\"attr\">mode:</span> <span class=\"string\">tls</span> <span class=\"comment\"># 混淆模式，可以选择 http 或 tls</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"string\">bing.com</span> <span class=\"comment\"># 混淆域名，需要和服务器配置保持一致</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"ss3\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">AEAD_CHACHA20_POLY1305</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">\"password\"</span></span><br><span class=\"line\">    <span class=\"attr\">plugin:</span> <span class=\"string\">v2ray-plugin</span></span><br><span class=\"line\">    <span class=\"attr\">plugin-opts:</span></span><br><span class=\"line\">      <span class=\"attr\">mode:</span> <span class=\"string\">websocket</span> <span class=\"comment\"># 暂时不支持 QUIC 协议</span></span><br><span class=\"line\">      <span class=\"comment\"># tls: true # wss</span></span><br><span class=\"line\">      <span class=\"comment\"># skip-cert-verify: true</span></span><br><span class=\"line\">      <span class=\"comment\"># host: bing.com</span></span><br><span class=\"line\">      <span class=\"comment\"># path: \"/\"</span></span><br><span class=\"line\">      <span class=\"comment\"># headers:</span></span><br><span class=\"line\">      <span class=\"comment\">#   custom: value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># vmess</span></span><br><span class=\"line\">  <span class=\"comment\"># 支持加密方式：auto / aes-128-gcm / chacha20-poly1305 / none</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"vmess\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">vmess</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">uuid:</span> <span class=\"string\">uuid</span></span><br><span class=\"line\">    <span class=\"attr\">alterId:</span> <span class=\"number\">32</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">    <span class=\"comment\"># udp: true</span></span><br><span class=\"line\">    <span class=\"comment\"># tls: true</span></span><br><span class=\"line\">    <span class=\"comment\"># skip-cert-verify: true</span></span><br><span class=\"line\">    <span class=\"comment\"># network: ws</span></span><br><span class=\"line\">    <span class=\"comment\"># ws-path: /path</span></span><br><span class=\"line\">    <span class=\"comment\"># ws-headers:</span></span><br><span class=\"line\">    <span class=\"comment\">#   Host: v2ray.com</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># socks5</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"socks\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">socks5</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"comment\"># username: username</span></span><br><span class=\"line\">    <span class=\"comment\"># password: password</span></span><br><span class=\"line\">    <span class=\"comment\"># tls: true</span></span><br><span class=\"line\">    <span class=\"comment\"># skip-cert-verify: true</span></span><br><span class=\"line\">    <span class=\"comment\"># udp: true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># http</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"http\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"comment\"># username: username</span></span><br><span class=\"line\">    <span class=\"comment\"># password: password</span></span><br><span class=\"line\">    <span class=\"comment\"># tls: true # https</span></span><br><span class=\"line\">    <span class=\"comment\"># skip-cert-verify: true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># snell</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"snell\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">snell</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">44046</span></span><br><span class=\"line\">    <span class=\"attr\">psk:</span> <span class=\"string\">yourpsk</span></span><br><span class=\"line\">    <span class=\"comment\"># obfs-opts:</span></span><br><span class=\"line\">    <span class=\"comment\"># mode: http # 或 tls</span></span><br><span class=\"line\">    <span class=\"comment\"># host: bing.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Proxy Group:</span></span><br><span class=\"line\">  <span class=\"comment\"># url-test 可以自动选择与指定 URL 测速后，延迟最短的服务器</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"auto\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">url-test</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">vmess1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">\"http://www.gstatic.com/generate_204\"</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># fallback 可以尽量按照用户书写的服务器顺序，在确保服务器可用的情况下，自动选择服务器</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"fallback-auto\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">fallback</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">vmess1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">\"http://www.gstatic.com/generate_204\"</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># load-balance 可以使相同 eTLD 请求在同一条代理线路上</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"load-balance\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">load-balance</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">vmess1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">\"http://www.gstatic.com/generate_204\"</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># select 用来允许用户手动选择 代理服务器 或 服务器组</span></span><br><span class=\"line\">  <span class=\"comment\"># 您也可以使用 RESTful API 去切换服务器，这种方式推荐在 GUI 中使用</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Proxy</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">select</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">vmess1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">auto</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Rule:</span></span><br><span class=\"line\">  <span class=\"comment\"># 抗 DNS 污染</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,amazon,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,google,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,gmail,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,youtube,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,facebook,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,fb.me,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,fbcdn.net,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,twitter,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,instagram,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,dropbox,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,twimg.com,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,blogspot,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,youtu.be,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,whatsapp,Proxy</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 常见广告域名屏蔽</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,admarvel,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,admaster,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adsage,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adsmogo,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adsrvmedia,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adwords,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adservice,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,domob,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,duomeng,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,dwtrack,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,guanggao,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,lianmeng,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,mmstat.com,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,omgmta,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,openx,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,partnerad,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,pingfore,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,supersonicads,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,uedas,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,umeng,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,usage,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,wlmonitor,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,zjtoolbar,REJECT</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># LAN</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,local,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,127.0.0.0/8,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,172.16.0.0/12,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,192.168.0.0/16,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,10.0.0.0/8,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,17.0.0.0/8,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,100.64.0.0/10,DIRECT</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 最终规则</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">GEOIP,CN,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">MATCH,Proxy</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://blog.joylau.cn/2020/05/01/Clash-Config/\" target=\"_blank\" rel=\"noopener\">joylau: Clash 基本配置记录</a></p>","more":"<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------#</span></span><br><span class=\"line\"><span class=\"comment\">## 配置文件需要放置在 $HOME/.config/clash/config.yml</span></span><br><span class=\"line\"><span class=\"comment\">##</span></span><br><span class=\"line\"><span class=\"comment\">## 如果您不知道如何操作，请参阅 SS-Rule-Snippet 的 Wiki：</span></span><br><span class=\"line\"><span class=\"comment\">## https://github.com/Hackl0us/SS-Rule-Snippet/wiki/clash(X)</span></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTP 代理端口</span></span><br><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">7890</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SOCKS5 代理端口</span></span><br><span class=\"line\"><span class=\"attr\">socks-port:</span> <span class=\"number\">7891</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Linux 和 macOS 的 redir 代理端口 (如需使用此功能，请取消注释)</span></span><br><span class=\"line\"><span class=\"comment\"># redir-port: 7892</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许局域网的连接（可用来共享代理）</span></span><br><span class=\"line\"><span class=\"attr\">allow-lan:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># bind-address: \"*\"</span></span><br><span class=\"line\"><span class=\"comment\"># 此功能仅在 allow-lan 设置为 true 时生效，支持三种参数：</span></span><br><span class=\"line\"><span class=\"comment\"># \"*\"                           绑定所有的 IP 地址</span></span><br><span class=\"line\"><span class=\"comment\"># 192.168.122.11                绑定一个的 IPv4 地址</span></span><br><span class=\"line\"><span class=\"comment\"># \"[aaaa::a8aa:ff:fe09:57d8]\"   绑定一个 IPv6 地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">Rule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。</span></span><br><span class=\"line\"><span class=\"comment\"># 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。</span></span><br><span class=\"line\"><span class=\"attr\">log-level:</span> <span class=\"string\">silent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># clash 的 RESTful API</span></span><br><span class=\"line\"><span class=\"attr\">external-controller:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9090</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 您可以将静态网页资源（如 clash-dashboard）放置在一个目录中，clash 将会服务于 `$&#123;API&#125;/ui`</span></span><br><span class=\"line\"><span class=\"comment\"># 参数应填写配置目录的相对路径或绝对路径。</span></span><br><span class=\"line\"><span class=\"comment\"># external-ui: folder</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RESTful API 的口令 (可选)</span></span><br><span class=\"line\"><span class=\"comment\"># secret: \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实验性功能</span></span><br><span class=\"line\"><span class=\"attr\">experimental:</span></span><br><span class=\"line\">  <span class=\"attr\">ignore-resolve-fail:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 忽略 DNS 解析失败，默认值为 true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 本地 SOCKS5 / HTTP(S) 服务认证</span></span><br><span class=\"line\"><span class=\"comment\"># authentication:</span></span><br><span class=\"line\"><span class=\"comment\">#  - \"user1:pass1\"</span></span><br><span class=\"line\"><span class=\"comment\">#  - \"user2:pass2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># # 实验性功能 hosts, 支持通配符 (例如 *.clash.dev 甚至 *.foo.*.example.com)</span></span><br><span class=\"line\"><span class=\"comment\"># # 静态的域名 比 通配域名 具有更高的优先级 (foo.example.com 优先于 *.example.com)</span></span><br><span class=\"line\"><span class=\"comment\"># # 注意: hosts 在 fake-ip 模式下不生效</span></span><br><span class=\"line\"><span class=\"comment\"># hosts:</span></span><br><span class=\"line\"><span class=\"comment\">#   '*.clash.dev': 127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\">#   'alpha.clash.dev': '::1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ipv6:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># listen: 0.0.0.0:53</span></span><br><span class=\"line\">  <span class=\"comment\"># enhanced-mode: redir-host # 或 fake-ip</span></span><br><span class=\"line\">  <span class=\"comment\"># # fake-ip-range: 198.18.0.1/16 # 如果你不知道这个参数的作用，请勿修改</span></span><br><span class=\"line\">  <span class=\"comment\"># fake-ip-filter: # fake-ip 白名单列表</span></span><br><span class=\"line\">  <span class=\"comment\">#   - '*.lan'</span></span><br><span class=\"line\">  <span class=\"comment\">#   - localhost.ptlogin2.qq.com</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">nameserver:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1.2</span><span class=\"number\">.4</span><span class=\"number\">.8</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">223.5</span><span class=\"number\">.5</span><span class=\"number\">.5</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tls://13800000000.rubyfish.cn:853</span></span><br><span class=\"line\">    <span class=\"comment\">#- https://13800000000.rubyfish.cn/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">fallback:</span> <span class=\"comment\"># 与 nameserver 内的服务器列表同时发起请求，当规则符合 GEOIP 在 CN 以外时，fallback 列表内的域名服务器生效。</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tls://13800000000.rubyfish.cn:853</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tls://1.0.0.1:853</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tls://dns.google:853</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#- https://13800000000.rubyfish.cn/</span></span><br><span class=\"line\">    <span class=\"comment\">#- https://cloudflare-dns.com/dns-query</span></span><br><span class=\"line\">    <span class=\"comment\">#- https://dns.google/dns-query</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">fallback-filter:</span></span><br><span class=\"line\">    <span class=\"attr\">geoip:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 默认</span></span><br><span class=\"line\">    <span class=\"attr\">ipcidr:</span> <span class=\"comment\"># 在这个网段内的 IP 地址会被考虑为被污染的 IP</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">240.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. clash DNS 请求逻辑：</span></span><br><span class=\"line\"><span class=\"comment\">#   (1) 当访问一个域名时， nameserver 与 fallback 列表内的所有服务器并发请求，得到域名对应的 IP 地址。</span></span><br><span class=\"line\"><span class=\"comment\">#   (2) clash 将选取 nameserver 列表内，解析最快的结果。</span></span><br><span class=\"line\"><span class=\"comment\">#   (3) 若解析结果中，IP 地址属于 国外，那么 clash 将选择 fallback 列表内，解析最快的结果。</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#   因此，我在 nameserver 和 fallback 内都放置了无污染、解析速度较快的国内 DNS 服务器，以达到最快的解析速度。</span></span><br><span class=\"line\"><span class=\"comment\">#   但是 fallback 列表内服务器会用在解析境外网站，为了结果绝对无污染，我仅保留了支持 DoT/DoH 的两个服务器。</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 2. clash DNS 配置注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">#   (1) 如果您为了确保 DNS 解析结果无污染，请仅保留列表内以 tls:// 或 https:// 开头的 DNS 服务器，但是通常对于国内域名没有必要。</span></span><br><span class=\"line\"><span class=\"comment\">#   (2) 如果您不在乎可能解析到污染的结果，更加追求速度。请将 nameserver 列表的服务器插入至 fallback 列表内，并移除重复项。</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 关于 DNS over HTTPS (DoH) 和 DNS over TLS (DoT) 的选择：</span></span><br><span class=\"line\"><span class=\"comment\">#   对于两项技术双方各执一词，而且会无休止的争论，各有利弊。各位请根据具体需求自行选择，但是配置文件内默认启用 DoT，因为目前国内没有封锁或管制。</span></span><br><span class=\"line\"><span class=\"comment\">#   DoH: 以 https:// 开头的 DNS 服务器。拥有更好的伪装性，且几乎不可能被运营商或网络管理封锁，但查询效率和安全性可能略低。</span></span><br><span class=\"line\"><span class=\"comment\">#   DoT: 以 tls:// 开头的 DNS 服务器。拥有更高的安全性和查询效率，但端口有可能被管制或封锁。</span></span><br><span class=\"line\"><span class=\"comment\">#   若要了解更多关于 DoH/DoT 相关技术，请自行查阅规范文档。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Proxy:</span></span><br><span class=\"line\">  <span class=\"comment\"># shadowsocks</span></span><br><span class=\"line\">  <span class=\"comment\"># 所支持的加密方式与 go-shadowsocks2 保持一致</span></span><br><span class=\"line\">  <span class=\"comment\"># 支持加密方式：</span></span><br><span class=\"line\">  <span class=\"comment\">#   aes-128-gcm aes-192-gcm aes-256-gcm</span></span><br><span class=\"line\">  <span class=\"comment\">#   aes-128-cfb aes-192-cfb aes-256-cfb</span></span><br><span class=\"line\">  <span class=\"comment\">#   aes-128-ctr aes-192-ctr aes-256-ctr</span></span><br><span class=\"line\">  <span class=\"comment\">#   rc4-md5 chacha20 chacha20-ietf xchacha20</span></span><br><span class=\"line\">  <span class=\"comment\">#   chacha20-ietf-poly1305 xchacha20-ietf-poly1305</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"ss1\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">chacha20-ietf-poly1305</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">\"password\"</span></span><br><span class=\"line\">    <span class=\"comment\"># udp: true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"ss2\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">AEAD_CHACHA20_POLY1305</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">\"password\"</span></span><br><span class=\"line\">    <span class=\"attr\">plugin:</span> <span class=\"string\">obfs</span></span><br><span class=\"line\">    <span class=\"attr\">plugin-opts:</span></span><br><span class=\"line\">      <span class=\"attr\">mode:</span> <span class=\"string\">tls</span> <span class=\"comment\"># 混淆模式，可以选择 http 或 tls</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"string\">bing.com</span> <span class=\"comment\"># 混淆域名，需要和服务器配置保持一致</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"ss3\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">AEAD_CHACHA20_POLY1305</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">\"password\"</span></span><br><span class=\"line\">    <span class=\"attr\">plugin:</span> <span class=\"string\">v2ray-plugin</span></span><br><span class=\"line\">    <span class=\"attr\">plugin-opts:</span></span><br><span class=\"line\">      <span class=\"attr\">mode:</span> <span class=\"string\">websocket</span> <span class=\"comment\"># 暂时不支持 QUIC 协议</span></span><br><span class=\"line\">      <span class=\"comment\"># tls: true # wss</span></span><br><span class=\"line\">      <span class=\"comment\"># skip-cert-verify: true</span></span><br><span class=\"line\">      <span class=\"comment\"># host: bing.com</span></span><br><span class=\"line\">      <span class=\"comment\"># path: \"/\"</span></span><br><span class=\"line\">      <span class=\"comment\"># headers:</span></span><br><span class=\"line\">      <span class=\"comment\">#   custom: value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># vmess</span></span><br><span class=\"line\">  <span class=\"comment\"># 支持加密方式：auto / aes-128-gcm / chacha20-poly1305 / none</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"vmess\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">vmess</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"attr\">uuid:</span> <span class=\"string\">uuid</span></span><br><span class=\"line\">    <span class=\"attr\">alterId:</span> <span class=\"number\">32</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">    <span class=\"comment\"># udp: true</span></span><br><span class=\"line\">    <span class=\"comment\"># tls: true</span></span><br><span class=\"line\">    <span class=\"comment\"># skip-cert-verify: true</span></span><br><span class=\"line\">    <span class=\"comment\"># network: ws</span></span><br><span class=\"line\">    <span class=\"comment\"># ws-path: /path</span></span><br><span class=\"line\">    <span class=\"comment\"># ws-headers:</span></span><br><span class=\"line\">    <span class=\"comment\">#   Host: v2ray.com</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># socks5</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"socks\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">socks5</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"comment\"># username: username</span></span><br><span class=\"line\">    <span class=\"comment\"># password: password</span></span><br><span class=\"line\">    <span class=\"comment\"># tls: true</span></span><br><span class=\"line\">    <span class=\"comment\"># skip-cert-verify: true</span></span><br><span class=\"line\">    <span class=\"comment\"># udp: true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># http</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"http\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">443</span></span><br><span class=\"line\">    <span class=\"comment\"># username: username</span></span><br><span class=\"line\">    <span class=\"comment\"># password: password</span></span><br><span class=\"line\">    <span class=\"comment\"># tls: true # https</span></span><br><span class=\"line\">    <span class=\"comment\"># skip-cert-verify: true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># snell</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"snell\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">snell</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">44046</span></span><br><span class=\"line\">    <span class=\"attr\">psk:</span> <span class=\"string\">yourpsk</span></span><br><span class=\"line\">    <span class=\"comment\"># obfs-opts:</span></span><br><span class=\"line\">    <span class=\"comment\"># mode: http # 或 tls</span></span><br><span class=\"line\">    <span class=\"comment\"># host: bing.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Proxy Group:</span></span><br><span class=\"line\">  <span class=\"comment\"># url-test 可以自动选择与指定 URL 测速后，延迟最短的服务器</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"auto\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">url-test</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">vmess1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">\"http://www.gstatic.com/generate_204\"</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># fallback 可以尽量按照用户书写的服务器顺序，在确保服务器可用的情况下，自动选择服务器</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"fallback-auto\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">fallback</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">vmess1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">\"http://www.gstatic.com/generate_204\"</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># load-balance 可以使相同 eTLD 请求在同一条代理线路上</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">\"load-balance\"</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">load-balance</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">vmess1</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">\"http://www.gstatic.com/generate_204\"</span></span><br><span class=\"line\">    <span class=\"attr\">interval:</span> <span class=\"number\">300</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># select 用来允许用户手动选择 代理服务器 或 服务器组</span></span><br><span class=\"line\">  <span class=\"comment\"># 您也可以使用 RESTful API 去切换服务器，这种方式推荐在 GUI 中使用</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Proxy</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">select</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ss2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">vmess1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">auto</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Rule:</span></span><br><span class=\"line\">  <span class=\"comment\"># 抗 DNS 污染</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,amazon,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,google,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,gmail,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,youtube,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,facebook,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,fb.me,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,fbcdn.net,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,twitter,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,instagram,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,dropbox,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,twimg.com,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,blogspot,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,youtu.be,Proxy</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,whatsapp,Proxy</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 常见广告域名屏蔽</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,admarvel,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,admaster,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adsage,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adsmogo,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adsrvmedia,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adwords,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,adservice,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,domob,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,duomeng,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,dwtrack,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,guanggao,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,lianmeng,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,mmstat.com,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,omgmta,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,openx,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,partnerad,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,pingfore,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,supersonicads,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,uedas,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,umeng,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,usage,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,wlmonitor,REJECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,zjtoolbar,REJECT</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># LAN</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,local,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,127.0.0.0/8,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,172.16.0.0/12,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,192.168.0.0/16,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,10.0.0.0/8,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,17.0.0.0/8,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">IP-CIDR,100.64.0.0/10,DIRECT</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 最终规则</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">GEOIP,CN,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">MATCH,Proxy</span></span><br></pre></td></tr></table></figure>"},{"title":"Docker 启动clash","toc":true,"date":"2022-03-23T16:00:00.000Z","_content":"\n基于 docker-compose 在 linux 服务器上一键部署 clash + 对应的 Web UI 界面。\n\n配置如下：\n\n```bash\n# docker-compose版本\nversion: '3.7'\n# 服务列表\nservices:\n    # clash后台服务\n    clash:\n        # 设置image\n        image: dreamacro/clash\n        # 停止了总是重启\n        restart: always\n        volumes:\n            # 将配置文件挂载到容器中\n            - <path to clash config dir>:/root/.config/clash\n        container_name: clash\n        ports:\n            # 这些端口都在配置文件中配置过，容器外地址可随心情配置\n            - [容器外http代理端口]:[容器内http代理端口，默认7890]\n            - [容器外sock5代理端口]:[容器内sock5代理端口，默认7890]\n            - [容器外REST API端口]:[容器内REST API端口，默认9090]\n    clash_web:\n        image: haishanh/yacd\n        restart: always\n        depends_on:\n            # 依赖于上面的clash服务，在clash启动后，web才启动\n            - clash\n        ports:\n            - [容器外web访问端口]:80\n        container_name: clash_web\n```\n\n<!-- more -->\n\n# tty 使用代理\n\nzsh\n\n```bash\n# 进入zsh 的配置文件\nvim ~/.zshrc\n# 配置文件\n# 配置http和https代理\n# http://clash客户端IP:clash客户端端口\nhttp_proxy=http://127.0.0.1:7890\nhttps_proxy=http_proxy\n# 对以下内容不使用代理\nno_proxy=192.168..,172.16..,.local,localhost,127.0.0.1\n# 导出环境变量\nexport http_proxy https_proxy no_proxy\n```\n\n# 其他容器使用 clash 代理 - docker compose\n\n有部分服务不提供走代理的方式，可以通过如下方式配置\n\n```yaml\n# 下面略写，照常配置\nversion: \"3.7\"\nservices:\n  xxxx:\n    xxx: xxx\n\n# 关键点： network\nnetworks:\n  default:\n    # 声明该网络为外部已存在网络\n    external:\n      name: 张三_default\n```\n\n# 参考文章\n\n- [Linux 通过 Clash 来网上冲浪](https://blog.vicat.top/archives/linux%E9%80%9A%E8%BF%87clash%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91#toc-head-0)\n","source":"_posts/clash-docker.md","raw":"---\ntitle: Docker 启动clash\ncategories: [杂项]\ntags: []\ntoc: true\ndate: 2022/3/24\n---\n\n基于 docker-compose 在 linux 服务器上一键部署 clash + 对应的 Web UI 界面。\n\n配置如下：\n\n```bash\n# docker-compose版本\nversion: '3.7'\n# 服务列表\nservices:\n    # clash后台服务\n    clash:\n        # 设置image\n        image: dreamacro/clash\n        # 停止了总是重启\n        restart: always\n        volumes:\n            # 将配置文件挂载到容器中\n            - <path to clash config dir>:/root/.config/clash\n        container_name: clash\n        ports:\n            # 这些端口都在配置文件中配置过，容器外地址可随心情配置\n            - [容器外http代理端口]:[容器内http代理端口，默认7890]\n            - [容器外sock5代理端口]:[容器内sock5代理端口，默认7890]\n            - [容器外REST API端口]:[容器内REST API端口，默认9090]\n    clash_web:\n        image: haishanh/yacd\n        restart: always\n        depends_on:\n            # 依赖于上面的clash服务，在clash启动后，web才启动\n            - clash\n        ports:\n            - [容器外web访问端口]:80\n        container_name: clash_web\n```\n\n<!-- more -->\n\n# tty 使用代理\n\nzsh\n\n```bash\n# 进入zsh 的配置文件\nvim ~/.zshrc\n# 配置文件\n# 配置http和https代理\n# http://clash客户端IP:clash客户端端口\nhttp_proxy=http://127.0.0.1:7890\nhttps_proxy=http_proxy\n# 对以下内容不使用代理\nno_proxy=192.168..,172.16..,.local,localhost,127.0.0.1\n# 导出环境变量\nexport http_proxy https_proxy no_proxy\n```\n\n# 其他容器使用 clash 代理 - docker compose\n\n有部分服务不提供走代理的方式，可以通过如下方式配置\n\n```yaml\n# 下面略写，照常配置\nversion: \"3.7\"\nservices:\n  xxxx:\n    xxx: xxx\n\n# 关键点： network\nnetworks:\n  default:\n    # 声明该网络为外部已存在网络\n    external:\n      name: 张三_default\n```\n\n# 参考文章\n\n- [Linux 通过 Clash 来网上冲浪](https://blog.vicat.top/archives/linux%E9%80%9A%E8%BF%87clash%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91#toc-head-0)\n","slug":"clash-docker","published":1,"updated":"2022-03-24T06:20:17.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jk0020goswhbf2enua","content":"<p>基于 docker-compose 在 linux 服务器上一键部署 clash + 对应的 Web UI 界面。</p>\n<p>配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose版本</span></span><br><span class=\"line\">version: <span class=\"string\">'3.7'</span></span><br><span class=\"line\"><span class=\"comment\"># 服务列表</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">    <span class=\"comment\"># clash后台服务</span></span><br><span class=\"line\">    clash:</span><br><span class=\"line\">        <span class=\"comment\"># 设置image</span></span><br><span class=\"line\">        image: dreamacro/clash</span><br><span class=\"line\">        <span class=\"comment\"># 停止了总是重启</span></span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">        volumes:</span><br><span class=\"line\">            <span class=\"comment\"># 将配置文件挂载到容器中</span></span><br><span class=\"line\">            - &lt;path to clash config dir&gt;:/root/.config/clash</span><br><span class=\"line\">        container_name: clash</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            <span class=\"comment\"># 这些端口都在配置文件中配置过，容器外地址可随心情配置</span></span><br><span class=\"line\">            - [容器外http代理端口]:[容器内http代理端口，默认7890]</span><br><span class=\"line\">            - [容器外sock5代理端口]:[容器内sock5代理端口，默认7890]</span><br><span class=\"line\">            - [容器外REST API端口]:[容器内REST API端口，默认9090]</span><br><span class=\"line\">    clash_web:</span><br><span class=\"line\">        image: haishanh/yacd</span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">        depends_on:</span><br><span class=\"line\">            <span class=\"comment\"># 依赖于上面的clash服务，在clash启动后，web才启动</span></span><br><span class=\"line\">            - clash</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            - [容器外web访问端口]:80</span><br><span class=\"line\">        container_name: clash_web</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"tty-使用代理\"><a href=\"#tty-使用代理\" class=\"headerlink\" title=\"tty 使用代理\"></a>tty 使用代理</h1><p>zsh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入zsh 的配置文件</span></span><br><span class=\"line\">vim ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># 配置http和https代理</span></span><br><span class=\"line\"><span class=\"comment\"># http://clash客户端IP:clash客户端端口</span></span><br><span class=\"line\">http_proxy=http://127.0.0.1:7890</span><br><span class=\"line\">https_proxy=http_proxy</span><br><span class=\"line\"><span class=\"comment\"># 对以下内容不使用代理</span></span><br><span class=\"line\">no_proxy=192.168..,172.16..,.<span class=\"built_in\">local</span>,localhost,127.0.0.1</span><br><span class=\"line\"><span class=\"comment\"># 导出环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy https_proxy no_proxy</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他容器使用-clash-代理-docker-compose\"><a href=\"#其他容器使用-clash-代理-docker-compose\" class=\"headerlink\" title=\"其他容器使用 clash 代理 - docker compose\"></a>其他容器使用 clash 代理 - docker compose</h1><p>有部分服务不提供走代理的方式，可以通过如下方式配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下面略写，照常配置</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3.7\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">xxxx:</span></span><br><span class=\"line\">    <span class=\"attr\">xxx:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关键点： network</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">default:</span></span><br><span class=\"line\">    <span class=\"comment\"># 声明该网络为外部已存在网络</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">张三_default</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.vicat.top/archives/linux%E9%80%9A%E8%BF%87clash%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91#toc-head-0\" target=\"_blank\" rel=\"noopener\">Linux 通过 Clash 来网上冲浪</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>基于 docker-compose 在 linux 服务器上一键部署 clash + 对应的 Web UI 界面。</p>\n<p>配置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose版本</span></span><br><span class=\"line\">version: <span class=\"string\">'3.7'</span></span><br><span class=\"line\"><span class=\"comment\"># 服务列表</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">    <span class=\"comment\"># clash后台服务</span></span><br><span class=\"line\">    clash:</span><br><span class=\"line\">        <span class=\"comment\"># 设置image</span></span><br><span class=\"line\">        image: dreamacro/clash</span><br><span class=\"line\">        <span class=\"comment\"># 停止了总是重启</span></span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">        volumes:</span><br><span class=\"line\">            <span class=\"comment\"># 将配置文件挂载到容器中</span></span><br><span class=\"line\">            - &lt;path to clash config dir&gt;:/root/.config/clash</span><br><span class=\"line\">        container_name: clash</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            <span class=\"comment\"># 这些端口都在配置文件中配置过，容器外地址可随心情配置</span></span><br><span class=\"line\">            - [容器外http代理端口]:[容器内http代理端口，默认7890]</span><br><span class=\"line\">            - [容器外sock5代理端口]:[容器内sock5代理端口，默认7890]</span><br><span class=\"line\">            - [容器外REST API端口]:[容器内REST API端口，默认9090]</span><br><span class=\"line\">    clash_web:</span><br><span class=\"line\">        image: haishanh/yacd</span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">        depends_on:</span><br><span class=\"line\">            <span class=\"comment\"># 依赖于上面的clash服务，在clash启动后，web才启动</span></span><br><span class=\"line\">            - clash</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">            - [容器外web访问端口]:80</span><br><span class=\"line\">        container_name: clash_web</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"tty-使用代理\"><a href=\"#tty-使用代理\" class=\"headerlink\" title=\"tty 使用代理\"></a>tty 使用代理</h1><p>zsh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入zsh 的配置文件</span></span><br><span class=\"line\">vim ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 配置文件</span></span><br><span class=\"line\"><span class=\"comment\"># 配置http和https代理</span></span><br><span class=\"line\"><span class=\"comment\"># http://clash客户端IP:clash客户端端口</span></span><br><span class=\"line\">http_proxy=http://127.0.0.1:7890</span><br><span class=\"line\">https_proxy=http_proxy</span><br><span class=\"line\"><span class=\"comment\"># 对以下内容不使用代理</span></span><br><span class=\"line\">no_proxy=192.168..,172.16..,.<span class=\"built_in\">local</span>,localhost,127.0.0.1</span><br><span class=\"line\"><span class=\"comment\"># 导出环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy https_proxy no_proxy</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他容器使用-clash-代理-docker-compose\"><a href=\"#其他容器使用-clash-代理-docker-compose\" class=\"headerlink\" title=\"其他容器使用 clash 代理 - docker compose\"></a>其他容器使用 clash 代理 - docker compose</h1><p>有部分服务不提供走代理的方式，可以通过如下方式配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下面略写，照常配置</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3.7\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">xxxx:</span></span><br><span class=\"line\">    <span class=\"attr\">xxx:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关键点： network</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">default:</span></span><br><span class=\"line\">    <span class=\"comment\"># 声明该网络为外部已存在网络</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">张三_default</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.vicat.top/archives/linux%E9%80%9A%E8%BF%87clash%E6%9D%A5%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91#toc-head-0\" target=\"_blank\" rel=\"noopener\">Linux 通过 Clash 来网上冲浪</a></li>\n</ul>"},{"title":"docker 挂载主机目录","toc":true,"date":"2022-04-15T16:00:00.000Z","_content":"\nnodejs搭建的图床服务，使用docker 进行部署。需要对文件进行存储，默认文件存放在容器目录，容易丢失，不方便维护。因此需要将主机的某个目录映射到容器中，作为存放文件的地方。\n\n这篇文章介绍了 \n\n<!-- more -->\n\n## bind mounts\n\n首先，有如下Dockerfile，生成nodejs图床服务，/app 是home目录，`/app/uploads` 为文件存放位置\n\n```dockerfile\nFROM node:10-alpine\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm config set registry http://registry.npm.taobao.org/ \\\n&& npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/ \\\n&& npm install\n\nCMD [\"npm\", \"start\"]\n\n```\n\n我们要吧 /home/shancw/donwloads 映射到/app/uploads下，对应的写法如下\n\n### --mount\n\n```bash\n...\ndocker run -d -t -p 8089:8089 \\\n  --name=blog-pic-server \\\n  --mount type=bind,source=/home/shancw/donwloads,target=/app/uploads \\\n  --restart=always 127.0.0.1:5000/blog-pic-server:v1\n```\n\n### -v\n\n```bash\ndocker run -d -t -p 8089:8089 \\\n  --name=blog-pic-server \\\n  -v /home/shancw/donwloads:/app/uploads \\\n\t--restart=always 127.0.0.1:5000/blog-pic-server:v1\n```\n\n ## docker compose with bind mount\n\n```\nversion: \"3.9\"\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - type: bind\n        source: ./static\n        target: /opt/app/staticvolumes:\n  myapp:\n```","source":"_posts/docker-bind-mounts.md","raw":"---\ntitle: docker 挂载主机目录\ncategories: [运维]\ntags: [Docker]\ntoc: true\ndate: 2022/4/16\n---\n\nnodejs搭建的图床服务，使用docker 进行部署。需要对文件进行存储，默认文件存放在容器目录，容易丢失，不方便维护。因此需要将主机的某个目录映射到容器中，作为存放文件的地方。\n\n这篇文章介绍了 \n\n<!-- more -->\n\n## bind mounts\n\n首先，有如下Dockerfile，生成nodejs图床服务，/app 是home目录，`/app/uploads` 为文件存放位置\n\n```dockerfile\nFROM node:10-alpine\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm config set registry http://registry.npm.taobao.org/ \\\n&& npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/ \\\n&& npm install\n\nCMD [\"npm\", \"start\"]\n\n```\n\n我们要吧 /home/shancw/donwloads 映射到/app/uploads下，对应的写法如下\n\n### --mount\n\n```bash\n...\ndocker run -d -t -p 8089:8089 \\\n  --name=blog-pic-server \\\n  --mount type=bind,source=/home/shancw/donwloads,target=/app/uploads \\\n  --restart=always 127.0.0.1:5000/blog-pic-server:v1\n```\n\n### -v\n\n```bash\ndocker run -d -t -p 8089:8089 \\\n  --name=blog-pic-server \\\n  -v /home/shancw/donwloads:/app/uploads \\\n\t--restart=always 127.0.0.1:5000/blog-pic-server:v1\n```\n\n ## docker compose with bind mount\n\n```\nversion: \"3.9\"\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - type: bind\n        source: ./static\n        target: /opt/app/staticvolumes:\n  myapp:\n```","slug":"docker-bind-mounts","published":1,"updated":"2022-04-15T16:58:24.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jl0023gosw6v3yf08h","content":"<p>nodejs搭建的图床服务，使用docker 进行部署。需要对文件进行存储，默认文件存放在容器目录，容易丢失，不方便维护。因此需要将主机的某个目录映射到容器中，作为存放文件的地方。</p>\n<p>这篇文章介绍了 </p>\n<a id=\"more\"></a>\n\n<h2 id=\"bind-mounts\"><a href=\"#bind-mounts\" class=\"headerlink\" title=\"bind mounts\"></a>bind mounts</h2><p>首先，有如下Dockerfile，生成nodejs图床服务，/app 是home目录，<code>/app/uploads</code> 为文件存放位置</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">10</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> npm config <span class=\"built_in\">set</span> registry http://registry.npm.taobao.org/ \\</span></span><br><span class=\"line\"><span class=\"bash\">&amp;&amp; npm config <span class=\"built_in\">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/ \\</span></span><br><span class=\"line\"><span class=\"bash\">&amp;&amp; npm install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>我们要吧 /home/shancw/donwloads 映射到/app/uploads下，对应的写法如下</p>\n<h3 id=\"–mount\"><a href=\"#–mount\" class=\"headerlink\" title=\"–mount\"></a>–mount</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">docker run -d -t -p 8089:8089 \\</span><br><span class=\"line\">  --name=blog-pic-server \\</span><br><span class=\"line\">  --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/home/shancw/donwloads,target=/app/uploads \\</span><br><span class=\"line\">  --restart=always 127.0.0.1:5000/blog-pic-server:v1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v\"><a href=\"#v\" class=\"headerlink\" title=\"-v\"></a>-v</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -t -p 8089:8089 \\</span><br><span class=\"line\">  --name=blog-pic-server \\</span><br><span class=\"line\">  -v /home/shancw/donwloads:/app/uploads \\</span><br><span class=\"line\">\t--restart=always 127.0.0.1:5000/blog-pic-server:v1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose-with-bind-mount\"><a href=\"#docker-compose-with-bind-mount\" class=\"headerlink\" title=\"docker compose with bind mount\"></a>docker compose with bind mount</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  frontend:</span><br><span class=\"line\">    image: node:lts</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - type: bind</span><br><span class=\"line\">        source: .&#x2F;static</span><br><span class=\"line\">        target: &#x2F;opt&#x2F;app&#x2F;staticvolumes:</span><br><span class=\"line\">  myapp:</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>nodejs搭建的图床服务，使用docker 进行部署。需要对文件进行存储，默认文件存放在容器目录，容易丢失，不方便维护。因此需要将主机的某个目录映射到容器中，作为存放文件的地方。</p>\n<p>这篇文章介绍了 </p>","more":"<h2 id=\"bind-mounts\"><a href=\"#bind-mounts\" class=\"headerlink\" title=\"bind mounts\"></a>bind mounts</h2><p>首先，有如下Dockerfile，生成nodejs图床服务，/app 是home目录，<code>/app/uploads</code> 为文件存放位置</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">10</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> npm config <span class=\"built_in\">set</span> registry http://registry.npm.taobao.org/ \\</span></span><br><span class=\"line\"><span class=\"bash\">&amp;&amp; npm config <span class=\"built_in\">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/ \\</span></span><br><span class=\"line\"><span class=\"bash\">&amp;&amp; npm install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"npm\"</span>, <span class=\"string\">\"start\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>我们要吧 /home/shancw/donwloads 映射到/app/uploads下，对应的写法如下</p>\n<h3 id=\"–mount\"><a href=\"#–mount\" class=\"headerlink\" title=\"–mount\"></a>–mount</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">docker run -d -t -p 8089:8089 \\</span><br><span class=\"line\">  --name=blog-pic-server \\</span><br><span class=\"line\">  --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/home/shancw/donwloads,target=/app/uploads \\</span><br><span class=\"line\">  --restart=always 127.0.0.1:5000/blog-pic-server:v1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"v\"><a href=\"#v\" class=\"headerlink\" title=\"-v\"></a>-v</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -t -p 8089:8089 \\</span><br><span class=\"line\">  --name=blog-pic-server \\</span><br><span class=\"line\">  -v /home/shancw/donwloads:/app/uploads \\</span><br><span class=\"line\">\t--restart=always 127.0.0.1:5000/blog-pic-server:v1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose-with-bind-mount\"><a href=\"#docker-compose-with-bind-mount\" class=\"headerlink\" title=\"docker compose with bind mount\"></a>docker compose with bind mount</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3.9&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  frontend:</span><br><span class=\"line\">    image: node:lts</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - type: bind</span><br><span class=\"line\">        source: .&#x2F;static</span><br><span class=\"line\">        target: &#x2F;opt&#x2F;app&#x2F;staticvolumes:</span><br><span class=\"line\">  myapp:</span><br></pre></td></tr></table></figure>"},{"title":"webview 和 react native 通信","toc":true,"date":"2022-05-12T16:00:00.000Z","_content":"\n# webview 和 react native 通信\n\n场景：react native 使用 webview，webview 作为独立应用和 react native 需要相互通信\n\n原理：借助 web api：`postMessage`，react native api `injectJavaScript` 实现通信\n\n<!-- more -->\n\n**react native 使用的 package**\n\n`react-native-webview`。安装请参考对应的 github 文档\n\n## Web --------> react native\n\nweb\n\n```js\nwindow.ReactNativeWebView.postMessage(msg);\n```\n\nApp\n\n```diff\n// 接收来自webview端的信息\n+  const receiveMsgFromWeb = e => {\n+    const msg = e.nativeEvent.data;\n+  };\n\n<WebView\n   // 此处在开发的时候，应该填写你自己的web端服务的ip地址或者是线上地址\n   source={{ uri: 'http://192.168.1.193:8088/mobile-map.html' }}\n+  onMessage={receiveMsgFromWeb}\n/>\n```\n\n## react- native ----> Web\n\n- web 定义好 被调用的全局函数，例如 receiveLocation\n\n  ```js\n  const [initLocation, setInitLocation] = useState();\n  useEffect(() => {\n    window.receiveLocation = (msg) => {\n      console.log(msg);\n    };\n  }, []);\n  ```\n\n- react-native 注入代码到 webview 中，执行 web 端定义好的 receiveLocation 函数\n\n  ```diff\n  + const webRef = useRef();\n    // 发送位置信息给webview\n    const sendLocationToWeb = () => {\n  +    webRef.current?.injectJavaScript(\n  +      script(`${pos.latitude},${pos.longitude}`),\n  +    );\n\n  +    function script(payload: string) {\n  +      return `\n  +      receiveLocation(\"${payload}\");true;\n  +      `;\n  +    }\n    };\n   \t<WebView\n  +   ref={webRef}\n    \t// 此处在开发的时候，应该填写你自己的web端服务的ip地址或者是线上地址\n    \tsource={{ uri: 'http://192.168.1.193:8088/mobile-map.html' }}\n    \tonMessage={receiveMsgFromWeb}\n   />\n  ```\n","source":"_posts/communication-between-webview-and-react-native.md","raw":"---\ntitle: webview 和 react native 通信\ncategories: [前端]\ntags: [jsx, react]\ntoc: true\ndate: 2022/5/13\n---\n\n# webview 和 react native 通信\n\n场景：react native 使用 webview，webview 作为独立应用和 react native 需要相互通信\n\n原理：借助 web api：`postMessage`，react native api `injectJavaScript` 实现通信\n\n<!-- more -->\n\n**react native 使用的 package**\n\n`react-native-webview`。安装请参考对应的 github 文档\n\n## Web --------> react native\n\nweb\n\n```js\nwindow.ReactNativeWebView.postMessage(msg);\n```\n\nApp\n\n```diff\n// 接收来自webview端的信息\n+  const receiveMsgFromWeb = e => {\n+    const msg = e.nativeEvent.data;\n+  };\n\n<WebView\n   // 此处在开发的时候，应该填写你自己的web端服务的ip地址或者是线上地址\n   source={{ uri: 'http://192.168.1.193:8088/mobile-map.html' }}\n+  onMessage={receiveMsgFromWeb}\n/>\n```\n\n## react- native ----> Web\n\n- web 定义好 被调用的全局函数，例如 receiveLocation\n\n  ```js\n  const [initLocation, setInitLocation] = useState();\n  useEffect(() => {\n    window.receiveLocation = (msg) => {\n      console.log(msg);\n    };\n  }, []);\n  ```\n\n- react-native 注入代码到 webview 中，执行 web 端定义好的 receiveLocation 函数\n\n  ```diff\n  + const webRef = useRef();\n    // 发送位置信息给webview\n    const sendLocationToWeb = () => {\n  +    webRef.current?.injectJavaScript(\n  +      script(`${pos.latitude},${pos.longitude}`),\n  +    );\n\n  +    function script(payload: string) {\n  +      return `\n  +      receiveLocation(\"${payload}\");true;\n  +      `;\n  +    }\n    };\n   \t<WebView\n  +   ref={webRef}\n    \t// 此处在开发的时候，应该填写你自己的web端服务的ip地址或者是线上地址\n    \tsource={{ uri: 'http://192.168.1.193:8088/mobile-map.html' }}\n    \tonMessage={receiveMsgFromWeb}\n   />\n  ```\n","slug":"communication-between-webview-and-react-native","published":1,"updated":"2022-05-30T05:28:51.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jm0027gosw2n0fhx0f","content":"<h1 id=\"webview-和-react-native-通信\"><a href=\"#webview-和-react-native-通信\" class=\"headerlink\" title=\"webview 和 react native 通信\"></a>webview 和 react native 通信</h1><p>场景：react native 使用 webview，webview 作为独立应用和 react native 需要相互通信</p>\n<p>原理：借助 web api：<code>postMessage</code>，react native api <code>injectJavaScript</code> 实现通信</p>\n<a id=\"more\"></a>\n\n<p><strong>react native 使用的 package</strong></p>\n<p><code>react-native-webview</code>。安装请参考对应的 github 文档</p>\n<h2 id=\"Web-——–-gt-react-native\"><a href=\"#Web-——–-gt-react-native\" class=\"headerlink\" title=\"Web ——–&gt; react native\"></a>Web ——–&gt; react native</h2><p>web</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.ReactNativeWebView.postMessage(msg);</span><br></pre></td></tr></table></figure>\n\n<p>App</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接收来自webview端的信息</span><br><span class=\"line\"><span class=\"addition\">+  const receiveMsgFromWeb = e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+    const msg = e.nativeEvent.data;</span></span><br><span class=\"line\"><span class=\"addition\">+  &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;WebView</span><br><span class=\"line\">   // 此处在开发的时候，应该填写你自己的web端服务的ip地址或者是线上地址</span><br><span class=\"line\">   source=&#123;&#123; uri: 'http://192.168.1.193:8088/mobile-map.html' &#125;&#125;</span><br><span class=\"line\"><span class=\"addition\">+  onMessage=&#123;receiveMsgFromWeb&#125;</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"react-native-—-gt-Web\"><a href=\"#react-native-—-gt-Web\" class=\"headerlink\" title=\"react- native —-&gt; Web\"></a>react- native —-&gt; Web</h2><ul>\n<li><p>web 定义好 被调用的全局函数，例如 receiveLocation</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [initLocation, setInitLocation] = useState();</span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.receiveLocation = <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>react-native 注入代码到 webview 中，执行 web 端定义好的 receiveLocation 函数</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ const webRef = useRef();</span></span><br><span class=\"line\">  // 发送位置信息给webview</span><br><span class=\"line\">  const sendLocationToWeb = () =&gt; &#123;</span><br><span class=\"line\"><span class=\"addition\">+    webRef.current?.injectJavaScript(</span></span><br><span class=\"line\"><span class=\"addition\">+      script(`$&#123;pos.latitude&#125;,$&#123;pos.longitude&#125;`),</span></span><br><span class=\"line\"><span class=\"addition\">+    );</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+    function script(payload: string) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+      return `</span></span><br><span class=\"line\"><span class=\"addition\">+      receiveLocation(\"$&#123;payload&#125;\");true;</span></span><br><span class=\"line\"><span class=\"addition\">+      `;</span></span><br><span class=\"line\"><span class=\"addition\">+    &#125;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> \t&lt;WebView</span><br><span class=\"line\"><span class=\"addition\">+   ref=&#123;webRef&#125;</span></span><br><span class=\"line\">  \t// 此处在开发的时候，应该填写你自己的web端服务的ip地址或者是线上地址</span><br><span class=\"line\">  \tsource=&#123;&#123; uri: 'http://192.168.1.193:8088/mobile-map.html' &#125;&#125;</span><br><span class=\"line\">  \tonMessage=&#123;receiveMsgFromWeb&#125;</span><br><span class=\"line\"> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"webview-和-react-native-通信\"><a href=\"#webview-和-react-native-通信\" class=\"headerlink\" title=\"webview 和 react native 通信\"></a>webview 和 react native 通信</h1><p>场景：react native 使用 webview，webview 作为独立应用和 react native 需要相互通信</p>\n<p>原理：借助 web api：<code>postMessage</code>，react native api <code>injectJavaScript</code> 实现通信</p>","more":"<p><strong>react native 使用的 package</strong></p>\n<p><code>react-native-webview</code>。安装请参考对应的 github 文档</p>\n<h2 id=\"Web-——–-gt-react-native\"><a href=\"#Web-——–-gt-react-native\" class=\"headerlink\" title=\"Web ——–&gt; react native\"></a>Web ——–&gt; react native</h2><p>web</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.ReactNativeWebView.postMessage(msg);</span><br></pre></td></tr></table></figure>\n\n<p>App</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接收来自webview端的信息</span><br><span class=\"line\"><span class=\"addition\">+  const receiveMsgFromWeb = e =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+    const msg = e.nativeEvent.data;</span></span><br><span class=\"line\"><span class=\"addition\">+  &#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;WebView</span><br><span class=\"line\">   // 此处在开发的时候，应该填写你自己的web端服务的ip地址或者是线上地址</span><br><span class=\"line\">   source=&#123;&#123; uri: 'http://192.168.1.193:8088/mobile-map.html' &#125;&#125;</span><br><span class=\"line\"><span class=\"addition\">+  onMessage=&#123;receiveMsgFromWeb&#125;</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"react-native-—-gt-Web\"><a href=\"#react-native-—-gt-Web\" class=\"headerlink\" title=\"react- native —-&gt; Web\"></a>react- native —-&gt; Web</h2><ul>\n<li><p>web 定义好 被调用的全局函数，例如 receiveLocation</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [initLocation, setInitLocation] = useState();</span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.receiveLocation = <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>react-native 注入代码到 webview 中，执行 web 端定义好的 receiveLocation 函数</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ const webRef = useRef();</span></span><br><span class=\"line\">  // 发送位置信息给webview</span><br><span class=\"line\">  const sendLocationToWeb = () =&gt; &#123;</span><br><span class=\"line\"><span class=\"addition\">+    webRef.current?.injectJavaScript(</span></span><br><span class=\"line\"><span class=\"addition\">+      script(`$&#123;pos.latitude&#125;,$&#123;pos.longitude&#125;`),</span></span><br><span class=\"line\"><span class=\"addition\">+    );</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+    function script(payload: string) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+      return `</span></span><br><span class=\"line\"><span class=\"addition\">+      receiveLocation(\"$&#123;payload&#125;\");true;</span></span><br><span class=\"line\"><span class=\"addition\">+      `;</span></span><br><span class=\"line\"><span class=\"addition\">+    &#125;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> \t&lt;WebView</span><br><span class=\"line\"><span class=\"addition\">+   ref=&#123;webRef&#125;</span></span><br><span class=\"line\">  \t// 此处在开发的时候，应该填写你自己的web端服务的ip地址或者是线上地址</span><br><span class=\"line\">  \tsource=&#123;&#123; uri: 'http://192.168.1.193:8088/mobile-map.html' &#125;&#125;</span><br><span class=\"line\">  \tonMessage=&#123;receiveMsgFromWeb&#125;</span><br><span class=\"line\"> /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"docker - 运行一个container","toc":true,"date":"2020-09-17T16:00:00.000Z","updated":"2021-04-04T16:00:00.000Z","_content":"\n**此处 image 使用 alpine linux**\n\n## 从 docker hub 获取 image\n\n1. docker search [imageName] : 搜索 docker hub 上对应的 images\n2. docker pull [imageName] ： 拉取 image\n3. docker images : 查看 images 列表\n\n## 运行 mysql\n\ndocker run [image] [command]\n\n> docker run image，如果 image 在本地不存在，会自动执行 docker pull\n\n```bash\ndocker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n\n–detach -d 在后台运行容器，并且打印容器 id。\n–interactive -i 设置为可交互状态。\n–tty -t 分配一个伪 tty(控制台)，一般与 -i 连用。\n-p 3306:3306 映射容器服务的 3306 端口到宿主机的 3306 端口\n-e 执行命令 MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码\n\n### 运行 mongoDB\n\n```bash\ndocker pull mongo\ndocker run -itd --name mongo -p 27017:27017 mongo --auth\n# 建立认证权限\ndocker exec -it mongo mongo admin\n# > mongo tty\ndb.createUser({user:\"root\",pwd:\"root\",roles:[{role:'root',db:'admin'}]}) #  //创建用户,此用户创建成功,则后续操作都需要用户认证\n```\n\n> spring boot 配置\n\n```yml\ndata:\n  mongodb:\n    host: 192.168.193.124\n    port: 27017\n    username: root\n    password: root\n    database: your-database-name\n```\n\n## 查看运行的 container\n\n- docker ps 查看正在运行的 container\n- docker ps -a 查看所有运行过的 container\n\n## 操作后台运行 container： **-d**\n\n- docker run -d [images] : The -d flag 启用 detached mode，后台运行\n- docker ps 查看正在运行的 container\n- docker rm [containerId] 删除正在运行 container\n","source":"_posts/docker-command.md","raw":"---\ntitle: docker - 运行一个container\ncategories: [运维]\ntags: [Docker]\ntoc: true\ndate: 2020/9/18\nupdated: 2021/4/5\n---\n\n**此处 image 使用 alpine linux**\n\n## 从 docker hub 获取 image\n\n1. docker search [imageName] : 搜索 docker hub 上对应的 images\n2. docker pull [imageName] ： 拉取 image\n3. docker images : 查看 images 列表\n\n## 运行 mysql\n\ndocker run [image] [command]\n\n> docker run image，如果 image 在本地不存在，会自动执行 docker pull\n\n```bash\ndocker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n\n–detach -d 在后台运行容器，并且打印容器 id。\n–interactive -i 设置为可交互状态。\n–tty -t 分配一个伪 tty(控制台)，一般与 -i 连用。\n-p 3306:3306 映射容器服务的 3306 端口到宿主机的 3306 端口\n-e 执行命令 MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码\n\n### 运行 mongoDB\n\n```bash\ndocker pull mongo\ndocker run -itd --name mongo -p 27017:27017 mongo --auth\n# 建立认证权限\ndocker exec -it mongo mongo admin\n# > mongo tty\ndb.createUser({user:\"root\",pwd:\"root\",roles:[{role:'root',db:'admin'}]}) #  //创建用户,此用户创建成功,则后续操作都需要用户认证\n```\n\n> spring boot 配置\n\n```yml\ndata:\n  mongodb:\n    host: 192.168.193.124\n    port: 27017\n    username: root\n    password: root\n    database: your-database-name\n```\n\n## 查看运行的 container\n\n- docker ps 查看正在运行的 container\n- docker ps -a 查看所有运行过的 container\n\n## 操作后台运行 container： **-d**\n\n- docker run -d [images] : The -d flag 启用 detached mode，后台运行\n- docker ps 查看正在运行的 container\n- docker rm [containerId] 删除正在运行 container\n","slug":"docker-command","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jn002bgoswgzzm4d50","content":"<p><strong>此处 image 使用 alpine linux</strong></p>\n<h2 id=\"从-docker-hub-获取-image\"><a href=\"#从-docker-hub-获取-image\" class=\"headerlink\" title=\"从 docker hub 获取 image\"></a>从 docker hub 获取 image</h2><ol>\n<li>docker search [imageName] : 搜索 docker hub 上对应的 images</li>\n<li>docker pull [imageName] ： 拉取 image</li>\n<li>docker images : 查看 images 列表</li>\n</ol>\n<h2 id=\"运行-mysql\"><a href=\"#运行-mysql\" class=\"headerlink\" title=\"运行 mysql\"></a>运行 mysql</h2><p>docker run [image] [command]</p>\n<blockquote>\n<p>docker run image，如果 image 在本地不存在，会自动执行 docker pull</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure>\n\n<p>–detach -d 在后台运行容器，并且打印容器 id。<br>–interactive -i 设置为可交互状态。<br>–tty -t 分配一个伪 tty(控制台)，一般与 -i 连用。<br>-p 3306:3306 映射容器服务的 3306 端口到宿主机的 3306 端口<br>-e 执行命令 MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码</p>\n<h3 id=\"运行-mongoDB\"><a href=\"#运行-mongoDB\" class=\"headerlink\" title=\"运行 mongoDB\"></a>运行 mongoDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br><span class=\"line\">docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br><span class=\"line\"><span class=\"comment\"># 建立认证权限</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mongo mongo admin</span><br><span class=\"line\"><span class=\"comment\"># &gt; mongo tty</span></span><br><span class=\"line\">db.createUser(&#123;user:<span class=\"string\">\"root\"</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">\"root\"</span>,roles:[&#123;role:<span class=\"string\">'root'</span>,db:<span class=\"string\">'admin'</span>&#125;]&#125;) <span class=\"comment\">#  //创建用户,此用户创建成功,则后续操作都需要用户认证</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>spring boot 配置</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.193</span><span class=\"number\">.124</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">your-database-name</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看运行的-container\"><a href=\"#查看运行的-container\" class=\"headerlink\" title=\"查看运行的 container\"></a>查看运行的 container</h2><ul>\n<li>docker ps 查看正在运行的 container</li>\n<li>docker ps -a 查看所有运行过的 container</li>\n</ul>\n<h2 id=\"操作后台运行-container：-d\"><a href=\"#操作后台运行-container：-d\" class=\"headerlink\" title=\"操作后台运行 container： -d\"></a>操作后台运行 container： <strong>-d</strong></h2><ul>\n<li>docker run -d [images] : The -d flag 启用 detached mode，后台运行</li>\n<li>docker ps 查看正在运行的 container</li>\n<li>docker rm [containerId] 删除正在运行 container</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>此处 image 使用 alpine linux</strong></p>\n<h2 id=\"从-docker-hub-获取-image\"><a href=\"#从-docker-hub-获取-image\" class=\"headerlink\" title=\"从 docker hub 获取 image\"></a>从 docker hub 获取 image</h2><ol>\n<li>docker search [imageName] : 搜索 docker hub 上对应的 images</li>\n<li>docker pull [imageName] ： 拉取 image</li>\n<li>docker images : 查看 images 列表</li>\n</ol>\n<h2 id=\"运行-mysql\"><a href=\"#运行-mysql\" class=\"headerlink\" title=\"运行 mysql\"></a>运行 mysql</h2><p>docker run [image] [command]</p>\n<blockquote>\n<p>docker run image，如果 image 在本地不存在，会自动执行 docker pull</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</span><br></pre></td></tr></table></figure>\n\n<p>–detach -d 在后台运行容器，并且打印容器 id。<br>–interactive -i 设置为可交互状态。<br>–tty -t 分配一个伪 tty(控制台)，一般与 -i 连用。<br>-p 3306:3306 映射容器服务的 3306 端口到宿主机的 3306 端口<br>-e 执行命令 MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码</p>\n<h3 id=\"运行-mongoDB\"><a href=\"#运行-mongoDB\" class=\"headerlink\" title=\"运行 mongoDB\"></a>运行 mongoDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mongo</span><br><span class=\"line\">docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br><span class=\"line\"><span class=\"comment\"># 建立认证权限</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mongo mongo admin</span><br><span class=\"line\"><span class=\"comment\"># &gt; mongo tty</span></span><br><span class=\"line\">db.createUser(&#123;user:<span class=\"string\">\"root\"</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">\"root\"</span>,roles:[&#123;role:<span class=\"string\">'root'</span>,db:<span class=\"string\">'admin'</span>&#125;]&#125;) <span class=\"comment\">#  //创建用户,此用户创建成功,则后续操作都需要用户认证</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>spring boot 配置</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">192.168</span><span class=\"number\">.193</span><span class=\"number\">.124</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"string\">your-database-name</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看运行的-container\"><a href=\"#查看运行的-container\" class=\"headerlink\" title=\"查看运行的 container\"></a>查看运行的 container</h2><ul>\n<li>docker ps 查看正在运行的 container</li>\n<li>docker ps -a 查看所有运行过的 container</li>\n</ul>\n<h2 id=\"操作后台运行-container：-d\"><a href=\"#操作后台运行-container：-d\" class=\"headerlink\" title=\"操作后台运行 container： -d\"></a>操作后台运行 container： <strong>-d</strong></h2><ul>\n<li>docker run -d [images] : The -d flag 启用 detached mode，后台运行</li>\n<li>docker ps 查看正在运行的 container</li>\n<li>docker rm [containerId] 删除正在运行 container</li>\n</ul>\n"},{"title":"git 操作","toc":true,"date":"2020-07-02T16:00:00.000Z","_content":"\n## remote 分支操作\n\n```bash\ngit remote rm [仓库名称] # 删除\ngit remote add [仓库名称] [地址] # 添加\ngit remote # 查看remote 仓库列表\ngit remote set-url [仓库名称] [url] # 更改仓库的地址\ngit push origin --delete feat-eslint-vue-enable # 删除远程分支\n```\n\n## bash + git branch 删除本地垃圾分支\n\n删除一条分支：\n\n```bash\ngit branch -D branchName\n```\n\n删除当前分支外的所有分支：\n\n```bash\ngit branch | xargs git branch -d\n```\n\n删除分支名包含指定字符的分支：\n\n```bash\ngit branch | grep 'dev' | xargs git branch -d\n# 该例将会删除分支名包含’dev’字符的分支\n```\n\n### 命令解释\n\n`|`\n管道命令，用于将一串命令串联起来。前面命令的输出可以作为后面命令的输入。\n\n`git branch`\n用于列出本地所有分支。\n\n`grep`\n搜索过滤命令。使用正则表达式搜索文本，并把匹配的行打印出来。\n\n`xargs`\n参数传递命令。用于将标准输入作为命令的参数传给下一个命令。\n\n3. 管道命令与 xargs 命令的区别\n   管道是实现’'将前面的标准输出作为后面的标准输入\"\n\nxargs 是实现“将标准输入作为命令的参数\"\n\n### 使用例子\n\n删除所有包含 bugFix 关键字的分支\n\n```bash\ngit branch | grep 'bugFix' | xargs git branch -d\n```\n\n## cheery-pick: 选择某一个 commit merge 到当前分支\n\n1. `git log` 或 `sourcetree 工具`查看一下你想选择哪些 commits 进行合并 如 82ecb31\n2. `git cherry-pick 82ecb31`\n\n## reset 撤销提交的代码\n\n```js\ngit reset --hard head^ 不保留代码，恢复成上一个 commit 版本代码\ngit reset --soft head^ 保留代码，恢复成上一个 commit\n```\n\n## 使用 amend + push -f 实现远程分支 commit 的追加[2021/2/24]\n\n1. git commit --amend // 提交一次追加代码\n2. git push origin [仓库名称] -f // -f 强制推送\n\n## git rebase 与 git merge 区别 [2021/2/24]\n\n**git rebase 作用**: 在多人开发的时候维护 git 树的干净整洁，方便回滚迭代\n**git rebase 的原理**\n\n- 首先，git 会把 feature1 分支里面的每个 commit 取消掉；\n- 其次，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下；\n- 然后，把 feature1 分支更新到最新的 master 分支；\n- 最后，把上面保存的 patch 文件应用到 feature1 分支上\n\n**git rebase 缺陷**\ngit rebase 和 git merge 都能够实现合并代码的功能，但是 git rebase 不推荐在公共分支上进行操作，因为会出现不同开发人员之间的提交记录不一致的情况，如图\n<img src=\"git-rebase.png\" alt=\"git rebase 缺陷\"/>\n","source":"_posts/git-operation.md","raw":"---\ntitle: git 操作\ncategories: [工程化]\ntags: [git]\ntoc: true\ndate: 2020/7/3\n---\n\n## remote 分支操作\n\n```bash\ngit remote rm [仓库名称] # 删除\ngit remote add [仓库名称] [地址] # 添加\ngit remote # 查看remote 仓库列表\ngit remote set-url [仓库名称] [url] # 更改仓库的地址\ngit push origin --delete feat-eslint-vue-enable # 删除远程分支\n```\n\n## bash + git branch 删除本地垃圾分支\n\n删除一条分支：\n\n```bash\ngit branch -D branchName\n```\n\n删除当前分支外的所有分支：\n\n```bash\ngit branch | xargs git branch -d\n```\n\n删除分支名包含指定字符的分支：\n\n```bash\ngit branch | grep 'dev' | xargs git branch -d\n# 该例将会删除分支名包含’dev’字符的分支\n```\n\n### 命令解释\n\n`|`\n管道命令，用于将一串命令串联起来。前面命令的输出可以作为后面命令的输入。\n\n`git branch`\n用于列出本地所有分支。\n\n`grep`\n搜索过滤命令。使用正则表达式搜索文本，并把匹配的行打印出来。\n\n`xargs`\n参数传递命令。用于将标准输入作为命令的参数传给下一个命令。\n\n3. 管道命令与 xargs 命令的区别\n   管道是实现’'将前面的标准输出作为后面的标准输入\"\n\nxargs 是实现“将标准输入作为命令的参数\"\n\n### 使用例子\n\n删除所有包含 bugFix 关键字的分支\n\n```bash\ngit branch | grep 'bugFix' | xargs git branch -d\n```\n\n## cheery-pick: 选择某一个 commit merge 到当前分支\n\n1. `git log` 或 `sourcetree 工具`查看一下你想选择哪些 commits 进行合并 如 82ecb31\n2. `git cherry-pick 82ecb31`\n\n## reset 撤销提交的代码\n\n```js\ngit reset --hard head^ 不保留代码，恢复成上一个 commit 版本代码\ngit reset --soft head^ 保留代码，恢复成上一个 commit\n```\n\n## 使用 amend + push -f 实现远程分支 commit 的追加[2021/2/24]\n\n1. git commit --amend // 提交一次追加代码\n2. git push origin [仓库名称] -f // -f 强制推送\n\n## git rebase 与 git merge 区别 [2021/2/24]\n\n**git rebase 作用**: 在多人开发的时候维护 git 树的干净整洁，方便回滚迭代\n**git rebase 的原理**\n\n- 首先，git 会把 feature1 分支里面的每个 commit 取消掉；\n- 其次，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下；\n- 然后，把 feature1 分支更新到最新的 master 分支；\n- 最后，把上面保存的 patch 文件应用到 feature1 分支上\n\n**git rebase 缺陷**\ngit rebase 和 git merge 都能够实现合并代码的功能，但是 git rebase 不推荐在公共分支上进行操作，因为会出现不同开发人员之间的提交记录不一致的情况，如图\n<img src=\"git-rebase.png\" alt=\"git rebase 缺陷\"/>\n","slug":"git-operation","published":1,"updated":"2021-03-12T11:21:15.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jo002fgosw7vbn6ogn","content":"<h2 id=\"remote-分支操作\"><a href=\"#remote-分支操作\" class=\"headerlink\" title=\"remote 分支操作\"></a>remote 分支操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm [仓库名称] <span class=\"comment\"># 删除</span></span><br><span class=\"line\">git remote add [仓库名称] [地址] <span class=\"comment\"># 添加</span></span><br><span class=\"line\">git remote <span class=\"comment\"># 查看remote 仓库列表</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url [仓库名称] [url] <span class=\"comment\"># 更改仓库的地址</span></span><br><span class=\"line\">git push origin --delete feat-eslint-vue-enable <span class=\"comment\"># 删除远程分支</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bash-git-branch-删除本地垃圾分支\"><a href=\"#bash-git-branch-删除本地垃圾分支\" class=\"headerlink\" title=\"bash + git branch 删除本地垃圾分支\"></a>bash + git branch 删除本地垃圾分支</h2><p>删除一条分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D branchName</span><br></pre></td></tr></table></figure>\n\n<p>删除当前分支外的所有分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch | xargs git branch -d</span><br></pre></td></tr></table></figure>\n\n<p>删除分支名包含指定字符的分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch | grep <span class=\"string\">'dev'</span> | xargs git branch -d</span><br><span class=\"line\"><span class=\"comment\"># 该例将会删除分支名包含’dev’字符的分支</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令解释\"><a href=\"#命令解释\" class=\"headerlink\" title=\"命令解释\"></a>命令解释</h3><p><code>|</code><br>管道命令，用于将一串命令串联起来。前面命令的输出可以作为后面命令的输入。</p>\n<p><code>git branch</code><br>用于列出本地所有分支。</p>\n<p><code>grep</code><br>搜索过滤命令。使用正则表达式搜索文本，并把匹配的行打印出来。</p>\n<p><code>xargs</code><br>参数传递命令。用于将标准输入作为命令的参数传给下一个命令。</p>\n<ol start=\"3\">\n<li>管道命令与 xargs 命令的区别<br>管道是实现’’将前面的标准输出作为后面的标准输入”</li>\n</ol>\n<p>xargs 是实现“将标准输入作为命令的参数”</p>\n<h3 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h3><p>删除所有包含 bugFix 关键字的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch | grep <span class=\"string\">'bugFix'</span> | xargs git branch -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cheery-pick-选择某一个-commit-merge-到当前分支\"><a href=\"#cheery-pick-选择某一个-commit-merge-到当前分支\" class=\"headerlink\" title=\"cheery-pick: 选择某一个 commit merge 到当前分支\"></a>cheery-pick: 选择某一个 commit merge 到当前分支</h2><ol>\n<li><code>git log</code> 或 <code>sourcetree 工具</code>查看一下你想选择哪些 commits 进行合并 如 82ecb31</li>\n<li><code>git cherry-pick 82ecb31</code></li>\n</ol>\n<h2 id=\"reset-撤销提交的代码\"><a href=\"#reset-撤销提交的代码\" class=\"headerlink\" title=\"reset 撤销提交的代码\"></a>reset 撤销提交的代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard head^ 不保留代码，恢复成上一个 commit 版本代码</span><br><span class=\"line\">git reset --soft head^ 保留代码，恢复成上一个 commit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-amend-push-f-实现远程分支-commit-的追加-2021-2-24\"><a href=\"#使用-amend-push-f-实现远程分支-commit-的追加-2021-2-24\" class=\"headerlink\" title=\"使用 amend + push -f 实现远程分支 commit 的追加[2021/2/24]\"></a>使用 amend + push -f 实现远程分支 commit 的追加[2021/2/24]</h2><ol>\n<li>git commit –amend // 提交一次追加代码</li>\n<li>git push origin [仓库名称] -f // -f 强制推送</li>\n</ol>\n<h2 id=\"git-rebase-与-git-merge-区别-2021-2-24\"><a href=\"#git-rebase-与-git-merge-区别-2021-2-24\" class=\"headerlink\" title=\"git rebase 与 git merge 区别 [2021/2/24]\"></a>git rebase 与 git merge 区别 [2021/2/24]</h2><p><strong>git rebase 作用</strong>: 在多人开发的时候维护 git 树的干净整洁，方便回滚迭代<br><strong>git rebase 的原理</strong></p>\n<ul>\n<li>首先，git 会把 feature1 分支里面的每个 commit 取消掉；</li>\n<li>其次，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下；</li>\n<li>然后，把 feature1 分支更新到最新的 master 分支；</li>\n<li>最后，把上面保存的 patch 文件应用到 feature1 分支上</li>\n</ul>\n<p><strong>git rebase 缺陷</strong><br>git rebase 和 git merge 都能够实现合并代码的功能，但是 git rebase 不推荐在公共分支上进行操作，因为会出现不同开发人员之间的提交记录不一致的情况，如图<br><img src=\"git-rebase.png\" alt=\"git rebase 缺陷\"/></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"remote-分支操作\"><a href=\"#remote-分支操作\" class=\"headerlink\" title=\"remote 分支操作\"></a>remote 分支操作</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm [仓库名称] <span class=\"comment\"># 删除</span></span><br><span class=\"line\">git remote add [仓库名称] [地址] <span class=\"comment\"># 添加</span></span><br><span class=\"line\">git remote <span class=\"comment\"># 查看remote 仓库列表</span></span><br><span class=\"line\">git remote <span class=\"built_in\">set</span>-url [仓库名称] [url] <span class=\"comment\"># 更改仓库的地址</span></span><br><span class=\"line\">git push origin --delete feat-eslint-vue-enable <span class=\"comment\"># 删除远程分支</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bash-git-branch-删除本地垃圾分支\"><a href=\"#bash-git-branch-删除本地垃圾分支\" class=\"headerlink\" title=\"bash + git branch 删除本地垃圾分支\"></a>bash + git branch 删除本地垃圾分支</h2><p>删除一条分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D branchName</span><br></pre></td></tr></table></figure>\n\n<p>删除当前分支外的所有分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch | xargs git branch -d</span><br></pre></td></tr></table></figure>\n\n<p>删除分支名包含指定字符的分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch | grep <span class=\"string\">'dev'</span> | xargs git branch -d</span><br><span class=\"line\"><span class=\"comment\"># 该例将会删除分支名包含’dev’字符的分支</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令解释\"><a href=\"#命令解释\" class=\"headerlink\" title=\"命令解释\"></a>命令解释</h3><p><code>|</code><br>管道命令，用于将一串命令串联起来。前面命令的输出可以作为后面命令的输入。</p>\n<p><code>git branch</code><br>用于列出本地所有分支。</p>\n<p><code>grep</code><br>搜索过滤命令。使用正则表达式搜索文本，并把匹配的行打印出来。</p>\n<p><code>xargs</code><br>参数传递命令。用于将标准输入作为命令的参数传给下一个命令。</p>\n<ol start=\"3\">\n<li>管道命令与 xargs 命令的区别<br>管道是实现’’将前面的标准输出作为后面的标准输入”</li>\n</ol>\n<p>xargs 是实现“将标准输入作为命令的参数”</p>\n<h3 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h3><p>删除所有包含 bugFix 关键字的分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch | grep <span class=\"string\">'bugFix'</span> | xargs git branch -d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cheery-pick-选择某一个-commit-merge-到当前分支\"><a href=\"#cheery-pick-选择某一个-commit-merge-到当前分支\" class=\"headerlink\" title=\"cheery-pick: 选择某一个 commit merge 到当前分支\"></a>cheery-pick: 选择某一个 commit merge 到当前分支</h2><ol>\n<li><code>git log</code> 或 <code>sourcetree 工具</code>查看一下你想选择哪些 commits 进行合并 如 82ecb31</li>\n<li><code>git cherry-pick 82ecb31</code></li>\n</ol>\n<h2 id=\"reset-撤销提交的代码\"><a href=\"#reset-撤销提交的代码\" class=\"headerlink\" title=\"reset 撤销提交的代码\"></a>reset 撤销提交的代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard head^ 不保留代码，恢复成上一个 commit 版本代码</span><br><span class=\"line\">git reset --soft head^ 保留代码，恢复成上一个 commit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-amend-push-f-实现远程分支-commit-的追加-2021-2-24\"><a href=\"#使用-amend-push-f-实现远程分支-commit-的追加-2021-2-24\" class=\"headerlink\" title=\"使用 amend + push -f 实现远程分支 commit 的追加[2021/2/24]\"></a>使用 amend + push -f 实现远程分支 commit 的追加[2021/2/24]</h2><ol>\n<li>git commit –amend // 提交一次追加代码</li>\n<li>git push origin [仓库名称] -f // -f 强制推送</li>\n</ol>\n<h2 id=\"git-rebase-与-git-merge-区别-2021-2-24\"><a href=\"#git-rebase-与-git-merge-区别-2021-2-24\" class=\"headerlink\" title=\"git rebase 与 git merge 区别 [2021/2/24]\"></a>git rebase 与 git merge 区别 [2021/2/24]</h2><p><strong>git rebase 作用</strong>: 在多人开发的时候维护 git 树的干净整洁，方便回滚迭代<br><strong>git rebase 的原理</strong></p>\n<ul>\n<li>首先，git 会把 feature1 分支里面的每个 commit 取消掉；</li>\n<li>其次，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下；</li>\n<li>然后，把 feature1 分支更新到最新的 master 分支；</li>\n<li>最后，把上面保存的 patch 文件应用到 feature1 分支上</li>\n</ul>\n<p><strong>git rebase 缺陷</strong><br>git rebase 和 git merge 都能够实现合并代码的功能，但是 git rebase 不推荐在公共分支上进行操作，因为会出现不同开发人员之间的提交记录不一致的情况，如图<br><img src=\"git-rebase.png\" alt=\"git rebase 缺陷\"/></p>\n"},{"title":"高阶追剧流程-docker-compose","toc":true,"date":"2022-04-17T16:00:00.000Z","_content":"\n这篇文章为高阶追剧流程的 docker-compose 一键部署模板，有时间会加上注释和教程\n\n<!-- more -->\n\n```yml\nversion: \"3\"\nservices:\n  qbittorrent:\n    image: superng6/qbittorrentee:latest\n    container_name: qbittorrent\n    environment:\n      - PUID=1026\n      - PGID=100\n      - TZ=Asia/Shanghai\n      - WEBUIPORT=8080\n    volumes:\n      - /home/shancw/data/qbittorrent:/config\n      - /home/shancw/data/media:/downloads\n      - /home/shancw/media/av:/av\n    network_mode: host\n    # ports:\n    #   - 6881:6881\n    #   - 8080:8080\n    restart: unless-stopped\n  emby:\n    image: emby/embyserver\n    container_name: embyserver\n    environment:\n      - UID=0 # The UID to run emby as (default: 2)\n      - GID=0 # The GID to run emby as (default 2)\n      - GIDLIST=100 # A comma-separated list of additional GIDs to run emby as (default: 2)\n      - TZ=Asia/Shanghai\n      - HTTP_PROXY=http://127.0.0.1:7890\n      - All_PROXY=http://127.0.0.1:7890\n      - NO_PROXY=172.17.0.1,127.0.0.1,localhost\n    volumes:\n      - /home/shancw/data/emby:/config # Configuration directory\n      - /home/shancw/data/media/tv:/tv # tv directory\n      - /home/shancw/data/media/movie:/movie # movie directory\n      - /home/shancw/media/av:/av\n    ports:\n      - 8096:8096 # HTTP port\n    devices:\n      - /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes\n    restart: unless-stopped\n  jackett:\n    image: linuxserver/jackett:latest\n    container_name: jackett\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    volumes:\n      - /home/shancw/data/jackett:/config\n    ports:\n      - 9117:9117\n    restart: unless-stopped\n  sonarr:\n    image: linuxserver/sonarr:latest\n    container_name: sonarr\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    volumes:\n      - /home/shancw/data/sonarr:/config\n      - /home/shancw/data/media/tv:/tv\n      - /home/shancw/data/media:/downloads\n    ports:\n      - 8989:8989\n    restart: unless-stopped\n  radarr:\n    image: linuxserver/radarr:latest\n    container_name: radarr\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    volumes:\n      - /home/shancw/data/radarr:/config\n      - /home/shancw/data/media/tv:/tv\n      - /home/shancw/data/media:/downloads\n    ports:\n      - 7878:7878\n    restart: unless-stopped\n  bazarr:\n    image: lscr.io/linuxserver/bazarr\n    container_name: bazarr\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    volumes:\n      - /home/shancw/data/bazzar:/config\n      - /home/shancw/data/media/movie:/movies #optional\n      - /home/shancw/data/media/tv:/tv #optional\n      - /home/shancw/media:/av # optional\n    ports:\n      - 6767:6767\n    restart: unless-stopped\n  chinesesubfinder:\n    image: allanpk716/chinesesubfinder:v0.19.6\n    volumes:\n      - /home/shancw/data/chinesesubfinder:/config\n      - /home/shancw/data/chinesesubfinder/cache:/app/SubFixCache\n      - /home/shancw/data/media:/media\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    ports:\n      - 19035:19035\n    restart: unless-stopped\n```\n\nTIPS: 补充两个老司机专用链接,支持种子下载和字幕\n\n- https://www.sehuatang.org/\n- https://www.javbus.com/\n","source":"_posts/dockerlize-tv-movie.md","raw":"---\ntitle: 高阶追剧流程-docker-compose\ncategories: [杂项]\ntags: [docker, 高阶追剧流程]\ntoc: true\ndate: 2022/4/18\n---\n\n这篇文章为高阶追剧流程的 docker-compose 一键部署模板，有时间会加上注释和教程\n\n<!-- more -->\n\n```yml\nversion: \"3\"\nservices:\n  qbittorrent:\n    image: superng6/qbittorrentee:latest\n    container_name: qbittorrent\n    environment:\n      - PUID=1026\n      - PGID=100\n      - TZ=Asia/Shanghai\n      - WEBUIPORT=8080\n    volumes:\n      - /home/shancw/data/qbittorrent:/config\n      - /home/shancw/data/media:/downloads\n      - /home/shancw/media/av:/av\n    network_mode: host\n    # ports:\n    #   - 6881:6881\n    #   - 8080:8080\n    restart: unless-stopped\n  emby:\n    image: emby/embyserver\n    container_name: embyserver\n    environment:\n      - UID=0 # The UID to run emby as (default: 2)\n      - GID=0 # The GID to run emby as (default 2)\n      - GIDLIST=100 # A comma-separated list of additional GIDs to run emby as (default: 2)\n      - TZ=Asia/Shanghai\n      - HTTP_PROXY=http://127.0.0.1:7890\n      - All_PROXY=http://127.0.0.1:7890\n      - NO_PROXY=172.17.0.1,127.0.0.1,localhost\n    volumes:\n      - /home/shancw/data/emby:/config # Configuration directory\n      - /home/shancw/data/media/tv:/tv # tv directory\n      - /home/shancw/data/media/movie:/movie # movie directory\n      - /home/shancw/media/av:/av\n    ports:\n      - 8096:8096 # HTTP port\n    devices:\n      - /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes\n    restart: unless-stopped\n  jackett:\n    image: linuxserver/jackett:latest\n    container_name: jackett\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    volumes:\n      - /home/shancw/data/jackett:/config\n    ports:\n      - 9117:9117\n    restart: unless-stopped\n  sonarr:\n    image: linuxserver/sonarr:latest\n    container_name: sonarr\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    volumes:\n      - /home/shancw/data/sonarr:/config\n      - /home/shancw/data/media/tv:/tv\n      - /home/shancw/data/media:/downloads\n    ports:\n      - 8989:8989\n    restart: unless-stopped\n  radarr:\n    image: linuxserver/radarr:latest\n    container_name: radarr\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    volumes:\n      - /home/shancw/data/radarr:/config\n      - /home/shancw/data/media/tv:/tv\n      - /home/shancw/data/media:/downloads\n    ports:\n      - 7878:7878\n    restart: unless-stopped\n  bazarr:\n    image: lscr.io/linuxserver/bazarr\n    container_name: bazarr\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    volumes:\n      - /home/shancw/data/bazzar:/config\n      - /home/shancw/data/media/movie:/movies #optional\n      - /home/shancw/data/media/tv:/tv #optional\n      - /home/shancw/media:/av # optional\n    ports:\n      - 6767:6767\n    restart: unless-stopped\n  chinesesubfinder:\n    image: allanpk716/chinesesubfinder:v0.19.6\n    volumes:\n      - /home/shancw/data/chinesesubfinder:/config\n      - /home/shancw/data/chinesesubfinder/cache:/app/SubFixCache\n      - /home/shancw/data/media:/media\n    environment:\n      - PUID=0\n      - PGID=0\n      - TZ=Asia/Shanghai\n    ports:\n      - 19035:19035\n    restart: unless-stopped\n```\n\nTIPS: 补充两个老司机专用链接,支持种子下载和字幕\n\n- https://www.sehuatang.org/\n- https://www.javbus.com/\n","slug":"dockerlize-tv-movie","published":1,"updated":"2022-04-18T14:23:15.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jp002jgoswc5mz54k2","content":"<p>这篇文章为高阶追剧流程的 docker-compose 一键部署模板，有时间会加上注释和教程</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">qbittorrent:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">superng6/qbittorrentee:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">qbittorrent</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=1026</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=100</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WEBUIPORT=8080</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/qbittorrent:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media:/downloads</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/media/av:/av</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"comment\"># ports:</span></span><br><span class=\"line\">    <span class=\"comment\">#   - 6881:6881</span></span><br><span class=\"line\">    <span class=\"comment\">#   - 8080:8080</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">emby:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">emby/embyserver</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">embyserver</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">UID=0</span> <span class=\"comment\"># The UID to run emby as (default: 2)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GID=0</span> <span class=\"comment\"># The GID to run emby as (default 2)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GIDLIST=100</span> <span class=\"comment\"># A comma-separated list of additional GIDs to run emby as (default: 2)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">HTTP_PROXY=http://127.0.0.1:7890</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">All_PROXY=http://127.0.0.1:7890</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">NO_PROXY=172.17.0.1,127.0.0.1,localhost</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/emby:/config</span> <span class=\"comment\"># Configuration directory</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/tv:/tv</span> <span class=\"comment\"># tv directory</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/movie:/movie</span> <span class=\"comment\"># movie directory</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/media/av:/av</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8096</span><span class=\"string\">:8096</span> <span class=\"comment\"># HTTP port</span></span><br><span class=\"line\">    <span class=\"attr\">devices:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/dev/dri:/dev/dri</span> <span class=\"comment\"># VAAPI/NVDEC/NVENC render nodes</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">jackett:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">linuxserver/jackett:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">jackett</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/jackett:/config</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9117</span><span class=\"string\">:9117</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">sonarr:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">linuxserver/sonarr:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">sonarr</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/sonarr:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/tv:/tv</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media:/downloads</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8989</span><span class=\"string\">:8989</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">radarr:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">linuxserver/radarr:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">radarr</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/radarr:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/tv:/tv</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media:/downloads</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">7878</span><span class=\"string\">:7878</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">bazarr:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">lscr.io/linuxserver/bazarr</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">bazarr</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/bazzar:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/movie:/movies</span> <span class=\"comment\">#optional</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/tv:/tv</span> <span class=\"comment\">#optional</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/media:/av</span> <span class=\"comment\"># optional</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6767</span><span class=\"string\">:6767</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">chinesesubfinder:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">allanpk716/chinesesubfinder:v0.19.6</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/chinesesubfinder:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/chinesesubfinder/cache:/app/SubFixCache</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media:/media</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">19035</span><span class=\"string\">:19035</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n<p>TIPS: 补充两个老司机专用链接,支持种子下载和字幕</p>\n<ul>\n<li><a href=\"https://www.sehuatang.org/\" target=\"_blank\" rel=\"noopener\">https://www.sehuatang.org/</a></li>\n<li><a href=\"https://www.javbus.com/\" target=\"_blank\" rel=\"noopener\">https://www.javbus.com/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这篇文章为高阶追剧流程的 docker-compose 一键部署模板，有时间会加上注释和教程</p>","more":"<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">qbittorrent:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">superng6/qbittorrentee:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">qbittorrent</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=1026</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=100</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WEBUIPORT=8080</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/qbittorrent:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media:/downloads</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/media/av:/av</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">host</span></span><br><span class=\"line\">    <span class=\"comment\"># ports:</span></span><br><span class=\"line\">    <span class=\"comment\">#   - 6881:6881</span></span><br><span class=\"line\">    <span class=\"comment\">#   - 8080:8080</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">emby:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">emby/embyserver</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">embyserver</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">UID=0</span> <span class=\"comment\"># The UID to run emby as (default: 2)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GID=0</span> <span class=\"comment\"># The GID to run emby as (default 2)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GIDLIST=100</span> <span class=\"comment\"># A comma-separated list of additional GIDs to run emby as (default: 2)</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">HTTP_PROXY=http://127.0.0.1:7890</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">All_PROXY=http://127.0.0.1:7890</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">NO_PROXY=172.17.0.1,127.0.0.1,localhost</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/emby:/config</span> <span class=\"comment\"># Configuration directory</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/tv:/tv</span> <span class=\"comment\"># tv directory</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/movie:/movie</span> <span class=\"comment\"># movie directory</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/media/av:/av</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8096</span><span class=\"string\">:8096</span> <span class=\"comment\"># HTTP port</span></span><br><span class=\"line\">    <span class=\"attr\">devices:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/dev/dri:/dev/dri</span> <span class=\"comment\"># VAAPI/NVDEC/NVENC render nodes</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">jackett:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">linuxserver/jackett:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">jackett</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/jackett:/config</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9117</span><span class=\"string\">:9117</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">sonarr:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">linuxserver/sonarr:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">sonarr</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/sonarr:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/tv:/tv</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media:/downloads</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8989</span><span class=\"string\">:8989</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">radarr:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">linuxserver/radarr:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">radarr</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/radarr:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/tv:/tv</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media:/downloads</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">7878</span><span class=\"string\">:7878</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">bazarr:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">lscr.io/linuxserver/bazarr</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">bazarr</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/bazzar:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/movie:/movies</span> <span class=\"comment\">#optional</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media/tv:/tv</span> <span class=\"comment\">#optional</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/media:/av</span> <span class=\"comment\"># optional</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">6767</span><span class=\"string\">:6767</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">chinesesubfinder:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">allanpk716/chinesesubfinder:v0.19.6</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/chinesesubfinder:/config</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/chinesesubfinder/cache:/app/SubFixCache</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/home/shancw/data/media:/media</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PUID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PGID=0</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">19035</span><span class=\"string\">:19035</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n<p>TIPS: 补充两个老司机专用链接,支持种子下载和字幕</p>\n<ul>\n<li><a href=\"https://www.sehuatang.org/\" target=\"_blank\" rel=\"noopener\">https://www.sehuatang.org/</a></li>\n<li><a href=\"https://www.javbus.com/\" target=\"_blank\" rel=\"noopener\">https://www.javbus.com/</a></li>\n</ul>"},{"title":"前端面试","toc":true,"date":"2022-03-10T16:00:00.000Z","top":1,"_content":"\n上次更新时间：2022/4/13\n\n# 资源\n\n## 算法\n\n- [Fucking Algorithm](https://github.com/labuladong/fucking-algorithm) 105k star\n\n## 基础\n\n- [千古前端](https://web.qianguyihao.com/)\n\n  19.2k star，注重基础知识点\n\n- [hit-alibaba](https://hit-alibaba.github.io/interview/basic/) 4.9k star\n\n  计算机网络了解个大概\n\n## 框架学习\n\n- [【vue-family-mindmap】 vue2 的 源码思维导图](https://github.com/biaochenxuying/vue-family-mindmap)\n\n## 前端面试\n\n- [【推荐】yck：前端面试之道](https://juejin.cn/book/6844733763675488269?scrollMenuIndex=1) 17.5k star\n- [木易杨前端进阶](https://muyiy.cn/question/)\n\n<!-- more -->\n\n## JS\n\n### 原始(Primitive)类型有哪些\n\nstring, number, boolean, **null**，**undefined**， **symbol**\n\n#### **简单介绍下 symbol？**\n\n- 中文-符号，es6 新增\n- 用途：确保对象属性使用唯一标识符，不会发生属性冲突的危险\n\n#### **null 和 undefined 的区别？**\n\n- undefined 介绍\n  - undefined：当使用 var 或者 let 声明变量但没有初始化时，就相当于给变量赋予了 undefined 【红宝书】\n  - **永远不要故意给某个变量设置为 undefined，undefined 主要用于比较**。\n  - 增加 undefined 值的目的就是正式明确空对象指针（null）和未初始化变量的区别\n- null 介绍\n  - 从逻辑上讲，null 值表示一个空对象指针，所以`typeof null === object`\n  - 在定义将来要保存对象值的变量时，建议使用 null 来初始化。\n\n### 对象 (Object)\n\n#### 什么是对象？\n\n- 一组数据和功能的集合\n- Object 是派生其他对象的基类\n- 每一个 Object 都有如下几个属性和方法\n  - constructor 用于创造当前对象的构造函数\n  - method：hasOwnProperity(properityName) 判断当前对象，不包括原型链，是否存在指定的属性名称\n  - method：isPrototypeof（object）是否是某个对象的原型\n  - method：properityIsEnumerable（properityName）判断对象上的某个属性是否可以遍历\n  - method：toLocalString（）\n  - method：toString（）\n  - valueOf：返回对象的字符串，数值或者布尔值标识，通常与 toString 返回值相同\n\n#### array function Map Set 属于对象吗？\n\n- 属于，从 Object 基类派生而来\n\n### 什么是原型\n\n#### .prototype 属性\n\n每个函数都会创建一个 prototype 属性，这个属性是一个对象。定义在它上面的属性或者方法可以被共享。比如：\n\n```js\nfunction Person() {} // 自动创建Person.prototype属性\nPerson.prototype.color = \"yellow\";\nPerson.prototype.food = \"rice\";\nconst shancw = new Person();\nshancw.color === \"yellow\"; // -> true\n```\n\n- 我们创建 Person 构造函数，他自动创建 prototype 属性。\n\n- 我们对 Person 的 prototype 增加一些属性，它的实例 shancw 可以获取到 prototype 的共享。因此 shancw.color === 'yellow'\n\n  > 为什么 shancw 实例能够获取到 prototype 原型对象？背后是怎么工作的？\n  >\n  > 参考文章：[理清`constructor`，`【【prototype】】`, `prototype` 之间的区别](https://blog.shancw.net/2021/01/13/js-prototype-constructor/)\n  >\n  > `[[Get]]`\n  >\n  > 当获取对象的某个属性，比如 obj.a 会触发`[[Get]]`操作。对于默认情况下的 `[[Get]]`(没有被 Proxy 代理)会进行如下步骤：\n  >\n  > - 检查对象本身是否有这个属性，如果有就使用\n  >\n  > - 如果 a 不再 obj 中，那么就会检查 obj 的 [[prototype]]\n  >\n  >   上是否存在 a 属性\n  >\n  >   - 如果存在则返回\n  >   - 不存在,继续检查 obj 的`[[Prototype]]`的`[[Prototype]]`,递归执行\n  >\n  > - `[[Prototype]]`的尽头是 `Object.prototype`，如果还是没有找到则会返回 undefined，值得一提的是，很多全局的方法就是通过这种方式获取的，如 `valueOf, toString, hasOwnProperty`\n\n此时如果我们对 Person 的 prototype 进行修改，shancw.color 也会实时发生变化，因此不能将 js 构造函数的 new 实例和 java 中 class 生成的实例相提并论\n\n```js\nfunction Person() {} // 自动创建Person.prototype属性\nPerson.prototype.color = \"yellow\";\nPerson.prototype.food = \"rice\";\nconst shancw = new Person();\nshancw.color === \"yellow\"; // -> true\nPerson.prototype.color = \"black\";\nshancw.color === \"black\"; // -> true\n```\n\n默认情况下，.prototype 原型对象会自动获得 constructor，指向构造函数。如上述例子，Person.prototype.constructor === Person。\n\n<img src=\"https://blog.shancw.net/public/uploads/image-20220420193933397.png\" alt=\"image-20220420193933397\"  />\n\n#### [[prototype]] 属性\n\n每次调用构造函数创建一个新的实例，这个实例内部的[[prototype]]指针就会被赋值给构造函数的原型对象。这个属性是内置属性，外部无法获取。但是 Firefox,Safari,Chrome 会在每个对象上暴露 `__proto__`，通过这个属性，可以访问到对象的原型\n\n![image-20220420200850513](https://blog.shancw.net/public/uploads/image-20220420200850513.png)\n\n### 执行上下文和作用域\n\n> 执行上下文，后续简称为上下文\n\n#### 什么是 执行上下文（Evaluation Context） ：\n\n用来评估和执行 js 代码的环境（an execution context is an abstract concept of an environment where the Javascript code is evaluated and executed. ）；\n\n包括了所有的可访问数据，以及描述了可执行的行为\n\n#### 执行上下文的分类：\n\n- 全局上下文：根据宿主环境的不同，表示全局上下文的对象也不一样，比如在浏览器中是 window\n- 函数上下文：每个函数调用都有自己的上下文。\n- Eval Function 上下文：开发者几乎用不到，暂不讨论\n\n#### 详细说说函数上下文\n\n当代码执行流进入函数时，函数的上下文被推到一个上下文栈上，当执行完毕后，再从这个上下文栈中弹出，讲控制权交给执行上下文。上下文中的代码在执行的时候，会创建一个**作用域链（scope chain）**。以代码为例：\n\n```JS\nfunction firstLevel() {\n    const prop = 1;\n    const a = 1;\n    function secondLevel() {\n        const prop = 2;\n        const b = 2;\n        function thirdLevel() {\n            const prop = 3;\n            const c = 3;\n            console.log(a);\n        }\n    }\n}\n```\n\n当我们代码执行到 thirdLevel 时候，创建的作用域链如下：\n\n```JS\ncontext（third level）- context(second level) - context(first level)\n```\n\n此时，当执行到`console.log(a)`,对 a 变量的查找，会沿作用域链逐层搜索，最终在 context（first level）找到。\n\n#### 闭包是什么？\n\n那么什么是闭包呢？还是以上面例子进行改造\n\n```JS\nfunction firstLevel() {\n    const prop = 1;\n    const a = 1;\n    function secondLevel() {\n        const prop = 2;\n        const b = 2;\n        function thirdLevel() {\n            const prop = 3;\n            const c = 3;\n            console.log(a);\n            return function fourthLevel() {\n                console.log(a, b, c);\n            }\n        }\n    }\n}\n\nconst closureExample = firstLevel();\n```\n\n看代码，直白解释：\n\n如果有个函数 A，他的 return 结果是另外一个函数 B，此时我们通过一个变量，接收函数 A 的执行结果，函数 B。那么这就生成了一个闭包。\n\n对闭包深入理解：\n\n```JS\nfunction A() {\n    ....\n    const a = xx;\n    const b = xx;\n    const c = xx;\n    return function B() {\n        // 访问a，b，c\n    }\n}\n\nconst closure = A(); // 带着特定作用域链的函数B\n```\n\n闭包保存了原本函数 A 在执行完毕后，应该销毁的作用域链。使得即使在 A 结束后，依然可以通过函数 B 对它的内部变量进行访问。\n\n文章参考：\n\n- 红宝书 - 第三章\n- [Understanding Execution Context and Execution Stack in Javascript](https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0)\n\n### 什么是代理和反射\n\nECMAScript 6 新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。\n\n#### proxy\n\n```js\nconst handler = {\n  get(trapTarget, property, receiver) {\n    console.log(trapTarget === target);\n    console.log(property);\n    console.log(receiver === proxy);\n    return trapTarget[property];\n  },\n};\nconst proxy = new Proxy(target, handler);\n```\n\n#### Reflect\n\n所有捕获器都可以基于自己的参数重建原始操作, 但并非所有捕获器行为都像 get()那么简单,因此，通过手写代码入法炮制不现实。全局 Reflect 对象就是用来解决这个痛病，上述 handler 通过 Reflect 实现如下\n\n```js\nconst proxy = new Proxy(target, {\n  get: Reflect.get,\n});\n```\n\n如果我们只是想要创建一个可以捕获所有方法的空代理，通过 Reflect，也可以轻松实现\n\n```js\nconst proxy = new Proxy(target, Reflect);\n```\n\n### Iteration & Generation\n\n#### 请介绍下 Generator 函数\n\nGenerator 函数可以在内部暂停和恢复代码的执行\n\n##### 声明方式\n\n```js\nfunction* generator() {}\nconst generator = function* () {};\nlet foo = {\n  *generator() {},\n};\nclass Foo {\n  *generator() {}\n  static *genrator2() {}\n}\n```\n\n##### 生成器对象\n\n调用生成器函数，会生成一个**生成器对象**。生成器对象一开始处于暂停执行状态（suspended)。生成器对象实现了 Iterator 接口，因此具有 next 方法。\n\n```js\nfunction* generatorExample() {}\n\nconst generatorObj = generatorExample(); // generatorFn(<suspended>)\nconsole.log(generatorObj.next); // f next() {}\n```\n\n- next\n\n  迭代器 API 使用 next()方法在可迭代对象中遍历数据。每次成功调用 next(),都会返回一个 IteratorResult 对象,其中包含迭代器返回的下一个值。若不调用 next(),则无法知道迭代器的当前位置\n\n  - IteratorResult 对象\n\n    此对象包括两个属性：done 和 value\n\n    - done：boolean 值，表示是否还可以再次调用 next\n    - value：可迭代对象的下一个值\n\n- 函数体为空的生成器函数中间不会停留,调用一次 next()就会让生成器到达 done: true 状态\n\n##### yield 中断执行\n\n通过 return 关键字退出的生成器函数会处于 done: true 状态。\n\n```js\nfunction* generator() {\n  yield \"foo\";\n  yield \"bar\";\n  return \"baz\";\n}\n\nconst generatorObj = generator();\ngeneratorObj.next(); // {done: false, value: 'foo'}\ngeneatorObj.next(); // {done: false, value: 'bar'}\ngeneratorObj.enxt(); // {ddone: true, value: 'baz'}\n```\n\n生成器函数内部的执行流程会针对每个生成器对象区分作用域。在一个生成器对象上调用 next() 不会影响其他生成器\n\n```js\nfunction* generator() {\n  yield \"foo\";\n  yield \"bar\";\n  return \"baz\";\n}\n\nconst generatorObj = generator();\nconst generatorObj2 = generator();\ngeneratorObj.next(); // {done: false, value: 'foo'}\ngeneatorObj2.next(); // {done: false, value: 'foo'}\n```\n\n```js\nfunction* foo(x) {\n  let y = 2 * (yield x + 1);\n  let z = yield y / 3;\n  return x + y + z;\n}\nlet it = foo(5);\n//\n\nconsole.log(it.next()); // -> x =5, 5 +1 = 6\nconsole.log(it.next(12)); // -> input 12， y = 12,  12*2/3 = 8\nconsole.log(it.next(13)); // -> input 13, z = 13, x+y+z = 13 + 8 +6\n// 错误\nconsole.log(it.next()); // -> 12\nconsole.log(it.next(12)); // -> 4\nconsole.log(it.next(13)); // -> 5 + 12 + 4\n```\n\n- 首先 `Generator` 函数调用和普通函数不同，它会返回一个迭代器\n- 当执行第一次 `next` 时，传参会被忽略，并且函数暂停在 `yield (x + 1)` 处，所以返回 `5 + 1 = 6`\n- 当执行第二次 `next` 时，传入的参数等于上一个 `yield` 的返回值，如果你不传参，`yield` 永远返回 `undefined`。此时 `let y = 2 * 12`，所以第二个 `yield` 等于 `2 * 12 / 3 = 8`\n- 当执行第三次 `next` 时，传入的参数会传递给 `z`，所以 `z = 13, x = 5, y = 24`，相加等于 `42`\n\ngenerator 实现 async await 效果\n\n```js\nfunction* fetch() {\n  yield ajax(url, () => {});\n  yield ajax(url1, () => {});\n  yield ajax(url2, () => {});\n}\nlet it = fetch();\nlet result1 = it.next();\nlet result2 = it.next();\nlet result3 = it.next();\n```\n\n### 【基础】Promise 相关\n\n- Promise 是什么，用来解决什么问题\n\n  解决异步操作的一个方案\n\n- 有哪些状态\n  - pending\n  - fulfilled\n  - rejected\n\n## 【基础】Array 的常用方法\n\n- 归类\n\n  - pop\n\n  - shift\n\n  - unshift\n\n  - indexOf\n\n  - splice\n\n  - slice\n\n  - reduce\n\n  - map\n\n- map 和 reduce 的使用场景？简单概括 reduce 和 map 的用处\n\n## 【进阶】EventLoop\n\n- Promise.resolve().then 和 setTimout(xx, 0) delay 为 0 哪个快？为什么？\n\n  - Promise 属于 microTask, setTimeout 属于 macroTask。\n\n  - 执行顺序为：`microTask` > `UI render` > `macroTask`\n  - **两个 setTimeout 的最小间隔约为 4ms**，\n\n- 假设有个函数，需要大量计算，比如从 1 数到 100000000，JS 如果直接执行一个 for loop 或者 while loop 那么很大可能会直接显示：当前页面未响应。我们要怎么样去优化用户的体验\n\n  - setTimeout 切分\n  - web workers: 给 JS 创造多线程运行环境，允许主线程创建 worker 线程，分配任务给后者，主线程运行的同时 worker 线程也在运行，相互不干扰，在 worker 线程运行结束后把结果返回给主线程。\n\n## Vue\n\n- key\n\n  1. key 的作用主要是为了高效的更新虚拟 DOM，其原理是 vue 在 patch 过程中通过 key 可以精准判断两个节点是否是同一个，从而避免频繁更新不同元素，减少 DOM 操作量，提高性能。\n  2. 所以用 index 来做 key 会出现复用错的问题，还可以在列表更新时引发一些隐蔽的 bug。key 的作用很简单，就是为了复用。正是因为会复用，比如[10,11,12]，对应 key 是 0,1,2，如果我把 11 这项删了，就是[10,12]，key 是 0,1，这是发现 11 对应的 key 和 12 对应的 key 都是 1\n\n- v-model\n\n  - v-model 一句话概括：实现数据的双向绑定\n\n  - 和 v-bind 区别？基于 v-bind 实现\n\n  - 如何实现一个 v-model 语法糖： 使用 v-bind 获取 value v-on 绑定 input 触发事件\n\n- v-if 和 v-show\n\n  - **v-if** 也是惰性的：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。\n\n  - 相比之下，**v-show** 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。\n\n- 通信方式\n\n  - $emit\n  - props\n  - provide inject 父->子 非响应式\n  - vuex\n  - eventBus 无约束，混乱，不推荐使用\n\n- vue2 和 vue3 在响应式实现上的区别\n\n  - Object.defineProperity VS proxy\n","source":"_posts/fe-interview.md","raw":"---\ntitle: 前端面试\ncategories: [算法]\ntags: []\ntoc: true\ndate: 2022/3/11\ntop: 1\n---\n\n上次更新时间：2022/4/13\n\n# 资源\n\n## 算法\n\n- [Fucking Algorithm](https://github.com/labuladong/fucking-algorithm) 105k star\n\n## 基础\n\n- [千古前端](https://web.qianguyihao.com/)\n\n  19.2k star，注重基础知识点\n\n- [hit-alibaba](https://hit-alibaba.github.io/interview/basic/) 4.9k star\n\n  计算机网络了解个大概\n\n## 框架学习\n\n- [【vue-family-mindmap】 vue2 的 源码思维导图](https://github.com/biaochenxuying/vue-family-mindmap)\n\n## 前端面试\n\n- [【推荐】yck：前端面试之道](https://juejin.cn/book/6844733763675488269?scrollMenuIndex=1) 17.5k star\n- [木易杨前端进阶](https://muyiy.cn/question/)\n\n<!-- more -->\n\n## JS\n\n### 原始(Primitive)类型有哪些\n\nstring, number, boolean, **null**，**undefined**， **symbol**\n\n#### **简单介绍下 symbol？**\n\n- 中文-符号，es6 新增\n- 用途：确保对象属性使用唯一标识符，不会发生属性冲突的危险\n\n#### **null 和 undefined 的区别？**\n\n- undefined 介绍\n  - undefined：当使用 var 或者 let 声明变量但没有初始化时，就相当于给变量赋予了 undefined 【红宝书】\n  - **永远不要故意给某个变量设置为 undefined，undefined 主要用于比较**。\n  - 增加 undefined 值的目的就是正式明确空对象指针（null）和未初始化变量的区别\n- null 介绍\n  - 从逻辑上讲，null 值表示一个空对象指针，所以`typeof null === object`\n  - 在定义将来要保存对象值的变量时，建议使用 null 来初始化。\n\n### 对象 (Object)\n\n#### 什么是对象？\n\n- 一组数据和功能的集合\n- Object 是派生其他对象的基类\n- 每一个 Object 都有如下几个属性和方法\n  - constructor 用于创造当前对象的构造函数\n  - method：hasOwnProperity(properityName) 判断当前对象，不包括原型链，是否存在指定的属性名称\n  - method：isPrototypeof（object）是否是某个对象的原型\n  - method：properityIsEnumerable（properityName）判断对象上的某个属性是否可以遍历\n  - method：toLocalString（）\n  - method：toString（）\n  - valueOf：返回对象的字符串，数值或者布尔值标识，通常与 toString 返回值相同\n\n#### array function Map Set 属于对象吗？\n\n- 属于，从 Object 基类派生而来\n\n### 什么是原型\n\n#### .prototype 属性\n\n每个函数都会创建一个 prototype 属性，这个属性是一个对象。定义在它上面的属性或者方法可以被共享。比如：\n\n```js\nfunction Person() {} // 自动创建Person.prototype属性\nPerson.prototype.color = \"yellow\";\nPerson.prototype.food = \"rice\";\nconst shancw = new Person();\nshancw.color === \"yellow\"; // -> true\n```\n\n- 我们创建 Person 构造函数，他自动创建 prototype 属性。\n\n- 我们对 Person 的 prototype 增加一些属性，它的实例 shancw 可以获取到 prototype 的共享。因此 shancw.color === 'yellow'\n\n  > 为什么 shancw 实例能够获取到 prototype 原型对象？背后是怎么工作的？\n  >\n  > 参考文章：[理清`constructor`，`【【prototype】】`, `prototype` 之间的区别](https://blog.shancw.net/2021/01/13/js-prototype-constructor/)\n  >\n  > `[[Get]]`\n  >\n  > 当获取对象的某个属性，比如 obj.a 会触发`[[Get]]`操作。对于默认情况下的 `[[Get]]`(没有被 Proxy 代理)会进行如下步骤：\n  >\n  > - 检查对象本身是否有这个属性，如果有就使用\n  >\n  > - 如果 a 不再 obj 中，那么就会检查 obj 的 [[prototype]]\n  >\n  >   上是否存在 a 属性\n  >\n  >   - 如果存在则返回\n  >   - 不存在,继续检查 obj 的`[[Prototype]]`的`[[Prototype]]`,递归执行\n  >\n  > - `[[Prototype]]`的尽头是 `Object.prototype`，如果还是没有找到则会返回 undefined，值得一提的是，很多全局的方法就是通过这种方式获取的，如 `valueOf, toString, hasOwnProperty`\n\n此时如果我们对 Person 的 prototype 进行修改，shancw.color 也会实时发生变化，因此不能将 js 构造函数的 new 实例和 java 中 class 生成的实例相提并论\n\n```js\nfunction Person() {} // 自动创建Person.prototype属性\nPerson.prototype.color = \"yellow\";\nPerson.prototype.food = \"rice\";\nconst shancw = new Person();\nshancw.color === \"yellow\"; // -> true\nPerson.prototype.color = \"black\";\nshancw.color === \"black\"; // -> true\n```\n\n默认情况下，.prototype 原型对象会自动获得 constructor，指向构造函数。如上述例子，Person.prototype.constructor === Person。\n\n<img src=\"https://blog.shancw.net/public/uploads/image-20220420193933397.png\" alt=\"image-20220420193933397\"  />\n\n#### [[prototype]] 属性\n\n每次调用构造函数创建一个新的实例，这个实例内部的[[prototype]]指针就会被赋值给构造函数的原型对象。这个属性是内置属性，外部无法获取。但是 Firefox,Safari,Chrome 会在每个对象上暴露 `__proto__`，通过这个属性，可以访问到对象的原型\n\n![image-20220420200850513](https://blog.shancw.net/public/uploads/image-20220420200850513.png)\n\n### 执行上下文和作用域\n\n> 执行上下文，后续简称为上下文\n\n#### 什么是 执行上下文（Evaluation Context） ：\n\n用来评估和执行 js 代码的环境（an execution context is an abstract concept of an environment where the Javascript code is evaluated and executed. ）；\n\n包括了所有的可访问数据，以及描述了可执行的行为\n\n#### 执行上下文的分类：\n\n- 全局上下文：根据宿主环境的不同，表示全局上下文的对象也不一样，比如在浏览器中是 window\n- 函数上下文：每个函数调用都有自己的上下文。\n- Eval Function 上下文：开发者几乎用不到，暂不讨论\n\n#### 详细说说函数上下文\n\n当代码执行流进入函数时，函数的上下文被推到一个上下文栈上，当执行完毕后，再从这个上下文栈中弹出，讲控制权交给执行上下文。上下文中的代码在执行的时候，会创建一个**作用域链（scope chain）**。以代码为例：\n\n```JS\nfunction firstLevel() {\n    const prop = 1;\n    const a = 1;\n    function secondLevel() {\n        const prop = 2;\n        const b = 2;\n        function thirdLevel() {\n            const prop = 3;\n            const c = 3;\n            console.log(a);\n        }\n    }\n}\n```\n\n当我们代码执行到 thirdLevel 时候，创建的作用域链如下：\n\n```JS\ncontext（third level）- context(second level) - context(first level)\n```\n\n此时，当执行到`console.log(a)`,对 a 变量的查找，会沿作用域链逐层搜索，最终在 context（first level）找到。\n\n#### 闭包是什么？\n\n那么什么是闭包呢？还是以上面例子进行改造\n\n```JS\nfunction firstLevel() {\n    const prop = 1;\n    const a = 1;\n    function secondLevel() {\n        const prop = 2;\n        const b = 2;\n        function thirdLevel() {\n            const prop = 3;\n            const c = 3;\n            console.log(a);\n            return function fourthLevel() {\n                console.log(a, b, c);\n            }\n        }\n    }\n}\n\nconst closureExample = firstLevel();\n```\n\n看代码，直白解释：\n\n如果有个函数 A，他的 return 结果是另外一个函数 B，此时我们通过一个变量，接收函数 A 的执行结果，函数 B。那么这就生成了一个闭包。\n\n对闭包深入理解：\n\n```JS\nfunction A() {\n    ....\n    const a = xx;\n    const b = xx;\n    const c = xx;\n    return function B() {\n        // 访问a，b，c\n    }\n}\n\nconst closure = A(); // 带着特定作用域链的函数B\n```\n\n闭包保存了原本函数 A 在执行完毕后，应该销毁的作用域链。使得即使在 A 结束后，依然可以通过函数 B 对它的内部变量进行访问。\n\n文章参考：\n\n- 红宝书 - 第三章\n- [Understanding Execution Context and Execution Stack in Javascript](https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0)\n\n### 什么是代理和反射\n\nECMAScript 6 新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。\n\n#### proxy\n\n```js\nconst handler = {\n  get(trapTarget, property, receiver) {\n    console.log(trapTarget === target);\n    console.log(property);\n    console.log(receiver === proxy);\n    return trapTarget[property];\n  },\n};\nconst proxy = new Proxy(target, handler);\n```\n\n#### Reflect\n\n所有捕获器都可以基于自己的参数重建原始操作, 但并非所有捕获器行为都像 get()那么简单,因此，通过手写代码入法炮制不现实。全局 Reflect 对象就是用来解决这个痛病，上述 handler 通过 Reflect 实现如下\n\n```js\nconst proxy = new Proxy(target, {\n  get: Reflect.get,\n});\n```\n\n如果我们只是想要创建一个可以捕获所有方法的空代理，通过 Reflect，也可以轻松实现\n\n```js\nconst proxy = new Proxy(target, Reflect);\n```\n\n### Iteration & Generation\n\n#### 请介绍下 Generator 函数\n\nGenerator 函数可以在内部暂停和恢复代码的执行\n\n##### 声明方式\n\n```js\nfunction* generator() {}\nconst generator = function* () {};\nlet foo = {\n  *generator() {},\n};\nclass Foo {\n  *generator() {}\n  static *genrator2() {}\n}\n```\n\n##### 生成器对象\n\n调用生成器函数，会生成一个**生成器对象**。生成器对象一开始处于暂停执行状态（suspended)。生成器对象实现了 Iterator 接口，因此具有 next 方法。\n\n```js\nfunction* generatorExample() {}\n\nconst generatorObj = generatorExample(); // generatorFn(<suspended>)\nconsole.log(generatorObj.next); // f next() {}\n```\n\n- next\n\n  迭代器 API 使用 next()方法在可迭代对象中遍历数据。每次成功调用 next(),都会返回一个 IteratorResult 对象,其中包含迭代器返回的下一个值。若不调用 next(),则无法知道迭代器的当前位置\n\n  - IteratorResult 对象\n\n    此对象包括两个属性：done 和 value\n\n    - done：boolean 值，表示是否还可以再次调用 next\n    - value：可迭代对象的下一个值\n\n- 函数体为空的生成器函数中间不会停留,调用一次 next()就会让生成器到达 done: true 状态\n\n##### yield 中断执行\n\n通过 return 关键字退出的生成器函数会处于 done: true 状态。\n\n```js\nfunction* generator() {\n  yield \"foo\";\n  yield \"bar\";\n  return \"baz\";\n}\n\nconst generatorObj = generator();\ngeneratorObj.next(); // {done: false, value: 'foo'}\ngeneatorObj.next(); // {done: false, value: 'bar'}\ngeneratorObj.enxt(); // {ddone: true, value: 'baz'}\n```\n\n生成器函数内部的执行流程会针对每个生成器对象区分作用域。在一个生成器对象上调用 next() 不会影响其他生成器\n\n```js\nfunction* generator() {\n  yield \"foo\";\n  yield \"bar\";\n  return \"baz\";\n}\n\nconst generatorObj = generator();\nconst generatorObj2 = generator();\ngeneratorObj.next(); // {done: false, value: 'foo'}\ngeneatorObj2.next(); // {done: false, value: 'foo'}\n```\n\n```js\nfunction* foo(x) {\n  let y = 2 * (yield x + 1);\n  let z = yield y / 3;\n  return x + y + z;\n}\nlet it = foo(5);\n//\n\nconsole.log(it.next()); // -> x =5, 5 +1 = 6\nconsole.log(it.next(12)); // -> input 12， y = 12,  12*2/3 = 8\nconsole.log(it.next(13)); // -> input 13, z = 13, x+y+z = 13 + 8 +6\n// 错误\nconsole.log(it.next()); // -> 12\nconsole.log(it.next(12)); // -> 4\nconsole.log(it.next(13)); // -> 5 + 12 + 4\n```\n\n- 首先 `Generator` 函数调用和普通函数不同，它会返回一个迭代器\n- 当执行第一次 `next` 时，传参会被忽略，并且函数暂停在 `yield (x + 1)` 处，所以返回 `5 + 1 = 6`\n- 当执行第二次 `next` 时，传入的参数等于上一个 `yield` 的返回值，如果你不传参，`yield` 永远返回 `undefined`。此时 `let y = 2 * 12`，所以第二个 `yield` 等于 `2 * 12 / 3 = 8`\n- 当执行第三次 `next` 时，传入的参数会传递给 `z`，所以 `z = 13, x = 5, y = 24`，相加等于 `42`\n\ngenerator 实现 async await 效果\n\n```js\nfunction* fetch() {\n  yield ajax(url, () => {});\n  yield ajax(url1, () => {});\n  yield ajax(url2, () => {});\n}\nlet it = fetch();\nlet result1 = it.next();\nlet result2 = it.next();\nlet result3 = it.next();\n```\n\n### 【基础】Promise 相关\n\n- Promise 是什么，用来解决什么问题\n\n  解决异步操作的一个方案\n\n- 有哪些状态\n  - pending\n  - fulfilled\n  - rejected\n\n## 【基础】Array 的常用方法\n\n- 归类\n\n  - pop\n\n  - shift\n\n  - unshift\n\n  - indexOf\n\n  - splice\n\n  - slice\n\n  - reduce\n\n  - map\n\n- map 和 reduce 的使用场景？简单概括 reduce 和 map 的用处\n\n## 【进阶】EventLoop\n\n- Promise.resolve().then 和 setTimout(xx, 0) delay 为 0 哪个快？为什么？\n\n  - Promise 属于 microTask, setTimeout 属于 macroTask。\n\n  - 执行顺序为：`microTask` > `UI render` > `macroTask`\n  - **两个 setTimeout 的最小间隔约为 4ms**，\n\n- 假设有个函数，需要大量计算，比如从 1 数到 100000000，JS 如果直接执行一个 for loop 或者 while loop 那么很大可能会直接显示：当前页面未响应。我们要怎么样去优化用户的体验\n\n  - setTimeout 切分\n  - web workers: 给 JS 创造多线程运行环境，允许主线程创建 worker 线程，分配任务给后者，主线程运行的同时 worker 线程也在运行，相互不干扰，在 worker 线程运行结束后把结果返回给主线程。\n\n## Vue\n\n- key\n\n  1. key 的作用主要是为了高效的更新虚拟 DOM，其原理是 vue 在 patch 过程中通过 key 可以精准判断两个节点是否是同一个，从而避免频繁更新不同元素，减少 DOM 操作量，提高性能。\n  2. 所以用 index 来做 key 会出现复用错的问题，还可以在列表更新时引发一些隐蔽的 bug。key 的作用很简单，就是为了复用。正是因为会复用，比如[10,11,12]，对应 key 是 0,1,2，如果我把 11 这项删了，就是[10,12]，key 是 0,1，这是发现 11 对应的 key 和 12 对应的 key 都是 1\n\n- v-model\n\n  - v-model 一句话概括：实现数据的双向绑定\n\n  - 和 v-bind 区别？基于 v-bind 实现\n\n  - 如何实现一个 v-model 语法糖： 使用 v-bind 获取 value v-on 绑定 input 触发事件\n\n- v-if 和 v-show\n\n  - **v-if** 也是惰性的：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。\n\n  - 相比之下，**v-show** 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。\n\n- 通信方式\n\n  - $emit\n  - props\n  - provide inject 父->子 非响应式\n  - vuex\n  - eventBus 无约束，混乱，不推荐使用\n\n- vue2 和 vue3 在响应式实现上的区别\n\n  - Object.defineProperity VS proxy\n","slug":"fe-interview","published":1,"updated":"2022-05-09T06:52:32.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jq002ngosw2e0jg3a3","content":"<p>上次更新时间：2022/4/13</p>\n<h1 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h1><h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ul>\n<li><a href=\"https://github.com/labuladong/fucking-algorithm\" target=\"_blank\" rel=\"noopener\">Fucking Algorithm</a> 105k star</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p><a href=\"https://web.qianguyihao.com/\" target=\"_blank\" rel=\"noopener\">千古前端</a></p>\n<p>19.2k star，注重基础知识点</p>\n</li>\n<li><p><a href=\"https://hit-alibaba.github.io/interview/basic/\" target=\"_blank\" rel=\"noopener\">hit-alibaba</a> 4.9k star</p>\n<p>计算机网络了解个大概</p>\n</li>\n</ul>\n<h2 id=\"框架学习\"><a href=\"#框架学习\" class=\"headerlink\" title=\"框架学习\"></a>框架学习</h2><ul>\n<li><a href=\"https://github.com/biaochenxuying/vue-family-mindmap\" target=\"_blank\" rel=\"noopener\">【vue-family-mindmap】 vue2 的 源码思维导图</a></li>\n</ul>\n<h2 id=\"前端面试\"><a href=\"#前端面试\" class=\"headerlink\" title=\"前端面试\"></a>前端面试</h2><ul>\n<li><a href=\"https://juejin.cn/book/6844733763675488269?scrollMenuIndex=1\" target=\"_blank\" rel=\"noopener\">【推荐】yck：前端面试之道</a> 17.5k star</li>\n<li><a href=\"https://muyiy.cn/question/\" target=\"_blank\" rel=\"noopener\">木易杨前端进阶</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"原始-Primitive-类型有哪些\"><a href=\"#原始-Primitive-类型有哪些\" class=\"headerlink\" title=\"原始(Primitive)类型有哪些\"></a>原始(Primitive)类型有哪些</h3><p>string, number, boolean, <strong>null</strong>，<strong>undefined</strong>， <strong>symbol</strong></p>\n<h4 id=\"简单介绍下-symbol？\"><a href=\"#简单介绍下-symbol？\" class=\"headerlink\" title=\"简单介绍下 symbol？\"></a><strong>简单介绍下 symbol？</strong></h4><ul>\n<li>中文-符号，es6 新增</li>\n<li>用途：确保对象属性使用唯一标识符，不会发生属性冲突的危险</li>\n</ul>\n<h4 id=\"null-和-undefined-的区别？\"><a href=\"#null-和-undefined-的区别？\" class=\"headerlink\" title=\"null 和 undefined 的区别？\"></a><strong>null 和 undefined 的区别？</strong></h4><ul>\n<li>undefined 介绍<ul>\n<li>undefined：当使用 var 或者 let 声明变量但没有初始化时，就相当于给变量赋予了 undefined 【红宝书】</li>\n<li><strong>永远不要故意给某个变量设置为 undefined，undefined 主要用于比较</strong>。</li>\n<li>增加 undefined 值的目的就是正式明确空对象指针（null）和未初始化变量的区别</li>\n</ul>\n</li>\n<li>null 介绍<ul>\n<li>从逻辑上讲，null 值表示一个空对象指针，所以<code>typeof null === object</code></li>\n<li>在定义将来要保存对象值的变量时，建议使用 null 来初始化。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象 (Object)\"></a>对象 (Object)</h3><h4 id=\"什么是对象？\"><a href=\"#什么是对象？\" class=\"headerlink\" title=\"什么是对象？\"></a>什么是对象？</h4><ul>\n<li>一组数据和功能的集合</li>\n<li>Object 是派生其他对象的基类</li>\n<li>每一个 Object 都有如下几个属性和方法<ul>\n<li>constructor 用于创造当前对象的构造函数</li>\n<li>method：hasOwnProperity(properityName) 判断当前对象，不包括原型链，是否存在指定的属性名称</li>\n<li>method：isPrototypeof（object）是否是某个对象的原型</li>\n<li>method：properityIsEnumerable（properityName）判断对象上的某个属性是否可以遍历</li>\n<li>method：toLocalString（）</li>\n<li>method：toString（）</li>\n<li>valueOf：返回对象的字符串，数值或者布尔值标识，通常与 toString 返回值相同</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"array-function-Map-Set-属于对象吗？\"><a href=\"#array-function-Map-Set-属于对象吗？\" class=\"headerlink\" title=\"array function Map Set 属于对象吗？\"></a>array function Map Set 属于对象吗？</h4><ul>\n<li>属于，从 Object 基类派生而来</li>\n</ul>\n<h3 id=\"什么是原型\"><a href=\"#什么是原型\" class=\"headerlink\" title=\"什么是原型\"></a>什么是原型</h3><h4 id=\"prototype-属性\"><a href=\"#prototype-属性\" class=\"headerlink\" title=\".prototype 属性\"></a>.prototype 属性</h4><p>每个函数都会创建一个 prototype 属性，这个属性是一个对象。定义在它上面的属性或者方法可以被共享。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 自动创建Person.prototype属性</span></span><br><span class=\"line\">Person.prototype.color = <span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\">Person.prototype.food = <span class=\"string\">\"rice\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> shancw = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">shancw.color === <span class=\"string\">\"yellow\"</span>; <span class=\"comment\">// -&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>我们创建 Person 构造函数，他自动创建 prototype 属性。</p>\n</li>\n<li><p>我们对 Person 的 prototype 增加一些属性，它的实例 shancw 可以获取到 prototype 的共享。因此 shancw.color === ‘yellow’</p>\n<blockquote>\n<p>为什么 shancw 实例能够获取到 prototype 原型对象？背后是怎么工作的？</p>\n<p>参考文章：<a href=\"https://blog.shancw.net/2021/01/13/js-prototype-constructor/\">理清<code>constructor</code>，<code>【【prototype】】</code>, <code>prototype</code> 之间的区别</a></p>\n<p><code>[[Get]]</code></p>\n<p>当获取对象的某个属性，比如 obj.a 会触发<code>[[Get]]</code>操作。对于默认情况下的 <code>[[Get]]</code>(没有被 Proxy 代理)会进行如下步骤：</p>\n<ul>\n<li><p>检查对象本身是否有这个属性，如果有就使用</p>\n</li>\n<li><p>如果 a 不再 obj 中，那么就会检查 obj 的 [[prototype]]</p>\n<p>上是否存在 a 属性</p>\n<ul>\n<li>如果存在则返回</li>\n<li>不存在,继续检查 obj 的<code>[[Prototype]]</code>的<code>[[Prototype]]</code>,递归执行</li>\n</ul>\n</li>\n<li><p><code>[[Prototype]]</code>的尽头是 <code>Object.prototype</code>，如果还是没有找到则会返回 undefined，值得一提的是，很多全局的方法就是通过这种方式获取的，如 <code>valueOf, toString, hasOwnProperty</code></p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>此时如果我们对 Person 的 prototype 进行修改，shancw.color 也会实时发生变化，因此不能将 js 构造函数的 new 实例和 java 中 class 生成的实例相提并论</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 自动创建Person.prototype属性</span></span><br><span class=\"line\">Person.prototype.color = <span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\">Person.prototype.food = <span class=\"string\">\"rice\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> shancw = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">shancw.color === <span class=\"string\">\"yellow\"</span>; <span class=\"comment\">// -&gt; true</span></span><br><span class=\"line\">Person.prototype.color = <span class=\"string\">\"black\"</span>;</span><br><span class=\"line\">shancw.color === <span class=\"string\">\"black\"</span>; <span class=\"comment\">// -&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，.prototype 原型对象会自动获得 constructor，指向构造函数。如上述例子，Person.prototype.constructor === Person。</p>\n<img src=\"https://blog.shancw.net/public/uploads/image-20220420193933397.png\" alt=\"image-20220420193933397\"  />\n\n<h4 id=\"prototype-属性-1\"><a href=\"#prototype-属性-1\" class=\"headerlink\" title=\"[[prototype]] 属性\"></a>[[prototype]] 属性</h4><p>每次调用构造函数创建一个新的实例，这个实例内部的[[prototype]]指针就会被赋值给构造函数的原型对象。这个属性是内置属性，外部无法获取。但是 Firefox,Safari,Chrome 会在每个对象上暴露 <code>__proto__</code>，通过这个属性，可以访问到对象的原型</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220420200850513.png\" alt=\"image-20220420200850513\"></p>\n<h3 id=\"执行上下文和作用域\"><a href=\"#执行上下文和作用域\" class=\"headerlink\" title=\"执行上下文和作用域\"></a>执行上下文和作用域</h3><blockquote>\n<p>执行上下文，后续简称为上下文</p>\n</blockquote>\n<h4 id=\"什么是-执行上下文（Evaluation-Context）-：\"><a href=\"#什么是-执行上下文（Evaluation-Context）-：\" class=\"headerlink\" title=\"什么是 执行上下文（Evaluation Context） ：\"></a>什么是 执行上下文（Evaluation Context） ：</h4><p>用来评估和执行 js 代码的环境（an execution context is an abstract concept of an environment where the Javascript code is evaluated and executed. ）；</p>\n<p>包括了所有的可访问数据，以及描述了可执行的行为</p>\n<h4 id=\"执行上下文的分类：\"><a href=\"#执行上下文的分类：\" class=\"headerlink\" title=\"执行上下文的分类：\"></a>执行上下文的分类：</h4><ul>\n<li>全局上下文：根据宿主环境的不同，表示全局上下文的对象也不一样，比如在浏览器中是 window</li>\n<li>函数上下文：每个函数调用都有自己的上下文。</li>\n<li>Eval Function 上下文：开发者几乎用不到，暂不讨论</li>\n</ul>\n<h4 id=\"详细说说函数上下文\"><a href=\"#详细说说函数上下文\" class=\"headerlink\" title=\"详细说说函数上下文\"></a>详细说说函数上下文</h4><p>当代码执行流进入函数时，函数的上下文被推到一个上下文栈上，当执行完毕后，再从这个上下文栈中弹出，讲控制权交给执行上下文。上下文中的代码在执行的时候，会创建一个<strong>作用域链（scope chain）</strong>。以代码为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prop = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secondLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prop = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thirdLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prop = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们代码执行到 thirdLevel 时候，创建的作用域链如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context（third level）- context(second level) - context(first level)</span><br></pre></td></tr></table></figure>\n\n<p>此时，当执行到<code>console.log(a)</code>,对 a 变量的查找，会沿作用域链逐层搜索，最终在 context（first level）找到。</p>\n<h4 id=\"闭包是什么？\"><a href=\"#闭包是什么？\" class=\"headerlink\" title=\"闭包是什么？\"></a>闭包是什么？</h4><p>那么什么是闭包呢？还是以上面例子进行改造</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prop = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secondLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prop = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thirdLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prop = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fourthLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(a, b, c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> closureExample = firstLevel();</span><br></pre></td></tr></table></figure>\n\n<p>看代码，直白解释：</p>\n<p>如果有个函数 A，他的 return 结果是另外一个函数 B，此时我们通过一个变量，接收函数 A 的执行结果，函数 B。那么这就生成了一个闭包。</p>\n<p>对闭包深入理解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = xx;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = xx;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = xx;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 访问a，b，c</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> closure = A(); <span class=\"comment\">// 带着特定作用域链的函数B</span></span><br></pre></td></tr></table></figure>\n\n<p>闭包保存了原本函数 A 在执行完毕后，应该销毁的作用域链。使得即使在 A 结束后，依然可以通过函数 B 对它的内部变量进行访问。</p>\n<p>文章参考：</p>\n<ul>\n<li>红宝书 - 第三章</li>\n<li><a href=\"https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0\" target=\"_blank\" rel=\"noopener\">Understanding Execution Context and Execution Stack in Javascript</a></li>\n</ul>\n<h3 id=\"什么是代理和反射\"><a href=\"#什么是代理和反射\" class=\"headerlink\" title=\"什么是代理和反射\"></a>什么是代理和反射</h3><p>ECMAScript 6 新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。</p>\n<h4 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(trapTarget, property, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(trapTarget === target);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(property);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(receiver === proxy);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trapTarget[property];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h4><p>所有捕获器都可以基于自己的参数重建原始操作, 但并非所有捕获器行为都像 get()那么简单,因此，通过手写代码入法炮制不现实。全局 Reflect 对象就是用来解决这个痛病，上述 handler 通过 Reflect 实现如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: Reflect.<span class=\"keyword\">get</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果我们只是想要创建一个可以捕获所有方法的空代理，通过 Reflect，也可以轻松实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, <span class=\"built_in\">Reflect</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Iteration-amp-Generation\"><a href=\"#Iteration-amp-Generation\" class=\"headerlink\" title=\"Iteration &amp; Generation\"></a>Iteration &amp; Generation</h3><h4 id=\"请介绍下-Generator-函数\"><a href=\"#请介绍下-Generator-函数\" class=\"headerlink\" title=\"请介绍下 Generator 函数\"></a>请介绍下 Generator 函数</h4><p>Generator 函数可以在内部暂停和恢复代码的执行</p>\n<h5 id=\"声明方式\"><a href=\"#声明方式\" class=\"headerlink\" title=\"声明方式\"></a>声明方式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  *generator() &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">  *generator() &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> *genrator2() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"生成器对象\"><a href=\"#生成器对象\" class=\"headerlink\" title=\"生成器对象\"></a>生成器对象</h5><p>调用生成器函数，会生成一个<strong>生成器对象</strong>。生成器对象一开始处于暂停执行状态（suspended)。生成器对象实现了 Iterator 接口，因此具有 next 方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generatorExample</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generatorObj = generatorExample(); <span class=\"comment\">// generatorFn(&lt;suspended&gt;)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObj.next); <span class=\"comment\">// f next() &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>next</p>\n<p>迭代器 API 使用 next()方法在可迭代对象中遍历数据。每次成功调用 next(),都会返回一个 IteratorResult 对象,其中包含迭代器返回的下一个值。若不调用 next(),则无法知道迭代器的当前位置</p>\n<ul>\n<li><p>IteratorResult 对象</p>\n<p>此对象包括两个属性：done 和 value</p>\n<ul>\n<li>done：boolean 值，表示是否还可以再次调用 next</li>\n<li>value：可迭代对象的下一个值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>函数体为空的生成器函数中间不会停留,调用一次 next()就会让生成器到达 done: true 状态</p>\n</li>\n</ul>\n<h5 id=\"yield-中断执行\"><a href=\"#yield-中断执行\" class=\"headerlink\" title=\"yield 中断执行\"></a>yield 中断执行</h5><p>通过 return 关键字退出的生成器函数会处于 done: true 状态。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"bar\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"baz\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generatorObj = generator();</span><br><span class=\"line\">generatorObj.next(); <span class=\"comment\">// &#123;done: false, value: 'foo'&#125;</span></span><br><span class=\"line\">geneatorObj.next(); <span class=\"comment\">// &#123;done: false, value: 'bar'&#125;</span></span><br><span class=\"line\">generatorObj.enxt(); <span class=\"comment\">// &#123;ddone: true, value: 'baz'&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>生成器函数内部的执行流程会针对每个生成器对象区分作用域。在一个生成器对象上调用 next() 不会影响其他生成器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"bar\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"baz\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generatorObj = generator();</span><br><span class=\"line\"><span class=\"keyword\">const</span> generatorObj2 = generator();</span><br><span class=\"line\">generatorObj.next(); <span class=\"comment\">// &#123;done: false, value: 'foo'&#125;</span></span><br><span class=\"line\">geneatorObj2.next(); <span class=\"comment\">// &#123;done: false, value: 'foo'&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> z = <span class=\"keyword\">yield</span> y / <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> it = foo(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next()); <span class=\"comment\">// -&gt; x =5, 5 +1 = 6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">12</span>)); <span class=\"comment\">// -&gt; input 12， y = 12,  12*2/3 = 8</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">13</span>)); <span class=\"comment\">// -&gt; input 13, z = 13, x+y+z = 13 + 8 +6</span></span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next()); <span class=\"comment\">// -&gt; 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">12</span>)); <span class=\"comment\">// -&gt; 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">13</span>)); <span class=\"comment\">// -&gt; 5 + 12 + 4</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先 <code>Generator</code> 函数调用和普通函数不同，它会返回一个迭代器</li>\n<li>当执行第一次 <code>next</code> 时，传参会被忽略，并且函数暂停在 <code>yield (x + 1)</code> 处，所以返回 <code>5 + 1 = 6</code></li>\n<li>当执行第二次 <code>next</code> 时，传入的参数等于上一个 <code>yield</code> 的返回值，如果你不传参，<code>yield</code> 永远返回 <code>undefined</code>。此时 <code>let y = 2 * 12</code>，所以第二个 <code>yield</code> 等于 <code>2 * 12 / 3 = 8</code></li>\n<li>当执行第三次 <code>next</code> 时，传入的参数会传递给 <code>z</code>，所以 <code>z = 13, x = 5, y = 24</code>，相加等于 <code>42</code></li>\n</ul>\n<p>generator 实现 async await 效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fetch</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ajax(url, () =&gt; &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ajax(url1, () =&gt; &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ajax(url2, () =&gt; &#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> it = fetch();</span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = it.next();</span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = it.next();</span><br><span class=\"line\"><span class=\"keyword\">let</span> result3 = it.next();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"【基础】Promise-相关\"><a href=\"#【基础】Promise-相关\" class=\"headerlink\" title=\"【基础】Promise 相关\"></a>【基础】Promise 相关</h3><ul>\n<li><p>Promise 是什么，用来解决什么问题</p>\n<p>解决异步操作的一个方案</p>\n</li>\n<li><p>有哪些状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"【基础】Array-的常用方法\"><a href=\"#【基础】Array-的常用方法\" class=\"headerlink\" title=\"【基础】Array 的常用方法\"></a>【基础】Array 的常用方法</h2><ul>\n<li><p>归类</p>\n<ul>\n<li><p>pop</p>\n</li>\n<li><p>shift</p>\n</li>\n<li><p>unshift</p>\n</li>\n<li><p>indexOf</p>\n</li>\n<li><p>splice</p>\n</li>\n<li><p>slice</p>\n</li>\n<li><p>reduce</p>\n</li>\n<li><p>map</p>\n</li>\n</ul>\n</li>\n<li><p>map 和 reduce 的使用场景？简单概括 reduce 和 map 的用处</p>\n</li>\n</ul>\n<h2 id=\"【进阶】EventLoop\"><a href=\"#【进阶】EventLoop\" class=\"headerlink\" title=\"【进阶】EventLoop\"></a>【进阶】EventLoop</h2><ul>\n<li><p>Promise.resolve().then 和 setTimout(xx, 0) delay 为 0 哪个快？为什么？</p>\n<ul>\n<li><p>Promise 属于 microTask, setTimeout 属于 macroTask。</p>\n</li>\n<li><p>执行顺序为：<code>microTask</code> &gt; <code>UI render</code> &gt; <code>macroTask</code></p>\n</li>\n<li><p><strong>两个 setTimeout 的最小间隔约为 4ms</strong>，</p>\n</li>\n</ul>\n</li>\n<li><p>假设有个函数，需要大量计算，比如从 1 数到 100000000，JS 如果直接执行一个 for loop 或者 while loop 那么很大可能会直接显示：当前页面未响应。我们要怎么样去优化用户的体验</p>\n<ul>\n<li>setTimeout 切分</li>\n<li>web workers: 给 JS 创造多线程运行环境，允许主线程创建 worker 线程，分配任务给后者，主线程运行的同时 worker 线程也在运行，相互不干扰，在 worker 线程运行结束后把结果返回给主线程。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><ul>\n<li><p>key</p>\n<ol>\n<li>key 的作用主要是为了高效的更新虚拟 DOM，其原理是 vue 在 patch 过程中通过 key 可以精准判断两个节点是否是同一个，从而避免频繁更新不同元素，减少 DOM 操作量，提高性能。</li>\n<li>所以用 index 来做 key 会出现复用错的问题，还可以在列表更新时引发一些隐蔽的 bug。key 的作用很简单，就是为了复用。正是因为会复用，比如[10,11,12]，对应 key 是 0,1,2，如果我把 11 这项删了，就是[10,12]，key 是 0,1，这是发现 11 对应的 key 和 12 对应的 key 都是 1</li>\n</ol>\n</li>\n<li><p>v-model</p>\n<ul>\n<li><p>v-model 一句话概括：实现数据的双向绑定</p>\n</li>\n<li><p>和 v-bind 区别？基于 v-bind 实现</p>\n</li>\n<li><p>如何实现一个 v-model 语法糖： 使用 v-bind 获取 value v-on 绑定 input 触发事件</p>\n</li>\n</ul>\n</li>\n<li><p>v-if 和 v-show</p>\n<ul>\n<li><p><strong>v-if</strong> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。</p>\n</li>\n<li><p>相比之下，<strong>v-show</strong> 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。</p>\n</li>\n</ul>\n</li>\n<li><p>通信方式</p>\n<ul>\n<li>$emit</li>\n<li>props</li>\n<li>provide inject 父-&gt;子 非响应式</li>\n<li>vuex</li>\n<li>eventBus 无约束，混乱，不推荐使用</li>\n</ul>\n</li>\n<li><p>vue2 和 vue3 在响应式实现上的区别</p>\n<ul>\n<li>Object.defineProperity VS proxy</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>上次更新时间：2022/4/13</p>\n<h1 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h1><h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ul>\n<li><a href=\"https://github.com/labuladong/fucking-algorithm\" target=\"_blank\" rel=\"noopener\">Fucking Algorithm</a> 105k star</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li><p><a href=\"https://web.qianguyihao.com/\" target=\"_blank\" rel=\"noopener\">千古前端</a></p>\n<p>19.2k star，注重基础知识点</p>\n</li>\n<li><p><a href=\"https://hit-alibaba.github.io/interview/basic/\" target=\"_blank\" rel=\"noopener\">hit-alibaba</a> 4.9k star</p>\n<p>计算机网络了解个大概</p>\n</li>\n</ul>\n<h2 id=\"框架学习\"><a href=\"#框架学习\" class=\"headerlink\" title=\"框架学习\"></a>框架学习</h2><ul>\n<li><a href=\"https://github.com/biaochenxuying/vue-family-mindmap\" target=\"_blank\" rel=\"noopener\">【vue-family-mindmap】 vue2 的 源码思维导图</a></li>\n</ul>\n<h2 id=\"前端面试\"><a href=\"#前端面试\" class=\"headerlink\" title=\"前端面试\"></a>前端面试</h2><ul>\n<li><a href=\"https://juejin.cn/book/6844733763675488269?scrollMenuIndex=1\" target=\"_blank\" rel=\"noopener\">【推荐】yck：前端面试之道</a> 17.5k star</li>\n<li><a href=\"https://muyiy.cn/question/\" target=\"_blank\" rel=\"noopener\">木易杨前端进阶</a></li>\n</ul>","more":"<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><h3 id=\"原始-Primitive-类型有哪些\"><a href=\"#原始-Primitive-类型有哪些\" class=\"headerlink\" title=\"原始(Primitive)类型有哪些\"></a>原始(Primitive)类型有哪些</h3><p>string, number, boolean, <strong>null</strong>，<strong>undefined</strong>， <strong>symbol</strong></p>\n<h4 id=\"简单介绍下-symbol？\"><a href=\"#简单介绍下-symbol？\" class=\"headerlink\" title=\"简单介绍下 symbol？\"></a><strong>简单介绍下 symbol？</strong></h4><ul>\n<li>中文-符号，es6 新增</li>\n<li>用途：确保对象属性使用唯一标识符，不会发生属性冲突的危险</li>\n</ul>\n<h4 id=\"null-和-undefined-的区别？\"><a href=\"#null-和-undefined-的区别？\" class=\"headerlink\" title=\"null 和 undefined 的区别？\"></a><strong>null 和 undefined 的区别？</strong></h4><ul>\n<li>undefined 介绍<ul>\n<li>undefined：当使用 var 或者 let 声明变量但没有初始化时，就相当于给变量赋予了 undefined 【红宝书】</li>\n<li><strong>永远不要故意给某个变量设置为 undefined，undefined 主要用于比较</strong>。</li>\n<li>增加 undefined 值的目的就是正式明确空对象指针（null）和未初始化变量的区别</li>\n</ul>\n</li>\n<li>null 介绍<ul>\n<li>从逻辑上讲，null 值表示一个空对象指针，所以<code>typeof null === object</code></li>\n<li>在定义将来要保存对象值的变量时，建议使用 null 来初始化。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象 (Object)\"></a>对象 (Object)</h3><h4 id=\"什么是对象？\"><a href=\"#什么是对象？\" class=\"headerlink\" title=\"什么是对象？\"></a>什么是对象？</h4><ul>\n<li>一组数据和功能的集合</li>\n<li>Object 是派生其他对象的基类</li>\n<li>每一个 Object 都有如下几个属性和方法<ul>\n<li>constructor 用于创造当前对象的构造函数</li>\n<li>method：hasOwnProperity(properityName) 判断当前对象，不包括原型链，是否存在指定的属性名称</li>\n<li>method：isPrototypeof（object）是否是某个对象的原型</li>\n<li>method：properityIsEnumerable（properityName）判断对象上的某个属性是否可以遍历</li>\n<li>method：toLocalString（）</li>\n<li>method：toString（）</li>\n<li>valueOf：返回对象的字符串，数值或者布尔值标识，通常与 toString 返回值相同</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"array-function-Map-Set-属于对象吗？\"><a href=\"#array-function-Map-Set-属于对象吗？\" class=\"headerlink\" title=\"array function Map Set 属于对象吗？\"></a>array function Map Set 属于对象吗？</h4><ul>\n<li>属于，从 Object 基类派生而来</li>\n</ul>\n<h3 id=\"什么是原型\"><a href=\"#什么是原型\" class=\"headerlink\" title=\"什么是原型\"></a>什么是原型</h3><h4 id=\"prototype-属性\"><a href=\"#prototype-属性\" class=\"headerlink\" title=\".prototype 属性\"></a>.prototype 属性</h4><p>每个函数都会创建一个 prototype 属性，这个属性是一个对象。定义在它上面的属性或者方法可以被共享。比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 自动创建Person.prototype属性</span></span><br><span class=\"line\">Person.prototype.color = <span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\">Person.prototype.food = <span class=\"string\">\"rice\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> shancw = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">shancw.color === <span class=\"string\">\"yellow\"</span>; <span class=\"comment\">// -&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>我们创建 Person 构造函数，他自动创建 prototype 属性。</p>\n</li>\n<li><p>我们对 Person 的 prototype 增加一些属性，它的实例 shancw 可以获取到 prototype 的共享。因此 shancw.color === ‘yellow’</p>\n<blockquote>\n<p>为什么 shancw 实例能够获取到 prototype 原型对象？背后是怎么工作的？</p>\n<p>参考文章：<a href=\"https://blog.shancw.net/2021/01/13/js-prototype-constructor/\">理清<code>constructor</code>，<code>【【prototype】】</code>, <code>prototype</code> 之间的区别</a></p>\n<p><code>[[Get]]</code></p>\n<p>当获取对象的某个属性，比如 obj.a 会触发<code>[[Get]]</code>操作。对于默认情况下的 <code>[[Get]]</code>(没有被 Proxy 代理)会进行如下步骤：</p>\n<ul>\n<li><p>检查对象本身是否有这个属性，如果有就使用</p>\n</li>\n<li><p>如果 a 不再 obj 中，那么就会检查 obj 的 [[prototype]]</p>\n<p>上是否存在 a 属性</p>\n<ul>\n<li>如果存在则返回</li>\n<li>不存在,继续检查 obj 的<code>[[Prototype]]</code>的<code>[[Prototype]]</code>,递归执行</li>\n</ul>\n</li>\n<li><p><code>[[Prototype]]</code>的尽头是 <code>Object.prototype</code>，如果还是没有找到则会返回 undefined，值得一提的是，很多全局的方法就是通过这种方式获取的，如 <code>valueOf, toString, hasOwnProperty</code></p>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>此时如果我们对 Person 的 prototype 进行修改，shancw.color 也会实时发生变化，因此不能将 js 构造函数的 new 实例和 java 中 class 生成的实例相提并论</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 自动创建Person.prototype属性</span></span><br><span class=\"line\">Person.prototype.color = <span class=\"string\">\"yellow\"</span>;</span><br><span class=\"line\">Person.prototype.food = <span class=\"string\">\"rice\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> shancw = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">shancw.color === <span class=\"string\">\"yellow\"</span>; <span class=\"comment\">// -&gt; true</span></span><br><span class=\"line\">Person.prototype.color = <span class=\"string\">\"black\"</span>;</span><br><span class=\"line\">shancw.color === <span class=\"string\">\"black\"</span>; <span class=\"comment\">// -&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，.prototype 原型对象会自动获得 constructor，指向构造函数。如上述例子，Person.prototype.constructor === Person。</p>\n<img src=\"https://blog.shancw.net/public/uploads/image-20220420193933397.png\" alt=\"image-20220420193933397\"  />\n\n<h4 id=\"prototype-属性-1\"><a href=\"#prototype-属性-1\" class=\"headerlink\" title=\"[[prototype]] 属性\"></a>[[prototype]] 属性</h4><p>每次调用构造函数创建一个新的实例，这个实例内部的[[prototype]]指针就会被赋值给构造函数的原型对象。这个属性是内置属性，外部无法获取。但是 Firefox,Safari,Chrome 会在每个对象上暴露 <code>__proto__</code>，通过这个属性，可以访问到对象的原型</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220420200850513.png\" alt=\"image-20220420200850513\"></p>\n<h3 id=\"执行上下文和作用域\"><a href=\"#执行上下文和作用域\" class=\"headerlink\" title=\"执行上下文和作用域\"></a>执行上下文和作用域</h3><blockquote>\n<p>执行上下文，后续简称为上下文</p>\n</blockquote>\n<h4 id=\"什么是-执行上下文（Evaluation-Context）-：\"><a href=\"#什么是-执行上下文（Evaluation-Context）-：\" class=\"headerlink\" title=\"什么是 执行上下文（Evaluation Context） ：\"></a>什么是 执行上下文（Evaluation Context） ：</h4><p>用来评估和执行 js 代码的环境（an execution context is an abstract concept of an environment where the Javascript code is evaluated and executed. ）；</p>\n<p>包括了所有的可访问数据，以及描述了可执行的行为</p>\n<h4 id=\"执行上下文的分类：\"><a href=\"#执行上下文的分类：\" class=\"headerlink\" title=\"执行上下文的分类：\"></a>执行上下文的分类：</h4><ul>\n<li>全局上下文：根据宿主环境的不同，表示全局上下文的对象也不一样，比如在浏览器中是 window</li>\n<li>函数上下文：每个函数调用都有自己的上下文。</li>\n<li>Eval Function 上下文：开发者几乎用不到，暂不讨论</li>\n</ul>\n<h4 id=\"详细说说函数上下文\"><a href=\"#详细说说函数上下文\" class=\"headerlink\" title=\"详细说说函数上下文\"></a>详细说说函数上下文</h4><p>当代码执行流进入函数时，函数的上下文被推到一个上下文栈上，当执行完毕后，再从这个上下文栈中弹出，讲控制权交给执行上下文。上下文中的代码在执行的时候，会创建一个<strong>作用域链（scope chain）</strong>。以代码为例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prop = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secondLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prop = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thirdLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prop = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当我们代码执行到 thirdLevel 时候，创建的作用域链如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context（third level）- context(second level) - context(first level)</span><br></pre></td></tr></table></figure>\n\n<p>此时，当执行到<code>console.log(a)</code>,对 a 变量的查找，会沿作用域链逐层搜索，最终在 context（first level）找到。</p>\n<h4 id=\"闭包是什么？\"><a href=\"#闭包是什么？\" class=\"headerlink\" title=\"闭包是什么？\"></a>闭包是什么？</h4><p>那么什么是闭包呢？还是以上面例子进行改造</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prop = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secondLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prop = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">thirdLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prop = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fourthLevel</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(a, b, c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> closureExample = firstLevel();</span><br></pre></td></tr></table></figure>\n\n<p>看代码，直白解释：</p>\n<p>如果有个函数 A，他的 return 结果是另外一个函数 B，此时我们通过一个变量，接收函数 A 的执行结果，函数 B。那么这就生成了一个闭包。</p>\n<p>对闭包深入理解：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = xx;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> b = xx;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = xx;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 访问a，b，c</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> closure = A(); <span class=\"comment\">// 带着特定作用域链的函数B</span></span><br></pre></td></tr></table></figure>\n\n<p>闭包保存了原本函数 A 在执行完毕后，应该销毁的作用域链。使得即使在 A 结束后，依然可以通过函数 B 对它的内部变量进行访问。</p>\n<p>文章参考：</p>\n<ul>\n<li>红宝书 - 第三章</li>\n<li><a href=\"https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0\" target=\"_blank\" rel=\"noopener\">Understanding Execution Context and Execution Stack in Javascript</a></li>\n</ul>\n<h3 id=\"什么是代理和反射\"><a href=\"#什么是代理和反射\" class=\"headerlink\" title=\"什么是代理和反射\"></a>什么是代理和反射</h3><p>ECMAScript 6 新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。</p>\n<h4 id=\"proxy\"><a href=\"#proxy\" class=\"headerlink\" title=\"proxy\"></a>proxy</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(trapTarget, property, receiver) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(trapTarget === target);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(property);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(receiver === proxy);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trapTarget[property];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h4><p>所有捕获器都可以基于自己的参数重建原始操作, 但并非所有捕获器行为都像 get()那么简单,因此，通过手写代码入法炮制不现实。全局 Reflect 对象就是用来解决这个痛病，上述 handler 通过 Reflect 实现如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: Reflect.<span class=\"keyword\">get</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果我们只是想要创建一个可以捕获所有方法的空代理，通过 Reflect，也可以轻松实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, <span class=\"built_in\">Reflect</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Iteration-amp-Generation\"><a href=\"#Iteration-amp-Generation\" class=\"headerlink\" title=\"Iteration &amp; Generation\"></a>Iteration &amp; Generation</h3><h4 id=\"请介绍下-Generator-函数\"><a href=\"#请介绍下-Generator-函数\" class=\"headerlink\" title=\"请介绍下 Generator 函数\"></a>请介绍下 Generator 函数</h4><p>Generator 函数可以在内部暂停和恢复代码的执行</p>\n<h5 id=\"声明方式\"><a href=\"#声明方式\" class=\"headerlink\" title=\"声明方式\"></a>声明方式</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> generator = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  *generator() &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">  *generator() &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> *genrator2() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"生成器对象\"><a href=\"#生成器对象\" class=\"headerlink\" title=\"生成器对象\"></a>生成器对象</h5><p>调用生成器函数，会生成一个<strong>生成器对象</strong>。生成器对象一开始处于暂停执行状态（suspended)。生成器对象实现了 Iterator 接口，因此具有 next 方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generatorExample</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generatorObj = generatorExample(); <span class=\"comment\">// generatorFn(&lt;suspended&gt;)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(generatorObj.next); <span class=\"comment\">// f next() &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>next</p>\n<p>迭代器 API 使用 next()方法在可迭代对象中遍历数据。每次成功调用 next(),都会返回一个 IteratorResult 对象,其中包含迭代器返回的下一个值。若不调用 next(),则无法知道迭代器的当前位置</p>\n<ul>\n<li><p>IteratorResult 对象</p>\n<p>此对象包括两个属性：done 和 value</p>\n<ul>\n<li>done：boolean 值，表示是否还可以再次调用 next</li>\n<li>value：可迭代对象的下一个值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>函数体为空的生成器函数中间不会停留,调用一次 next()就会让生成器到达 done: true 状态</p>\n</li>\n</ul>\n<h5 id=\"yield-中断执行\"><a href=\"#yield-中断执行\" class=\"headerlink\" title=\"yield 中断执行\"></a>yield 中断执行</h5><p>通过 return 关键字退出的生成器函数会处于 done: true 状态。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"bar\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"baz\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generatorObj = generator();</span><br><span class=\"line\">generatorObj.next(); <span class=\"comment\">// &#123;done: false, value: 'foo'&#125;</span></span><br><span class=\"line\">geneatorObj.next(); <span class=\"comment\">// &#123;done: false, value: 'bar'&#125;</span></span><br><span class=\"line\">generatorObj.enxt(); <span class=\"comment\">// &#123;ddone: true, value: 'baz'&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>生成器函数内部的执行流程会针对每个生成器对象区分作用域。在一个生成器对象上调用 next() 不会影响其他生成器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"bar\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"baz\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> generatorObj = generator();</span><br><span class=\"line\"><span class=\"keyword\">const</span> generatorObj2 = generator();</span><br><span class=\"line\">generatorObj.next(); <span class=\"comment\">// &#123;done: false, value: 'foo'&#125;</span></span><br><span class=\"line\">geneatorObj2.next(); <span class=\"comment\">// &#123;done: false, value: 'foo'&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> x + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> z = <span class=\"keyword\">yield</span> y / <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> it = foo(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next()); <span class=\"comment\">// -&gt; x =5, 5 +1 = 6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">12</span>)); <span class=\"comment\">// -&gt; input 12， y = 12,  12*2/3 = 8</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">13</span>)); <span class=\"comment\">// -&gt; input 13, z = 13, x+y+z = 13 + 8 +6</span></span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next()); <span class=\"comment\">// -&gt; 12</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">12</span>)); <span class=\"comment\">// -&gt; 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(it.next(<span class=\"number\">13</span>)); <span class=\"comment\">// -&gt; 5 + 12 + 4</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先 <code>Generator</code> 函数调用和普通函数不同，它会返回一个迭代器</li>\n<li>当执行第一次 <code>next</code> 时，传参会被忽略，并且函数暂停在 <code>yield (x + 1)</code> 处，所以返回 <code>5 + 1 = 6</code></li>\n<li>当执行第二次 <code>next</code> 时，传入的参数等于上一个 <code>yield</code> 的返回值，如果你不传参，<code>yield</code> 永远返回 <code>undefined</code>。此时 <code>let y = 2 * 12</code>，所以第二个 <code>yield</code> 等于 <code>2 * 12 / 3 = 8</code></li>\n<li>当执行第三次 <code>next</code> 时，传入的参数会传递给 <code>z</code>，所以 <code>z = 13, x = 5, y = 24</code>，相加等于 <code>42</code></li>\n</ul>\n<p>generator 实现 async await 效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fetch</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ajax(url, () =&gt; &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ajax(url1, () =&gt; &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> ajax(url2, () =&gt; &#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> it = fetch();</span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = it.next();</span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = it.next();</span><br><span class=\"line\"><span class=\"keyword\">let</span> result3 = it.next();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"【基础】Promise-相关\"><a href=\"#【基础】Promise-相关\" class=\"headerlink\" title=\"【基础】Promise 相关\"></a>【基础】Promise 相关</h3><ul>\n<li><p>Promise 是什么，用来解决什么问题</p>\n<p>解决异步操作的一个方案</p>\n</li>\n<li><p>有哪些状态</p>\n<ul>\n<li>pending</li>\n<li>fulfilled</li>\n<li>rejected</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"【基础】Array-的常用方法\"><a href=\"#【基础】Array-的常用方法\" class=\"headerlink\" title=\"【基础】Array 的常用方法\"></a>【基础】Array 的常用方法</h2><ul>\n<li><p>归类</p>\n<ul>\n<li><p>pop</p>\n</li>\n<li><p>shift</p>\n</li>\n<li><p>unshift</p>\n</li>\n<li><p>indexOf</p>\n</li>\n<li><p>splice</p>\n</li>\n<li><p>slice</p>\n</li>\n<li><p>reduce</p>\n</li>\n<li><p>map</p>\n</li>\n</ul>\n</li>\n<li><p>map 和 reduce 的使用场景？简单概括 reduce 和 map 的用处</p>\n</li>\n</ul>\n<h2 id=\"【进阶】EventLoop\"><a href=\"#【进阶】EventLoop\" class=\"headerlink\" title=\"【进阶】EventLoop\"></a>【进阶】EventLoop</h2><ul>\n<li><p>Promise.resolve().then 和 setTimout(xx, 0) delay 为 0 哪个快？为什么？</p>\n<ul>\n<li><p>Promise 属于 microTask, setTimeout 属于 macroTask。</p>\n</li>\n<li><p>执行顺序为：<code>microTask</code> &gt; <code>UI render</code> &gt; <code>macroTask</code></p>\n</li>\n<li><p><strong>两个 setTimeout 的最小间隔约为 4ms</strong>，</p>\n</li>\n</ul>\n</li>\n<li><p>假设有个函数，需要大量计算，比如从 1 数到 100000000，JS 如果直接执行一个 for loop 或者 while loop 那么很大可能会直接显示：当前页面未响应。我们要怎么样去优化用户的体验</p>\n<ul>\n<li>setTimeout 切分</li>\n<li>web workers: 给 JS 创造多线程运行环境，允许主线程创建 worker 线程，分配任务给后者，主线程运行的同时 worker 线程也在运行，相互不干扰，在 worker 线程运行结束后把结果返回给主线程。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><ul>\n<li><p>key</p>\n<ol>\n<li>key 的作用主要是为了高效的更新虚拟 DOM，其原理是 vue 在 patch 过程中通过 key 可以精准判断两个节点是否是同一个，从而避免频繁更新不同元素，减少 DOM 操作量，提高性能。</li>\n<li>所以用 index 来做 key 会出现复用错的问题，还可以在列表更新时引发一些隐蔽的 bug。key 的作用很简单，就是为了复用。正是因为会复用，比如[10,11,12]，对应 key 是 0,1,2，如果我把 11 这项删了，就是[10,12]，key 是 0,1，这是发现 11 对应的 key 和 12 对应的 key 都是 1</li>\n</ol>\n</li>\n<li><p>v-model</p>\n<ul>\n<li><p>v-model 一句话概括：实现数据的双向绑定</p>\n</li>\n<li><p>和 v-bind 区别？基于 v-bind 实现</p>\n</li>\n<li><p>如何实现一个 v-model 语法糖： 使用 v-bind 获取 value v-on 绑定 input 触发事件</p>\n</li>\n</ul>\n</li>\n<li><p>v-if 和 v-show</p>\n<ul>\n<li><p><strong>v-if</strong> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。</p>\n</li>\n<li><p>相比之下，<strong>v-show</strong> 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。</p>\n</li>\n</ul>\n</li>\n<li><p>通信方式</p>\n<ul>\n<li>$emit</li>\n<li>props</li>\n<li>provide inject 父-&gt;子 非响应式</li>\n<li>vuex</li>\n<li>eventBus 无约束，混乱，不推荐使用</li>\n</ul>\n</li>\n<li><p>vue2 和 vue3 在响应式实现上的区别</p>\n<ul>\n<li>Object.defineProperity VS proxy</li>\n</ul>\n</li>\n</ul>"},{"title":"script - async, defer 区别","toc":true,"date":"2021-03-29T16:00:00.000Z","_content":"\n浏览器加载 html 时候，如果遇到 script 脚本标签，默认情况下会立即执行该脚本。对于外部脚本如 `<script src=\"\"></script>`也是一样，会等到下载完，并执行完才会继续加载剩余的 html\n这篇文章介绍了 上述情况的两种解决办法 async， defer\n\n<!-- more -->\n\n## defer\n\n**defer 特性只适用于外部脚本，如果 script 标签没有 src 那么会忽略 defer 特性**\n\n- 具有 defer 特性的脚本不会阻塞页面。\n- 具有 defer 特性的脚本总是要等到 DOM 解析完毕，但在 DOMContentLoaded 事件之前执行。\n\n* 如果有多个 defer script 标签，那么会按顺序执行，如下代码:\n  ```html\n  <script\n    defer\n    src=\"https://javascript.info/article/script-async-defer/long.js\"\n  /></script>\n  <script\n    defer\n    src=\"https://javascript.info/article/script-async-defer/small.js\"\n  ></script>\n  ```\n  在上面的示例中，两个脚本是并行下载的。small.js 可能会先下载完成。但是，defer 特性会保证 long.js 执行完成后才会去执行 small.js\n\n## async\n\n**async 特性意味着脚本是完全独立的。多个 async script 之间不存在顺序执行**\n\n- 浏览器不会因 async 脚本而阻塞（与 defer 类似）。\n- 其他脚本不会等待 async 脚本加载完成，同样，async 脚本也不会等待其他脚本。\n- DOMContentLoaded 和异步脚本不会彼此等待：\n\nasync 常用于独立脚本，例如计数器或广告，这些脚本的相对执行顺序无关紧要\n","source":"_posts/html-script-defer-async.md","raw":"---\ntitle: script - async, defer 区别\ncategories: [前端]\ntags: []\ntoc: true\ndate: 2021/3/30\n---\n\n浏览器加载 html 时候，如果遇到 script 脚本标签，默认情况下会立即执行该脚本。对于外部脚本如 `<script src=\"\"></script>`也是一样，会等到下载完，并执行完才会继续加载剩余的 html\n这篇文章介绍了 上述情况的两种解决办法 async， defer\n\n<!-- more -->\n\n## defer\n\n**defer 特性只适用于外部脚本，如果 script 标签没有 src 那么会忽略 defer 特性**\n\n- 具有 defer 特性的脚本不会阻塞页面。\n- 具有 defer 特性的脚本总是要等到 DOM 解析完毕，但在 DOMContentLoaded 事件之前执行。\n\n* 如果有多个 defer script 标签，那么会按顺序执行，如下代码:\n  ```html\n  <script\n    defer\n    src=\"https://javascript.info/article/script-async-defer/long.js\"\n  /></script>\n  <script\n    defer\n    src=\"https://javascript.info/article/script-async-defer/small.js\"\n  ></script>\n  ```\n  在上面的示例中，两个脚本是并行下载的。small.js 可能会先下载完成。但是，defer 特性会保证 long.js 执行完成后才会去执行 small.js\n\n## async\n\n**async 特性意味着脚本是完全独立的。多个 async script 之间不存在顺序执行**\n\n- 浏览器不会因 async 脚本而阻塞（与 defer 类似）。\n- 其他脚本不会等待 async 脚本加载完成，同样，async 脚本也不会等待其他脚本。\n- DOMContentLoaded 和异步脚本不会彼此等待：\n\nasync 常用于独立脚本，例如计数器或广告，这些脚本的相对执行顺序无关紧要\n","slug":"html-script-defer-async","published":1,"updated":"2021-04-22T08:16:29.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jr002rgoswgvo0bh71","content":"<p>浏览器加载 html 时候，如果遇到 script 脚本标签，默认情况下会立即执行该脚本。对于外部脚本如 <code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code>也是一样，会等到下载完，并执行完才会继续加载剩余的 html<br>这篇文章介绍了 上述情况的两种解决办法 async， defer</p>\n<a id=\"more\"></a>\n\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p><strong>defer 特性只适用于外部脚本，如果 script 标签没有 src 那么会忽略 defer 特性</strong></p>\n<ul>\n<li>具有 defer 特性的脚本不会阻塞页面。</li>\n<li>具有 defer 特性的脚本总是要等到 DOM 解析完毕，但在 DOMContentLoaded 事件之前执行。</li>\n</ul>\n<ul>\n<li>如果有多个 defer script 标签，那么会按顺序执行，如下代码:<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">defer</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"https://javascript.info/article/script-async-defer/long.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">defer</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"https://javascript.info/article/script-async-defer/small.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n在上面的示例中，两个脚本是并行下载的。small.js 可能会先下载完成。但是，defer 特性会保证 long.js 执行完成后才会去执行 small.js</li>\n</ul>\n<h2 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h2><p><strong>async 特性意味着脚本是完全独立的。多个 async script 之间不存在顺序执行</strong></p>\n<ul>\n<li>浏览器不会因 async 脚本而阻塞（与 defer 类似）。</li>\n<li>其他脚本不会等待 async 脚本加载完成，同样，async 脚本也不会等待其他脚本。</li>\n<li>DOMContentLoaded 和异步脚本不会彼此等待：</li>\n</ul>\n<p>async 常用于独立脚本，例如计数器或广告，这些脚本的相对执行顺序无关紧要</p>\n","site":{"data":{}},"excerpt":"<p>浏览器加载 html 时候，如果遇到 script 脚本标签，默认情况下会立即执行该脚本。对于外部脚本如 <code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code>也是一样，会等到下载完，并执行完才会继续加载剩余的 html<br>这篇文章介绍了 上述情况的两种解决办法 async， defer</p>","more":"<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p><strong>defer 特性只适用于外部脚本，如果 script 标签没有 src 那么会忽略 defer 特性</strong></p>\n<ul>\n<li>具有 defer 特性的脚本不会阻塞页面。</li>\n<li>具有 defer 特性的脚本总是要等到 DOM 解析完毕，但在 DOMContentLoaded 事件之前执行。</li>\n</ul>\n<ul>\n<li>如果有多个 defer script 标签，那么会按顺序执行，如下代码:<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">defer</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"https://javascript.info/article/script-async-defer/long.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">defer</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"https://javascript.info/article/script-async-defer/small.js\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n在上面的示例中，两个脚本是并行下载的。small.js 可能会先下载完成。但是，defer 特性会保证 long.js 执行完成后才会去执行 small.js</li>\n</ul>\n<h2 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h2><p><strong>async 特性意味着脚本是完全独立的。多个 async script 之间不存在顺序执行</strong></p>\n<ul>\n<li>浏览器不会因 async 脚本而阻塞（与 defer 类似）。</li>\n<li>其他脚本不会等待 async 脚本加载完成，同样，async 脚本也不会等待其他脚本。</li>\n<li>DOMContentLoaded 和异步脚本不会彼此等待：</li>\n</ul>\n<p>async 常用于独立脚本，例如计数器或广告，这些脚本的相对执行顺序无关紧要</p>"},{"title":"各种API 实现","toc":true,"date":"2021-01-06T16:00:00.000Z","_content":"\n## lodash get 实现 01/06\n\n```js\nvar object = { a: [{ b: { c: 3 } }] };\n\n_.get(object, \"a[0].b.c\");\n// => 3\n\n_.get(object, [\"a\", \"0\", \"b\", \"c\"]);\n// => 3\n\n_.get(object, \"a.b.c\", \"default\");\n// => 'default'\n```\n\n```js\nfunction get(obj, path, defaultValue) {\n  const arr = typeof path === \"string\" ? getPath(path).split(\".\") : path;\n  return getCore(arr, obj);\n  function getCore(pathArr, acc) {\n    if (pathArr.length === 0) return acc;\n    else if (!acc[pathArr[0]]) return defaultValue;\n    else {\n      return getCore(pathArr.slice(1), acc[pathArr[0]]);\n    }\n  }\n\n  function getPath(str) {\n    const newStr = str.replace(\n      /(\\[)([0-9]+)(\\])/g,\n      (match, $1, $2, $3) => `.${$2}`\n    );\n    return newStr;\n  }\n}\n```\n\n## lodash - curry 实现\n\nexample\n\n```js\nvar abc = function (a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\nfunction curry(fn: Function) {\n  let args = [];\n  return function curried(...tempArgs) {\n    args.push(...tempArgs);\n    if (args.length === fn.length) return fn.call(this, args);\n    else return curried;\n  };\n}\n```\n\n## Proxy 实现循环数组下标如 arr[-1] === arr[arr.length - 1] arr[arr.length ] = arr[0] 01/07\n\n```js\nfunction proxyArr(originArr) {\n  return new Proxy(originArr, {\n    get(target, key) {\n      return isInRange(Number(key), target)\n        ? target[key]\n        : getRangedKey(Number(key), target);\n    },\n  });\n\n  function isInRange(index, target) {\n    return 0 <= Number(index) && Number(index) <= target.length - 1;\n  }\n  function getRangedKey(key, target) {\n    let rangedKey = key;\n    const range = target.length;\n    if (key >= 0) {\n      while (rangedKey >= target.length) {\n        rangedKey -= range;\n      }\n    } else {\n      while (rangedKey < 0) {\n        rangedKey += range;\n      }\n    }\n    return target[rangedKey];\n  }\n}\n```\n","source":"_posts/implement-API.md","raw":"---\ntitle: 各种API 实现\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/1/7\n---\n\n## lodash get 实现 01/06\n\n```js\nvar object = { a: [{ b: { c: 3 } }] };\n\n_.get(object, \"a[0].b.c\");\n// => 3\n\n_.get(object, [\"a\", \"0\", \"b\", \"c\"]);\n// => 3\n\n_.get(object, \"a.b.c\", \"default\");\n// => 'default'\n```\n\n```js\nfunction get(obj, path, defaultValue) {\n  const arr = typeof path === \"string\" ? getPath(path).split(\".\") : path;\n  return getCore(arr, obj);\n  function getCore(pathArr, acc) {\n    if (pathArr.length === 0) return acc;\n    else if (!acc[pathArr[0]]) return defaultValue;\n    else {\n      return getCore(pathArr.slice(1), acc[pathArr[0]]);\n    }\n  }\n\n  function getPath(str) {\n    const newStr = str.replace(\n      /(\\[)([0-9]+)(\\])/g,\n      (match, $1, $2, $3) => `.${$2}`\n    );\n    return newStr;\n  }\n}\n```\n\n## lodash - curry 实现\n\nexample\n\n```js\nvar abc = function (a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\nfunction curry(fn: Function) {\n  let args = [];\n  return function curried(...tempArgs) {\n    args.push(...tempArgs);\n    if (args.length === fn.length) return fn.call(this, args);\n    else return curried;\n  };\n}\n```\n\n## Proxy 实现循环数组下标如 arr[-1] === arr[arr.length - 1] arr[arr.length ] = arr[0] 01/07\n\n```js\nfunction proxyArr(originArr) {\n  return new Proxy(originArr, {\n    get(target, key) {\n      return isInRange(Number(key), target)\n        ? target[key]\n        : getRangedKey(Number(key), target);\n    },\n  });\n\n  function isInRange(index, target) {\n    return 0 <= Number(index) && Number(index) <= target.length - 1;\n  }\n  function getRangedKey(key, target) {\n    let rangedKey = key;\n    const range = target.length;\n    if (key >= 0) {\n      while (rangedKey >= target.length) {\n        rangedKey -= range;\n      }\n    } else {\n      while (rangedKey < 0) {\n        rangedKey += range;\n      }\n    }\n    return target[rangedKey];\n  }\n}\n```\n","slug":"implement-API","published":1,"updated":"2021-04-22T08:27:20.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7js002vgoswe7ri1m7r","content":"<h2 id=\"lodash-get-实现-01-06\"><a href=\"#lodash-get-实现-01-06\" class=\"headerlink\" title=\"lodash get 实现 01/06\"></a>lodash get 实现 01/06</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123; <span class=\"attr\">a</span>: [&#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125; &#125;] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_.get(object, <span class=\"string\">\"a[0].b.c\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.get(object, [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"0\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.get(object, <span class=\"string\">\"a.b.c\"</span>, <span class=\"string\">\"default\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'default'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">obj, path, defaultValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = <span class=\"keyword\">typeof</span> path === <span class=\"string\">\"string\"</span> ? getPath(path).split(<span class=\"string\">\".\"</span>) : path;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getCore(arr, obj);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCore</span>(<span class=\"params\">pathArr, acc</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pathArr.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!acc[pathArr[<span class=\"number\">0</span>]]) <span class=\"keyword\">return</span> defaultValue;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> getCore(pathArr.slice(<span class=\"number\">1</span>), acc[pathArr[<span class=\"number\">0</span>]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPath</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newStr = str.replace(</span><br><span class=\"line\">      /(\\[)([<span class=\"number\">0</span><span class=\"number\">-9</span>]+)(\\])/g,</span><br><span class=\"line\">      (match, $<span class=\"number\">1</span>, $<span class=\"number\">2</span>, $<span class=\"number\">3</span>) =&gt; <span class=\"string\">`.<span class=\"subst\">$&#123;$<span class=\"number\">2</span>&#125;</span>`</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"lodash-curry-实现\"><a href=\"#lodash-curry-实现\" class=\"headerlink\" title=\"lodash - curry 实现\"></a>lodash - curry 实现</h2><p>example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [a, b, c];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> curried = curry(abc);</span><br><span class=\"line\"></span><br><span class=\"line\">curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn: Function</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">...tempArgs</span>) </span>&#123;</span><br><span class=\"line\">    args.push(...tempArgs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length === fn.length) <span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> curried;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Proxy-实现循环数组下标如-arr-1-arr-arr-length-1-arr-arr-length-arr-0-01-07\"><a href=\"#Proxy-实现循环数组下标如-arr-1-arr-arr-length-1-arr-arr-length-arr-0-01-07\" class=\"headerlink\" title=\"Proxy 实现循环数组下标如 arr[-1] === arr[arr.length - 1] arr[arr.length ] = arr[0] 01/07\"></a>Proxy 实现循环数组下标如 arr[-1] === arr[arr.length - 1] arr[arr.length ] = arr[0] 01/07</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxyArr</span>(<span class=\"params\">originArr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(originArr, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>(target, key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> isInRange(<span class=\"built_in\">Number</span>(key), target)</span><br><span class=\"line\">        ? target[key]</span><br><span class=\"line\">        : getRangedKey(<span class=\"built_in\">Number</span>(key), target);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInRange</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> &lt;= <span class=\"built_in\">Number</span>(index) &amp;&amp; <span class=\"built_in\">Number</span>(index) &lt;= target.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRangedKey</span>(<span class=\"params\">key, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rangedKey = key;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> range = target.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (rangedKey &gt;= target.length) &#123;</span><br><span class=\"line\">        rangedKey -= range;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (rangedKey &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        rangedKey += range;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[rangedKey];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"lodash-get-实现-01-06\"><a href=\"#lodash-get-实现-01-06\" class=\"headerlink\" title=\"lodash get 实现 01/06\"></a>lodash get 实现 01/06</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123; <span class=\"attr\">a</span>: [&#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125; &#125;] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_.get(object, <span class=\"string\">\"a[0].b.c\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.get(object, [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"0\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.get(object, <span class=\"string\">\"a.b.c\"</span>, <span class=\"string\">\"default\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; 'default'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">obj, path, defaultValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = <span class=\"keyword\">typeof</span> path === <span class=\"string\">\"string\"</span> ? getPath(path).split(<span class=\"string\">\".\"</span>) : path;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getCore(arr, obj);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCore</span>(<span class=\"params\">pathArr, acc</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pathArr.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!acc[pathArr[<span class=\"number\">0</span>]]) <span class=\"keyword\">return</span> defaultValue;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> getCore(pathArr.slice(<span class=\"number\">1</span>), acc[pathArr[<span class=\"number\">0</span>]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPath</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newStr = str.replace(</span><br><span class=\"line\">      /(\\[)([<span class=\"number\">0</span><span class=\"number\">-9</span>]+)(\\])/g,</span><br><span class=\"line\">      (match, $<span class=\"number\">1</span>, $<span class=\"number\">2</span>, $<span class=\"number\">3</span>) =&gt; <span class=\"string\">`.<span class=\"subst\">$&#123;$<span class=\"number\">2</span>&#125;</span>`</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"lodash-curry-实现\"><a href=\"#lodash-curry-实现\" class=\"headerlink\" title=\"lodash - curry 实现\"></a>lodash - curry 实现</h2><p>example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> abc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [a, b, c];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> curried = curry(abc);</span><br><span class=\"line\"></span><br><span class=\"line\">curried(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">curried(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn: Function</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">...tempArgs</span>) </span>&#123;</span><br><span class=\"line\">    args.push(...tempArgs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length === fn.length) <span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> curried;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Proxy-实现循环数组下标如-arr-1-arr-arr-length-1-arr-arr-length-arr-0-01-07\"><a href=\"#Proxy-实现循环数组下标如-arr-1-arr-arr-length-1-arr-arr-length-arr-0-01-07\" class=\"headerlink\" title=\"Proxy 实现循环数组下标如 arr[-1] === arr[arr.length - 1] arr[arr.length ] = arr[0] 01/07\"></a>Proxy 实现循环数组下标如 arr[-1] === arr[arr.length - 1] arr[arr.length ] = arr[0] 01/07</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxyArr</span>(<span class=\"params\">originArr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(originArr, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>(target, key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> isInRange(<span class=\"built_in\">Number</span>(key), target)</span><br><span class=\"line\">        ? target[key]</span><br><span class=\"line\">        : getRangedKey(<span class=\"built_in\">Number</span>(key), target);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isInRange</span>(<span class=\"params\">index, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span> &lt;= <span class=\"built_in\">Number</span>(index) &amp;&amp; <span class=\"built_in\">Number</span>(index) &lt;= target.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRangedKey</span>(<span class=\"params\">key, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rangedKey = key;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> range = target.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (rangedKey &gt;= target.length) &#123;</span><br><span class=\"line\">        rangedKey -= range;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (rangedKey &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        rangedKey += range;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target[rangedKey];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Liquibase简单使用","toc":true,"date":"2021-11-14T16:00:00.000Z","_content":"\n这篇文章介绍了使用 JPA 与 Liquibase 来生成实体的基本方式。\n\n详细配置参考[JPA 快速适配多种数据库](https://zeral.cn/persistence/jpa-%E5%BF%AB%E9%80%9F%E9%80%82%E9%85%8D%E5%A4%9A%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93/)\n\n| Liquibase data type | SQL Server data type | Oracle data type | MySQL     | PostgreSQL                 | Java 类型            |\n| ------------------- | -------------------- | ---------------- | --------- | -------------------------- | -------------------- |\n| bigint              | bigint               | number(38,0)     | bigint    | bigint/bigserial           | java.math.BigInteger |\n| currency            | money                | number(15,2)     | decimal   | decimal                    | java.math.BigDecimal |\n| decimal             | decimal              | decimal          | decimal   | decimal                    | java.math.BigDecimal |\n| number              | numeric              | number           | numeric   | numeric                    | java.math.BigDecimal |\n| double              | float                | float(24)        | double    | double precision           | java.lang.Double     |\n| float               | float                | float            | float     | float                      | java.lang.Float      |\n| int                 | int                  | integer          | int       | integer/serial             | java.lang.Integer    |\n| mediumint           | int                  | mediumint        | mediumint | mediumint                  | java.lang.Integer    |\n| smallint            | smallint             | number(5)        | smallint  | smallint/smallserial       | java.lang.Integer    |\n| tinyint             | tinyint              | number(3)        | tinyint   | smallint                   | java.lang.Integer    |\n| blob                | varbinary(max)       | blob             | blob      | oid                        | java.lang.byte[]     |\n| boolean             | bit                  | number(1)        | bit       | bit                        | java.lang.Boolean    |\n| char                | char                 | char             | char      | character                  | java.lang.String     |\n| clob                | nvarchar(max)        | clob             | longtext  | text                       | java.lang.String     |\n| uuid                | uniqueidentifier     | raw(16)          | char(36)  | uuid                       | java.lang.String     |\n| varchar             | varchar              | varchar2         | varchar   | varchar/character(varying) | java.lang.String     |\n| nchar               | nchar                | nchar            | nchar     | nchar                      | java.lang.String     |\n| nvarchar            | nvarchar             | nvarchar2        | nvarchar  | varchar                    | java.lang.String     |\n| datetime            | datetime             | timestamp        | timestamp | timestamp                  | java.sql.Timestamp   |\n| timestamp           | datetime             | timestamp        | timestamp | timestamp                  | java.sql.Timestamp   |\n| time                | time                 | date             | time      | time                       | java.sql.Time        |\n| date                | date                 | date             | date      | date                       | java.sql.Date        |\n\n<!-- more -->\n\nliquibase 通过增加 changelog 的方式来生成或修改实体。\n\nchangelog 存放 位置：resources/config/liquibase/changelog/...\n\nchanglog 定义好后，需要在 master.xml 中添加对应的 changelog： resources/config/liquibase/master.xml\n\n## 实体相关操作\n\n### 基本结构\n\n- 每个 changelog 文件都必须通过 databaseChangeLog 包裹。\n- changeSet 用于定义一个变更，可以有多个 changeSet。changeSet 必须要有 id 来标识，id 必须唯一。\n  此外 author 可以指定变更人，date 可以指定变更时间。\n  id 的指定一般格式为: YYYYMMDDHHMM-第几个 changeSet，比如 202111150854-1\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<databaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\">\n  <changeSet id=\"202111150854-0\" author=\"wu_sc\">\n  </changeSet>\n</databaseChangeLog>\n```\n\n### 建表\n\n通过 createTable 标签可以生成表，具体操作如下：\n\n- `column` 标签用于定义列，其中 name 属性用于指定列名，type 属性用于指定列类型和长度。\n- `constraints` 标签可以对 column 的描述进行丰富，比如是否为空，是否为主键等。\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<databaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\">\n  <changeSet id=\"202111150854-0\" author=\"wu_sc\">\n    <createTable tableName=\"t_user\">\n      <column name=\"id\" type=\"bigint\">\n          <constraints primaryKey=\"true\" nullable=\"false\"/>\n      </column>\n    </createTable>\n  </changeSet>\n</databaseChangeLog>\n```\n\n### 添加/删除 列\n\n`addColum` 和 dropColumn 标签可以添加或删除列，具体操作如下：\n\n```xml\n...\n  <changeSet id=\"202111150854-1\" author=\"wu_sc\">\n      <dropColumn tableName=\"t_work_order\" columnName=\"backflush_flag\"/>\n      <addColumn tableName=\"t_work_order\">\n          <column name=\"sync_status\" type=\"varchar(50)\" remarks=\"同步状态\"/>\n      </addColumn>\n  </changeSet>\n...\n————————————————\n```\n\n### 添加外键约束\n\naddForeignKey 标签可以添加外键约束，具体操作如下：\n\n```xml\n<addForeignKeyConstraint\n  baseTableName=\"file_info\"\n  baseColumnNames=\"record_attach_id\"\n  constraintName=\"fk_file_info_warehousing_record_attch_id\"\n  referencedTableName=\"warehousing_record\"\n  referencedColumnNames=\"id\"\n/>\n```\n\nbaseTableName 和 referenceTableName 分别代表外键约束的主表和外键约束的外表。\n\n#### 下面通过具体例子来进行演示（jpa entity）：\n\n文件实体\n\n```java\npublic class FileInfo {\n    private Long id;\n    private String fileName;\n}\n```\n\n出入库记录实体\n\n```java\npublic class WarehousingRecord {\n    private Long id;\n    private String recordNo;\n}\n```\n\n##### 建立 jpa 实体关联\n\n```java\n@Entity\n@Table(name = \"warehousing_record\")\npublic class WarehousingRecord {\n\n    private Long id;\n\n    private String recordNo;\n\n    @OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, mappedBy = \"warehousingRecordForReport\" )\n    private Set<FileInfo> inspectionReport = new HashSet<>();\n}\n\n@Table(name = \"file_info\")\npublic class FileInfo {\n    private Long id;\n    private String fileName;\n\n    @ManyToOne\n    @JoinColumn(\"record_report_id\")\n    private WarehousingRecord warehousingRecordForReport;\n}\n```\n\n##### 设计 liquibase changelog\n\nowner 端为 warehousing_record，使用 referenceTableName 指定\n从属端为 file_info，使用 baseTableName 指定\n从属端的外键为 record_report_id，使用 baseColumnNames 指定，指向 warehousing_record 的 id\nfile_info.record_report_id 与 warehousing_record.id 的约束使用 constraintName 指定\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<databaseChangeLog\n    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n    <changeSet id=\"2021111110531103-01\" author=\"wu_sc\">\n        <addColumn tableName=\"file_info\">\n            <column name=\"record_report_id\" type=\"bigint\">\n                <constraints nullable=\"true\"/>\n            </column>\n        </addColumn>\n    </changeSet>\n    <changeSet id=\"2021111110531103-03\" author=\"wu_sc\">\n        <addForeignKeyConstraint baseTableName=\"file_info\"\n                                 baseColumnNames=\"record_report_id\"\n                                 constraintName=\"fk_file_info_warehousing_record_report_id\"\n                                 referencedColumnNames=\"id\"\n                                 referencedTableName=\"warehousing_record\"/>\n    </changeSet>\n</databaseChangeLog>\n```\n\n![例子](/images/java/liquibase-jpa-example.png)\n","source":"_posts/java-domain-entity-with-hibernate-liqubase.md","raw":"---\ntitle: Liquibase简单使用\ncategories: [后端]\ntags: [hibernate, liquibase]\ntoc: true\ndate: 2021/11/15\n---\n\n这篇文章介绍了使用 JPA 与 Liquibase 来生成实体的基本方式。\n\n详细配置参考[JPA 快速适配多种数据库](https://zeral.cn/persistence/jpa-%E5%BF%AB%E9%80%9F%E9%80%82%E9%85%8D%E5%A4%9A%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93/)\n\n| Liquibase data type | SQL Server data type | Oracle data type | MySQL     | PostgreSQL                 | Java 类型            |\n| ------------------- | -------------------- | ---------------- | --------- | -------------------------- | -------------------- |\n| bigint              | bigint               | number(38,0)     | bigint    | bigint/bigserial           | java.math.BigInteger |\n| currency            | money                | number(15,2)     | decimal   | decimal                    | java.math.BigDecimal |\n| decimal             | decimal              | decimal          | decimal   | decimal                    | java.math.BigDecimal |\n| number              | numeric              | number           | numeric   | numeric                    | java.math.BigDecimal |\n| double              | float                | float(24)        | double    | double precision           | java.lang.Double     |\n| float               | float                | float            | float     | float                      | java.lang.Float      |\n| int                 | int                  | integer          | int       | integer/serial             | java.lang.Integer    |\n| mediumint           | int                  | mediumint        | mediumint | mediumint                  | java.lang.Integer    |\n| smallint            | smallint             | number(5)        | smallint  | smallint/smallserial       | java.lang.Integer    |\n| tinyint             | tinyint              | number(3)        | tinyint   | smallint                   | java.lang.Integer    |\n| blob                | varbinary(max)       | blob             | blob      | oid                        | java.lang.byte[]     |\n| boolean             | bit                  | number(1)        | bit       | bit                        | java.lang.Boolean    |\n| char                | char                 | char             | char      | character                  | java.lang.String     |\n| clob                | nvarchar(max)        | clob             | longtext  | text                       | java.lang.String     |\n| uuid                | uniqueidentifier     | raw(16)          | char(36)  | uuid                       | java.lang.String     |\n| varchar             | varchar              | varchar2         | varchar   | varchar/character(varying) | java.lang.String     |\n| nchar               | nchar                | nchar            | nchar     | nchar                      | java.lang.String     |\n| nvarchar            | nvarchar             | nvarchar2        | nvarchar  | varchar                    | java.lang.String     |\n| datetime            | datetime             | timestamp        | timestamp | timestamp                  | java.sql.Timestamp   |\n| timestamp           | datetime             | timestamp        | timestamp | timestamp                  | java.sql.Timestamp   |\n| time                | time                 | date             | time      | time                       | java.sql.Time        |\n| date                | date                 | date             | date      | date                       | java.sql.Date        |\n\n<!-- more -->\n\nliquibase 通过增加 changelog 的方式来生成或修改实体。\n\nchangelog 存放 位置：resources/config/liquibase/changelog/...\n\nchanglog 定义好后，需要在 master.xml 中添加对应的 changelog： resources/config/liquibase/master.xml\n\n## 实体相关操作\n\n### 基本结构\n\n- 每个 changelog 文件都必须通过 databaseChangeLog 包裹。\n- changeSet 用于定义一个变更，可以有多个 changeSet。changeSet 必须要有 id 来标识，id 必须唯一。\n  此外 author 可以指定变更人，date 可以指定变更时间。\n  id 的指定一般格式为: YYYYMMDDHHMM-第几个 changeSet，比如 202111150854-1\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<databaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\">\n  <changeSet id=\"202111150854-0\" author=\"wu_sc\">\n  </changeSet>\n</databaseChangeLog>\n```\n\n### 建表\n\n通过 createTable 标签可以生成表，具体操作如下：\n\n- `column` 标签用于定义列，其中 name 属性用于指定列名，type 属性用于指定列类型和长度。\n- `constraints` 标签可以对 column 的描述进行丰富，比如是否为空，是否为主键等。\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<databaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\">\n  <changeSet id=\"202111150854-0\" author=\"wu_sc\">\n    <createTable tableName=\"t_user\">\n      <column name=\"id\" type=\"bigint\">\n          <constraints primaryKey=\"true\" nullable=\"false\"/>\n      </column>\n    </createTable>\n  </changeSet>\n</databaseChangeLog>\n```\n\n### 添加/删除 列\n\n`addColum` 和 dropColumn 标签可以添加或删除列，具体操作如下：\n\n```xml\n...\n  <changeSet id=\"202111150854-1\" author=\"wu_sc\">\n      <dropColumn tableName=\"t_work_order\" columnName=\"backflush_flag\"/>\n      <addColumn tableName=\"t_work_order\">\n          <column name=\"sync_status\" type=\"varchar(50)\" remarks=\"同步状态\"/>\n      </addColumn>\n  </changeSet>\n...\n————————————————\n```\n\n### 添加外键约束\n\naddForeignKey 标签可以添加外键约束，具体操作如下：\n\n```xml\n<addForeignKeyConstraint\n  baseTableName=\"file_info\"\n  baseColumnNames=\"record_attach_id\"\n  constraintName=\"fk_file_info_warehousing_record_attch_id\"\n  referencedTableName=\"warehousing_record\"\n  referencedColumnNames=\"id\"\n/>\n```\n\nbaseTableName 和 referenceTableName 分别代表外键约束的主表和外键约束的外表。\n\n#### 下面通过具体例子来进行演示（jpa entity）：\n\n文件实体\n\n```java\npublic class FileInfo {\n    private Long id;\n    private String fileName;\n}\n```\n\n出入库记录实体\n\n```java\npublic class WarehousingRecord {\n    private Long id;\n    private String recordNo;\n}\n```\n\n##### 建立 jpa 实体关联\n\n```java\n@Entity\n@Table(name = \"warehousing_record\")\npublic class WarehousingRecord {\n\n    private Long id;\n\n    private String recordNo;\n\n    @OneToMany(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, mappedBy = \"warehousingRecordForReport\" )\n    private Set<FileInfo> inspectionReport = new HashSet<>();\n}\n\n@Table(name = \"file_info\")\npublic class FileInfo {\n    private Long id;\n    private String fileName;\n\n    @ManyToOne\n    @JoinColumn(\"record_report_id\")\n    private WarehousingRecord warehousingRecordForReport;\n}\n```\n\n##### 设计 liquibase changelog\n\nowner 端为 warehousing_record，使用 referenceTableName 指定\n从属端为 file_info，使用 baseTableName 指定\n从属端的外键为 record_report_id，使用 baseColumnNames 指定，指向 warehousing_record 的 id\nfile_info.record_report_id 与 warehousing_record.id 的约束使用 constraintName 指定\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<databaseChangeLog\n    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\">\n    <changeSet id=\"2021111110531103-01\" author=\"wu_sc\">\n        <addColumn tableName=\"file_info\">\n            <column name=\"record_report_id\" type=\"bigint\">\n                <constraints nullable=\"true\"/>\n            </column>\n        </addColumn>\n    </changeSet>\n    <changeSet id=\"2021111110531103-03\" author=\"wu_sc\">\n        <addForeignKeyConstraint baseTableName=\"file_info\"\n                                 baseColumnNames=\"record_report_id\"\n                                 constraintName=\"fk_file_info_warehousing_record_report_id\"\n                                 referencedColumnNames=\"id\"\n                                 referencedTableName=\"warehousing_record\"/>\n    </changeSet>\n</databaseChangeLog>\n```\n\n![例子](/images/java/liquibase-jpa-example.png)\n","slug":"java-domain-entity-with-hibernate-liqubase","published":1,"updated":"2021-11-17T11:14:38.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jt002ygosw8h2w5k7g","content":"<p>这篇文章介绍了使用 JPA 与 Liquibase 来生成实体的基本方式。</p>\n<p>详细配置参考<a href=\"https://zeral.cn/persistence/jpa-%E5%BF%AB%E9%80%9F%E9%80%82%E9%85%8D%E5%A4%9A%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93/\" target=\"_blank\" rel=\"noopener\">JPA 快速适配多种数据库</a></p>\n<table>\n<thead>\n<tr>\n<th>Liquibase data type</th>\n<th>SQL Server data type</th>\n<th>Oracle data type</th>\n<th>MySQL</th>\n<th>PostgreSQL</th>\n<th>Java 类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bigint</td>\n<td>bigint</td>\n<td>number(38,0)</td>\n<td>bigint</td>\n<td>bigint/bigserial</td>\n<td>java.math.BigInteger</td>\n</tr>\n<tr>\n<td>currency</td>\n<td>money</td>\n<td>number(15,2)</td>\n<td>decimal</td>\n<td>decimal</td>\n<td>java.math.BigDecimal</td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>decimal</td>\n<td>decimal</td>\n<td>decimal</td>\n<td>decimal</td>\n<td>java.math.BigDecimal</td>\n</tr>\n<tr>\n<td>number</td>\n<td>numeric</td>\n<td>number</td>\n<td>numeric</td>\n<td>numeric</td>\n<td>java.math.BigDecimal</td>\n</tr>\n<tr>\n<td>double</td>\n<td>float</td>\n<td>float(24)</td>\n<td>double</td>\n<td>double precision</td>\n<td>java.lang.Double</td>\n</tr>\n<tr>\n<td>float</td>\n<td>float</td>\n<td>float</td>\n<td>float</td>\n<td>float</td>\n<td>java.lang.Float</td>\n</tr>\n<tr>\n<td>int</td>\n<td>int</td>\n<td>integer</td>\n<td>int</td>\n<td>integer/serial</td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>mediumint</td>\n<td>int</td>\n<td>mediumint</td>\n<td>mediumint</td>\n<td>mediumint</td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>smallint</td>\n<td>smallint</td>\n<td>number(5)</td>\n<td>smallint</td>\n<td>smallint/smallserial</td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>tinyint</td>\n<td>tinyint</td>\n<td>number(3)</td>\n<td>tinyint</td>\n<td>smallint</td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>blob</td>\n<td>varbinary(max)</td>\n<td>blob</td>\n<td>blob</td>\n<td>oid</td>\n<td>java.lang.byte[]</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>bit</td>\n<td>number(1)</td>\n<td>bit</td>\n<td>bit</td>\n<td>java.lang.Boolean</td>\n</tr>\n<tr>\n<td>char</td>\n<td>char</td>\n<td>char</td>\n<td>char</td>\n<td>character</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>clob</td>\n<td>nvarchar(max)</td>\n<td>clob</td>\n<td>longtext</td>\n<td>text</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>uuid</td>\n<td>uniqueidentifier</td>\n<td>raw(16)</td>\n<td>char(36)</td>\n<td>uuid</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>varchar</td>\n<td>varchar</td>\n<td>varchar2</td>\n<td>varchar</td>\n<td>varchar/character(varying)</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>nchar</td>\n<td>nchar</td>\n<td>nchar</td>\n<td>nchar</td>\n<td>nchar</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>nvarchar</td>\n<td>nvarchar</td>\n<td>nvarchar2</td>\n<td>nvarchar</td>\n<td>varchar</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>datetime</td>\n<td>datetime</td>\n<td>timestamp</td>\n<td>timestamp</td>\n<td>timestamp</td>\n<td>java.sql.Timestamp</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>datetime</td>\n<td>timestamp</td>\n<td>timestamp</td>\n<td>timestamp</td>\n<td>java.sql.Timestamp</td>\n</tr>\n<tr>\n<td>time</td>\n<td>time</td>\n<td>date</td>\n<td>time</td>\n<td>time</td>\n<td>java.sql.Time</td>\n</tr>\n<tr>\n<td>date</td>\n<td>date</td>\n<td>date</td>\n<td>date</td>\n<td>date</td>\n<td>java.sql.Date</td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n\n<p>liquibase 通过增加 changelog 的方式来生成或修改实体。</p>\n<p>changelog 存放 位置：resources/config/liquibase/changelog/…</p>\n<p>changlog 定义好后，需要在 master.xml 中添加对应的 changelog： resources/config/liquibase/master.xml</p>\n<h2 id=\"实体相关操作\"><a href=\"#实体相关操作\" class=\"headerlink\" title=\"实体相关操作\"></a>实体相关操作</h2><h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><ul>\n<li>每个 changelog 文件都必须通过 databaseChangeLog 包裹。</li>\n<li>changeSet 用于定义一个变更，可以有多个 changeSet。changeSet 必须要有 id 来标识，id 必须唯一。<br>此外 author 可以指定变更人，date 可以指定变更时间。<br>id 的指定一般格式为: YYYYMMDDHHMM-第几个 changeSet，比如 202111150854-1</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">databaseChangeLog</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"202111150854-0\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">databaseChangeLog</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><p>通过 createTable 标签可以生成表，具体操作如下：</p>\n<ul>\n<li><code>column</code> 标签用于定义列，其中 name 属性用于指定列名，type 属性用于指定列类型和长度。</li>\n<li><code>constraints</code> 标签可以对 column 的描述进行丰富，比如是否为空，是否为主键等。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">databaseChangeLog</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"202111150854-0\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">createTable</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_user\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">column</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bigint\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">constraints</span> <span class=\"attr\">primaryKey</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">nullable</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">createTable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">databaseChangeLog</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-删除-列\"><a href=\"#添加-删除-列\" class=\"headerlink\" title=\"添加/删除 列\"></a>添加/删除 列</h3><p><code>addColum</code> 和 dropColumn 标签可以添加或删除列，具体操作如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"202111150854-1\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dropColumn</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_work_order\"</span> <span class=\"attr\">columnName</span>=<span class=\"string\">\"backflush_flag\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">addColumn</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_work_order\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">column</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sync_status\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"varchar(50)\"</span> <span class=\"attr\">remarks</span>=<span class=\"string\">\"同步状态\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">addColumn</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">————————————————</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加外键约束\"><a href=\"#添加外键约束\" class=\"headerlink\" title=\"添加外键约束\"></a>添加外键约束</h3><p>addForeignKey 标签可以添加外键约束，具体操作如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">addForeignKeyConstraint</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">baseTableName</span>=<span class=\"string\">\"file_info\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">baseColumnNames</span>=<span class=\"string\">\"record_attach_id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">constraintName</span>=<span class=\"string\">\"fk_file_info_warehousing_record_attch_id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">referencedTableName</span>=<span class=\"string\">\"warehousing_record\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">referencedColumnNames</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>baseTableName 和 referenceTableName 分别代表外键约束的主表和外键约束的外表。</p>\n<h4 id=\"下面通过具体例子来进行演示（jpa-entity）：\"><a href=\"#下面通过具体例子来进行演示（jpa-entity）：\" class=\"headerlink\" title=\"下面通过具体例子来进行演示（jpa entity）：\"></a>下面通过具体例子来进行演示（jpa entity）：</h4><p>文件实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileInfo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>出入库记录实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WarehousingRecord</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String recordNo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"建立-jpa-实体关联\"><a href=\"#建立-jpa-实体关联\" class=\"headerlink\" title=\"建立 jpa 实体关联\"></a>建立 jpa 实体关联</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"warehousing_record\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WarehousingRecord</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String recordNo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span>(cascade = &#123;CascadeType.PERSIST, CascadeType.REMOVE&#125;, mappedBy = <span class=\"string\">\"warehousingRecordForReport\"</span> )</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;FileInfo&gt; inspectionReport = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"file_info\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileInfo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"meta\">@JoinColumn</span>(<span class=\"string\">\"record_report_id\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WarehousingRecord warehousingRecordForReport;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设计-liquibase-changelog\"><a href=\"#设计-liquibase-changelog\" class=\"headerlink\" title=\"设计 liquibase changelog\"></a>设计 liquibase changelog</h5><p>owner 端为 warehousing_record，使用 referenceTableName 指定<br>从属端为 file_info，使用 baseTableName 指定<br>从属端的外键为 record_report_id，使用 baseColumnNames 指定，指向 warehousing_record 的 id<br>file_info.record_report_id 与 warehousing_record.id 的约束使用 constraintName 指定</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">databaseChangeLog</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2021111110531103-01\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">addColumn</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"file_info\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">column</span> <span class=\"attr\">name</span>=<span class=\"string\">\"record_report_id\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bigint\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">constraints</span> <span class=\"attr\">nullable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">addColumn</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2021111110531103-03\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">addForeignKeyConstraint</span> <span class=\"attr\">baseTableName</span>=<span class=\"string\">\"file_info\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                 <span class=\"attr\">baseColumnNames</span>=<span class=\"string\">\"record_report_id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                 <span class=\"attr\">constraintName</span>=<span class=\"string\">\"fk_file_info_warehousing_record_report_id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                 <span class=\"attr\">referencedColumnNames</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                 <span class=\"attr\">referencedTableName</span>=<span class=\"string\">\"warehousing_record\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">databaseChangeLog</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java/liquibase-jpa-example.png\" alt=\"例子\"></p>\n","site":{"data":{}},"excerpt":"<p>这篇文章介绍了使用 JPA 与 Liquibase 来生成实体的基本方式。</p>\n<p>详细配置参考<a href=\"https://zeral.cn/persistence/jpa-%E5%BF%AB%E9%80%9F%E9%80%82%E9%85%8D%E5%A4%9A%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93/\" target=\"_blank\" rel=\"noopener\">JPA 快速适配多种数据库</a></p>\n<table>\n<thead>\n<tr>\n<th>Liquibase data type</th>\n<th>SQL Server data type</th>\n<th>Oracle data type</th>\n<th>MySQL</th>\n<th>PostgreSQL</th>\n<th>Java 类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bigint</td>\n<td>bigint</td>\n<td>number(38,0)</td>\n<td>bigint</td>\n<td>bigint/bigserial</td>\n<td>java.math.BigInteger</td>\n</tr>\n<tr>\n<td>currency</td>\n<td>money</td>\n<td>number(15,2)</td>\n<td>decimal</td>\n<td>decimal</td>\n<td>java.math.BigDecimal</td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>decimal</td>\n<td>decimal</td>\n<td>decimal</td>\n<td>decimal</td>\n<td>java.math.BigDecimal</td>\n</tr>\n<tr>\n<td>number</td>\n<td>numeric</td>\n<td>number</td>\n<td>numeric</td>\n<td>numeric</td>\n<td>java.math.BigDecimal</td>\n</tr>\n<tr>\n<td>double</td>\n<td>float</td>\n<td>float(24)</td>\n<td>double</td>\n<td>double precision</td>\n<td>java.lang.Double</td>\n</tr>\n<tr>\n<td>float</td>\n<td>float</td>\n<td>float</td>\n<td>float</td>\n<td>float</td>\n<td>java.lang.Float</td>\n</tr>\n<tr>\n<td>int</td>\n<td>int</td>\n<td>integer</td>\n<td>int</td>\n<td>integer/serial</td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>mediumint</td>\n<td>int</td>\n<td>mediumint</td>\n<td>mediumint</td>\n<td>mediumint</td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>smallint</td>\n<td>smallint</td>\n<td>number(5)</td>\n<td>smallint</td>\n<td>smallint/smallserial</td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>tinyint</td>\n<td>tinyint</td>\n<td>number(3)</td>\n<td>tinyint</td>\n<td>smallint</td>\n<td>java.lang.Integer</td>\n</tr>\n<tr>\n<td>blob</td>\n<td>varbinary(max)</td>\n<td>blob</td>\n<td>blob</td>\n<td>oid</td>\n<td>java.lang.byte[]</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>bit</td>\n<td>number(1)</td>\n<td>bit</td>\n<td>bit</td>\n<td>java.lang.Boolean</td>\n</tr>\n<tr>\n<td>char</td>\n<td>char</td>\n<td>char</td>\n<td>char</td>\n<td>character</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>clob</td>\n<td>nvarchar(max)</td>\n<td>clob</td>\n<td>longtext</td>\n<td>text</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>uuid</td>\n<td>uniqueidentifier</td>\n<td>raw(16)</td>\n<td>char(36)</td>\n<td>uuid</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>varchar</td>\n<td>varchar</td>\n<td>varchar2</td>\n<td>varchar</td>\n<td>varchar/character(varying)</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>nchar</td>\n<td>nchar</td>\n<td>nchar</td>\n<td>nchar</td>\n<td>nchar</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>nvarchar</td>\n<td>nvarchar</td>\n<td>nvarchar2</td>\n<td>nvarchar</td>\n<td>varchar</td>\n<td>java.lang.String</td>\n</tr>\n<tr>\n<td>datetime</td>\n<td>datetime</td>\n<td>timestamp</td>\n<td>timestamp</td>\n<td>timestamp</td>\n<td>java.sql.Timestamp</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>datetime</td>\n<td>timestamp</td>\n<td>timestamp</td>\n<td>timestamp</td>\n<td>java.sql.Timestamp</td>\n</tr>\n<tr>\n<td>time</td>\n<td>time</td>\n<td>date</td>\n<td>time</td>\n<td>time</td>\n<td>java.sql.Time</td>\n</tr>\n<tr>\n<td>date</td>\n<td>date</td>\n<td>date</td>\n<td>date</td>\n<td>date</td>\n<td>java.sql.Date</td>\n</tr>\n</tbody></table>","more":"<p>liquibase 通过增加 changelog 的方式来生成或修改实体。</p>\n<p>changelog 存放 位置：resources/config/liquibase/changelog/…</p>\n<p>changlog 定义好后，需要在 master.xml 中添加对应的 changelog： resources/config/liquibase/master.xml</p>\n<h2 id=\"实体相关操作\"><a href=\"#实体相关操作\" class=\"headerlink\" title=\"实体相关操作\"></a>实体相关操作</h2><h3 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h3><ul>\n<li>每个 changelog 文件都必须通过 databaseChangeLog 包裹。</li>\n<li>changeSet 用于定义一个变更，可以有多个 changeSet。changeSet 必须要有 id 来标识，id 必须唯一。<br>此外 author 可以指定变更人，date 可以指定变更时间。<br>id 的指定一般格式为: YYYYMMDDHHMM-第几个 changeSet，比如 202111150854-1</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">databaseChangeLog</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"202111150854-0\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">databaseChangeLog</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><p>通过 createTable 标签可以生成表，具体操作如下：</p>\n<ul>\n<li><code>column</code> 标签用于定义列，其中 name 属性用于指定列名，type 属性用于指定列类型和长度。</li>\n<li><code>constraints</code> 标签可以对 column 的描述进行丰富，比如是否为空，是否为主键等。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">databaseChangeLog</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"202111150854-0\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">createTable</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_user\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">column</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bigint\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">constraints</span> <span class=\"attr\">primaryKey</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">nullable</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">createTable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">databaseChangeLog</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-删除-列\"><a href=\"#添加-删除-列\" class=\"headerlink\" title=\"添加/删除 列\"></a>添加/删除 列</h3><p><code>addColum</code> 和 dropColumn 标签可以添加或删除列，具体操作如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"202111150854-1\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dropColumn</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_work_order\"</span> <span class=\"attr\">columnName</span>=<span class=\"string\">\"backflush_flag\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">addColumn</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"t_work_order\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">column</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sync_status\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"varchar(50)\"</span> <span class=\"attr\">remarks</span>=<span class=\"string\">\"同步状态\"</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">addColumn</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">————————————————</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加外键约束\"><a href=\"#添加外键约束\" class=\"headerlink\" title=\"添加外键约束\"></a>添加外键约束</h3><p>addForeignKey 标签可以添加外键约束，具体操作如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">addForeignKeyConstraint</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">baseTableName</span>=<span class=\"string\">\"file_info\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">baseColumnNames</span>=<span class=\"string\">\"record_attach_id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">constraintName</span>=<span class=\"string\">\"fk_file_info_warehousing_record_attch_id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">referencedTableName</span>=<span class=\"string\">\"warehousing_record\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">referencedColumnNames</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>baseTableName 和 referenceTableName 分别代表外键约束的主表和外键约束的外表。</p>\n<h4 id=\"下面通过具体例子来进行演示（jpa-entity）：\"><a href=\"#下面通过具体例子来进行演示（jpa-entity）：\" class=\"headerlink\" title=\"下面通过具体例子来进行演示（jpa entity）：\"></a>下面通过具体例子来进行演示（jpa entity）：</h4><p>文件实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileInfo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>出入库记录实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WarehousingRecord</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String recordNo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"建立-jpa-实体关联\"><a href=\"#建立-jpa-实体关联\" class=\"headerlink\" title=\"建立 jpa 实体关联\"></a>建立 jpa 实体关联</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"warehousing_record\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WarehousingRecord</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String recordNo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span>(cascade = &#123;CascadeType.PERSIST, CascadeType.REMOVE&#125;, mappedBy = <span class=\"string\">\"warehousingRecordForReport\"</span> )</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;FileInfo&gt; inspectionReport = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"file_info\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileInfo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"meta\">@JoinColumn</span>(<span class=\"string\">\"record_report_id\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WarehousingRecord warehousingRecordForReport;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设计-liquibase-changelog\"><a href=\"#设计-liquibase-changelog\" class=\"headerlink\" title=\"设计 liquibase changelog\"></a>设计 liquibase changelog</h5><p>owner 端为 warehousing_record，使用 referenceTableName 指定<br>从属端为 file_info，使用 baseTableName 指定<br>从属端的外键为 record_report_id，使用 baseColumnNames 指定，指向 warehousing_record 的 id<br>file_info.record_report_id 与 warehousing_record.id 的约束使用 constraintName 指定</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">databaseChangeLog</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.9.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2021111110531103-01\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">addColumn</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"file_info\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">column</span> <span class=\"attr\">name</span>=<span class=\"string\">\"record_report_id\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"bigint\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">constraints</span> <span class=\"attr\">nullable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">addColumn</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">changeSet</span> <span class=\"attr\">id</span>=<span class=\"string\">\"2021111110531103-03\"</span> <span class=\"attr\">author</span>=<span class=\"string\">\"wu_sc\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">addForeignKeyConstraint</span> <span class=\"attr\">baseTableName</span>=<span class=\"string\">\"file_info\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                 <span class=\"attr\">baseColumnNames</span>=<span class=\"string\">\"record_report_id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                 <span class=\"attr\">constraintName</span>=<span class=\"string\">\"fk_file_info_warehousing_record_report_id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                 <span class=\"attr\">referencedColumnNames</span>=<span class=\"string\">\"id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                 <span class=\"attr\">referencedTableName</span>=<span class=\"string\">\"warehousing_record\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">changeSet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">databaseChangeLog</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/java/liquibase-jpa-example.png\" alt=\"例子\"></p>"},{"title":"java8 查漏补缺","toc":true,"date":"2021-08-02T16:00:00.000Z","_content":"\n这篇文章记录了 java8 基础知识。长期更新\n\n<!-- more -->\n\n# 数据类型与运算符\n\n## java 中基本数据类型分为 8 中：\n\n- 整数类型为： byte short int Long\n  - byte: `-2^8 ~ 2^8 - 1`\n  - short: `-2^(8*2) ~ 2^(8*2) -1`\n  - int: `-2^(8*2*2) ~ 2^(8*2*2)` -2147483648 ~ 2147483647\n  - long: `-2^(8*2*2*2) ~ 2^(8*2*2*2)`，使用 long 需要使用 l 标注,如 2000l\n- 浮点型： float double\n  - 默认为 double，使用 float 的话需要通过 f 标注,比如 12.01f\n  - double 小数范围为 64，float 为 32\n  - 所有的数学函数运算都是 double\n- 布尔值： boolean\n- 字符：char\n\n> 一般不将 char 作为归类为整数类型,char 使用 unicode 对应的数字来描述单个字符。从严格意义上来说它也属于整数类型\n\n**数值类型混合计算**\n\n规则：\n\n首先\n\n- A: 所有的 char byte short 被升级为 int。\n\n其次\n\n- B:如果有一个操作数是 long，整个表达式全部升级为 long\n- C:如果有一个操作数是 float，那么整个表达式就全部升级为 float\n- D:如果有一个操作数是 double，那么整个表达式就全部升级为 double\n\n需要注意的是，上述类型升级只应用于表达式内。在表达式外，该变量并没有任何不同。\n\n```java\nbyte b;\nint i;\n\nb = 10;\ni = b * b;// 不需要强制转换，b*b 执行规则A，自动转换成int\n\nb = 10;\nb = (byte) (b*b) // b * b 执行规则A，自动转换成int,将int赋值给byte 需要强制转换\n```\n\n## 引用数据类型\n\n**为什么引用类型的比较需要使用 equals？**\n\n以字符串为例，equals 比较的是两个 String 对象的字符串序列是否相等，而 == 比较的是两个变量引用的是否为同一个变量。\n\n**字符串是不可变的，如何创建可变字符串？**\n使用 StringBuffer 类，它创建的字符串对象是可以改变的。它提供 setCharAt 方法用于在字符串中设置字符。Java 还提供了与 StringBuffer 相关的类 StringBuilder，该类创建的字符串对象也是可以改变的。\n\n## 短路逻辑运算符与普通运算符的区别\n\n对于普通逻辑运算符 `condition1 & condition2` ，即使 condition1 为 false，也会运行 condition2。\n对于短路逻辑运算符 `condition1 && condition2` ，如果 condition1 为 false，那么剩余的 condition2 就不会继续执行。\n\n# 接口\n\n**protect,public,private 有什么区别？**\n\n| \\*                 | private | 默认 | protect | public |\n| ------------------ | ------- | ---- | ------- | ------ |\n| 同一个类中可见     | 是      | 是   | 是      | 是     |\n| 同一个包下的子类   | 否      | 是   | 是      | 是     |\n| 同一个包中的非子类 | 否      | 是   | 是      | 是     |\n| 不同包的子类       | 否      | 否   | 是      | 是     |\n| 不同包的非子类     | 否      | 否   | 否      | 是     |\n\n**接口如何定义？**\n\n```java\naccess interface name {\n  ret-type method-name1 (param-list);\n  ret-type method-name2 (param-list);\n  type var1 = value;\n  type var2 = value;\n  // ...\n  ret-type method-nameN(param-list);\n  type varN = value;\n}\n```\n\n- access 字段：\n  access 字段要么是 public，要么不使用。当不包含访问修饰符时，执行默认的访问方法，接口只对它所在包的其他成员可用。\n- 接口方法：\n  默认为 public，实现接口的类必须实现接口的全部方法\n\n**什么是接口引用？**\n假如 A 被声明为接口 I 的引用。这意味着它可以用于存储任何实现 I 的对象。\n\n```java\nByTwo twoOb = new ByTwo();\nByThree threeOb = new ByThrees();\nSeries ob;\n```\n\n如上，ob 可以存储 twoOb，或者 threeOb\n\n**接口的默认方法是什么？应用场景？**\n\n```java\npublic interface MyIF {\n  int getUserId();\n\n  default int getAdminID() {\n    return 1;\n  }\n}\n```\n\n接口中定义的默认方法，是有逻辑的真实方法，可以在实现它的类中直接调用。默认方法的主要作用是，在不破坏现有代码的情况下，提供一种扩展接口的方式。\n\n如果实体实现了多个接口，并存在同名默认方法，那么准确调用方式如下\n\nInterfaceName.super.methodName();\n\n**接口静态方法和默认方法有什么区别**\n\n```java\npublic interface MyIF {\n  int getUserId();\n\n  default int getAdminID() {\n    return 1;\n  }\n\n  static int getUniversalID() {\n    return 0;\n  }\n}\n```\n\n# 范型\n\n```java\nclass-name<type-arg-list> var-name = new class-name<type-arg-list>(cons-arg-list);\n```\n\n```java\npublic class ArrayList<T> {\n    private T[] array;\n    private int size;\n    public void add(T e) {...}\n    public void remove(int index) {...}\n    public T get(int index) {...}\n}\n\n// 创建可以存储String的ArrayList:\nArrayList<String> strList = new ArrayList<String>();\n// 创建可以存储Float的ArrayList:\nArrayList<Float> floatList = new ArrayList<Float>();\n// 创建可以存储Person的ArrayList:\nArrayList<Person> personList = new ArrayList<Person>();\n```\n\n> 题外话，对于上述`ArrayList<String> strList = new ArrayList<String>()`，可以简化如下：`List<String> strList = new ArrayList<>();`，原理：\n\n**什么是范型？**\n范型就是定义一种模板。实现编写一次模版，可以创建任意类型的 ArrayList\n\n## 使用 extends 来约束范型参数的范围\n\n```java\n// <T extends superClass>\n\npublic class ArrayList<T extends Number> {\n    private T[] array;\n    private int size;\n    public void add(T e) {...}\n    public void remove(int index) {...}\n    public T get(int index) {...}\n}\n\n// 如此以来，构建实例的时候，实参只能是Number或者Number的子类\n// 创建可以存储Float的ArrayList:\nArrayList<Float> floatList = new ArrayList<Float>();\n```\n\n## 范型中的通配符\"？\"有什么用\n\n假如存在如下场景，一个对象包含 Double 值 1.25，另外一个对象包含 Float 值-1.25，希望能够实现比较这两个对象的绝对值是否相等。\n\n在使用了范型的情况下，如下方式只能实现同类参数的比较，比如 Double 与 Double，Float 与 Float。\n\n```java\nboolean absEqual(NumericFns<T> ob) {\n  return Math.abs(num.doubleValue) == Math.abs(num.doubleValue())\n}\n```\n\n想要实现不同的类型比较，就需要使用 ？ 通配符,表示匹配任何类型\n\n```java\nboolean absEqual(NumericFns<?> ob) {\n  return Math.abs(num.doubleValue) == Math.abs(num.doubleValue())\n}\n```\n\n**当然，通配符的匹配区间也是可以限制的**\n\n- 上层约束：`<? extends superclass>`\n- 下层约束：`<? super subclass>`\n\n## 范型方法\n\n```java\n// <type-param-list> ret-type meth-name(param-list)\n\nT demoMethod(T param)\n```\n\n## 菱形运算符 实现类型推断\n\njdk1.7 以前\n\n```java\nTwoGen<Integer, String> tgOb = new TwoGen<Integer, String>(42, \"testString\");\n```\n\njdk1.7 及以后\n\n```java\nTwoGen<Integer, String> tgOb = new TwoGen<>(42, \"testString\");\n```\n","source":"_posts/java-basic.md","raw":"---\ntitle: java8 查漏补缺\ncategories: [后端]\ntags: [java]\ntoc: true\ndate: 2021/8/3\n---\n\n这篇文章记录了 java8 基础知识。长期更新\n\n<!-- more -->\n\n# 数据类型与运算符\n\n## java 中基本数据类型分为 8 中：\n\n- 整数类型为： byte short int Long\n  - byte: `-2^8 ~ 2^8 - 1`\n  - short: `-2^(8*2) ~ 2^(8*2) -1`\n  - int: `-2^(8*2*2) ~ 2^(8*2*2)` -2147483648 ~ 2147483647\n  - long: `-2^(8*2*2*2) ~ 2^(8*2*2*2)`，使用 long 需要使用 l 标注,如 2000l\n- 浮点型： float double\n  - 默认为 double，使用 float 的话需要通过 f 标注,比如 12.01f\n  - double 小数范围为 64，float 为 32\n  - 所有的数学函数运算都是 double\n- 布尔值： boolean\n- 字符：char\n\n> 一般不将 char 作为归类为整数类型,char 使用 unicode 对应的数字来描述单个字符。从严格意义上来说它也属于整数类型\n\n**数值类型混合计算**\n\n规则：\n\n首先\n\n- A: 所有的 char byte short 被升级为 int。\n\n其次\n\n- B:如果有一个操作数是 long，整个表达式全部升级为 long\n- C:如果有一个操作数是 float，那么整个表达式就全部升级为 float\n- D:如果有一个操作数是 double，那么整个表达式就全部升级为 double\n\n需要注意的是，上述类型升级只应用于表达式内。在表达式外，该变量并没有任何不同。\n\n```java\nbyte b;\nint i;\n\nb = 10;\ni = b * b;// 不需要强制转换，b*b 执行规则A，自动转换成int\n\nb = 10;\nb = (byte) (b*b) // b * b 执行规则A，自动转换成int,将int赋值给byte 需要强制转换\n```\n\n## 引用数据类型\n\n**为什么引用类型的比较需要使用 equals？**\n\n以字符串为例，equals 比较的是两个 String 对象的字符串序列是否相等，而 == 比较的是两个变量引用的是否为同一个变量。\n\n**字符串是不可变的，如何创建可变字符串？**\n使用 StringBuffer 类，它创建的字符串对象是可以改变的。它提供 setCharAt 方法用于在字符串中设置字符。Java 还提供了与 StringBuffer 相关的类 StringBuilder，该类创建的字符串对象也是可以改变的。\n\n## 短路逻辑运算符与普通运算符的区别\n\n对于普通逻辑运算符 `condition1 & condition2` ，即使 condition1 为 false，也会运行 condition2。\n对于短路逻辑运算符 `condition1 && condition2` ，如果 condition1 为 false，那么剩余的 condition2 就不会继续执行。\n\n# 接口\n\n**protect,public,private 有什么区别？**\n\n| \\*                 | private | 默认 | protect | public |\n| ------------------ | ------- | ---- | ------- | ------ |\n| 同一个类中可见     | 是      | 是   | 是      | 是     |\n| 同一个包下的子类   | 否      | 是   | 是      | 是     |\n| 同一个包中的非子类 | 否      | 是   | 是      | 是     |\n| 不同包的子类       | 否      | 否   | 是      | 是     |\n| 不同包的非子类     | 否      | 否   | 否      | 是     |\n\n**接口如何定义？**\n\n```java\naccess interface name {\n  ret-type method-name1 (param-list);\n  ret-type method-name2 (param-list);\n  type var1 = value;\n  type var2 = value;\n  // ...\n  ret-type method-nameN(param-list);\n  type varN = value;\n}\n```\n\n- access 字段：\n  access 字段要么是 public，要么不使用。当不包含访问修饰符时，执行默认的访问方法，接口只对它所在包的其他成员可用。\n- 接口方法：\n  默认为 public，实现接口的类必须实现接口的全部方法\n\n**什么是接口引用？**\n假如 A 被声明为接口 I 的引用。这意味着它可以用于存储任何实现 I 的对象。\n\n```java\nByTwo twoOb = new ByTwo();\nByThree threeOb = new ByThrees();\nSeries ob;\n```\n\n如上，ob 可以存储 twoOb，或者 threeOb\n\n**接口的默认方法是什么？应用场景？**\n\n```java\npublic interface MyIF {\n  int getUserId();\n\n  default int getAdminID() {\n    return 1;\n  }\n}\n```\n\n接口中定义的默认方法，是有逻辑的真实方法，可以在实现它的类中直接调用。默认方法的主要作用是，在不破坏现有代码的情况下，提供一种扩展接口的方式。\n\n如果实体实现了多个接口，并存在同名默认方法，那么准确调用方式如下\n\nInterfaceName.super.methodName();\n\n**接口静态方法和默认方法有什么区别**\n\n```java\npublic interface MyIF {\n  int getUserId();\n\n  default int getAdminID() {\n    return 1;\n  }\n\n  static int getUniversalID() {\n    return 0;\n  }\n}\n```\n\n# 范型\n\n```java\nclass-name<type-arg-list> var-name = new class-name<type-arg-list>(cons-arg-list);\n```\n\n```java\npublic class ArrayList<T> {\n    private T[] array;\n    private int size;\n    public void add(T e) {...}\n    public void remove(int index) {...}\n    public T get(int index) {...}\n}\n\n// 创建可以存储String的ArrayList:\nArrayList<String> strList = new ArrayList<String>();\n// 创建可以存储Float的ArrayList:\nArrayList<Float> floatList = new ArrayList<Float>();\n// 创建可以存储Person的ArrayList:\nArrayList<Person> personList = new ArrayList<Person>();\n```\n\n> 题外话，对于上述`ArrayList<String> strList = new ArrayList<String>()`，可以简化如下：`List<String> strList = new ArrayList<>();`，原理：\n\n**什么是范型？**\n范型就是定义一种模板。实现编写一次模版，可以创建任意类型的 ArrayList\n\n## 使用 extends 来约束范型参数的范围\n\n```java\n// <T extends superClass>\n\npublic class ArrayList<T extends Number> {\n    private T[] array;\n    private int size;\n    public void add(T e) {...}\n    public void remove(int index) {...}\n    public T get(int index) {...}\n}\n\n// 如此以来，构建实例的时候，实参只能是Number或者Number的子类\n// 创建可以存储Float的ArrayList:\nArrayList<Float> floatList = new ArrayList<Float>();\n```\n\n## 范型中的通配符\"？\"有什么用\n\n假如存在如下场景，一个对象包含 Double 值 1.25，另外一个对象包含 Float 值-1.25，希望能够实现比较这两个对象的绝对值是否相等。\n\n在使用了范型的情况下，如下方式只能实现同类参数的比较，比如 Double 与 Double，Float 与 Float。\n\n```java\nboolean absEqual(NumericFns<T> ob) {\n  return Math.abs(num.doubleValue) == Math.abs(num.doubleValue())\n}\n```\n\n想要实现不同的类型比较，就需要使用 ？ 通配符,表示匹配任何类型\n\n```java\nboolean absEqual(NumericFns<?> ob) {\n  return Math.abs(num.doubleValue) == Math.abs(num.doubleValue())\n}\n```\n\n**当然，通配符的匹配区间也是可以限制的**\n\n- 上层约束：`<? extends superclass>`\n- 下层约束：`<? super subclass>`\n\n## 范型方法\n\n```java\n// <type-param-list> ret-type meth-name(param-list)\n\nT demoMethod(T param)\n```\n\n## 菱形运算符 实现类型推断\n\njdk1.7 以前\n\n```java\nTwoGen<Integer, String> tgOb = new TwoGen<Integer, String>(42, \"testString\");\n```\n\njdk1.7 及以后\n\n```java\nTwoGen<Integer, String> tgOb = new TwoGen<>(42, \"testString\");\n```\n","slug":"java-basic","published":1,"updated":"2021-08-04T03:03:07.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jt0032gosw38utfluz","content":"<p>这篇文章记录了 java8 基础知识。长期更新</p>\n<a id=\"more\"></a>\n\n<h1 id=\"数据类型与运算符\"><a href=\"#数据类型与运算符\" class=\"headerlink\" title=\"数据类型与运算符\"></a>数据类型与运算符</h1><h2 id=\"java-中基本数据类型分为-8-中：\"><a href=\"#java-中基本数据类型分为-8-中：\" class=\"headerlink\" title=\"java 中基本数据类型分为 8 中：\"></a>java 中基本数据类型分为 8 中：</h2><ul>\n<li>整数类型为： byte short int Long<ul>\n<li>byte: <code>-2^8 ~ 2^8 - 1</code></li>\n<li>short: <code>-2^(8*2) ~ 2^(8*2) -1</code></li>\n<li>int: <code>-2^(8*2*2) ~ 2^(8*2*2)</code> -2147483648 ~ 2147483647</li>\n<li>long: <code>-2^(8*2*2*2) ~ 2^(8*2*2*2)</code>，使用 long 需要使用 l 标注,如 2000l</li>\n</ul>\n</li>\n<li>浮点型： float double<ul>\n<li>默认为 double，使用 float 的话需要通过 f 标注,比如 12.01f</li>\n<li>double 小数范围为 64，float 为 32</li>\n<li>所有的数学函数运算都是 double</li>\n</ul>\n</li>\n<li>布尔值： boolean</li>\n<li>字符：char</li>\n</ul>\n<blockquote>\n<p>一般不将 char 作为归类为整数类型,char 使用 unicode 对应的数字来描述单个字符。从严格意义上来说它也属于整数类型</p>\n</blockquote>\n<p><strong>数值类型混合计算</strong></p>\n<p>规则：</p>\n<p>首先</p>\n<ul>\n<li>A: 所有的 char byte short 被升级为 int。</li>\n</ul>\n<p>其次</p>\n<ul>\n<li>B:如果有一个操作数是 long，整个表达式全部升级为 long</li>\n<li>C:如果有一个操作数是 float，那么整个表达式就全部升级为 float</li>\n<li>D:如果有一个操作数是 double，那么整个表达式就全部升级为 double</li>\n</ul>\n<p>需要注意的是，上述类型升级只应用于表达式内。在表达式外，该变量并没有任何不同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span> b;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\">i = b * b;<span class=\"comment\">// 不需要强制转换，b*b 执行规则A，自动转换成int</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\">b = (<span class=\"keyword\">byte</span>) (b*b) <span class=\"comment\">// b * b 执行规则A，自动转换成int,将int赋值给byte 需要强制转换</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h2><p><strong>为什么引用类型的比较需要使用 equals？</strong></p>\n<p>以字符串为例，equals 比较的是两个 String 对象的字符串序列是否相等，而 == 比较的是两个变量引用的是否为同一个变量。</p>\n<p><strong>字符串是不可变的，如何创建可变字符串？</strong><br>使用 StringBuffer 类，它创建的字符串对象是可以改变的。它提供 setCharAt 方法用于在字符串中设置字符。Java 还提供了与 StringBuffer 相关的类 StringBuilder，该类创建的字符串对象也是可以改变的。</p>\n<h2 id=\"短路逻辑运算符与普通运算符的区别\"><a href=\"#短路逻辑运算符与普通运算符的区别\" class=\"headerlink\" title=\"短路逻辑运算符与普通运算符的区别\"></a>短路逻辑运算符与普通运算符的区别</h2><p>对于普通逻辑运算符 <code>condition1 &amp; condition2</code> ，即使 condition1 为 false，也会运行 condition2。<br>对于短路逻辑运算符 <code>condition1 &amp;&amp; condition2</code> ，如果 condition1 为 false，那么剩余的 condition2 就不会继续执行。</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p><strong>protect,public,private 有什么区别？</strong></p>\n<table>\n<thead>\n<tr>\n<th>*</th>\n<th>private</th>\n<th>默认</th>\n<th>protect</th>\n<th>public</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同一个类中可见</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>同一个包下的子类</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>同一个包中的非子类</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>不同包的子类</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>不同包的非子类</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p><strong>接口如何定义？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">name</span> </span>&#123;</span><br><span class=\"line\">  ret-type method-name1 (param-list);</span><br><span class=\"line\">  ret-type method-name2 (param-list);</span><br><span class=\"line\">  type var1 = value;</span><br><span class=\"line\">  type var2 = value;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ret-type method-nameN(param-list);</span><br><span class=\"line\">  type varN = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>access 字段：<br>access 字段要么是 public，要么不使用。当不包含访问修饰符时，执行默认的访问方法，接口只对它所在包的其他成员可用。</li>\n<li>接口方法：<br>默认为 public，实现接口的类必须实现接口的全部方法</li>\n</ul>\n<p><strong>什么是接口引用？</strong><br>假如 A 被声明为接口 I 的引用。这意味着它可以用于存储任何实现 I 的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByTwo twoOb = <span class=\"keyword\">new</span> ByTwo();</span><br><span class=\"line\">ByThree threeOb = <span class=\"keyword\">new</span> ByThrees();</span><br><span class=\"line\">Series ob;</span><br></pre></td></tr></table></figure>\n\n<p>如上，ob 可以存储 twoOb，或者 threeOb</p>\n<p><strong>接口的默认方法是什么？应用场景？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyIF</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getUserId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">int</span> <span class=\"title\">getAdminID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口中定义的默认方法，是有逻辑的真实方法，可以在实现它的类中直接调用。默认方法的主要作用是，在不破坏现有代码的情况下，提供一种扩展接口的方式。</p>\n<p>如果实体实现了多个接口，并存在同名默认方法，那么准确调用方式如下</p>\n<p>InterfaceName.super.methodName();</p>\n<p><strong>接口静态方法和默认方法有什么区别</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyIF</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getUserId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">int</span> <span class=\"title\">getAdminID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getUniversalID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"范型\"><a href=\"#范型\" class=\"headerlink\" title=\"范型\"></a>范型</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>&lt;<span class=\"title\">type</span>-<span class=\"title\">arg</span>-<span class=\"title\">list</span>&gt; <span class=\"title\">var</span>-<span class=\"title\">name</span> </span>= <span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>&lt;<span class=\"title\">type</span>-<span class=\"title\">arg</span>-<span class=\"title\">list</span>&gt;(<span class=\"title\">cons</span>-<span class=\"title\">arg</span>-<span class=\"title\">list</span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] array;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T e)</span> </span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建可以存储String的ArrayList:</span></span><br><span class=\"line\">ArrayList&lt;String&gt; strList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 创建可以存储Float的ArrayList:</span></span><br><span class=\"line\">ArrayList&lt;Float&gt; floatList = <span class=\"keyword\">new</span> ArrayList&lt;Float&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 创建可以存储Person的ArrayList:</span></span><br><span class=\"line\">ArrayList&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>题外话，对于上述<code>ArrayList&lt;String&gt; strList = new ArrayList&lt;String&gt;()</code>，可以简化如下：<code>List&lt;String&gt; strList = new ArrayList&lt;&gt;();</code>，原理：</p>\n</blockquote>\n<p><strong>什么是范型？</strong><br>范型就是定义一种模板。实现编写一次模版，可以创建任意类型的 ArrayList</p>\n<h2 id=\"使用-extends-来约束范型参数的范围\"><a href=\"#使用-extends-来约束范型参数的范围\" class=\"headerlink\" title=\"使用 extends 来约束范型参数的范围\"></a>使用 extends 来约束范型参数的范围</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;T extends superClass&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] array;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T e)</span> </span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如此以来，构建实例的时候，实参只能是Number或者Number的子类</span></span><br><span class=\"line\"><span class=\"comment\">// 创建可以存储Float的ArrayList:</span></span><br><span class=\"line\">ArrayList&lt;Float&gt; floatList = <span class=\"keyword\">new</span> ArrayList&lt;Float&gt;();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"范型中的通配符”？”有什么用\"><a href=\"#范型中的通配符”？”有什么用\" class=\"headerlink\" title=\"范型中的通配符”？”有什么用\"></a>范型中的通配符”？”有什么用</h2><p>假如存在如下场景，一个对象包含 Double 值 1.25，另外一个对象包含 Float 值-1.25，希望能够实现比较这两个对象的绝对值是否相等。</p>\n<p>在使用了范型的情况下，如下方式只能实现同类参数的比较，比如 Double 与 Double，Float 与 Float。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">absEqual</span><span class=\"params\">(NumericFns&lt;T&gt; ob)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Math.abs(num.doubleValue) == Math.abs(num.doubleValue())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>想要实现不同的类型比较，就需要使用 ？ 通配符,表示匹配任何类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">absEqual</span><span class=\"params\">(NumericFns&lt;?&gt; ob)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Math.abs(num.doubleValue) == Math.abs(num.doubleValue())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然，通配符的匹配区间也是可以限制的</strong></p>\n<ul>\n<li>上层约束：<code>&lt;? extends superclass&gt;</code></li>\n<li>下层约束：<code>&lt;? super subclass&gt;</code></li>\n</ul>\n<h2 id=\"范型方法\"><a href=\"#范型方法\" class=\"headerlink\" title=\"范型方法\"></a>范型方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;type-param-list&gt; ret-type meth-name(param-list)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">demoMethod</span><span class=\"params\">(T param)</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"菱形运算符-实现类型推断\"><a href=\"#菱形运算符-实现类型推断\" class=\"headerlink\" title=\"菱形运算符 实现类型推断\"></a>菱形运算符 实现类型推断</h2><p>jdk1.7 以前</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TwoGen&lt;Integer, String&gt; tgOb = <span class=\"keyword\">new</span> TwoGen&lt;Integer, String&gt;(<span class=\"number\">42</span>, <span class=\"string\">\"testString\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>jdk1.7 及以后</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TwoGen&lt;Integer, String&gt; tgOb = <span class=\"keyword\">new</span> TwoGen&lt;&gt;(<span class=\"number\">42</span>, <span class=\"string\">\"testString\"</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>这篇文章记录了 java8 基础知识。长期更新</p>","more":"<h1 id=\"数据类型与运算符\"><a href=\"#数据类型与运算符\" class=\"headerlink\" title=\"数据类型与运算符\"></a>数据类型与运算符</h1><h2 id=\"java-中基本数据类型分为-8-中：\"><a href=\"#java-中基本数据类型分为-8-中：\" class=\"headerlink\" title=\"java 中基本数据类型分为 8 中：\"></a>java 中基本数据类型分为 8 中：</h2><ul>\n<li>整数类型为： byte short int Long<ul>\n<li>byte: <code>-2^8 ~ 2^8 - 1</code></li>\n<li>short: <code>-2^(8*2) ~ 2^(8*2) -1</code></li>\n<li>int: <code>-2^(8*2*2) ~ 2^(8*2*2)</code> -2147483648 ~ 2147483647</li>\n<li>long: <code>-2^(8*2*2*2) ~ 2^(8*2*2*2)</code>，使用 long 需要使用 l 标注,如 2000l</li>\n</ul>\n</li>\n<li>浮点型： float double<ul>\n<li>默认为 double，使用 float 的话需要通过 f 标注,比如 12.01f</li>\n<li>double 小数范围为 64，float 为 32</li>\n<li>所有的数学函数运算都是 double</li>\n</ul>\n</li>\n<li>布尔值： boolean</li>\n<li>字符：char</li>\n</ul>\n<blockquote>\n<p>一般不将 char 作为归类为整数类型,char 使用 unicode 对应的数字来描述单个字符。从严格意义上来说它也属于整数类型</p>\n</blockquote>\n<p><strong>数值类型混合计算</strong></p>\n<p>规则：</p>\n<p>首先</p>\n<ul>\n<li>A: 所有的 char byte short 被升级为 int。</li>\n</ul>\n<p>其次</p>\n<ul>\n<li>B:如果有一个操作数是 long，整个表达式全部升级为 long</li>\n<li>C:如果有一个操作数是 float，那么整个表达式就全部升级为 float</li>\n<li>D:如果有一个操作数是 double，那么整个表达式就全部升级为 double</li>\n</ul>\n<p>需要注意的是，上述类型升级只应用于表达式内。在表达式外，该变量并没有任何不同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span> b;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\">i = b * b;<span class=\"comment\">// 不需要强制转换，b*b 执行规则A，自动转换成int</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">10</span>;</span><br><span class=\"line\">b = (<span class=\"keyword\">byte</span>) (b*b) <span class=\"comment\">// b * b 执行规则A，自动转换成int,将int赋值给byte 需要强制转换</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h2><p><strong>为什么引用类型的比较需要使用 equals？</strong></p>\n<p>以字符串为例，equals 比较的是两个 String 对象的字符串序列是否相等，而 == 比较的是两个变量引用的是否为同一个变量。</p>\n<p><strong>字符串是不可变的，如何创建可变字符串？</strong><br>使用 StringBuffer 类，它创建的字符串对象是可以改变的。它提供 setCharAt 方法用于在字符串中设置字符。Java 还提供了与 StringBuffer 相关的类 StringBuilder，该类创建的字符串对象也是可以改变的。</p>\n<h2 id=\"短路逻辑运算符与普通运算符的区别\"><a href=\"#短路逻辑运算符与普通运算符的区别\" class=\"headerlink\" title=\"短路逻辑运算符与普通运算符的区别\"></a>短路逻辑运算符与普通运算符的区别</h2><p>对于普通逻辑运算符 <code>condition1 &amp; condition2</code> ，即使 condition1 为 false，也会运行 condition2。<br>对于短路逻辑运算符 <code>condition1 &amp;&amp; condition2</code> ，如果 condition1 为 false，那么剩余的 condition2 就不会继续执行。</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p><strong>protect,public,private 有什么区别？</strong></p>\n<table>\n<thead>\n<tr>\n<th>*</th>\n<th>private</th>\n<th>默认</th>\n<th>protect</th>\n<th>public</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同一个类中可见</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>同一个包下的子类</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>同一个包中的非子类</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>不同包的子类</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>不同包的非子类</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p><strong>接口如何定义？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">name</span> </span>&#123;</span><br><span class=\"line\">  ret-type method-name1 (param-list);</span><br><span class=\"line\">  ret-type method-name2 (param-list);</span><br><span class=\"line\">  type var1 = value;</span><br><span class=\"line\">  type var2 = value;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ret-type method-nameN(param-list);</span><br><span class=\"line\">  type varN = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>access 字段：<br>access 字段要么是 public，要么不使用。当不包含访问修饰符时，执行默认的访问方法，接口只对它所在包的其他成员可用。</li>\n<li>接口方法：<br>默认为 public，实现接口的类必须实现接口的全部方法</li>\n</ul>\n<p><strong>什么是接口引用？</strong><br>假如 A 被声明为接口 I 的引用。这意味着它可以用于存储任何实现 I 的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByTwo twoOb = <span class=\"keyword\">new</span> ByTwo();</span><br><span class=\"line\">ByThree threeOb = <span class=\"keyword\">new</span> ByThrees();</span><br><span class=\"line\">Series ob;</span><br></pre></td></tr></table></figure>\n\n<p>如上，ob 可以存储 twoOb，或者 threeOb</p>\n<p><strong>接口的默认方法是什么？应用场景？</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyIF</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getUserId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">int</span> <span class=\"title\">getAdminID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口中定义的默认方法，是有逻辑的真实方法，可以在实现它的类中直接调用。默认方法的主要作用是，在不破坏现有代码的情况下，提供一种扩展接口的方式。</p>\n<p>如果实体实现了多个接口，并存在同名默认方法，那么准确调用方式如下</p>\n<p>InterfaceName.super.methodName();</p>\n<p><strong>接口静态方法和默认方法有什么区别</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyIF</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getUserId</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">int</span> <span class=\"title\">getAdminID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getUniversalID</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"范型\"><a href=\"#范型\" class=\"headerlink\" title=\"范型\"></a>范型</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>&lt;<span class=\"title\">type</span>-<span class=\"title\">arg</span>-<span class=\"title\">list</span>&gt; <span class=\"title\">var</span>-<span class=\"title\">name</span> </span>= <span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">name</span>&lt;<span class=\"title\">type</span>-<span class=\"title\">arg</span>-<span class=\"title\">list</span>&gt;(<span class=\"title\">cons</span>-<span class=\"title\">arg</span>-<span class=\"title\">list</span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] array;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T e)</span> </span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建可以存储String的ArrayList:</span></span><br><span class=\"line\">ArrayList&lt;String&gt; strList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 创建可以存储Float的ArrayList:</span></span><br><span class=\"line\">ArrayList&lt;Float&gt; floatList = <span class=\"keyword\">new</span> ArrayList&lt;Float&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 创建可以存储Person的ArrayList:</span></span><br><span class=\"line\">ArrayList&lt;Person&gt; personList = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>题外话，对于上述<code>ArrayList&lt;String&gt; strList = new ArrayList&lt;String&gt;()</code>，可以简化如下：<code>List&lt;String&gt; strList = new ArrayList&lt;&gt;();</code>，原理：</p>\n</blockquote>\n<p><strong>什么是范型？</strong><br>范型就是定义一种模板。实现编写一次模版，可以创建任意类型的 ArrayList</p>\n<h2 id=\"使用-extends-来约束范型参数的范围\"><a href=\"#使用-extends-来约束范型参数的范围\" class=\"headerlink\" title=\"使用 extends 来约束范型参数的范围\"></a>使用 extends 来约束范型参数的范围</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;T extends superClass&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Number</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T[] array;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T e)</span> </span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如此以来，构建实例的时候，实参只能是Number或者Number的子类</span></span><br><span class=\"line\"><span class=\"comment\">// 创建可以存储Float的ArrayList:</span></span><br><span class=\"line\">ArrayList&lt;Float&gt; floatList = <span class=\"keyword\">new</span> ArrayList&lt;Float&gt;();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"范型中的通配符”？”有什么用\"><a href=\"#范型中的通配符”？”有什么用\" class=\"headerlink\" title=\"范型中的通配符”？”有什么用\"></a>范型中的通配符”？”有什么用</h2><p>假如存在如下场景，一个对象包含 Double 值 1.25，另外一个对象包含 Float 值-1.25，希望能够实现比较这两个对象的绝对值是否相等。</p>\n<p>在使用了范型的情况下，如下方式只能实现同类参数的比较，比如 Double 与 Double，Float 与 Float。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">absEqual</span><span class=\"params\">(NumericFns&lt;T&gt; ob)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Math.abs(num.doubleValue) == Math.abs(num.doubleValue())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>想要实现不同的类型比较，就需要使用 ？ 通配符,表示匹配任何类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">absEqual</span><span class=\"params\">(NumericFns&lt;?&gt; ob)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Math.abs(num.doubleValue) == Math.abs(num.doubleValue())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然，通配符的匹配区间也是可以限制的</strong></p>\n<ul>\n<li>上层约束：<code>&lt;? extends superclass&gt;</code></li>\n<li>下层约束：<code>&lt;? super subclass&gt;</code></li>\n</ul>\n<h2 id=\"范型方法\"><a href=\"#范型方法\" class=\"headerlink\" title=\"范型方法\"></a>范型方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;type-param-list&gt; ret-type meth-name(param-list)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">demoMethod</span><span class=\"params\">(T param)</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"菱形运算符-实现类型推断\"><a href=\"#菱形运算符-实现类型推断\" class=\"headerlink\" title=\"菱形运算符 实现类型推断\"></a>菱形运算符 实现类型推断</h2><p>jdk1.7 以前</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TwoGen&lt;Integer, String&gt; tgOb = <span class=\"keyword\">new</span> TwoGen&lt;Integer, String&gt;(<span class=\"number\">42</span>, <span class=\"string\">\"testString\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>jdk1.7 及以后</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TwoGen&lt;Integer, String&gt; tgOb = <span class=\"keyword\">new</span> TwoGen&lt;&gt;(<span class=\"number\">42</span>, <span class=\"string\">\"testString\"</span>);</span><br></pre></td></tr></table></figure>"},{"title":"FP in Java","toc":true,"date":"2021-04-10T16:00:00.000Z","updated":"2021-04-11T16:00:00.000Z","_content":"\n一直有争论到底是函数式好还是面向对象好。\n\n作为一个精通 js，并且正在学习 java 的开发者来说，js 的混合开发体验异常的美好。\n\n> 我这里讲的混合开发，是指在 class 的 method 中使用函数式的思想。java8 的出现，让我在 java 中也能够使用同样的开发模式。\n\n这篇文章介绍了常用的函数式 API，如 compose, monad, curry,以及如何在 java 中使用常用的函数式的思想进行开发。\n\n这篇文章受限于个人后端的开发水平以及对函数式编程的理解，将会长期更新。\n\n<!-- more -->\n\n# 如何在 java 中使用函数式？\n\n直接上代码，假设有个功能需要依次用到 methodA, methodB, methodC，三个方法才能算出结果\n\nOOP 格式\n\n```java\npublic class FPDemo {\n  public static void main(String args[]) {\n    var input = \"example input for oop\"\n    var tempval1 = methodA(input);\n    var tempval2 = methodA(tempval1);\n    var ans = methodA(tempval2);\n  }\n  public String methodA(String val) {\n    /*code here*/\n    return temp1\n  }\n  public String methodB(String val) {\n    /*code here*/\n    return temp2\n  }\n  public String methodC(String val) {\n    /*code here*/\n    return temp3\n  }\n}\n```\n\nFP in OOP\n\n```java\npublic class FPDemo {\n  public static void main(String args[]) {\n    Function<String, String> fun1 = val -> temp1\n    Function<String, String> fun2 = val -> temp2\n    Function<String, String> fun3 = val -> temp3\n\n    var input = \"example input for FP\"\n    fun3.compose(fun2).compose(fun1).apply(\"example input for FP\")\n  }\n}\n```\n\n上述的例子个人觉得是在 class 中整合函数式的最佳实践，减少了无用代码，增加了可读性\n\n# lambda 表达式\n\nλ(lambda)-expressions 在函数式编程中是创建匿名**函数**的一种方式，一般用来作为一个参数传递给高阶函数(higher-order-function)，比如 Map，reduce，filter。\n\n> 在 Java8 以前是没有 lambda 表达式的概念的，在这之前会使用一种名为内部匿名类的方式来实现\n\n个人认为虽然 Java 是 oop，但是**一个合格的 lambda 表达式应该符合函数式编程的纯函数的概念**。\n\n## 那么什么是纯函数？\n\n- 不变性：如果传入的值相同，那么返回的值一定相同\n- 无副作用：该函数不能有语义上可观察的函数副作用\n  - 全局修改变量，属性，或者是数据结构\n  - I/O 操作\n  - 抛出错误\n  - Log\n  - 查询操作：数据库操作，本地数据修改\n\n# 常用流操作\n\n> 常见的几种流操作都是**惰性求值**，比如 map, filter, flatMap,这么设计是为了让 java 去管理背后的操作, 可以在集合类上级联多种操作,但**迭代只需一次**\n\n## map\n\nmap 可以实现 List 的类型转换, 如`[1, 2, 3]` -> `[\"1\", \"2\", \"3\"]`\n![](/images/java/stream-map.png)\n\n```java\nList.of(1, 2, 3).stream()\n  .map(String::valueOf)\n  .collect(toList());\n```\n\n> String:: valueOf 等价于 val -> String.valueOf(val);\n\n## flatMap\n\n将几个小 List 整合成一个大的 List\n\n![](/images/java/stream-flatMap.png)\n\n```java\nStream.of(asList(1, 2, 3), asList(4, 5, 6))\n  .flatMap(list -> list.stream())\n  .collect(toList())\n\n```\n\n## filter\n\n过滤操作，将 list 中无用的元素过滤掉\n\n![](/images/java/stream-filter.png)\n\n```java\nList<String> beginningWithNumbers = Stream.of(\"a\", \"1abc\", \"abc1\")\n      .filter(value -> isDigit(value.charAt(0)))\n      .collect(toList());\n```\n\n## reduce（及早求值）\n\n这里主要介绍三参数 reduce，两参数和一参数没有太大意义\n\n三参数的 reduce，可以实现类型转换 + 聚合，比如 将 `[1, 2, 3]`转换成 \"123\"\n\n```java\nString tempRet = List.of(1, 2, 3)\n  .stream()\n  .reduce(\n    \"\",\n    (acc, val) -> acc + val,\n    (left, right) -> left + right\n  );\n```\n\n三参数 reduce 的函数签名\n\n```java\n<U> U reduce(U identity,\n                 BiFunction<U, ? super T, U> accumulator,\n                 BinaryOperator<U> combiner);\n```\n\n- 第一个参数是初始值, reduce 最后的结果类型和它相同\n- 第二个参数是累加函数，可以转换类型，我们简单看下它的函数签名\n  - BiFunction 接受两个传入参数, 类型为 U, 和 T，U 为累加值，T 为当前传入值\n  - BiFunction 的返回参数和累加值相同 U\n\n* 第三个参数是结合函数，负责前后两个容器的累加方式。\n\n容器这个概念，你可能不明白我在说什么，下面介绍下 reduce 的创建过程，看完你就知道什么是容器了\n\n1. 第一个参数，创建容器\n   ![](/images/java/stream-collection-supplier.png)\n2. 第二个参数，负责累加\n   ![](/images/java/stream-collection-accumulator.png)\n\n3. 第三个参数，负责容器间的组合方式\n   ![](/images/java/stream-collection-combiner.png)\n\n# 高阶函数使用\n\n高阶函数说的简单点就是函数作为参数传入另外一个函数，实现函数组合，从而完成更加复杂的功能\n\n## compose & andThen\n\n假如函数是水管，那么 组合函数 就是连接水管与水管的胶水，而数据便是水流。functionA, functionB, functionC 通过 组合函数 形成了一个新的函数，实现数据的流动，比如：\n**dataflow->functionA ----compose----> functionB ----compose---->functionC->result**\n\ncompose 和 andThen 都能够 实现将多个函数组合。只是顺序是相反的\n\n对于如下两个函数，我们通过 compose 可以实现先乘后加或者先加后乘，**compose 的顺序是从右往左的，而 andThen 是从左往右的**\n\n```java\nFunction<Integer, Integer> multiple2 = num -> num * 2;\nFunction<Integer, Integer> add5 = num -> num + 5;\n\nmultiple2.compose(add5).apply(3) // -> 16\nmultiple2.andThen(add5).apply(3) // -> 11\n\nadd5.compose(multiple2).apply(3) // -> 11\nmultiple2.compose(add5).apply(3) // -> 16\n```\n\n## curry\n\n就我查阅了很多文章，java 中并没有好的方式去是实现 curry。\n\n### curry 的概念\n\ncurry 是高阶函数的典范，传入一个参数，会返回一个新的函数，只有参数完全传递，才会得出最后的结果。\n\n比如，一个函数有三个参数 a,b,c。将其 curry 后，那么它的函数签名将会变成这样\n\n```java\nFunction<String,\n    Function<Integer,\n      Function<Integer, String>>> curried = curry();\n```\n\n我们执行这个函数会得到如下结果\n\n```java\nSystem.out.println(curried); // -> Currier0$$Lambda$1/0x0000000800060840@64b8f8f4\nSystem.out.println(curried.apply(\"e\")); // -> Currier0$$Lambda$2/0x0000000800062840@1996cd68\nSystem.out.println(curried.apply(\"e\").apply(27)); // -> Currier0$$Lambda$3/0x0000000800062c40@555590\nSystem.out.println(curried.apply(\"e\").apply(27).apply(18)); // -> e2718\n```\n\n由于 java 每个函数都要声明其签名，所以并没有便捷的方式去将一个函数 curry 化。因此不推荐在 java 中使用\n\n> 在 haskell 中，所有的函数是默认 curry 化的，而在 js 中由于弱类型的原因，也可以通过 curry(normalFunction) 的方式，将一个普通函数转变为 curry 函数。\n\n# monad in Java\n\n## 什么是 monad？\n\nmonad 的完全定义对我来说是个哲学话题。。。。说的简单点，monad 可以实现将你传入的类型，包裹起来，然后返回给你一个新的容器类型，\n![](/images/java/java-monad.png)\n\n## Optional monad 处理 nullPointerException\n\n由于我们操作的是 monad 的 container，因此著名的 nullPointerException 就可以通过 Optional monad 轻而易举的解决\n\n下面代码传入一个可能为 null 的值，通过一系列操作后，如果传入的值是 null，就返回 默认值 3\n\n```java\n\nInteger result = Optional.ofNullable(somethingMightNull)\n  .stream()\n  /*more operation*/\n  .orElse(3)\n\n```\n\n更多细节阅读：[Guide To Java 8 Optional](https://www.baeldung.com/java-optional)\n\n## CompletableFuture<T> 处理异步\n\nCompletableFuture 接受一个异步函数，使用与 js 的 Promise 类似\n\n以获取股票价格为例，看看如何使用 CompletableFuture：\n\n```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // 创建异步执行任务:\n        CompletableFuture<Double> cf = CompletableFuture.supplyAsync(Main::fetchPrice);\n        // 如果执行成功:\n        cf.thenAccept((result) -> {\n            System.out.println(\"price: \" + result);\n        });\n        // 如果执行异常:\n        cf.exceptionally((e) -> {\n            e.printStackTrace();\n            return null;\n        });\n        // 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:\n        Thread.sleep(200);\n    }\n\n    static Double fetchPrice() {\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n        }\n        if (Math.random() < 0.3) {\n            throw new RuntimeException(\"fetch price failed!\");\n        }\n        return 5 + Math.random() * 20;\n    }\n}\n\n```\n\n# 参考\n\n## 书\n\n- [Functional Programming in JavaScript](https://www.amazon.com/Functional-Programming-JavaScript-functional-techniques/dp/1617292826)\n\n* [Java 8 Lambdas: Pragmatic Functional Programming](https://www.amazon.com/Java-Lambdas-Pragmatic-Functional-Programming-ebook/dp/B00J3B3J3C)\n\n## 文章\n\n- [haskell: Lambda expression](https://www.cs.bham.ac.uk/~vxs/teaching/Haskell/handouts/lambda.pdf)\n\n* [stackOverflow: Can a java lambda have more than 1 parameter?](https://stackoverflow.com/questions/27872387/can-a-java-lambda-have-more-than-1-parameter)\n\n- [oracle doc: java.util.function.Function](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/Function.html)\n\n* [Java Curry](https://medium.com/galileo-onwards/java-curry-997fb357b47e)\n\n- [Adding currying to Java 8](https://adorow.github.io/blog/2017/06/04/currying-in-java)\n\n* [Java 8: Composing functions using compose and andThen](https://www.deadcoderising.com/2015-09-07-java-8-functional-composition-using-compose-and-andthen/)\n\n- [Java Functional Composition](http://tutorials.jenkov.com/java-functional-programming/functional-composition.html)\n\n* [Write a monad, in Java, seriously?](https://medium.com/swlh/write-a-monad-in-java-seriously-50a9047c9839)\n","source":"_posts/java-functional-programming.md","raw":"---\ntitle: FP in Java\ncategories: [后端]\ntags: [fp]\ntoc: true\ndate: 2021/4/11\nupdated: 2021/4/12\n---\n\n一直有争论到底是函数式好还是面向对象好。\n\n作为一个精通 js，并且正在学习 java 的开发者来说，js 的混合开发体验异常的美好。\n\n> 我这里讲的混合开发，是指在 class 的 method 中使用函数式的思想。java8 的出现，让我在 java 中也能够使用同样的开发模式。\n\n这篇文章介绍了常用的函数式 API，如 compose, monad, curry,以及如何在 java 中使用常用的函数式的思想进行开发。\n\n这篇文章受限于个人后端的开发水平以及对函数式编程的理解，将会长期更新。\n\n<!-- more -->\n\n# 如何在 java 中使用函数式？\n\n直接上代码，假设有个功能需要依次用到 methodA, methodB, methodC，三个方法才能算出结果\n\nOOP 格式\n\n```java\npublic class FPDemo {\n  public static void main(String args[]) {\n    var input = \"example input for oop\"\n    var tempval1 = methodA(input);\n    var tempval2 = methodA(tempval1);\n    var ans = methodA(tempval2);\n  }\n  public String methodA(String val) {\n    /*code here*/\n    return temp1\n  }\n  public String methodB(String val) {\n    /*code here*/\n    return temp2\n  }\n  public String methodC(String val) {\n    /*code here*/\n    return temp3\n  }\n}\n```\n\nFP in OOP\n\n```java\npublic class FPDemo {\n  public static void main(String args[]) {\n    Function<String, String> fun1 = val -> temp1\n    Function<String, String> fun2 = val -> temp2\n    Function<String, String> fun3 = val -> temp3\n\n    var input = \"example input for FP\"\n    fun3.compose(fun2).compose(fun1).apply(\"example input for FP\")\n  }\n}\n```\n\n上述的例子个人觉得是在 class 中整合函数式的最佳实践，减少了无用代码，增加了可读性\n\n# lambda 表达式\n\nλ(lambda)-expressions 在函数式编程中是创建匿名**函数**的一种方式，一般用来作为一个参数传递给高阶函数(higher-order-function)，比如 Map，reduce，filter。\n\n> 在 Java8 以前是没有 lambda 表达式的概念的，在这之前会使用一种名为内部匿名类的方式来实现\n\n个人认为虽然 Java 是 oop，但是**一个合格的 lambda 表达式应该符合函数式编程的纯函数的概念**。\n\n## 那么什么是纯函数？\n\n- 不变性：如果传入的值相同，那么返回的值一定相同\n- 无副作用：该函数不能有语义上可观察的函数副作用\n  - 全局修改变量，属性，或者是数据结构\n  - I/O 操作\n  - 抛出错误\n  - Log\n  - 查询操作：数据库操作，本地数据修改\n\n# 常用流操作\n\n> 常见的几种流操作都是**惰性求值**，比如 map, filter, flatMap,这么设计是为了让 java 去管理背后的操作, 可以在集合类上级联多种操作,但**迭代只需一次**\n\n## map\n\nmap 可以实现 List 的类型转换, 如`[1, 2, 3]` -> `[\"1\", \"2\", \"3\"]`\n![](/images/java/stream-map.png)\n\n```java\nList.of(1, 2, 3).stream()\n  .map(String::valueOf)\n  .collect(toList());\n```\n\n> String:: valueOf 等价于 val -> String.valueOf(val);\n\n## flatMap\n\n将几个小 List 整合成一个大的 List\n\n![](/images/java/stream-flatMap.png)\n\n```java\nStream.of(asList(1, 2, 3), asList(4, 5, 6))\n  .flatMap(list -> list.stream())\n  .collect(toList())\n\n```\n\n## filter\n\n过滤操作，将 list 中无用的元素过滤掉\n\n![](/images/java/stream-filter.png)\n\n```java\nList<String> beginningWithNumbers = Stream.of(\"a\", \"1abc\", \"abc1\")\n      .filter(value -> isDigit(value.charAt(0)))\n      .collect(toList());\n```\n\n## reduce（及早求值）\n\n这里主要介绍三参数 reduce，两参数和一参数没有太大意义\n\n三参数的 reduce，可以实现类型转换 + 聚合，比如 将 `[1, 2, 3]`转换成 \"123\"\n\n```java\nString tempRet = List.of(1, 2, 3)\n  .stream()\n  .reduce(\n    \"\",\n    (acc, val) -> acc + val,\n    (left, right) -> left + right\n  );\n```\n\n三参数 reduce 的函数签名\n\n```java\n<U> U reduce(U identity,\n                 BiFunction<U, ? super T, U> accumulator,\n                 BinaryOperator<U> combiner);\n```\n\n- 第一个参数是初始值, reduce 最后的结果类型和它相同\n- 第二个参数是累加函数，可以转换类型，我们简单看下它的函数签名\n  - BiFunction 接受两个传入参数, 类型为 U, 和 T，U 为累加值，T 为当前传入值\n  - BiFunction 的返回参数和累加值相同 U\n\n* 第三个参数是结合函数，负责前后两个容器的累加方式。\n\n容器这个概念，你可能不明白我在说什么，下面介绍下 reduce 的创建过程，看完你就知道什么是容器了\n\n1. 第一个参数，创建容器\n   ![](/images/java/stream-collection-supplier.png)\n2. 第二个参数，负责累加\n   ![](/images/java/stream-collection-accumulator.png)\n\n3. 第三个参数，负责容器间的组合方式\n   ![](/images/java/stream-collection-combiner.png)\n\n# 高阶函数使用\n\n高阶函数说的简单点就是函数作为参数传入另外一个函数，实现函数组合，从而完成更加复杂的功能\n\n## compose & andThen\n\n假如函数是水管，那么 组合函数 就是连接水管与水管的胶水，而数据便是水流。functionA, functionB, functionC 通过 组合函数 形成了一个新的函数，实现数据的流动，比如：\n**dataflow->functionA ----compose----> functionB ----compose---->functionC->result**\n\ncompose 和 andThen 都能够 实现将多个函数组合。只是顺序是相反的\n\n对于如下两个函数，我们通过 compose 可以实现先乘后加或者先加后乘，**compose 的顺序是从右往左的，而 andThen 是从左往右的**\n\n```java\nFunction<Integer, Integer> multiple2 = num -> num * 2;\nFunction<Integer, Integer> add5 = num -> num + 5;\n\nmultiple2.compose(add5).apply(3) // -> 16\nmultiple2.andThen(add5).apply(3) // -> 11\n\nadd5.compose(multiple2).apply(3) // -> 11\nmultiple2.compose(add5).apply(3) // -> 16\n```\n\n## curry\n\n就我查阅了很多文章，java 中并没有好的方式去是实现 curry。\n\n### curry 的概念\n\ncurry 是高阶函数的典范，传入一个参数，会返回一个新的函数，只有参数完全传递，才会得出最后的结果。\n\n比如，一个函数有三个参数 a,b,c。将其 curry 后，那么它的函数签名将会变成这样\n\n```java\nFunction<String,\n    Function<Integer,\n      Function<Integer, String>>> curried = curry();\n```\n\n我们执行这个函数会得到如下结果\n\n```java\nSystem.out.println(curried); // -> Currier0$$Lambda$1/0x0000000800060840@64b8f8f4\nSystem.out.println(curried.apply(\"e\")); // -> Currier0$$Lambda$2/0x0000000800062840@1996cd68\nSystem.out.println(curried.apply(\"e\").apply(27)); // -> Currier0$$Lambda$3/0x0000000800062c40@555590\nSystem.out.println(curried.apply(\"e\").apply(27).apply(18)); // -> e2718\n```\n\n由于 java 每个函数都要声明其签名，所以并没有便捷的方式去将一个函数 curry 化。因此不推荐在 java 中使用\n\n> 在 haskell 中，所有的函数是默认 curry 化的，而在 js 中由于弱类型的原因，也可以通过 curry(normalFunction) 的方式，将一个普通函数转变为 curry 函数。\n\n# monad in Java\n\n## 什么是 monad？\n\nmonad 的完全定义对我来说是个哲学话题。。。。说的简单点，monad 可以实现将你传入的类型，包裹起来，然后返回给你一个新的容器类型，\n![](/images/java/java-monad.png)\n\n## Optional monad 处理 nullPointerException\n\n由于我们操作的是 monad 的 container，因此著名的 nullPointerException 就可以通过 Optional monad 轻而易举的解决\n\n下面代码传入一个可能为 null 的值，通过一系列操作后，如果传入的值是 null，就返回 默认值 3\n\n```java\n\nInteger result = Optional.ofNullable(somethingMightNull)\n  .stream()\n  /*more operation*/\n  .orElse(3)\n\n```\n\n更多细节阅读：[Guide To Java 8 Optional](https://www.baeldung.com/java-optional)\n\n## CompletableFuture<T> 处理异步\n\nCompletableFuture 接受一个异步函数，使用与 js 的 Promise 类似\n\n以获取股票价格为例，看看如何使用 CompletableFuture：\n\n```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // 创建异步执行任务:\n        CompletableFuture<Double> cf = CompletableFuture.supplyAsync(Main::fetchPrice);\n        // 如果执行成功:\n        cf.thenAccept((result) -> {\n            System.out.println(\"price: \" + result);\n        });\n        // 如果执行异常:\n        cf.exceptionally((e) -> {\n            e.printStackTrace();\n            return null;\n        });\n        // 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:\n        Thread.sleep(200);\n    }\n\n    static Double fetchPrice() {\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n        }\n        if (Math.random() < 0.3) {\n            throw new RuntimeException(\"fetch price failed!\");\n        }\n        return 5 + Math.random() * 20;\n    }\n}\n\n```\n\n# 参考\n\n## 书\n\n- [Functional Programming in JavaScript](https://www.amazon.com/Functional-Programming-JavaScript-functional-techniques/dp/1617292826)\n\n* [Java 8 Lambdas: Pragmatic Functional Programming](https://www.amazon.com/Java-Lambdas-Pragmatic-Functional-Programming-ebook/dp/B00J3B3J3C)\n\n## 文章\n\n- [haskell: Lambda expression](https://www.cs.bham.ac.uk/~vxs/teaching/Haskell/handouts/lambda.pdf)\n\n* [stackOverflow: Can a java lambda have more than 1 parameter?](https://stackoverflow.com/questions/27872387/can-a-java-lambda-have-more-than-1-parameter)\n\n- [oracle doc: java.util.function.Function](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/Function.html)\n\n* [Java Curry](https://medium.com/galileo-onwards/java-curry-997fb357b47e)\n\n- [Adding currying to Java 8](https://adorow.github.io/blog/2017/06/04/currying-in-java)\n\n* [Java 8: Composing functions using compose and andThen](https://www.deadcoderising.com/2015-09-07-java-8-functional-composition-using-compose-and-andthen/)\n\n- [Java Functional Composition](http://tutorials.jenkov.com/java-functional-programming/functional-composition.html)\n\n* [Write a monad, in Java, seriously?](https://medium.com/swlh/write-a-monad-in-java-seriously-50a9047c9839)\n","slug":"java-functional-programming","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ju0035goswhscyevus","content":"<p>一直有争论到底是函数式好还是面向对象好。</p>\n<p>作为一个精通 js，并且正在学习 java 的开发者来说，js 的混合开发体验异常的美好。</p>\n<blockquote>\n<p>我这里讲的混合开发，是指在 class 的 method 中使用函数式的思想。java8 的出现，让我在 java 中也能够使用同样的开发模式。</p>\n</blockquote>\n<p>这篇文章介绍了常用的函数式 API，如 compose, monad, curry,以及如何在 java 中使用常用的函数式的思想进行开发。</p>\n<p>这篇文章受限于个人后端的开发水平以及对函数式编程的理解，将会长期更新。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"如何在-java-中使用函数式？\"><a href=\"#如何在-java-中使用函数式？\" class=\"headerlink\" title=\"如何在 java 中使用函数式？\"></a>如何在 java 中使用函数式？</h1><p>直接上代码，假设有个功能需要依次用到 methodA, methodB, methodC，三个方法才能算出结果</p>\n<p>OOP 格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FPDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"string\">\"example input for oop\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempval1 = methodA(input);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempval2 = methodA(tempval1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = methodA(tempval2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">methodA</span><span class=\"params\">(String val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*code here*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">methodB</span><span class=\"params\">(String val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*code here*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">methodC</span><span class=\"params\">(String val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*code here*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FP in OOP</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FPDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">    Function&lt;String, String&gt; fun1 = val -&gt; temp1</span><br><span class=\"line\">    Function&lt;String, String&gt; fun2 = val -&gt; temp2</span><br><span class=\"line\">    Function&lt;String, String&gt; fun3 = val -&gt; temp3</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"string\">\"example input for FP\"</span></span><br><span class=\"line\">    fun3.compose(fun2).compose(fun1).apply(<span class=\"string\">\"example input for FP\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述的例子个人觉得是在 class 中整合函数式的最佳实践，减少了无用代码，增加了可读性</p>\n<h1 id=\"lambda-表达式\"><a href=\"#lambda-表达式\" class=\"headerlink\" title=\"lambda 表达式\"></a>lambda 表达式</h1><p>λ(lambda)-expressions 在函数式编程中是创建匿名<strong>函数</strong>的一种方式，一般用来作为一个参数传递给高阶函数(higher-order-function)，比如 Map，reduce，filter。</p>\n<blockquote>\n<p>在 Java8 以前是没有 lambda 表达式的概念的，在这之前会使用一种名为内部匿名类的方式来实现</p>\n</blockquote>\n<p>个人认为虽然 Java 是 oop，但是<strong>一个合格的 lambda 表达式应该符合函数式编程的纯函数的概念</strong>。</p>\n<h2 id=\"那么什么是纯函数？\"><a href=\"#那么什么是纯函数？\" class=\"headerlink\" title=\"那么什么是纯函数？\"></a>那么什么是纯函数？</h2><ul>\n<li>不变性：如果传入的值相同，那么返回的值一定相同</li>\n<li>无副作用：该函数不能有语义上可观察的函数副作用<ul>\n<li>全局修改变量，属性，或者是数据结构</li>\n<li>I/O 操作</li>\n<li>抛出错误</li>\n<li>Log</li>\n<li>查询操作：数据库操作，本地数据修改</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"常用流操作\"><a href=\"#常用流操作\" class=\"headerlink\" title=\"常用流操作\"></a>常用流操作</h1><blockquote>\n<p>常见的几种流操作都是<strong>惰性求值</strong>，比如 map, filter, flatMap,这么设计是为了让 java 去管理背后的操作, 可以在集合类上级联多种操作,但<strong>迭代只需一次</strong></p>\n</blockquote>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>map 可以实现 List 的类型转换, 如<code>[1, 2, 3]</code> -&gt; <code>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</code><br><img src=\"/images/java/stream-map.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).stream()</span><br><span class=\"line\">  .map(String::valueOf)</span><br><span class=\"line\">  .collect(toList());</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>String:: valueOf 等价于 val -&gt; String.valueOf(val);</p>\n</blockquote>\n<h2 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h2><p>将几个小 List 整合成一个大的 List</p>\n<p><img src=\"/images/java/stream-flatMap.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream.of(asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>), asList(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">  .flatMap(list -&gt; list.stream())</span><br><span class=\"line\">  .collect(toList())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>过滤操作，将 list 中无用的元素过滤掉</p>\n<p><img src=\"/images/java/stream-filter.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; beginningWithNumbers = Stream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"1abc\"</span>, <span class=\"string\">\"abc1\"</span>)</span><br><span class=\"line\">      .filter(value -&gt; isDigit(value.charAt(<span class=\"number\">0</span>)))</span><br><span class=\"line\">      .collect(toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reduce（及早求值）\"><a href=\"#reduce（及早求值）\" class=\"headerlink\" title=\"reduce（及早求值）\"></a>reduce（及早求值）</h2><p>这里主要介绍三参数 reduce，两参数和一参数没有太大意义</p>\n<p>三参数的 reduce，可以实现类型转换 + 聚合，比如 将 <code>[1, 2, 3]</code>转换成 “123”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String tempRet = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  .stream()</span><br><span class=\"line\">  .reduce(</span><br><span class=\"line\">    <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    (acc, val) -&gt; acc + val,</span><br><span class=\"line\">    (left, right) -&gt; left + right</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n\n<p>三参数 reduce 的函数签名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;U&gt; <span class=\"function\">U <span class=\"title\">reduce</span><span class=\"params\">(U identity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 BiFunction&lt;U, ? <span class=\"keyword\">super</span> T, U&gt; accumulator,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 BinaryOperator&lt;U&gt; combiner)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个参数是初始值, reduce 最后的结果类型和它相同</li>\n<li>第二个参数是累加函数，可以转换类型，我们简单看下它的函数签名<ul>\n<li>BiFunction 接受两个传入参数, 类型为 U, 和 T，U 为累加值，T 为当前传入值</li>\n<li>BiFunction 的返回参数和累加值相同 U</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>第三个参数是结合函数，负责前后两个容器的累加方式。</li>\n</ul>\n<p>容器这个概念，你可能不明白我在说什么，下面介绍下 reduce 的创建过程，看完你就知道什么是容器了</p>\n<ol>\n<li><p>第一个参数，创建容器<br><img src=\"/images/java/stream-collection-supplier.png\" alt=\"\"></p>\n</li>\n<li><p>第二个参数，负责累加<br><img src=\"/images/java/stream-collection-accumulator.png\" alt=\"\"></p>\n</li>\n<li><p>第三个参数，负责容器间的组合方式<br><img src=\"/images/java/stream-collection-combiner.png\" alt=\"\"></p>\n</li>\n</ol>\n<h1 id=\"高阶函数使用\"><a href=\"#高阶函数使用\" class=\"headerlink\" title=\"高阶函数使用\"></a>高阶函数使用</h1><p>高阶函数说的简单点就是函数作为参数传入另外一个函数，实现函数组合，从而完成更加复杂的功能</p>\n<h2 id=\"compose-amp-andThen\"><a href=\"#compose-amp-andThen\" class=\"headerlink\" title=\"compose &amp; andThen\"></a>compose &amp; andThen</h2><p>假如函数是水管，那么 组合函数 就是连接水管与水管的胶水，而数据便是水流。functionA, functionB, functionC 通过 组合函数 形成了一个新的函数，实现数据的流动，比如：<br><strong>dataflow-&gt;functionA —-compose—-&gt; functionB —-compose—-&gt;functionC-&gt;result</strong></p>\n<p>compose 和 andThen 都能够 实现将多个函数组合。只是顺序是相反的</p>\n<p>对于如下两个函数，我们通过 compose 可以实现先乘后加或者先加后乘，<strong>compose 的顺序是从右往左的，而 andThen 是从左往右的</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;Integer, Integer&gt; multiple2 = num -&gt; num * <span class=\"number\">2</span>;</span><br><span class=\"line\">Function&lt;Integer, Integer&gt; add5 = num -&gt; num + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">multiple2.compose(add5).apply(<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 16</span></span><br><span class=\"line\">multiple2.andThen(add5).apply(<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">add5.compose(multiple2).apply(<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 11</span></span><br><span class=\"line\">multiple2.compose(add5).apply(<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 16</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"curry\"><a href=\"#curry\" class=\"headerlink\" title=\"curry\"></a>curry</h2><p>就我查阅了很多文章，java 中并没有好的方式去是实现 curry。</p>\n<h3 id=\"curry-的概念\"><a href=\"#curry-的概念\" class=\"headerlink\" title=\"curry 的概念\"></a>curry 的概念</h3><p>curry 是高阶函数的典范，传入一个参数，会返回一个新的函数，只有参数完全传递，才会得出最后的结果。</p>\n<p>比如，一个函数有三个参数 a,b,c。将其 curry 后，那么它的函数签名将会变成这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;String,</span><br><span class=\"line\">    Function&lt;Integer,</span><br><span class=\"line\">      Function&lt;Integer, String&gt;&gt;&gt; curried = curry();</span><br></pre></td></tr></table></figure>\n\n<p>我们执行这个函数会得到如下结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(curried); <span class=\"comment\">// -&gt; Currier0$$Lambda$1/0x0000000800060840@64b8f8f4</span></span><br><span class=\"line\">System.out.println(curried.apply(<span class=\"string\">\"e\"</span>)); <span class=\"comment\">// -&gt; Currier0$$Lambda$2/0x0000000800062840@1996cd68</span></span><br><span class=\"line\">System.out.println(curried.apply(<span class=\"string\">\"e\"</span>).apply(<span class=\"number\">27</span>)); <span class=\"comment\">// -&gt; Currier0$$Lambda$3/0x0000000800062c40@555590</span></span><br><span class=\"line\">System.out.println(curried.apply(<span class=\"string\">\"e\"</span>).apply(<span class=\"number\">27</span>).apply(<span class=\"number\">18</span>)); <span class=\"comment\">// -&gt; e2718</span></span><br></pre></td></tr></table></figure>\n\n<p>由于 java 每个函数都要声明其签名，所以并没有便捷的方式去将一个函数 curry 化。因此不推荐在 java 中使用</p>\n<blockquote>\n<p>在 haskell 中，所有的函数是默认 curry 化的，而在 js 中由于弱类型的原因，也可以通过 curry(normalFunction) 的方式，将一个普通函数转变为 curry 函数。</p>\n</blockquote>\n<h1 id=\"monad-in-Java\"><a href=\"#monad-in-Java\" class=\"headerlink\" title=\"monad in Java\"></a>monad in Java</h1><h2 id=\"什么是-monad？\"><a href=\"#什么是-monad？\" class=\"headerlink\" title=\"什么是 monad？\"></a>什么是 monad？</h2><p>monad 的完全定义对我来说是个哲学话题。。。。说的简单点，monad 可以实现将你传入的类型，包裹起来，然后返回给你一个新的容器类型，<br><img src=\"/images/java/java-monad.png\" alt=\"\"></p>\n<h2 id=\"Optional-monad-处理-nullPointerException\"><a href=\"#Optional-monad-处理-nullPointerException\" class=\"headerlink\" title=\"Optional monad 处理 nullPointerException\"></a>Optional monad 处理 nullPointerException</h2><p>由于我们操作的是 monad 的 container，因此著名的 nullPointerException 就可以通过 Optional monad 轻而易举的解决</p>\n<p>下面代码传入一个可能为 null 的值，通过一系列操作后，如果传入的值是 null，就返回 默认值 3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Integer result = Optional.ofNullable(somethingMightNull)</span><br><span class=\"line\">  .stream()</span><br><span class=\"line\">  <span class=\"comment\">/*more operation*/</span></span><br><span class=\"line\">  .orElse(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>更多细节阅读：<a href=\"https://www.baeldung.com/java-optional\" target=\"_blank\" rel=\"noopener\">Guide To Java 8 Optional</a></p>\n<h2 id=\"CompletableFuture-处理异步\"><a href=\"#CompletableFuture-处理异步\" class=\"headerlink\" title=\"CompletableFuture 处理异步\"></a>CompletableFuture<T> 处理异步</h2><p>CompletableFuture 接受一个异步函数，使用与 js 的 Promise 类似</p>\n<p>以获取股票价格为例，看看如何使用 CompletableFuture：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建异步执行任务:</span></span><br><span class=\"line\">        CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(Main::fetchPrice);</span><br><span class=\"line\">        <span class=\"comment\">// 如果执行成功:</span></span><br><span class=\"line\">        cf.thenAccept((result) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"price: \"</span> + result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 如果执行异常:</span></span><br><span class=\"line\">        cf.exceptionally((e) -&gt; &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Double <span class=\"title\">fetchPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Math.random() &lt; <span class=\"number\">0.3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"fetch price failed!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">5</span> + Math.random() * <span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><ul>\n<li><a href=\"https://www.amazon.com/Functional-Programming-JavaScript-functional-techniques/dp/1617292826\" target=\"_blank\" rel=\"noopener\">Functional Programming in JavaScript</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.amazon.com/Java-Lambdas-Pragmatic-Functional-Programming-ebook/dp/B00J3B3J3C\" target=\"_blank\" rel=\"noopener\">Java 8 Lambdas: Pragmatic Functional Programming</a></li>\n</ul>\n<h2 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h2><ul>\n<li><a href=\"https://www.cs.bham.ac.uk/~vxs/teaching/Haskell/handouts/lambda.pdf\" target=\"_blank\" rel=\"noopener\">haskell: Lambda expression</a></li>\n</ul>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/27872387/can-a-java-lambda-have-more-than-1-parameter\" target=\"_blank\" rel=\"noopener\">stackOverflow: Can a java lambda have more than 1 parameter?</a></li>\n</ul>\n<ul>\n<li><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/Function.html\" target=\"_blank\" rel=\"noopener\">oracle doc: java.util.function.Function</a></li>\n</ul>\n<ul>\n<li><a href=\"https://medium.com/galileo-onwards/java-curry-997fb357b47e\" target=\"_blank\" rel=\"noopener\">Java Curry</a></li>\n</ul>\n<ul>\n<li><a href=\"https://adorow.github.io/blog/2017/06/04/currying-in-java\" target=\"_blank\" rel=\"noopener\">Adding currying to Java 8</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.deadcoderising.com/2015-09-07-java-8-functional-composition-using-compose-and-andthen/\" target=\"_blank\" rel=\"noopener\">Java 8: Composing functions using compose and andThen</a></li>\n</ul>\n<ul>\n<li><a href=\"http://tutorials.jenkov.com/java-functional-programming/functional-composition.html\" target=\"_blank\" rel=\"noopener\">Java Functional Composition</a></li>\n</ul>\n<ul>\n<li><a href=\"https://medium.com/swlh/write-a-monad-in-java-seriously-50a9047c9839\" target=\"_blank\" rel=\"noopener\">Write a monad, in Java, seriously?</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>一直有争论到底是函数式好还是面向对象好。</p>\n<p>作为一个精通 js，并且正在学习 java 的开发者来说，js 的混合开发体验异常的美好。</p>\n<blockquote>\n<p>我这里讲的混合开发，是指在 class 的 method 中使用函数式的思想。java8 的出现，让我在 java 中也能够使用同样的开发模式。</p>\n</blockquote>\n<p>这篇文章介绍了常用的函数式 API，如 compose, monad, curry,以及如何在 java 中使用常用的函数式的思想进行开发。</p>\n<p>这篇文章受限于个人后端的开发水平以及对函数式编程的理解，将会长期更新。</p>","more":"<h1 id=\"如何在-java-中使用函数式？\"><a href=\"#如何在-java-中使用函数式？\" class=\"headerlink\" title=\"如何在 java 中使用函数式？\"></a>如何在 java 中使用函数式？</h1><p>直接上代码，假设有个功能需要依次用到 methodA, methodB, methodC，三个方法才能算出结果</p>\n<p>OOP 格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FPDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"string\">\"example input for oop\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempval1 = methodA(input);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempval2 = methodA(tempval1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ans = methodA(tempval2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">methodA</span><span class=\"params\">(String val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*code here*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">methodB</span><span class=\"params\">(String val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*code here*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">methodC</span><span class=\"params\">(String val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*code here*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp3</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FP in OOP</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FPDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</span><br><span class=\"line\">    Function&lt;String, String&gt; fun1 = val -&gt; temp1</span><br><span class=\"line\">    Function&lt;String, String&gt; fun2 = val -&gt; temp2</span><br><span class=\"line\">    Function&lt;String, String&gt; fun3 = val -&gt; temp3</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"string\">\"example input for FP\"</span></span><br><span class=\"line\">    fun3.compose(fun2).compose(fun1).apply(<span class=\"string\">\"example input for FP\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述的例子个人觉得是在 class 中整合函数式的最佳实践，减少了无用代码，增加了可读性</p>\n<h1 id=\"lambda-表达式\"><a href=\"#lambda-表达式\" class=\"headerlink\" title=\"lambda 表达式\"></a>lambda 表达式</h1><p>λ(lambda)-expressions 在函数式编程中是创建匿名<strong>函数</strong>的一种方式，一般用来作为一个参数传递给高阶函数(higher-order-function)，比如 Map，reduce，filter。</p>\n<blockquote>\n<p>在 Java8 以前是没有 lambda 表达式的概念的，在这之前会使用一种名为内部匿名类的方式来实现</p>\n</blockquote>\n<p>个人认为虽然 Java 是 oop，但是<strong>一个合格的 lambda 表达式应该符合函数式编程的纯函数的概念</strong>。</p>\n<h2 id=\"那么什么是纯函数？\"><a href=\"#那么什么是纯函数？\" class=\"headerlink\" title=\"那么什么是纯函数？\"></a>那么什么是纯函数？</h2><ul>\n<li>不变性：如果传入的值相同，那么返回的值一定相同</li>\n<li>无副作用：该函数不能有语义上可观察的函数副作用<ul>\n<li>全局修改变量，属性，或者是数据结构</li>\n<li>I/O 操作</li>\n<li>抛出错误</li>\n<li>Log</li>\n<li>查询操作：数据库操作，本地数据修改</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"常用流操作\"><a href=\"#常用流操作\" class=\"headerlink\" title=\"常用流操作\"></a>常用流操作</h1><blockquote>\n<p>常见的几种流操作都是<strong>惰性求值</strong>，比如 map, filter, flatMap,这么设计是为了让 java 去管理背后的操作, 可以在集合类上级联多种操作,但<strong>迭代只需一次</strong></p>\n</blockquote>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><p>map 可以实现 List 的类型转换, 如<code>[1, 2, 3]</code> -&gt; <code>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</code><br><img src=\"/images/java/stream-map.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).stream()</span><br><span class=\"line\">  .map(String::valueOf)</span><br><span class=\"line\">  .collect(toList());</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>String:: valueOf 等价于 val -&gt; String.valueOf(val);</p>\n</blockquote>\n<h2 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h2><p>将几个小 List 整合成一个大的 List</p>\n<p><img src=\"/images/java/stream-flatMap.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream.of(asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>), asList(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">  .flatMap(list -&gt; list.stream())</span><br><span class=\"line\">  .collect(toList())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>过滤操作，将 list 中无用的元素过滤掉</p>\n<p><img src=\"/images/java/stream-filter.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; beginningWithNumbers = Stream.of(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"1abc\"</span>, <span class=\"string\">\"abc1\"</span>)</span><br><span class=\"line\">      .filter(value -&gt; isDigit(value.charAt(<span class=\"number\">0</span>)))</span><br><span class=\"line\">      .collect(toList());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reduce（及早求值）\"><a href=\"#reduce（及早求值）\" class=\"headerlink\" title=\"reduce（及早求值）\"></a>reduce（及早求值）</h2><p>这里主要介绍三参数 reduce，两参数和一参数没有太大意义</p>\n<p>三参数的 reduce，可以实现类型转换 + 聚合，比如 将 <code>[1, 2, 3]</code>转换成 “123”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String tempRet = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  .stream()</span><br><span class=\"line\">  .reduce(</span><br><span class=\"line\">    <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    (acc, val) -&gt; acc + val,</span><br><span class=\"line\">    (left, right) -&gt; left + right</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n\n<p>三参数 reduce 的函数签名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;U&gt; <span class=\"function\">U <span class=\"title\">reduce</span><span class=\"params\">(U identity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 BiFunction&lt;U, ? <span class=\"keyword\">super</span> T, U&gt; accumulator,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                 BinaryOperator&lt;U&gt; combiner)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个参数是初始值, reduce 最后的结果类型和它相同</li>\n<li>第二个参数是累加函数，可以转换类型，我们简单看下它的函数签名<ul>\n<li>BiFunction 接受两个传入参数, 类型为 U, 和 T，U 为累加值，T 为当前传入值</li>\n<li>BiFunction 的返回参数和累加值相同 U</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>第三个参数是结合函数，负责前后两个容器的累加方式。</li>\n</ul>\n<p>容器这个概念，你可能不明白我在说什么，下面介绍下 reduce 的创建过程，看完你就知道什么是容器了</p>\n<ol>\n<li><p>第一个参数，创建容器<br><img src=\"/images/java/stream-collection-supplier.png\" alt=\"\"></p>\n</li>\n<li><p>第二个参数，负责累加<br><img src=\"/images/java/stream-collection-accumulator.png\" alt=\"\"></p>\n</li>\n<li><p>第三个参数，负责容器间的组合方式<br><img src=\"/images/java/stream-collection-combiner.png\" alt=\"\"></p>\n</li>\n</ol>\n<h1 id=\"高阶函数使用\"><a href=\"#高阶函数使用\" class=\"headerlink\" title=\"高阶函数使用\"></a>高阶函数使用</h1><p>高阶函数说的简单点就是函数作为参数传入另外一个函数，实现函数组合，从而完成更加复杂的功能</p>\n<h2 id=\"compose-amp-andThen\"><a href=\"#compose-amp-andThen\" class=\"headerlink\" title=\"compose &amp; andThen\"></a>compose &amp; andThen</h2><p>假如函数是水管，那么 组合函数 就是连接水管与水管的胶水，而数据便是水流。functionA, functionB, functionC 通过 组合函数 形成了一个新的函数，实现数据的流动，比如：<br><strong>dataflow-&gt;functionA —-compose—-&gt; functionB —-compose—-&gt;functionC-&gt;result</strong></p>\n<p>compose 和 andThen 都能够 实现将多个函数组合。只是顺序是相反的</p>\n<p>对于如下两个函数，我们通过 compose 可以实现先乘后加或者先加后乘，<strong>compose 的顺序是从右往左的，而 andThen 是从左往右的</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;Integer, Integer&gt; multiple2 = num -&gt; num * <span class=\"number\">2</span>;</span><br><span class=\"line\">Function&lt;Integer, Integer&gt; add5 = num -&gt; num + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">multiple2.compose(add5).apply(<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 16</span></span><br><span class=\"line\">multiple2.andThen(add5).apply(<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">add5.compose(multiple2).apply(<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 11</span></span><br><span class=\"line\">multiple2.compose(add5).apply(<span class=\"number\">3</span>) <span class=\"comment\">// -&gt; 16</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"curry\"><a href=\"#curry\" class=\"headerlink\" title=\"curry\"></a>curry</h2><p>就我查阅了很多文章，java 中并没有好的方式去是实现 curry。</p>\n<h3 id=\"curry-的概念\"><a href=\"#curry-的概念\" class=\"headerlink\" title=\"curry 的概念\"></a>curry 的概念</h3><p>curry 是高阶函数的典范，传入一个参数，会返回一个新的函数，只有参数完全传递，才会得出最后的结果。</p>\n<p>比如，一个函数有三个参数 a,b,c。将其 curry 后，那么它的函数签名将会变成这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function&lt;String,</span><br><span class=\"line\">    Function&lt;Integer,</span><br><span class=\"line\">      Function&lt;Integer, String&gt;&gt;&gt; curried = curry();</span><br></pre></td></tr></table></figure>\n\n<p>我们执行这个函数会得到如下结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(curried); <span class=\"comment\">// -&gt; Currier0$$Lambda$1/0x0000000800060840@64b8f8f4</span></span><br><span class=\"line\">System.out.println(curried.apply(<span class=\"string\">\"e\"</span>)); <span class=\"comment\">// -&gt; Currier0$$Lambda$2/0x0000000800062840@1996cd68</span></span><br><span class=\"line\">System.out.println(curried.apply(<span class=\"string\">\"e\"</span>).apply(<span class=\"number\">27</span>)); <span class=\"comment\">// -&gt; Currier0$$Lambda$3/0x0000000800062c40@555590</span></span><br><span class=\"line\">System.out.println(curried.apply(<span class=\"string\">\"e\"</span>).apply(<span class=\"number\">27</span>).apply(<span class=\"number\">18</span>)); <span class=\"comment\">// -&gt; e2718</span></span><br></pre></td></tr></table></figure>\n\n<p>由于 java 每个函数都要声明其签名，所以并没有便捷的方式去将一个函数 curry 化。因此不推荐在 java 中使用</p>\n<blockquote>\n<p>在 haskell 中，所有的函数是默认 curry 化的，而在 js 中由于弱类型的原因，也可以通过 curry(normalFunction) 的方式，将一个普通函数转变为 curry 函数。</p>\n</blockquote>\n<h1 id=\"monad-in-Java\"><a href=\"#monad-in-Java\" class=\"headerlink\" title=\"monad in Java\"></a>monad in Java</h1><h2 id=\"什么是-monad？\"><a href=\"#什么是-monad？\" class=\"headerlink\" title=\"什么是 monad？\"></a>什么是 monad？</h2><p>monad 的完全定义对我来说是个哲学话题。。。。说的简单点，monad 可以实现将你传入的类型，包裹起来，然后返回给你一个新的容器类型，<br><img src=\"/images/java/java-monad.png\" alt=\"\"></p>\n<h2 id=\"Optional-monad-处理-nullPointerException\"><a href=\"#Optional-monad-处理-nullPointerException\" class=\"headerlink\" title=\"Optional monad 处理 nullPointerException\"></a>Optional monad 处理 nullPointerException</h2><p>由于我们操作的是 monad 的 container，因此著名的 nullPointerException 就可以通过 Optional monad 轻而易举的解决</p>\n<p>下面代码传入一个可能为 null 的值，通过一系列操作后，如果传入的值是 null，就返回 默认值 3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Integer result = Optional.ofNullable(somethingMightNull)</span><br><span class=\"line\">  .stream()</span><br><span class=\"line\">  <span class=\"comment\">/*more operation*/</span></span><br><span class=\"line\">  .orElse(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>更多细节阅读：<a href=\"https://www.baeldung.com/java-optional\" target=\"_blank\" rel=\"noopener\">Guide To Java 8 Optional</a></p>\n<h2 id=\"CompletableFuture-处理异步\"><a href=\"#CompletableFuture-处理异步\" class=\"headerlink\" title=\"CompletableFuture 处理异步\"></a>CompletableFuture<T> 处理异步</h2><p>CompletableFuture 接受一个异步函数，使用与 js 的 Promise 类似</p>\n<p>以获取股票价格为例，看看如何使用 CompletableFuture：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建异步执行任务:</span></span><br><span class=\"line\">        CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(Main::fetchPrice);</span><br><span class=\"line\">        <span class=\"comment\">// 如果执行成功:</span></span><br><span class=\"line\">        cf.thenAccept((result) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"price: \"</span> + result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 如果执行异常:</span></span><br><span class=\"line\">        cf.exceptionally((e) -&gt; &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Double <span class=\"title\">fetchPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Math.random() &lt; <span class=\"number\">0.3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"fetch price failed!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">5</span> + Math.random() * <span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><ul>\n<li><a href=\"https://www.amazon.com/Functional-Programming-JavaScript-functional-techniques/dp/1617292826\" target=\"_blank\" rel=\"noopener\">Functional Programming in JavaScript</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.amazon.com/Java-Lambdas-Pragmatic-Functional-Programming-ebook/dp/B00J3B3J3C\" target=\"_blank\" rel=\"noopener\">Java 8 Lambdas: Pragmatic Functional Programming</a></li>\n</ul>\n<h2 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h2><ul>\n<li><a href=\"https://www.cs.bham.ac.uk/~vxs/teaching/Haskell/handouts/lambda.pdf\" target=\"_blank\" rel=\"noopener\">haskell: Lambda expression</a></li>\n</ul>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/27872387/can-a-java-lambda-have-more-than-1-parameter\" target=\"_blank\" rel=\"noopener\">stackOverflow: Can a java lambda have more than 1 parameter?</a></li>\n</ul>\n<ul>\n<li><a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/function/Function.html\" target=\"_blank\" rel=\"noopener\">oracle doc: java.util.function.Function</a></li>\n</ul>\n<ul>\n<li><a href=\"https://medium.com/galileo-onwards/java-curry-997fb357b47e\" target=\"_blank\" rel=\"noopener\">Java Curry</a></li>\n</ul>\n<ul>\n<li><a href=\"https://adorow.github.io/blog/2017/06/04/currying-in-java\" target=\"_blank\" rel=\"noopener\">Adding currying to Java 8</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.deadcoderising.com/2015-09-07-java-8-functional-composition-using-compose-and-andthen/\" target=\"_blank\" rel=\"noopener\">Java 8: Composing functions using compose and andThen</a></li>\n</ul>\n<ul>\n<li><a href=\"http://tutorials.jenkov.com/java-functional-programming/functional-composition.html\" target=\"_blank\" rel=\"noopener\">Java Functional Composition</a></li>\n</ul>\n<ul>\n<li><a href=\"https://medium.com/swlh/write-a-monad-in-java-seriously-50a9047c9839\" target=\"_blank\" rel=\"noopener\">Write a monad, in Java, seriously?</a></li>\n</ul>"},{"title":"HashCode 和 equals 之间的关系","toc":true,"date":"2021-11-08T16:00:00.000Z","_content":"\n在看 Java Persistence With Hibernate 这本书的时候，看到有这么段代码\n\n```java\n// implementing the custom equality with equals() and hashCode()\n@Embeddable\npublic class Image {\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    Image other = (Image) o;\n    if (!title.equals(other.title)) return false;\n    if (!filename.equals(other.filename)) return false;\n    if (!width.equals(other.width)) return false;\n    if (!height.equals(other.height)) return false;\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = title.hashCode();\n    result = 31 * result + filename.hashCode();\n    result = 31 * result + width.hashCode();\n    result = 31 * result + height.hashCode();\n    return result;\n  }\n}\n```\n\n提出问题： 为什么重写 equals 需要重写 hashCode？\n\n<!-- more -->\n\n## hashCode 是什么？\n\nhash 一般翻译做“散列”，也有直接音译为“哈希”的，**就是把任意长度的输入，通过散列算法，变换成固定长度的输出**，该输出就是**散列值**\n\n相同对象（通过 equals 判断）必须返回相同的 hash code，但是不同对象不一定返回不同的 hashcode。\n![hash function](/images/java/hash-function.png)\n如上图所示，John Smith 和 Sandra Dee 算出来的 hash 值相同，这就产生了碰撞\n\n## hashCode 和 equals 之间的关系\n\n当两个对象进行比较的时候，首先会进行 hashCode 比较，如果 hashCode 不相同，那么说明两个对象不相同，直接返回 false，如果 hashCode 相同，则需要进行 equals 的比较了，equals 比较整体上比 hashCode 更复杂，因此如果 hashCode 写的好，碰撞发生的概率小的话，那么可以节省很多时间。\n\n## 一些 hashCode 的 implementations\n\n### “standard” implementation\n\n```java\n@Override\npublic int hashCode() {\n    int hash = 7;\n    hash = 31 * hash + (int) id;\n    hash = 31 * hash + (name == null ? 0 : name.hashCode());\n    hash = 31 * hash + (email == null ? 0 : email.hashCode());\n    return hash;\n}\n```\n\n### Intellij IDEA implementation\n\n```java\n@Override\npublic int hashCode() {\n    int result = (int) (id ^ (id >>> 32));\n    result = 31 * result + name.hashCode();\n    result = 31 * result + email.hashCode();\n    return result;\n}\n```\n\n### 为什么选择 31 作为乘子\n\n31 是一个不大不小的质数，是作为 hashCode 乘子的优选质数之一。另外一些相近的质数，比如 37、41、43 等等，也都是不错的选择。那么为啥偏偏选中了 31 呢？请看第二个原因。\n31 可以被 JVM 优化，31 \\* i = (i << 5) - i。\n","source":"_posts/java-object-equal.md","raw":"---\ntitle: HashCode 和 equals 之间的关系\ncategories: [后端]\ntags: [java]\ntoc: true\ndate: 2021/11/9\n---\n\n在看 Java Persistence With Hibernate 这本书的时候，看到有这么段代码\n\n```java\n// implementing the custom equality with equals() and hashCode()\n@Embeddable\npublic class Image {\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    Image other = (Image) o;\n    if (!title.equals(other.title)) return false;\n    if (!filename.equals(other.filename)) return false;\n    if (!width.equals(other.width)) return false;\n    if (!height.equals(other.height)) return false;\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = title.hashCode();\n    result = 31 * result + filename.hashCode();\n    result = 31 * result + width.hashCode();\n    result = 31 * result + height.hashCode();\n    return result;\n  }\n}\n```\n\n提出问题： 为什么重写 equals 需要重写 hashCode？\n\n<!-- more -->\n\n## hashCode 是什么？\n\nhash 一般翻译做“散列”，也有直接音译为“哈希”的，**就是把任意长度的输入，通过散列算法，变换成固定长度的输出**，该输出就是**散列值**\n\n相同对象（通过 equals 判断）必须返回相同的 hash code，但是不同对象不一定返回不同的 hashcode。\n![hash function](/images/java/hash-function.png)\n如上图所示，John Smith 和 Sandra Dee 算出来的 hash 值相同，这就产生了碰撞\n\n## hashCode 和 equals 之间的关系\n\n当两个对象进行比较的时候，首先会进行 hashCode 比较，如果 hashCode 不相同，那么说明两个对象不相同，直接返回 false，如果 hashCode 相同，则需要进行 equals 的比较了，equals 比较整体上比 hashCode 更复杂，因此如果 hashCode 写的好，碰撞发生的概率小的话，那么可以节省很多时间。\n\n## 一些 hashCode 的 implementations\n\n### “standard” implementation\n\n```java\n@Override\npublic int hashCode() {\n    int hash = 7;\n    hash = 31 * hash + (int) id;\n    hash = 31 * hash + (name == null ? 0 : name.hashCode());\n    hash = 31 * hash + (email == null ? 0 : email.hashCode());\n    return hash;\n}\n```\n\n### Intellij IDEA implementation\n\n```java\n@Override\npublic int hashCode() {\n    int result = (int) (id ^ (id >>> 32));\n    result = 31 * result + name.hashCode();\n    result = 31 * result + email.hashCode();\n    return result;\n}\n```\n\n### 为什么选择 31 作为乘子\n\n31 是一个不大不小的质数，是作为 hashCode 乘子的优选质数之一。另外一些相近的质数，比如 37、41、43 等等，也都是不错的选择。那么为啥偏偏选中了 31 呢？请看第二个原因。\n31 可以被 JVM 优化，31 \\* i = (i << 5) - i。\n","slug":"java-object-equal","published":1,"updated":"2021-11-09T01:58:24.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jv0039goswgs7m5r37","content":"<p>在看 Java Persistence With Hibernate 这本书的时候，看到有这么段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// implementing the custom equality with equals() and hashCode()</span></span><br><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == o) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span> || getClass() != o.getClass()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Image other = (Image) o;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!title.equals(other.title)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!filename.equals(other.filename)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!width.equals(other.width)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!height.equals(other.height)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = title.hashCode();</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + filename.hashCode();</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + width.hashCode();</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + height.hashCode();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提出问题： 为什么重写 equals 需要重写 hashCode？</p>\n<a id=\"more\"></a>\n\n<h2 id=\"hashCode-是什么？\"><a href=\"#hashCode-是什么？\" class=\"headerlink\" title=\"hashCode 是什么？\"></a>hashCode 是什么？</h2><p>hash 一般翻译做“散列”，也有直接音译为“哈希”的，<strong>就是把任意长度的输入，通过散列算法，变换成固定长度的输出</strong>，该输出就是<strong>散列值</strong></p>\n<p>相同对象（通过 equals 判断）必须返回相同的 hash code，但是不同对象不一定返回不同的 hashcode。<br><img src=\"/images/java/hash-function.png\" alt=\"hash function\"><br>如上图所示，John Smith 和 Sandra Dee 算出来的 hash 值相同，这就产生了碰撞</p>\n<h2 id=\"hashCode-和-equals-之间的关系\"><a href=\"#hashCode-和-equals-之间的关系\" class=\"headerlink\" title=\"hashCode 和 equals 之间的关系\"></a>hashCode 和 equals 之间的关系</h2><p>当两个对象进行比较的时候，首先会进行 hashCode 比较，如果 hashCode 不相同，那么说明两个对象不相同，直接返回 false，如果 hashCode 相同，则需要进行 equals 的比较了，equals 比较整体上比 hashCode 更复杂，因此如果 hashCode 写的好，碰撞发生的概率小的话，那么可以节省很多时间。</p>\n<h2 id=\"一些-hashCode-的-implementations\"><a href=\"#一些-hashCode-的-implementations\" class=\"headerlink\" title=\"一些 hashCode 的 implementations\"></a>一些 hashCode 的 implementations</h2><h3 id=\"“standard”-implementation\"><a href=\"#“standard”-implementation\" class=\"headerlink\" title=\"“standard” implementation\"></a>“standard” implementation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = <span class=\"number\">7</span>;</span><br><span class=\"line\">    hash = <span class=\"number\">31</span> * hash + (<span class=\"keyword\">int</span>) id;</span><br><span class=\"line\">    hash = <span class=\"number\">31</span> * hash + (name == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : name.hashCode());</span><br><span class=\"line\">    hash = <span class=\"number\">31</span> * hash + (email == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : email.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Intellij-IDEA-implementation\"><a href=\"#Intellij-IDEA-implementation\" class=\"headerlink\" title=\"Intellij IDEA implementation\"></a>Intellij IDEA implementation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = (<span class=\"keyword\">int</span>) (id ^ (id &gt;&gt;&gt; <span class=\"number\">32</span>));</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + name.hashCode();</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + email.hashCode();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么选择-31-作为乘子\"><a href=\"#为什么选择-31-作为乘子\" class=\"headerlink\" title=\"为什么选择 31 作为乘子\"></a>为什么选择 31 作为乘子</h3><p>31 是一个不大不小的质数，是作为 hashCode 乘子的优选质数之一。另外一些相近的质数，比如 37、41、43 等等，也都是不错的选择。那么为啥偏偏选中了 31 呢？请看第二个原因。<br>31 可以被 JVM 优化，31 * i = (i &lt;&lt; 5) - i。</p>\n","site":{"data":{}},"excerpt":"<p>在看 Java Persistence With Hibernate 这本书的时候，看到有这么段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// implementing the custom equality with equals() and hashCode()</span></span><br><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == o) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span> || getClass() != o.getClass()) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Image other = (Image) o;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!title.equals(other.title)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!filename.equals(other.filename)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!width.equals(other.width)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!height.equals(other.height)) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = title.hashCode();</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + filename.hashCode();</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + width.hashCode();</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + height.hashCode();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提出问题： 为什么重写 equals 需要重写 hashCode？</p>","more":"<h2 id=\"hashCode-是什么？\"><a href=\"#hashCode-是什么？\" class=\"headerlink\" title=\"hashCode 是什么？\"></a>hashCode 是什么？</h2><p>hash 一般翻译做“散列”，也有直接音译为“哈希”的，<strong>就是把任意长度的输入，通过散列算法，变换成固定长度的输出</strong>，该输出就是<strong>散列值</strong></p>\n<p>相同对象（通过 equals 判断）必须返回相同的 hash code，但是不同对象不一定返回不同的 hashcode。<br><img src=\"/images/java/hash-function.png\" alt=\"hash function\"><br>如上图所示，John Smith 和 Sandra Dee 算出来的 hash 值相同，这就产生了碰撞</p>\n<h2 id=\"hashCode-和-equals-之间的关系\"><a href=\"#hashCode-和-equals-之间的关系\" class=\"headerlink\" title=\"hashCode 和 equals 之间的关系\"></a>hashCode 和 equals 之间的关系</h2><p>当两个对象进行比较的时候，首先会进行 hashCode 比较，如果 hashCode 不相同，那么说明两个对象不相同，直接返回 false，如果 hashCode 相同，则需要进行 equals 的比较了，equals 比较整体上比 hashCode 更复杂，因此如果 hashCode 写的好，碰撞发生的概率小的话，那么可以节省很多时间。</p>\n<h2 id=\"一些-hashCode-的-implementations\"><a href=\"#一些-hashCode-的-implementations\" class=\"headerlink\" title=\"一些 hashCode 的 implementations\"></a>一些 hashCode 的 implementations</h2><h3 id=\"“standard”-implementation\"><a href=\"#“standard”-implementation\" class=\"headerlink\" title=\"“standard” implementation\"></a>“standard” implementation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = <span class=\"number\">7</span>;</span><br><span class=\"line\">    hash = <span class=\"number\">31</span> * hash + (<span class=\"keyword\">int</span>) id;</span><br><span class=\"line\">    hash = <span class=\"number\">31</span> * hash + (name == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : name.hashCode());</span><br><span class=\"line\">    hash = <span class=\"number\">31</span> * hash + (email == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : email.hashCode());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Intellij-IDEA-implementation\"><a href=\"#Intellij-IDEA-implementation\" class=\"headerlink\" title=\"Intellij IDEA implementation\"></a>Intellij IDEA implementation</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = (<span class=\"keyword\">int</span>) (id ^ (id &gt;&gt;&gt; <span class=\"number\">32</span>));</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + name.hashCode();</span><br><span class=\"line\">    result = <span class=\"number\">31</span> * result + email.hashCode();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为什么选择-31-作为乘子\"><a href=\"#为什么选择-31-作为乘子\" class=\"headerlink\" title=\"为什么选择 31 作为乘子\"></a>为什么选择 31 作为乘子</h3><p>31 是一个不大不小的质数，是作为 hashCode 乘子的优选质数之一。另外一些相近的质数，比如 37、41、43 等等，也都是不错的选择。那么为啥偏偏选中了 31 呢？请看第二个原因。<br>31 可以被 JVM 优化，31 * i = (i &lt;&lt; 5) - i。</p>"},{"title":"Spring中异常处理","toc":true,"date":"2021-06-06T16:00:00.000Z","_content":"\nJava 中的错误处理笔记\n\n<!-- more -->\n\n## 异常的层级结构\n\n![java 中异常处理](/images/java/java-error.png)\n<u>Java 中所有的异常类的基类是 Throwable 类，两大子类是 Exception 和 Error</u>，\n\nError 的发生与程序设计无关，超出了程序的控制范围。开发中需要处理的是 Exception 错误。\n\nException 分为 RuntimeException（运行时异常） 和 CheckedException（检查时异常）\n\n- RuntimeException：一般为代码的逻辑错误。如数组下标越界，类型转换错误，空指针异常\n- CheckedException: 编译时可以检查到的异常，必须<span style=\"color: red\">**显式的进行处理**</span>,例如：IOException，FileNotFoundException\n\n+ EOFException： 你从文件中读取对象的时候，如何判断是否读取完毕。jvm会给抛出EOFException，表示的是，文件中对象读取完毕，捕获掉这个异常就可以，是捕获不是抛出。\n\n## 异常处理\n\n### try catch finally （略）\n\n### throw （程序内部主动抛出异常）\n\n大多数情况下，你所抛出的异常都是自己创建的异常类的实例，比如 Spring MVC 中自定义的 response 错误类型（BadRequestAlertException, TimeConflictException）\n\n**重新抛出异常**\n\n由 catch 语句捕获的异常可以重新抛出以使外部 catch 可以捕获。\n\n```java\ntry {\n  // code\n}\ncatch (Exception exc) {\n  throw exc\n}\n```\n\n**多重捕获**\n\n```java\ntry {\n  // code\n}\ncatch(NullPointerException | ClassNotFoundException exc2) {\n  // handle it\n}\n```\n\n### throws（声明一个方法可能抛出的异常）\n\n<span>凡是 Error 或者 RuntimeException 的绝大部分子类都不需要在 throws 中指定，Java 假定一个方法可以抛出这样的异常</span>\n\n> Java 程序隐式的引入了 java.lang，而 java.lang 的标准包内定义了几个异常类，绝大部分从 RuntimeException 派生出来的异常自动有效，不需要被引入任何方法的 throws 列表中\n\n![java.lang 包定义的未检查异常](/images/java/java-lang-define-error.png)\n\n**基本格式**\n\n```java\nretType methodName(paramList) throws customException1, customException2 {\n\n}\n```\n\n## spring boot 全局错误处理\n\n流程：程序中抛出自定义错误，通过定义的全局错误处理类进行捕获，格式化输出为 ResponseEntity 包裹的错误\n\n### 1. 创建具体的错误类型类\n\n```java\n@Getter\npublic class BadRequestException extends RuntimeException{\n\n    private Integer status = BAD_REQUEST.value();\n\n    public BadRequestException(String msg){\n        super(msg);\n    }\n\n    public BadRequestException(HttpStatus status,String msg){\n        super(msg);\n        this.status = status.value();\n    }\n}\n```\n\n### 2. 定义全局错误处理类\n\n#### 创建 ApiError 类用于格式化错误信息\n\n```java\n@Data\npublic class ApiError {\n    private Integer status = 400;\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    private LocalDateTime timestamp;\n    private String message;\n\n    private ApiError() {\n        timestamp = LocalDateTime.now();\n    }\n\n    public static ApiError error(String message){\n        ApiError apiError = new ApiError();\n        apiError.setMessage(message);\n        return apiError;\n    }\n\n    public static ApiError error(Integer status, String message){\n        ApiError apiError = new ApiError();\n        apiError.setStatus(status);\n        apiError.setMessage(message);\n        return apiError;\n    }\n}\n```\n\n#### 创建全局错误处理类管理全局错误信息\n\n```java\n@RestControllerAdvice\npublic class GlobalErrorHandler {\n\n    @ExceptionHandler(BadRequestException.class)\n    public ResponseEntity<ApiError> BadRequestHandler(BadRequestException e) {\n        ApiError apiError = ApiError.error(e.getMessage());\n        return new ResponseEntity<>(apiError, HttpStatus.valueOf(apiError.getStatus()));\n    }\n}\n```\n\n#### 解析：\n\n@RestControllerAdvice: @ControllerAdvice + @ResponseBody\n\n- @ControllerAdvice:\n  - <span style=\"color: red\"> @ExceptionHandler</span>：用于捕获 Controller 中抛出的不同类型的异常，从而达到异常全局处理的目的；\n  - @InitBinder 注解标注的方法：用于请求中注册自定义参数的解析，从而达到自定义请求参数格式的目的；\n  - @ModelAttribute 注解标注的方法：表示此方法会在执行目标 Controller 方法之前执行 。\n","source":"_posts/java-error-handle.md","raw":"---\ntitle: Spring中异常处理\ncategories: [后端]\ntags: []\ntoc: true\ndate: 2021/6/7\n---\n\nJava 中的错误处理笔记\n\n<!-- more -->\n\n## 异常的层级结构\n\n![java 中异常处理](/images/java/java-error.png)\n<u>Java 中所有的异常类的基类是 Throwable 类，两大子类是 Exception 和 Error</u>，\n\nError 的发生与程序设计无关，超出了程序的控制范围。开发中需要处理的是 Exception 错误。\n\nException 分为 RuntimeException（运行时异常） 和 CheckedException（检查时异常）\n\n- RuntimeException：一般为代码的逻辑错误。如数组下标越界，类型转换错误，空指针异常\n- CheckedException: 编译时可以检查到的异常，必须<span style=\"color: red\">**显式的进行处理**</span>,例如：IOException，FileNotFoundException\n\n+ EOFException： 你从文件中读取对象的时候，如何判断是否读取完毕。jvm会给抛出EOFException，表示的是，文件中对象读取完毕，捕获掉这个异常就可以，是捕获不是抛出。\n\n## 异常处理\n\n### try catch finally （略）\n\n### throw （程序内部主动抛出异常）\n\n大多数情况下，你所抛出的异常都是自己创建的异常类的实例，比如 Spring MVC 中自定义的 response 错误类型（BadRequestAlertException, TimeConflictException）\n\n**重新抛出异常**\n\n由 catch 语句捕获的异常可以重新抛出以使外部 catch 可以捕获。\n\n```java\ntry {\n  // code\n}\ncatch (Exception exc) {\n  throw exc\n}\n```\n\n**多重捕获**\n\n```java\ntry {\n  // code\n}\ncatch(NullPointerException | ClassNotFoundException exc2) {\n  // handle it\n}\n```\n\n### throws（声明一个方法可能抛出的异常）\n\n<span>凡是 Error 或者 RuntimeException 的绝大部分子类都不需要在 throws 中指定，Java 假定一个方法可以抛出这样的异常</span>\n\n> Java 程序隐式的引入了 java.lang，而 java.lang 的标准包内定义了几个异常类，绝大部分从 RuntimeException 派生出来的异常自动有效，不需要被引入任何方法的 throws 列表中\n\n![java.lang 包定义的未检查异常](/images/java/java-lang-define-error.png)\n\n**基本格式**\n\n```java\nretType methodName(paramList) throws customException1, customException2 {\n\n}\n```\n\n## spring boot 全局错误处理\n\n流程：程序中抛出自定义错误，通过定义的全局错误处理类进行捕获，格式化输出为 ResponseEntity 包裹的错误\n\n### 1. 创建具体的错误类型类\n\n```java\n@Getter\npublic class BadRequestException extends RuntimeException{\n\n    private Integer status = BAD_REQUEST.value();\n\n    public BadRequestException(String msg){\n        super(msg);\n    }\n\n    public BadRequestException(HttpStatus status,String msg){\n        super(msg);\n        this.status = status.value();\n    }\n}\n```\n\n### 2. 定义全局错误处理类\n\n#### 创建 ApiError 类用于格式化错误信息\n\n```java\n@Data\npublic class ApiError {\n    private Integer status = 400;\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    private LocalDateTime timestamp;\n    private String message;\n\n    private ApiError() {\n        timestamp = LocalDateTime.now();\n    }\n\n    public static ApiError error(String message){\n        ApiError apiError = new ApiError();\n        apiError.setMessage(message);\n        return apiError;\n    }\n\n    public static ApiError error(Integer status, String message){\n        ApiError apiError = new ApiError();\n        apiError.setStatus(status);\n        apiError.setMessage(message);\n        return apiError;\n    }\n}\n```\n\n#### 创建全局错误处理类管理全局错误信息\n\n```java\n@RestControllerAdvice\npublic class GlobalErrorHandler {\n\n    @ExceptionHandler(BadRequestException.class)\n    public ResponseEntity<ApiError> BadRequestHandler(BadRequestException e) {\n        ApiError apiError = ApiError.error(e.getMessage());\n        return new ResponseEntity<>(apiError, HttpStatus.valueOf(apiError.getStatus()));\n    }\n}\n```\n\n#### 解析：\n\n@RestControllerAdvice: @ControllerAdvice + @ResponseBody\n\n- @ControllerAdvice:\n  - <span style=\"color: red\"> @ExceptionHandler</span>：用于捕获 Controller 中抛出的不同类型的异常，从而达到异常全局处理的目的；\n  - @InitBinder 注解标注的方法：用于请求中注册自定义参数的解析，从而达到自定义请求参数格式的目的；\n  - @ModelAttribute 注解标注的方法：表示此方法会在执行目标 Controller 方法之前执行 。\n","slug":"java-error-handle","published":1,"updated":"2021-06-28T01:37:35.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jx003cgosw2v0p3wd1","content":"<p>Java 中的错误处理笔记</p>\n<a id=\"more\"></a>\n\n<h2 id=\"异常的层级结构\"><a href=\"#异常的层级结构\" class=\"headerlink\" title=\"异常的层级结构\"></a>异常的层级结构</h2><p><img src=\"/images/java/java-error.png\" alt=\"java 中异常处理\"><br><u>Java 中所有的异常类的基类是 Throwable 类，两大子类是 Exception 和 Error</u>，</p>\n<p>Error 的发生与程序设计无关，超出了程序的控制范围。开发中需要处理的是 Exception 错误。</p>\n<p>Exception 分为 RuntimeException（运行时异常） 和 CheckedException（检查时异常）</p>\n<ul>\n<li>RuntimeException：一般为代码的逻辑错误。如数组下标越界，类型转换错误，空指针异常</li>\n<li>CheckedException: 编译时可以检查到的异常，必须<span style=\"color: red\"><strong>显式的进行处理</strong></span>,例如：IOException，FileNotFoundException</li>\n</ul>\n<ul>\n<li>EOFException： 你从文件中读取对象的时候，如何判断是否读取完毕。jvm会给抛出EOFException，表示的是，文件中对象读取完毕，捕获掉这个异常就可以，是捕获不是抛出。</li>\n</ul>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><h3 id=\"try-catch-finally-（略）\"><a href=\"#try-catch-finally-（略）\" class=\"headerlink\" title=\"try catch finally （略）\"></a>try catch finally （略）</h3><h3 id=\"throw-（程序内部主动抛出异常）\"><a href=\"#throw-（程序内部主动抛出异常）\" class=\"headerlink\" title=\"throw （程序内部主动抛出异常）\"></a>throw （程序内部主动抛出异常）</h3><p>大多数情况下，你所抛出的异常都是自己创建的异常类的实例，比如 Spring MVC 中自定义的 response 错误类型（BadRequestAlertException, TimeConflictException）</p>\n<p><strong>重新抛出异常</strong></p>\n<p>由 catch 语句捕获的异常可以重新抛出以使外部 catch 可以捕获。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception exc) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> exc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>多重捕获</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(NullPointerException | ClassNotFoundException exc2) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// handle it</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"throws（声明一个方法可能抛出的异常）\"><a href=\"#throws（声明一个方法可能抛出的异常）\" class=\"headerlink\" title=\"throws（声明一个方法可能抛出的异常）\"></a>throws（声明一个方法可能抛出的异常）</h3><p><span>凡是 Error 或者 RuntimeException 的绝大部分子类都不需要在 throws 中指定，Java 假定一个方法可以抛出这样的异常</span></p>\n<blockquote>\n<p>Java 程序隐式的引入了 java.lang，而 java.lang 的标准包内定义了几个异常类，绝大部分从 RuntimeException 派生出来的异常自动有效，不需要被引入任何方法的 throws 列表中</p>\n</blockquote>\n<p><img src=\"/images/java/java-lang-define-error.png\" alt=\"java.lang 包定义的未检查异常\"></p>\n<p><strong>基本格式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">retType <span class=\"title\">methodName</span><span class=\"params\">(paramList)</span> <span class=\"keyword\">throws</span> customException1, customException2 </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"spring-boot-全局错误处理\"><a href=\"#spring-boot-全局错误处理\" class=\"headerlink\" title=\"spring boot 全局错误处理\"></a>spring boot 全局错误处理</h2><p>流程：程序中抛出自定义错误，通过定义的全局错误处理类进行捕获，格式化输出为 ResponseEntity 包裹的错误</p>\n<h3 id=\"1-创建具体的错误类型类\"><a href=\"#1-创建具体的错误类型类\" class=\"headerlink\" title=\"1. 创建具体的错误类型类\"></a>1. 创建具体的错误类型类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BadRequestException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status = BAD_REQUEST.value();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BadRequestException</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BadRequestException</span><span class=\"params\">(HttpStatus status,String msg)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = status.value();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-定义全局错误处理类\"><a href=\"#2-定义全局错误处理类\" class=\"headerlink\" title=\"2. 定义全局错误处理类\"></a>2. 定义全局错误处理类</h3><h4 id=\"创建-ApiError-类用于格式化错误信息\"><a href=\"#创建-ApiError-类用于格式化错误信息\" class=\"headerlink\" title=\"创建 ApiError 类用于格式化错误信息\"></a>创建 ApiError 类用于格式化错误信息</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiError</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status = <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat</span>(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ApiError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        timestamp = LocalDateTime.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApiError <span class=\"title\">error</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        ApiError apiError = <span class=\"keyword\">new</span> ApiError();</span><br><span class=\"line\">        apiError.setMessage(message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiError;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApiError <span class=\"title\">error</span><span class=\"params\">(Integer status, String message)</span></span>&#123;</span><br><span class=\"line\">        ApiError apiError = <span class=\"keyword\">new</span> ApiError();</span><br><span class=\"line\">        apiError.setStatus(status);</span><br><span class=\"line\">        apiError.setMessage(message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiError;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建全局错误处理类管理全局错误信息\"><a href=\"#创建全局错误处理类管理全局错误信息\" class=\"headerlink\" title=\"创建全局错误处理类管理全局错误信息\"></a>创建全局错误处理类管理全局错误信息</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalErrorHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(BadRequestException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">ResponseEntity</span>&lt;<span class=\"title\">ApiError</span>&gt; <span class=\"title\">BadRequestHandler</span>(<span class=\"title\">BadRequestException</span> <span class=\"title\">e</span>) </span>&#123;</span><br><span class=\"line\">        ApiError apiError = ApiError.error(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(apiError, HttpStatus.valueOf(apiError.getStatus()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解析：\"><a href=\"#解析：\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>@RestControllerAdvice: @ControllerAdvice + @ResponseBody</p>\n<ul>\n<li>@ControllerAdvice:<ul>\n<li><span style=\"color: red\"> @ExceptionHandler</span>：用于捕获 Controller 中抛出的不同类型的异常，从而达到异常全局处理的目的；</li>\n<li>@InitBinder 注解标注的方法：用于请求中注册自定义参数的解析，从而达到自定义请求参数格式的目的；</li>\n<li>@ModelAttribute 注解标注的方法：表示此方法会在执行目标 Controller 方法之前执行 。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Java 中的错误处理笔记</p>","more":"<h2 id=\"异常的层级结构\"><a href=\"#异常的层级结构\" class=\"headerlink\" title=\"异常的层级结构\"></a>异常的层级结构</h2><p><img src=\"/images/java/java-error.png\" alt=\"java 中异常处理\"><br><u>Java 中所有的异常类的基类是 Throwable 类，两大子类是 Exception 和 Error</u>，</p>\n<p>Error 的发生与程序设计无关，超出了程序的控制范围。开发中需要处理的是 Exception 错误。</p>\n<p>Exception 分为 RuntimeException（运行时异常） 和 CheckedException（检查时异常）</p>\n<ul>\n<li>RuntimeException：一般为代码的逻辑错误。如数组下标越界，类型转换错误，空指针异常</li>\n<li>CheckedException: 编译时可以检查到的异常，必须<span style=\"color: red\"><strong>显式的进行处理</strong></span>,例如：IOException，FileNotFoundException</li>\n</ul>\n<ul>\n<li>EOFException： 你从文件中读取对象的时候，如何判断是否读取完毕。jvm会给抛出EOFException，表示的是，文件中对象读取完毕，捕获掉这个异常就可以，是捕获不是抛出。</li>\n</ul>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><h3 id=\"try-catch-finally-（略）\"><a href=\"#try-catch-finally-（略）\" class=\"headerlink\" title=\"try catch finally （略）\"></a>try catch finally （略）</h3><h3 id=\"throw-（程序内部主动抛出异常）\"><a href=\"#throw-（程序内部主动抛出异常）\" class=\"headerlink\" title=\"throw （程序内部主动抛出异常）\"></a>throw （程序内部主动抛出异常）</h3><p>大多数情况下，你所抛出的异常都是自己创建的异常类的实例，比如 Spring MVC 中自定义的 response 错误类型（BadRequestAlertException, TimeConflictException）</p>\n<p><strong>重新抛出异常</strong></p>\n<p>由 catch 语句捕获的异常可以重新抛出以使外部 catch 可以捕获。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception exc) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> exc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>多重捕获</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(NullPointerException | ClassNotFoundException exc2) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// handle it</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"throws（声明一个方法可能抛出的异常）\"><a href=\"#throws（声明一个方法可能抛出的异常）\" class=\"headerlink\" title=\"throws（声明一个方法可能抛出的异常）\"></a>throws（声明一个方法可能抛出的异常）</h3><p><span>凡是 Error 或者 RuntimeException 的绝大部分子类都不需要在 throws 中指定，Java 假定一个方法可以抛出这样的异常</span></p>\n<blockquote>\n<p>Java 程序隐式的引入了 java.lang，而 java.lang 的标准包内定义了几个异常类，绝大部分从 RuntimeException 派生出来的异常自动有效，不需要被引入任何方法的 throws 列表中</p>\n</blockquote>\n<p><img src=\"/images/java/java-lang-define-error.png\" alt=\"java.lang 包定义的未检查异常\"></p>\n<p><strong>基本格式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">retType <span class=\"title\">methodName</span><span class=\"params\">(paramList)</span> <span class=\"keyword\">throws</span> customException1, customException2 </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"spring-boot-全局错误处理\"><a href=\"#spring-boot-全局错误处理\" class=\"headerlink\" title=\"spring boot 全局错误处理\"></a>spring boot 全局错误处理</h2><p>流程：程序中抛出自定义错误，通过定义的全局错误处理类进行捕获，格式化输出为 ResponseEntity 包裹的错误</p>\n<h3 id=\"1-创建具体的错误类型类\"><a href=\"#1-创建具体的错误类型类\" class=\"headerlink\" title=\"1. 创建具体的错误类型类\"></a>1. 创建具体的错误类型类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BadRequestException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status = BAD_REQUEST.value();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BadRequestException</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BadRequestException</span><span class=\"params\">(HttpStatus status,String msg)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.status = status.value();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-定义全局错误处理类\"><a href=\"#2-定义全局错误处理类\" class=\"headerlink\" title=\"2. 定义全局错误处理类\"></a>2. 定义全局错误处理类</h3><h4 id=\"创建-ApiError-类用于格式化错误信息\"><a href=\"#创建-ApiError-类用于格式化错误信息\" class=\"headerlink\" title=\"创建 ApiError 类用于格式化错误信息\"></a>创建 ApiError 类用于格式化错误信息</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiError</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer status = <span class=\"number\">400</span>;</span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat</span>(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime timestamp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ApiError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        timestamp = LocalDateTime.now();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApiError <span class=\"title\">error</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        ApiError apiError = <span class=\"keyword\">new</span> ApiError();</span><br><span class=\"line\">        apiError.setMessage(message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiError;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApiError <span class=\"title\">error</span><span class=\"params\">(Integer status, String message)</span></span>&#123;</span><br><span class=\"line\">        ApiError apiError = <span class=\"keyword\">new</span> ApiError();</span><br><span class=\"line\">        apiError.setStatus(status);</span><br><span class=\"line\">        apiError.setMessage(message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apiError;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建全局错误处理类管理全局错误信息\"><a href=\"#创建全局错误处理类管理全局错误信息\" class=\"headerlink\" title=\"创建全局错误处理类管理全局错误信息\"></a>创建全局错误处理类管理全局错误信息</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalErrorHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(BadRequestException<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">ResponseEntity</span>&lt;<span class=\"title\">ApiError</span>&gt; <span class=\"title\">BadRequestHandler</span>(<span class=\"title\">BadRequestException</span> <span class=\"title\">e</span>) </span>&#123;</span><br><span class=\"line\">        ApiError apiError = ApiError.error(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(apiError, HttpStatus.valueOf(apiError.getStatus()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解析：\"><a href=\"#解析：\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>@RestControllerAdvice: @ControllerAdvice + @ResponseBody</p>\n<ul>\n<li>@ControllerAdvice:<ul>\n<li><span style=\"color: red\"> @ExceptionHandler</span>：用于捕获 Controller 中抛出的不同类型的异常，从而达到异常全局处理的目的；</li>\n<li>@InitBinder 注解标注的方法：用于请求中注册自定义参数的解析，从而达到自定义请求参数格式的目的；</li>\n<li>@ModelAttribute 注解标注的方法：表示此方法会在执行目标 Controller 方法之前执行 。</li>\n</ul>\n</li>\n</ul>"},{"title":"Java Optional handbook","toc":true,"date":"2021-04-27T16:00:00.000Z","_content":"\nOptional 是一个泛型容器对象，用于 nullPointerException 问题，它内部存的值可以是 null 或者 non-null 值。\n\n`isPresent()`方法，可以判断 Optional 保存的值是否为空。`orElse`方法在内部值为 null 的时候，提供一个默认的值。\n\n常用的 API 如下：\n\n<!-- more -->\n\n## Optional.of\n\n接收一个 non-null 值，生成 Optional 容器对象\n\n```java\npublic static <T> Optional<T> of(T value) {\n  return new Optional<>(Objects.requireNonNull(value));\n}\n```\n\n## Optional.ofNullable\n\n接受一个值，生成一个 Optional 对象，如果是 null,则生成一个空的 Optional 对象。\n\n```java\npublic static <T> Optional<T> ofNullable(T value) {\n  return value == null ? (Optional<T>) EMPTY : new Optional<>(value);\n}\n```\n\n## get\n\n获取值，如果值为 null，直接抛出错误\n\n## 判断是否存在\n\n- isPresent 如果存在值返回 true\n\n- isEmpty 如果为空返回 true\n\n- ifPresent: 如果存在则执行 action\n\n- ifPresentOrElse: 如果存在则执行 actionA，否则执行 actionB 处理 null 情况\n\n## 链式操作\n\n- filter:\n\n  - 对 Optional 持有的对象进行 过滤操作\n  - 如果返回 false，创建 empty Optional\n  - 如果持有的值是 null，抛出错误\n\n- map:\n  - 对 Optional 持有对象进行转换操作\n  - 如果内部为 null，则返回一个 empty Optional\n  ```java\n  public <U> Optional<U> map(Function<? super T, ? extends U> mapper) {\n        Objects.requireNonNull(mapper);\n        if (!isPresent()) {\n            return empty();\n        } else {\n            return Optional.ofNullable(mapper.apply(value));\n        }\n    }\n  ```\n\n* flatMap: flatmap 与 map 类似，但是 map 最终的结果会自动包裹成`Optional<T>` 而 flatMap 返回的是`T`\n\n- stream：将 Optional 对象转换成 Stream 对象\n  ```java\n  public Stream<T> stream() {\n        if (!isPresent()) {\n            return Stream.empty();\n        } else {\n            return Stream.of(value);\n        }\n    }\n  ```\n\n## Or 相关操作\n\n- or:\n\n  - 传入一个 supplier 函数，如果 Optional 包含的值为 null，则调用 supplier 将其返回值包裹成`Optional<T>`\n  - 一个 supplier 函数例子：`Supplier<Double> randomValue = () -> Math.random();`\n\n  ```java\n  public Optional<T> or(Supplier<? extends Optional<? extends T>> supplier) {\n        Objects.requireNonNull(supplier);\n        if (isPresent()) {\n            return this;\n        } else {\n            @SuppressWarnings(\"unchecked\")\n            Optional<T> r = (Optional<T>) supplier.get();\n            return Objects.requireNonNull(r);\n        }\n  ```\n\n* orElse: 如果存在 T,则返回，不存在就返回提供的值\n  ```java\n  public T orElse(T other) {\n          return value != null ? value : other;\n      }\n  ```\n\n- orElseThrow: 如果存在 T，则返回，否则抛出错误，错误可自定义，通过 supplier 提供\n\n  ```java\n    public T orElseThrow() {\n          if (value == null) {\n              throw new NoSuchElementException(\"No value present\");\n          }\n          return value;\n      }\n  ```\n\n## 其他\n\n- equals: 比较的双方必须都是 Optional 对象。比较其内部的值\n\n```java\n@Override\npublic boolean equals(Object obj) {\n    if (this == obj) {\n        return true;\n    }\n\n    if (!(obj instanceof Optional)) {\n        return false;\n    }\n\n    Optional<?> other = (Optional<?>) obj;\n    return Objects.equals(value, other.value);\n}\n```\n","source":"_posts/java-optional-handbook.md","raw":"---\ntitle: Java Optional handbook\ncategories: [后端]\ntags: [fp]\ntoc: true\ndate: 2021/4/28\n---\n\nOptional 是一个泛型容器对象，用于 nullPointerException 问题，它内部存的值可以是 null 或者 non-null 值。\n\n`isPresent()`方法，可以判断 Optional 保存的值是否为空。`orElse`方法在内部值为 null 的时候，提供一个默认的值。\n\n常用的 API 如下：\n\n<!-- more -->\n\n## Optional.of\n\n接收一个 non-null 值，生成 Optional 容器对象\n\n```java\npublic static <T> Optional<T> of(T value) {\n  return new Optional<>(Objects.requireNonNull(value));\n}\n```\n\n## Optional.ofNullable\n\n接受一个值，生成一个 Optional 对象，如果是 null,则生成一个空的 Optional 对象。\n\n```java\npublic static <T> Optional<T> ofNullable(T value) {\n  return value == null ? (Optional<T>) EMPTY : new Optional<>(value);\n}\n```\n\n## get\n\n获取值，如果值为 null，直接抛出错误\n\n## 判断是否存在\n\n- isPresent 如果存在值返回 true\n\n- isEmpty 如果为空返回 true\n\n- ifPresent: 如果存在则执行 action\n\n- ifPresentOrElse: 如果存在则执行 actionA，否则执行 actionB 处理 null 情况\n\n## 链式操作\n\n- filter:\n\n  - 对 Optional 持有的对象进行 过滤操作\n  - 如果返回 false，创建 empty Optional\n  - 如果持有的值是 null，抛出错误\n\n- map:\n  - 对 Optional 持有对象进行转换操作\n  - 如果内部为 null，则返回一个 empty Optional\n  ```java\n  public <U> Optional<U> map(Function<? super T, ? extends U> mapper) {\n        Objects.requireNonNull(mapper);\n        if (!isPresent()) {\n            return empty();\n        } else {\n            return Optional.ofNullable(mapper.apply(value));\n        }\n    }\n  ```\n\n* flatMap: flatmap 与 map 类似，但是 map 最终的结果会自动包裹成`Optional<T>` 而 flatMap 返回的是`T`\n\n- stream：将 Optional 对象转换成 Stream 对象\n  ```java\n  public Stream<T> stream() {\n        if (!isPresent()) {\n            return Stream.empty();\n        } else {\n            return Stream.of(value);\n        }\n    }\n  ```\n\n## Or 相关操作\n\n- or:\n\n  - 传入一个 supplier 函数，如果 Optional 包含的值为 null，则调用 supplier 将其返回值包裹成`Optional<T>`\n  - 一个 supplier 函数例子：`Supplier<Double> randomValue = () -> Math.random();`\n\n  ```java\n  public Optional<T> or(Supplier<? extends Optional<? extends T>> supplier) {\n        Objects.requireNonNull(supplier);\n        if (isPresent()) {\n            return this;\n        } else {\n            @SuppressWarnings(\"unchecked\")\n            Optional<T> r = (Optional<T>) supplier.get();\n            return Objects.requireNonNull(r);\n        }\n  ```\n\n* orElse: 如果存在 T,则返回，不存在就返回提供的值\n  ```java\n  public T orElse(T other) {\n          return value != null ? value : other;\n      }\n  ```\n\n- orElseThrow: 如果存在 T，则返回，否则抛出错误，错误可自定义，通过 supplier 提供\n\n  ```java\n    public T orElseThrow() {\n          if (value == null) {\n              throw new NoSuchElementException(\"No value present\");\n          }\n          return value;\n      }\n  ```\n\n## 其他\n\n- equals: 比较的双方必须都是 Optional 对象。比较其内部的值\n\n```java\n@Override\npublic boolean equals(Object obj) {\n    if (this == obj) {\n        return true;\n    }\n\n    if (!(obj instanceof Optional)) {\n        return false;\n    }\n\n    Optional<?> other = (Optional<?>) obj;\n    return Objects.equals(value, other.value);\n}\n```\n","slug":"java-optional-handbook","published":1,"updated":"2021-04-29T01:38:24.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jy003fgoswekm0egu7","content":"<p>Optional 是一个泛型容器对象，用于 nullPointerException 问题，它内部存的值可以是 null 或者 non-null 值。</p>\n<p><code>isPresent()</code>方法，可以判断 Optional 保存的值是否为空。<code>orElse</code>方法在内部值为 null 的时候，提供一个默认的值。</p>\n<p>常用的 API 如下：</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Optional-of\"><a href=\"#Optional-of\" class=\"headerlink\" title=\"Optional.of\"></a>Optional.of</h2><p>接收一个 non-null 值，生成 Optional 容器对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Optional&lt;&gt;(Objects.requireNonNull(value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Optional-ofNullable\"><a href=\"#Optional-ofNullable\" class=\"headerlink\" title=\"Optional.ofNullable\"></a>Optional.ofNullable</h2><p>接受一个值，生成一个 Optional 对象，如果是 null,则生成一个空的 Optional 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">ofNullable</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value == <span class=\"keyword\">null</span> ? (Optional&lt;T&gt;) EMPTY : <span class=\"keyword\">new</span> Optional&lt;&gt;(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h2><p>获取值，如果值为 null，直接抛出错误</p>\n<h2 id=\"判断是否存在\"><a href=\"#判断是否存在\" class=\"headerlink\" title=\"判断是否存在\"></a>判断是否存在</h2><ul>\n<li><p>isPresent 如果存在值返回 true</p>\n</li>\n<li><p>isEmpty 如果为空返回 true</p>\n</li>\n<li><p>ifPresent: 如果存在则执行 action</p>\n</li>\n<li><p>ifPresentOrElse: 如果存在则执行 actionA，否则执行 actionB 处理 null 情况</p>\n</li>\n</ul>\n<h2 id=\"链式操作\"><a href=\"#链式操作\" class=\"headerlink\" title=\"链式操作\"></a>链式操作</h2><ul>\n<li><p>filter:</p>\n<ul>\n<li>对 Optional 持有的对象进行 过滤操作</li>\n<li>如果返回 false，创建 empty Optional</li>\n<li>如果持有的值是 null，抛出错误</li>\n</ul>\n</li>\n<li><p>map:</p>\n<ul>\n<li>对 Optional 持有对象进行转换操作</li>\n<li>如果内部为 null，则返回一个 empty Optional<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; <span class=\"function\">Optional&lt;U&gt; <span class=\"title\">map</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class=\"line\">      Objects.requireNonNull(mapper);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isPresent()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> empty();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>flatMap: flatmap 与 map 类似，但是 map 最终的结果会自动包裹成<code>Optional&lt;T&gt;</code> 而 flatMap 返回的是<code>T</code></li>\n</ul>\n<ul>\n<li>stream：将 Optional 对象转换成 Stream 对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;T&gt; <span class=\"title\">stream</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isPresent()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Stream.empty();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Stream.of(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Or-相关操作\"><a href=\"#Or-相关操作\" class=\"headerlink\" title=\"Or 相关操作\"></a>Or 相关操作</h2><ul>\n<li><p>or:</p>\n<ul>\n<li>传入一个 supplier 函数，如果 Optional 包含的值为 null，则调用 supplier 将其返回值包裹成<code>Optional&lt;T&gt;</code></li>\n<li>一个 supplier 函数例子：<code>Supplier&lt;Double&gt; randomValue = () -&gt; Math.random();</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Optional&lt;T&gt; <span class=\"title\">or</span><span class=\"params\">(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</span> </span>&#123;</span><br><span class=\"line\">      Objects.requireNonNull(supplier);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isPresent()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">          Optional&lt;T&gt; r = (Optional&lt;T&gt;) supplier.get();</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Objects.requireNonNull(r);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>orElse: 如果存在 T,则返回，不存在就返回提供的值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">orElse</span><span class=\"params\">(T other)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span> ? value : other;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>orElseThrow: 如果存在 T，则返回，否则抛出错误，错误可自定义，通过 supplier 提供</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">orElseThrow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"No value present\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>equals: 比较的双方必须都是 Optional 对象。比较其内部的值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(obj <span class=\"keyword\">instanceof</span> Optional)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;?&gt; other = (Optional&lt;?&gt;) obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Objects.equals(value, other.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Optional 是一个泛型容器对象，用于 nullPointerException 问题，它内部存的值可以是 null 或者 non-null 值。</p>\n<p><code>isPresent()</code>方法，可以判断 Optional 保存的值是否为空。<code>orElse</code>方法在内部值为 null 的时候，提供一个默认的值。</p>\n<p>常用的 API 如下：</p>","more":"<h2 id=\"Optional-of\"><a href=\"#Optional-of\" class=\"headerlink\" title=\"Optional.of\"></a>Optional.of</h2><p>接收一个 non-null 值，生成 Optional 容器对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Optional&lt;&gt;(Objects.requireNonNull(value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Optional-ofNullable\"><a href=\"#Optional-ofNullable\" class=\"headerlink\" title=\"Optional.ofNullable\"></a>Optional.ofNullable</h2><p>接受一个值，生成一个 Optional 对象，如果是 null,则生成一个空的 Optional 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">ofNullable</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value == <span class=\"keyword\">null</span> ? (Optional&lt;T&gt;) EMPTY : <span class=\"keyword\">new</span> Optional&lt;&gt;(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h2><p>获取值，如果值为 null，直接抛出错误</p>\n<h2 id=\"判断是否存在\"><a href=\"#判断是否存在\" class=\"headerlink\" title=\"判断是否存在\"></a>判断是否存在</h2><ul>\n<li><p>isPresent 如果存在值返回 true</p>\n</li>\n<li><p>isEmpty 如果为空返回 true</p>\n</li>\n<li><p>ifPresent: 如果存在则执行 action</p>\n</li>\n<li><p>ifPresentOrElse: 如果存在则执行 actionA，否则执行 actionB 处理 null 情况</p>\n</li>\n</ul>\n<h2 id=\"链式操作\"><a href=\"#链式操作\" class=\"headerlink\" title=\"链式操作\"></a>链式操作</h2><ul>\n<li><p>filter:</p>\n<ul>\n<li>对 Optional 持有的对象进行 过滤操作</li>\n<li>如果返回 false，创建 empty Optional</li>\n<li>如果持有的值是 null，抛出错误</li>\n</ul>\n</li>\n<li><p>map:</p>\n<ul>\n<li>对 Optional 持有对象进行转换操作</li>\n<li>如果内部为 null，则返回一个 empty Optional<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; <span class=\"function\">Optional&lt;U&gt; <span class=\"title\">map</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class=\"line\">      Objects.requireNonNull(mapper);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isPresent()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> empty();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>flatMap: flatmap 与 map 类似，但是 map 最终的结果会自动包裹成<code>Optional&lt;T&gt;</code> 而 flatMap 返回的是<code>T</code></li>\n</ul>\n<ul>\n<li>stream：将 Optional 对象转换成 Stream 对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Stream&lt;T&gt; <span class=\"title\">stream</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isPresent()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Stream.empty();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Stream.of(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Or-相关操作\"><a href=\"#Or-相关操作\" class=\"headerlink\" title=\"Or 相关操作\"></a>Or 相关操作</h2><ul>\n<li><p>or:</p>\n<ul>\n<li>传入一个 supplier 函数，如果 Optional 包含的值为 null，则调用 supplier 将其返回值包裹成<code>Optional&lt;T&gt;</code></li>\n<li>一个 supplier 函数例子：<code>Supplier&lt;Double&gt; randomValue = () -&gt; Math.random();</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Optional&lt;T&gt; <span class=\"title\">or</span><span class=\"params\">(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</span> </span>&#123;</span><br><span class=\"line\">      Objects.requireNonNull(supplier);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isPresent()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">          Optional&lt;T&gt; r = (Optional&lt;T&gt;) supplier.get();</span><br><span class=\"line\">          <span class=\"keyword\">return</span> Objects.requireNonNull(r);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>orElse: 如果存在 T,则返回，不存在就返回提供的值<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">orElse</span><span class=\"params\">(T other)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value != <span class=\"keyword\">null</span> ? value : other;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>orElseThrow: 如果存在 T，则返回，否则抛出错误，错误可自定义，通过 supplier 提供</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">orElseThrow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException(<span class=\"string\">\"No value present\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>equals: 比较的双方必须都是 Optional 对象。比较其内部的值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(obj <span class=\"keyword\">instanceof</span> Optional)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;?&gt; other = (Optional&lt;?&gt;) obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Objects.equals(value, other.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JS-异步函数-Promise 实现","toc":true,"date":"2020-07-01T16:00:00.000Z","_content":"\n[Promise/A+ 规范 原文](https://promisesaplus.com/)\n[Promise/A+ 规范 译文](https://www.ituring.com.cn/article/66566)\n\n# Promise 介绍及相关必要知识\n\nPromise 对象表示了异步函数的最终结果（可能是成功，也可能是失败的）。\n\n> MDN:The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value\n\n## 宏观任务与微观任务的认识\n\nPromise 属于微观任务。那么什么是微观任务，与之相对的宏观任务又是什么？\n\n- JS 宿主发起的任务为宏观任务，JS 引擎发起的任务为微观任务。如`window.setTimeou`由浏览器（JS 宿主）提供的 API，所以属于宏观任务。\n- 宏观任务的队列就相当于事件循环。事件循环：`MacroTask1, ... , MacroTaskN`。\n- 一个宏观任务包含了微观任务队列。MacroTask1: MicroTask1, ... , MicroTaskN\n  <!-- ![JS 宏观任务与微观任务](promise.png) -->\n  <img src=\"promise.png\" style=\"zoom:30%;\" alt=\"微观任务与宏观任务的关系\">\n\n## Promise 要求\n\n三个状态：等待 Pending, 执行 Fulfilled, 拒绝 Rejected，**pending 状态可以转移**至 fulfilled 和 rejected。**fulfilled 与 rejected 不能转移**\n\n### then 方法\n\nthen 方法可以访问其当前值、终值和据因。`promise.then(onFulfilled, onRejected)`\n\nonFulfilled 与 onRejected 都是可选参数，并且需要是函数，如果不是函数则直接忽略\n\n**onFulfilled 与 onRejected 必须在当前宏任务执行完之后（setTimeout, setInterval）才能够执行**\n\n#### 参数-onFulfilled（可选）\n\n异步正确执行的回调函数，接受参数为正确执行返回的结果\n只能执行一次\n\n#### 参数-onRejected（可选）\n\n异步错误执行的回调函数，接受参数为错误执行返回的拒绝原因\n只能执行一次\n\n- onFulfilled 和 onRejected 必须被作为函数调用（即没有 this 值）\n\n#### then 可以被多次调用\n\nthen 方法可以被同一个 promise 调用多次\n\n- 当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调\n- 当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调\n\n#### then 返回一个新的 promise\n\nthen 方法返回一个 promise 对象\n\n```\npromise2 = promise1.then(onFulfilled, onRejected)\n```\n\n- 如果 onFulfilled 或者 onRejected 返回的是一个值 x，那么执行标准 Promise 解决流程`[[Resolve]](promise, x)`（下面会详细说明）\n- 如果 onFulfilled 或者 onRejected 抛出错误，那么 promise2 也直接抛出错误\n- 如果 onFulfilled 或者 onRejected 不是函数，则 promise2 返回与 promise1 相同的结果状态\n\n#### `[[Resolve]](promise, x)`执行过程\n\n如果返回值 x 也是 Promise，那么当前的 promise 应该等 x 执行完毕后，将新的返回值作为它的传入参数。\n否则 执行使用 x 作为它的返回参数\n\n具体过程如下：\n\n1. 如果`promise`与`x`指向同一个对象，那么 promise 抛出类型错误\n2. 如果 x 是一个 promise\n3. 如果 x 还处于 pending，则 promise 必须等 x 改变状态后才能继续执行\n4. 如果 x 处于执行态，用相同的值执行 promise\n5. 如果 x 处于拒绝态，用相同的据因拒绝 promise\n6. 如果 x 是一个函数或者对象\n\n# Promise 的简单 pollyfill\n\n```js\n// Object.prototype.toString Get the [[Class]] property of this object.\nconst isFunc = (fn) =>\n  Object.prototype.toString.call(fn) === \"[object Function]\";\nconst PENDING = Symbol(\"0\");\nconst FULFILLED = Symbol(\"1\");\nconst REJECTED = Symbol(\"2\"); // Symbol 内部的字符串只作为描述 Symbol.for(key) 会查找是否有名为key的symbol 如果没有则创建一个\nclass MyPromise {\n  constructor(fn) {\n    if (!isFunc(fn)) throw new TypeError(\"参数只能为函数\");\n    this._status = PENDING;\n    this._value = null;\n    this._fullfilledStack = []; //当status 为PENDING，then每次被调用都需要存入对应的stack\n    this._rejectedStack = []; //当status 为PENDING，then每次被调用都需要存入对应的stack\n    // 执行传入的函数\n    try {\n      // fn为在异步前调用的用户代码,参数固定为resolve reject 两个函数\n      // 通过bind 限定当前的context\n      fn(this._resolve.bind(this), this._rejectedStack.bind(this));\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  _resolve(val) {\n    const run = () => {\n      // 如果当前状态不是结束态，那么不会执行stack 中的内容\n      if (this._status !== PENDING) return;\n      const runFullfilledStack = (val) => {\n        this._value = val;\n        this._status = FULFILLED;\n        this._fullfilledStack.forEach((fn) => fn(val));\n        this._fullfilledStack = [];\n      };\n      const runRejectedStack = (err) => {\n        this._value = err;\n        this._status = REJECTED;\n        this._rejectedStack.forEach((fn) => fn(val));\n        this._rejectedStack = [];\n      };\n      // 如果reoslve 的val为Promise 则需要等待当前val 变为结束态才会继续执行\n      if (val instanceof MyPromise) {\n        val.then(runFullfilledStack, runRejectedStack);\n      } else {\n        runFullfilledStack(val);\n      }\n    };\n    // 只有当前的macroTask 队列 执行完毕，才能够轮到Promise执行。模拟Promise延迟执行\n    setTimeout(run, 0);\n  }\n  _reject(err) {\n    const run = () => {\n      this._status = REJECTED;\n      this._value = err;\n      this._rejectedStack.forEach((fn) => fn(val));\n      this._rejectedStack = [];\n    };\n    setTimeout(run, 0);\n  }\n\n  then(onFulfilled, onRejected) {\n    onFulfilled = isFunc(onFulfilled) ? onFulfilled : (_) => _;\n    onRejected = isFunc(onRejected) ? onRejected : (_) => _;\n    const { _value, _status } = this;\n    // 返回一个新的Promise对象\n    return new Promise((onFulfilledNext, onRejectedNext) => {\n      // 当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调\n      const fulfilled = (val) => {\n        try {\n          let res = onFulfilled(val);\n          res instanceof MyPromise\n            ? res.then(onFulfilledNext, onRejectedNext)\n            : onFulfilledNext(res);\n        } catch (e) {\n          onRejectedNext(e);\n        }\n      };\n      // 当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调\n      const rejected = (err) => {\n        let res = onRejected(error);\n        res instanceof MyPromise\n          ? res.then(onFulfilledNext, onRejectedNext)\n          : onFulfilledNext(res);\n      };\n      // 当then被调用的时候，根据当前Promise 的状态来决定是加入缓存栈中还是直接执行\n      switch (_status) {\n        // 因为当前的状态未知，所以两个执行栈都需要加入\n        case PENDING:\n          this._fullfilledStack.push(fulfilled);\n          this._rejectedStack.push(rejected);\n          break;\n        case FULFILLED:\n          fulfilled(this._value);\n          break;\n        case REJECTED:\n          rejected(this._value);\n          break;\n      }\n    });\n  }\n}\n```\n","source":"_posts/js-promise.md","raw":"---\ntitle: JS-异步函数-Promise 实现\ncategories: [前端]\ntags: [implement, 异步, js]\ntoc: true\ndate: 2020/7/2\n---\n\n[Promise/A+ 规范 原文](https://promisesaplus.com/)\n[Promise/A+ 规范 译文](https://www.ituring.com.cn/article/66566)\n\n# Promise 介绍及相关必要知识\n\nPromise 对象表示了异步函数的最终结果（可能是成功，也可能是失败的）。\n\n> MDN:The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value\n\n## 宏观任务与微观任务的认识\n\nPromise 属于微观任务。那么什么是微观任务，与之相对的宏观任务又是什么？\n\n- JS 宿主发起的任务为宏观任务，JS 引擎发起的任务为微观任务。如`window.setTimeou`由浏览器（JS 宿主）提供的 API，所以属于宏观任务。\n- 宏观任务的队列就相当于事件循环。事件循环：`MacroTask1, ... , MacroTaskN`。\n- 一个宏观任务包含了微观任务队列。MacroTask1: MicroTask1, ... , MicroTaskN\n  <!-- ![JS 宏观任务与微观任务](promise.png) -->\n  <img src=\"promise.png\" style=\"zoom:30%;\" alt=\"微观任务与宏观任务的关系\">\n\n## Promise 要求\n\n三个状态：等待 Pending, 执行 Fulfilled, 拒绝 Rejected，**pending 状态可以转移**至 fulfilled 和 rejected。**fulfilled 与 rejected 不能转移**\n\n### then 方法\n\nthen 方法可以访问其当前值、终值和据因。`promise.then(onFulfilled, onRejected)`\n\nonFulfilled 与 onRejected 都是可选参数，并且需要是函数，如果不是函数则直接忽略\n\n**onFulfilled 与 onRejected 必须在当前宏任务执行完之后（setTimeout, setInterval）才能够执行**\n\n#### 参数-onFulfilled（可选）\n\n异步正确执行的回调函数，接受参数为正确执行返回的结果\n只能执行一次\n\n#### 参数-onRejected（可选）\n\n异步错误执行的回调函数，接受参数为错误执行返回的拒绝原因\n只能执行一次\n\n- onFulfilled 和 onRejected 必须被作为函数调用（即没有 this 值）\n\n#### then 可以被多次调用\n\nthen 方法可以被同一个 promise 调用多次\n\n- 当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调\n- 当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调\n\n#### then 返回一个新的 promise\n\nthen 方法返回一个 promise 对象\n\n```\npromise2 = promise1.then(onFulfilled, onRejected)\n```\n\n- 如果 onFulfilled 或者 onRejected 返回的是一个值 x，那么执行标准 Promise 解决流程`[[Resolve]](promise, x)`（下面会详细说明）\n- 如果 onFulfilled 或者 onRejected 抛出错误，那么 promise2 也直接抛出错误\n- 如果 onFulfilled 或者 onRejected 不是函数，则 promise2 返回与 promise1 相同的结果状态\n\n#### `[[Resolve]](promise, x)`执行过程\n\n如果返回值 x 也是 Promise，那么当前的 promise 应该等 x 执行完毕后，将新的返回值作为它的传入参数。\n否则 执行使用 x 作为它的返回参数\n\n具体过程如下：\n\n1. 如果`promise`与`x`指向同一个对象，那么 promise 抛出类型错误\n2. 如果 x 是一个 promise\n3. 如果 x 还处于 pending，则 promise 必须等 x 改变状态后才能继续执行\n4. 如果 x 处于执行态，用相同的值执行 promise\n5. 如果 x 处于拒绝态，用相同的据因拒绝 promise\n6. 如果 x 是一个函数或者对象\n\n# Promise 的简单 pollyfill\n\n```js\n// Object.prototype.toString Get the [[Class]] property of this object.\nconst isFunc = (fn) =>\n  Object.prototype.toString.call(fn) === \"[object Function]\";\nconst PENDING = Symbol(\"0\");\nconst FULFILLED = Symbol(\"1\");\nconst REJECTED = Symbol(\"2\"); // Symbol 内部的字符串只作为描述 Symbol.for(key) 会查找是否有名为key的symbol 如果没有则创建一个\nclass MyPromise {\n  constructor(fn) {\n    if (!isFunc(fn)) throw new TypeError(\"参数只能为函数\");\n    this._status = PENDING;\n    this._value = null;\n    this._fullfilledStack = []; //当status 为PENDING，then每次被调用都需要存入对应的stack\n    this._rejectedStack = []; //当status 为PENDING，then每次被调用都需要存入对应的stack\n    // 执行传入的函数\n    try {\n      // fn为在异步前调用的用户代码,参数固定为resolve reject 两个函数\n      // 通过bind 限定当前的context\n      fn(this._resolve.bind(this), this._rejectedStack.bind(this));\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  _resolve(val) {\n    const run = () => {\n      // 如果当前状态不是结束态，那么不会执行stack 中的内容\n      if (this._status !== PENDING) return;\n      const runFullfilledStack = (val) => {\n        this._value = val;\n        this._status = FULFILLED;\n        this._fullfilledStack.forEach((fn) => fn(val));\n        this._fullfilledStack = [];\n      };\n      const runRejectedStack = (err) => {\n        this._value = err;\n        this._status = REJECTED;\n        this._rejectedStack.forEach((fn) => fn(val));\n        this._rejectedStack = [];\n      };\n      // 如果reoslve 的val为Promise 则需要等待当前val 变为结束态才会继续执行\n      if (val instanceof MyPromise) {\n        val.then(runFullfilledStack, runRejectedStack);\n      } else {\n        runFullfilledStack(val);\n      }\n    };\n    // 只有当前的macroTask 队列 执行完毕，才能够轮到Promise执行。模拟Promise延迟执行\n    setTimeout(run, 0);\n  }\n  _reject(err) {\n    const run = () => {\n      this._status = REJECTED;\n      this._value = err;\n      this._rejectedStack.forEach((fn) => fn(val));\n      this._rejectedStack = [];\n    };\n    setTimeout(run, 0);\n  }\n\n  then(onFulfilled, onRejected) {\n    onFulfilled = isFunc(onFulfilled) ? onFulfilled : (_) => _;\n    onRejected = isFunc(onRejected) ? onRejected : (_) => _;\n    const { _value, _status } = this;\n    // 返回一个新的Promise对象\n    return new Promise((onFulfilledNext, onRejectedNext) => {\n      // 当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调\n      const fulfilled = (val) => {\n        try {\n          let res = onFulfilled(val);\n          res instanceof MyPromise\n            ? res.then(onFulfilledNext, onRejectedNext)\n            : onFulfilledNext(res);\n        } catch (e) {\n          onRejectedNext(e);\n        }\n      };\n      // 当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调\n      const rejected = (err) => {\n        let res = onRejected(error);\n        res instanceof MyPromise\n          ? res.then(onFulfilledNext, onRejectedNext)\n          : onFulfilledNext(res);\n      };\n      // 当then被调用的时候，根据当前Promise 的状态来决定是加入缓存栈中还是直接执行\n      switch (_status) {\n        // 因为当前的状态未知，所以两个执行栈都需要加入\n        case PENDING:\n          this._fullfilledStack.push(fulfilled);\n          this._rejectedStack.push(rejected);\n          break;\n        case FULFILLED:\n          fulfilled(this._value);\n          break;\n        case REJECTED:\n          rejected(this._value);\n          break;\n      }\n    });\n  }\n}\n```\n","slug":"js-promise","published":1,"updated":"2021-04-22T08:17:49.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jy003igoswb2dpbscc","content":"<p><a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">Promise/A+ 规范 原文</a><br><a href=\"https://www.ituring.com.cn/article/66566\" target=\"_blank\" rel=\"noopener\">Promise/A+ 规范 译文</a></p>\n<h1 id=\"Promise-介绍及相关必要知识\"><a href=\"#Promise-介绍及相关必要知识\" class=\"headerlink\" title=\"Promise 介绍及相关必要知识\"></a>Promise 介绍及相关必要知识</h1><p>Promise 对象表示了异步函数的最终结果（可能是成功，也可能是失败的）。</p>\n<blockquote>\n<p>MDN:The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value</p>\n</blockquote>\n<h2 id=\"宏观任务与微观任务的认识\"><a href=\"#宏观任务与微观任务的认识\" class=\"headerlink\" title=\"宏观任务与微观任务的认识\"></a>宏观任务与微观任务的认识</h2><p>Promise 属于微观任务。那么什么是微观任务，与之相对的宏观任务又是什么？</p>\n<ul>\n<li>JS 宿主发起的任务为宏观任务，JS 引擎发起的任务为微观任务。如<code>window.setTimeou</code>由浏览器（JS 宿主）提供的 API，所以属于宏观任务。</li>\n<li>宏观任务的队列就相当于事件循环。事件循环：<code>MacroTask1, ... , MacroTaskN</code>。</li>\n<li>一个宏观任务包含了微观任务队列。MacroTask1: MicroTask1, … , MicroTaskN<!-- ![JS 宏观任务与微观任务](promise.png) -->\n<img src=\"promise.png\" style=\"zoom:30%;\" alt=\"微观任务与宏观任务的关系\">\n\n</li>\n</ul>\n<h2 id=\"Promise-要求\"><a href=\"#Promise-要求\" class=\"headerlink\" title=\"Promise 要求\"></a>Promise 要求</h2><p>三个状态：等待 Pending, 执行 Fulfilled, 拒绝 Rejected，<strong>pending 状态可以转移</strong>至 fulfilled 和 rejected。<strong>fulfilled 与 rejected 不能转移</strong></p>\n<h3 id=\"then-方法\"><a href=\"#then-方法\" class=\"headerlink\" title=\"then 方法\"></a>then 方法</h3><p>then 方法可以访问其当前值、终值和据因。<code>promise.then(onFulfilled, onRejected)</code></p>\n<p>onFulfilled 与 onRejected 都是可选参数，并且需要是函数，如果不是函数则直接忽略</p>\n<p><strong>onFulfilled 与 onRejected 必须在当前宏任务执行完之后（setTimeout, setInterval）才能够执行</strong></p>\n<h4 id=\"参数-onFulfilled（可选）\"><a href=\"#参数-onFulfilled（可选）\" class=\"headerlink\" title=\"参数-onFulfilled（可选）\"></a>参数-onFulfilled（可选）</h4><p>异步正确执行的回调函数，接受参数为正确执行返回的结果<br>只能执行一次</p>\n<h4 id=\"参数-onRejected（可选）\"><a href=\"#参数-onRejected（可选）\" class=\"headerlink\" title=\"参数-onRejected（可选）\"></a>参数-onRejected（可选）</h4><p>异步错误执行的回调函数，接受参数为错误执行返回的拒绝原因<br>只能执行一次</p>\n<ul>\n<li>onFulfilled 和 onRejected 必须被作为函数调用（即没有 this 值）</li>\n</ul>\n<h4 id=\"then-可以被多次调用\"><a href=\"#then-可以被多次调用\" class=\"headerlink\" title=\"then 可以被多次调用\"></a>then 可以被多次调用</h4><p>then 方法可以被同一个 promise 调用多次</p>\n<ul>\n<li>当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调</li>\n<li>当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调</li>\n</ul>\n<h4 id=\"then-返回一个新的-promise\"><a href=\"#then-返回一个新的-promise\" class=\"headerlink\" title=\"then 返回一个新的 promise\"></a>then 返回一个新的 promise</h4><p>then 方法返回一个 promise 对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise2 &#x3D; promise1.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 onFulfilled 或者 onRejected 返回的是一个值 x，那么执行标准 Promise 解决流程<code>[[Resolve]](promise, x)</code>（下面会详细说明）</li>\n<li>如果 onFulfilled 或者 onRejected 抛出错误，那么 promise2 也直接抛出错误</li>\n<li>如果 onFulfilled 或者 onRejected 不是函数，则 promise2 返回与 promise1 相同的结果状态</li>\n</ul>\n<h4 id=\"Resolve-promise-x-执行过程\"><a href=\"#Resolve-promise-x-执行过程\" class=\"headerlink\" title=\"[[Resolve]](promise, x)执行过程\"></a><code>[[Resolve]](promise, x)</code>执行过程</h4><p>如果返回值 x 也是 Promise，那么当前的 promise 应该等 x 执行完毕后，将新的返回值作为它的传入参数。<br>否则 执行使用 x 作为它的返回参数</p>\n<p>具体过程如下：</p>\n<ol>\n<li>如果<code>promise</code>与<code>x</code>指向同一个对象，那么 promise 抛出类型错误</li>\n<li>如果 x 是一个 promise</li>\n<li>如果 x 还处于 pending，则 promise 必须等 x 改变状态后才能继续执行</li>\n<li>如果 x 处于执行态，用相同的值执行 promise</li>\n<li>如果 x 处于拒绝态，用相同的据因拒绝 promise</li>\n<li>如果 x 是一个函数或者对象</li>\n</ol>\n<h1 id=\"Promise-的简单-pollyfill\"><a href=\"#Promise-的简单-pollyfill\" class=\"headerlink\" title=\"Promise 的简单 pollyfill\"></a>Promise 的简单 pollyfill</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.prototype.toString Get the [[Class]] property of this object.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunc = <span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.prototype.toString.call(fn) === <span class=\"string\">\"[object Function]\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"2\"</span>); <span class=\"comment\">// Symbol 内部的字符串只作为描述 Symbol.for(key) 会查找是否有名为key的symbol 如果没有则创建一个</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFunc(fn)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"参数只能为函数\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._status = PENDING;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._fullfilledStack = []; <span class=\"comment\">//当status 为PENDING，then每次被调用都需要存入对应的stack</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rejectedStack = []; <span class=\"comment\">//当status 为PENDING，then每次被调用都需要存入对应的stack</span></span><br><span class=\"line\">    <span class=\"comment\">// 执行传入的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// fn为在异步前调用的用户代码,参数固定为resolve reject 两个函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 通过bind 限定当前的context</span></span><br><span class=\"line\">      fn(<span class=\"keyword\">this</span>._resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>._rejectedStack.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _resolve(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前状态不是结束态，那么不会执行stack 中的内容</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._status !== PENDING) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> runFullfilledStack = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = val;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._status = FULFILLED;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._fullfilledStack.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn(val));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._fullfilledStack = [];</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> runRejectedStack = <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = err;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._status = REJECTED;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._rejectedStack.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn(val));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._rejectedStack = [];</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 如果reoslve 的val为Promise 则需要等待当前val 变为结束态才会继续执行</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">        val.then(runFullfilledStack, runRejectedStack);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        runFullfilledStack(val);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 只有当前的macroTask 队列 执行完毕，才能够轮到Promise执行。模拟Promise延迟执行</span></span><br><span class=\"line\">    setTimeout(run, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _reject(err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._status = REJECTED;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._value = err;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._rejectedStack.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn(val));</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._rejectedStack = [];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    setTimeout(run, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    onFulfilled = isFunc(onFulfilled) ? onFulfilled : <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> _;</span><br><span class=\"line\">    onRejected = isFunc(onRejected) ? onRejected : <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> _;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; _value, _status &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个新的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">onFulfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> fulfilled = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> res = onFulfilled(val);</span><br><span class=\"line\">          res <span class=\"keyword\">instanceof</span> MyPromise</span><br><span class=\"line\">            ? res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">            : onFulfilledNext(res);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          onRejectedNext(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> rejected = <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = onRejected(error);</span><br><span class=\"line\">        res <span class=\"keyword\">instanceof</span> MyPromise</span><br><span class=\"line\">          ? res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">          : onFulfilledNext(res);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 当then被调用的时候，根据当前Promise 的状态来决定是加入缓存栈中还是直接执行</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (_status) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为当前的状态未知，所以两个执行栈都需要加入</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._fullfilledStack.push(fulfilled);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._rejectedStack.push(rejected);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">          fulfilled(<span class=\"keyword\">this</span>._value);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">          rejected(<span class=\"keyword\">this</span>._value);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"noopener\">Promise/A+ 规范 原文</a><br><a href=\"https://www.ituring.com.cn/article/66566\" target=\"_blank\" rel=\"noopener\">Promise/A+ 规范 译文</a></p>\n<h1 id=\"Promise-介绍及相关必要知识\"><a href=\"#Promise-介绍及相关必要知识\" class=\"headerlink\" title=\"Promise 介绍及相关必要知识\"></a>Promise 介绍及相关必要知识</h1><p>Promise 对象表示了异步函数的最终结果（可能是成功，也可能是失败的）。</p>\n<blockquote>\n<p>MDN:The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value</p>\n</blockquote>\n<h2 id=\"宏观任务与微观任务的认识\"><a href=\"#宏观任务与微观任务的认识\" class=\"headerlink\" title=\"宏观任务与微观任务的认识\"></a>宏观任务与微观任务的认识</h2><p>Promise 属于微观任务。那么什么是微观任务，与之相对的宏观任务又是什么？</p>\n<ul>\n<li>JS 宿主发起的任务为宏观任务，JS 引擎发起的任务为微观任务。如<code>window.setTimeou</code>由浏览器（JS 宿主）提供的 API，所以属于宏观任务。</li>\n<li>宏观任务的队列就相当于事件循环。事件循环：<code>MacroTask1, ... , MacroTaskN</code>。</li>\n<li>一个宏观任务包含了微观任务队列。MacroTask1: MicroTask1, … , MicroTaskN<!-- ![JS 宏观任务与微观任务](promise.png) -->\n<img src=\"promise.png\" style=\"zoom:30%;\" alt=\"微观任务与宏观任务的关系\">\n\n</li>\n</ul>\n<h2 id=\"Promise-要求\"><a href=\"#Promise-要求\" class=\"headerlink\" title=\"Promise 要求\"></a>Promise 要求</h2><p>三个状态：等待 Pending, 执行 Fulfilled, 拒绝 Rejected，<strong>pending 状态可以转移</strong>至 fulfilled 和 rejected。<strong>fulfilled 与 rejected 不能转移</strong></p>\n<h3 id=\"then-方法\"><a href=\"#then-方法\" class=\"headerlink\" title=\"then 方法\"></a>then 方法</h3><p>then 方法可以访问其当前值、终值和据因。<code>promise.then(onFulfilled, onRejected)</code></p>\n<p>onFulfilled 与 onRejected 都是可选参数，并且需要是函数，如果不是函数则直接忽略</p>\n<p><strong>onFulfilled 与 onRejected 必须在当前宏任务执行完之后（setTimeout, setInterval）才能够执行</strong></p>\n<h4 id=\"参数-onFulfilled（可选）\"><a href=\"#参数-onFulfilled（可选）\" class=\"headerlink\" title=\"参数-onFulfilled（可选）\"></a>参数-onFulfilled（可选）</h4><p>异步正确执行的回调函数，接受参数为正确执行返回的结果<br>只能执行一次</p>\n<h4 id=\"参数-onRejected（可选）\"><a href=\"#参数-onRejected（可选）\" class=\"headerlink\" title=\"参数-onRejected（可选）\"></a>参数-onRejected（可选）</h4><p>异步错误执行的回调函数，接受参数为错误执行返回的拒绝原因<br>只能执行一次</p>\n<ul>\n<li>onFulfilled 和 onRejected 必须被作为函数调用（即没有 this 值）</li>\n</ul>\n<h4 id=\"then-可以被多次调用\"><a href=\"#then-可以被多次调用\" class=\"headerlink\" title=\"then 可以被多次调用\"></a>then 可以被多次调用</h4><p>then 方法可以被同一个 promise 调用多次</p>\n<ul>\n<li>当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调</li>\n<li>当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调</li>\n</ul>\n<h4 id=\"then-返回一个新的-promise\"><a href=\"#then-返回一个新的-promise\" class=\"headerlink\" title=\"then 返回一个新的 promise\"></a>then 返回一个新的 promise</h4><p>then 方法返回一个 promise 对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise2 &#x3D; promise1.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果 onFulfilled 或者 onRejected 返回的是一个值 x，那么执行标准 Promise 解决流程<code>[[Resolve]](promise, x)</code>（下面会详细说明）</li>\n<li>如果 onFulfilled 或者 onRejected 抛出错误，那么 promise2 也直接抛出错误</li>\n<li>如果 onFulfilled 或者 onRejected 不是函数，则 promise2 返回与 promise1 相同的结果状态</li>\n</ul>\n<h4 id=\"Resolve-promise-x-执行过程\"><a href=\"#Resolve-promise-x-执行过程\" class=\"headerlink\" title=\"[[Resolve]](promise, x)执行过程\"></a><code>[[Resolve]](promise, x)</code>执行过程</h4><p>如果返回值 x 也是 Promise，那么当前的 promise 应该等 x 执行完毕后，将新的返回值作为它的传入参数。<br>否则 执行使用 x 作为它的返回参数</p>\n<p>具体过程如下：</p>\n<ol>\n<li>如果<code>promise</code>与<code>x</code>指向同一个对象，那么 promise 抛出类型错误</li>\n<li>如果 x 是一个 promise</li>\n<li>如果 x 还处于 pending，则 promise 必须等 x 改变状态后才能继续执行</li>\n<li>如果 x 处于执行态，用相同的值执行 promise</li>\n<li>如果 x 处于拒绝态，用相同的据因拒绝 promise</li>\n<li>如果 x 是一个函数或者对象</li>\n</ol>\n<h1 id=\"Promise-的简单-pollyfill\"><a href=\"#Promise-的简单-pollyfill\" class=\"headerlink\" title=\"Promise 的简单 pollyfill\"></a>Promise 的简单 pollyfill</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.prototype.toString Get the [[Class]] property of this object.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isFunc = <span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.prototype.toString.call(fn) === <span class=\"string\">\"[object Function]\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> FULFILLED = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"2\"</span>); <span class=\"comment\">// Symbol 内部的字符串只作为描述 Symbol.for(key) 会查找是否有名为key的symbol 如果没有则创建一个</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFunc(fn)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"参数只能为函数\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._status = PENDING;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._fullfilledStack = []; <span class=\"comment\">//当status 为PENDING，then每次被调用都需要存入对应的stack</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._rejectedStack = []; <span class=\"comment\">//当status 为PENDING，then每次被调用都需要存入对应的stack</span></span><br><span class=\"line\">    <span class=\"comment\">// 执行传入的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// fn为在异步前调用的用户代码,参数固定为resolve reject 两个函数</span></span><br><span class=\"line\">      <span class=\"comment\">// 通过bind 限定当前的context</span></span><br><span class=\"line\">      fn(<span class=\"keyword\">this</span>._resolve.bind(<span class=\"keyword\">this</span>), <span class=\"keyword\">this</span>._rejectedStack.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _resolve(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果当前状态不是结束态，那么不会执行stack 中的内容</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._status !== PENDING) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> runFullfilledStack = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = val;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._status = FULFILLED;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._fullfilledStack.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn(val));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._fullfilledStack = [];</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> runRejectedStack = <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._value = err;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._status = REJECTED;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._rejectedStack.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn(val));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._rejectedStack = [];</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 如果reoslve 的val为Promise 则需要等待当前val 变为结束态才会继续执行</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val <span class=\"keyword\">instanceof</span> MyPromise) &#123;</span><br><span class=\"line\">        val.then(runFullfilledStack, runRejectedStack);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        runFullfilledStack(val);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 只有当前的macroTask 队列 执行完毕，才能够轮到Promise执行。模拟Promise延迟执行</span></span><br><span class=\"line\">    setTimeout(run, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _reject(err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._status = REJECTED;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._value = err;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._rejectedStack.forEach(<span class=\"function\">(<span class=\"params\">fn</span>) =&gt;</span> fn(val));</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._rejectedStack = [];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    setTimeout(run, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">    onFulfilled = isFunc(onFulfilled) ? onFulfilled : <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> _;</span><br><span class=\"line\">    onRejected = isFunc(onRejected) ? onRejected : <span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> _;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; _value, _status &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个新的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">onFulfilledNext, onRejectedNext</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> fulfilled = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> res = onFulfilled(val);</span><br><span class=\"line\">          res <span class=\"keyword\">instanceof</span> MyPromise</span><br><span class=\"line\">            ? res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">            : onFulfilledNext(res);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          onRejectedNext(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> rejected = <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = onRejected(error);</span><br><span class=\"line\">        res <span class=\"keyword\">instanceof</span> MyPromise</span><br><span class=\"line\">          ? res.then(onFulfilledNext, onRejectedNext)</span><br><span class=\"line\">          : onFulfilledNext(res);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 当then被调用的时候，根据当前Promise 的状态来决定是加入缓存栈中还是直接执行</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (_status) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为当前的状态未知，所以两个执行栈都需要加入</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> PENDING:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._fullfilledStack.push(fulfilled);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._rejectedStack.push(rejected);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FULFILLED:</span><br><span class=\"line\">          fulfilled(<span class=\"keyword\">this</span>._value);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> REJECTED:</span><br><span class=\"line\">          rejected(<span class=\"keyword\">this</span>._value);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用lint-staged 优化团队开发体验","toc":true,"date":"2021-02-23T16:00:00.000Z","_content":"\n## 用处\n\nlint-staged 借助 git hook 实现在 git commit 前自动进行代码 prettier + eslint 检测。如果存在 eslint error 则会 commit 失败。\n\n## 原理\n\n[lint-staged](https://www.npmjs.com/package/lint-staged) 基于 husky，[husky](https://typicode.github.io/husky/#/)能够让开发者更加便捷的操作 git hook.\n\n借助 husky 提供的 pre-commit hook，在每次 commit 前可以触发特定的操作，比如执行 lint-staged 对提交的 code 进行 prettier 和 eslint 检测。\n\n> husky: You can use it to lint your commit messages, run tests, lint code, etc... when you commit or push. Husky supports all Git hooks.\n\n## 安装使用\n\n**安装**\n\n```bash\nnpx mrm lint-staged\n```\n\n**使用**\n在执行了上面的命令后，package.json 中会添加相关的依赖和配置项,如下\n\n```json\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"my-custom-script\": \"linter --arg1 --arg2\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*\": [\"eslint --cache --fix\"]\n  }\n}\n```\n\n**添加 prettier 代码美化工具**\n\n1. npm 安装：`npm i prettier -D`\n2. 修改 package.json 中的配置项：\n\n```json\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"my-custom-script\": \"linter --arg1 --arg2\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n+   \"**/*\": [\"prettier --write --single-quote --ignore-unknown\", \"eslint --cache --fix\"]\n  }\n}\n```\n\n> --single-quote 为 prettier 的配置项：默认使用单引号，自定义配置参考此处[Prettier Options](https://prettier.io/docs/en/options.html)\n\n**指定 lint-staged 的生效目录**\n\n2. 修改 package.json 中的配置项：\n\n```json\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"my-custom-script\": \"linter --arg1 --arg2\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n+   \"src/**/*.{js,vue}\": [\n      \"prettier --write --single-quote --ignore-unknown\",\n      \"eslint --cache --fix\"\n    ]\n  }\n}\n```\n\n说明:\n\n- `src/**/*.{js,vue}`：匹配 src 目录下所有的 js 和 vue 文件\n- 匹配规则为 glob-pattern:\n  - \\*\\* 表示递归匹配目录\n  - `/*.{js,vue}`会展开为 `/*.js /*.vue`\n\n* glob-pattern 文章参考：\n  - [A Beginner's Guide: Glob Patterns](https://www.malikbrowne.com/blog/a-beginners-guide-glob-patterns)\n  - [返回主页流浪猫の窝: node-glob 学习](https://www.cnblogs.com/liulangmao/p/4552339.html)\n\n## 注意\n\n如果项目中配置了 eslint-loader 进行 eslint-on-save, 会和 lint-staged 冲突，需要关闭。\n\n因为 eslint-loader 是保存的时候进行检测，如果项目 lint 没通过，无法正常开发，此时开启 lint-staged 没有什么意义。\n\n所以二选一, 保存时候检测 OR commit 前自动格式化+检测\n","source":"_posts/lint-staged.md","raw":"---\ntitle: 使用lint-staged 优化团队开发体验\ncategories: [前端]\ntags: [工程化]\ntoc: true\ndate: 2021/2/24\n---\n\n## 用处\n\nlint-staged 借助 git hook 实现在 git commit 前自动进行代码 prettier + eslint 检测。如果存在 eslint error 则会 commit 失败。\n\n## 原理\n\n[lint-staged](https://www.npmjs.com/package/lint-staged) 基于 husky，[husky](https://typicode.github.io/husky/#/)能够让开发者更加便捷的操作 git hook.\n\n借助 husky 提供的 pre-commit hook，在每次 commit 前可以触发特定的操作，比如执行 lint-staged 对提交的 code 进行 prettier 和 eslint 检测。\n\n> husky: You can use it to lint your commit messages, run tests, lint code, etc... when you commit or push. Husky supports all Git hooks.\n\n## 安装使用\n\n**安装**\n\n```bash\nnpx mrm lint-staged\n```\n\n**使用**\n在执行了上面的命令后，package.json 中会添加相关的依赖和配置项,如下\n\n```json\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"my-custom-script\": \"linter --arg1 --arg2\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*\": [\"eslint --cache --fix\"]\n  }\n}\n```\n\n**添加 prettier 代码美化工具**\n\n1. npm 安装：`npm i prettier -D`\n2. 修改 package.json 中的配置项：\n\n```json\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"my-custom-script\": \"linter --arg1 --arg2\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n+   \"**/*\": [\"prettier --write --single-quote --ignore-unknown\", \"eslint --cache --fix\"]\n  }\n}\n```\n\n> --single-quote 为 prettier 的配置项：默认使用单引号，自定义配置参考此处[Prettier Options](https://prettier.io/docs/en/options.html)\n\n**指定 lint-staged 的生效目录**\n\n2. 修改 package.json 中的配置项：\n\n```json\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"my-custom-script\": \"linter --arg1 --arg2\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n+   \"src/**/*.{js,vue}\": [\n      \"prettier --write --single-quote --ignore-unknown\",\n      \"eslint --cache --fix\"\n    ]\n  }\n}\n```\n\n说明:\n\n- `src/**/*.{js,vue}`：匹配 src 目录下所有的 js 和 vue 文件\n- 匹配规则为 glob-pattern:\n  - \\*\\* 表示递归匹配目录\n  - `/*.{js,vue}`会展开为 `/*.js /*.vue`\n\n* glob-pattern 文章参考：\n  - [A Beginner's Guide: Glob Patterns](https://www.malikbrowne.com/blog/a-beginners-guide-glob-patterns)\n  - [返回主页流浪猫の窝: node-glob 学习](https://www.cnblogs.com/liulangmao/p/4552339.html)\n\n## 注意\n\n如果项目中配置了 eslint-loader 进行 eslint-on-save, 会和 lint-staged 冲突，需要关闭。\n\n因为 eslint-loader 是保存的时候进行检测，如果项目 lint 没通过，无法正常开发，此时开启 lint-staged 没有什么意义。\n\n所以二选一, 保存时候检测 OR commit 前自动格式化+检测\n","slug":"lint-staged","published":1,"updated":"2021-04-22T08:27:00.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7jz003lgoswel65bzce","content":"<h2 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h2><p>lint-staged 借助 git hook 实现在 git commit 前自动进行代码 prettier + eslint 检测。如果存在 eslint error 则会 commit 失败。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><a href=\"https://www.npmjs.com/package/lint-staged\" target=\"_blank\" rel=\"noopener\">lint-staged</a> 基于 husky，<a href=\"https://typicode.github.io/husky/#/\" target=\"_blank\" rel=\"noopener\">husky</a>能够让开发者更加便捷的操作 git hook.</p>\n<p>借助 husky 提供的 pre-commit hook，在每次 commit 前可以触发特定的操作，比如执行 lint-staged 对提交的 code 进行 prettier 和 eslint 检测。</p>\n<blockquote>\n<p>husky: You can use it to lint your commit messages, run tests, lint code, etc… when you commit or push. Husky supports all Git hooks.</p>\n</blockquote>\n<h2 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h2><p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx mrm lint-staged</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用</strong><br>在执行了上面的命令后，package.json 中会添加相关的依赖和配置项,如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"My project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"my-custom-script\"</span>: <span class=\"string\">\"linter --arg1 --arg2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"husky\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"hooks\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"pre-commit\"</span>: <span class=\"string\">\"lint-staged\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"lint-staged\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"**/*\"</span>: [<span class=\"string\">\"eslint --cache --fix\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加 prettier 代码美化工具</strong></p>\n<ol>\n<li>npm 安装：<code>npm i prettier -D</code></li>\n<li>修改 package.json 中的配置项：</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"My project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"my-custom-script\"</span>: <span class=\"string\">\"linter --arg1 --arg2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"husky\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"hooks\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"pre-commit\"</span>: <span class=\"string\">\"lint-staged\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"lint-staged\"</span>: &#123;</span><br><span class=\"line\">+   \"**/*\": [\"prettier --write --single-quote --ignore-unknown\", \"eslint --cache --fix\"]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>–single-quote 为 prettier 的配置项：默认使用单引号，自定义配置参考此处<a href=\"https://prettier.io/docs/en/options.html\" target=\"_blank\" rel=\"noopener\">Prettier Options</a></p>\n</blockquote>\n<p><strong>指定 lint-staged 的生效目录</strong></p>\n<ol start=\"2\">\n<li>修改 package.json 中的配置项：</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"My project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"my-custom-script\"</span>: <span class=\"string\">\"linter --arg1 --arg2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"husky\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"hooks\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"pre-commit\"</span>: <span class=\"string\">\"lint-staged\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"lint-staged\"</span>: &#123;</span><br><span class=\"line\">+   \"src/**/*.&#123;js,vue&#125;\": [</span><br><span class=\"line\">      \"prettier --write --single-quote --ignore-unknown\",</span><br><span class=\"line\">      <span class=\"string\">\"eslint --cache --fix\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明:</p>\n<ul>\n<li><code>src/**/*.{js,vue}</code>：匹配 src 目录下所有的 js 和 vue 文件</li>\n<li>匹配规则为 glob-pattern:<ul>\n<li>** 表示递归匹配目录</li>\n<li><code>/*.{js,vue}</code>会展开为 <code>/*.js /*.vue</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>glob-pattern 文章参考：<ul>\n<li><a href=\"https://www.malikbrowne.com/blog/a-beginners-guide-glob-patterns\" target=\"_blank\" rel=\"noopener\">A Beginner’s Guide: Glob Patterns</a></li>\n<li><a href=\"https://www.cnblogs.com/liulangmao/p/4552339.html\" target=\"_blank\" rel=\"noopener\">返回主页流浪猫の窝: node-glob 学习</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>如果项目中配置了 eslint-loader 进行 eslint-on-save, 会和 lint-staged 冲突，需要关闭。</p>\n<p>因为 eslint-loader 是保存的时候进行检测，如果项目 lint 没通过，无法正常开发，此时开启 lint-staged 没有什么意义。</p>\n<p>所以二选一, 保存时候检测 OR commit 前自动格式化+检测</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h2><p>lint-staged 借助 git hook 实现在 git commit 前自动进行代码 prettier + eslint 检测。如果存在 eslint error 则会 commit 失败。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><a href=\"https://www.npmjs.com/package/lint-staged\" target=\"_blank\" rel=\"noopener\">lint-staged</a> 基于 husky，<a href=\"https://typicode.github.io/husky/#/\" target=\"_blank\" rel=\"noopener\">husky</a>能够让开发者更加便捷的操作 git hook.</p>\n<p>借助 husky 提供的 pre-commit hook，在每次 commit 前可以触发特定的操作，比如执行 lint-staged 对提交的 code 进行 prettier 和 eslint 检测。</p>\n<blockquote>\n<p>husky: You can use it to lint your commit messages, run tests, lint code, etc… when you commit or push. Husky supports all Git hooks.</p>\n</blockquote>\n<h2 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h2><p><strong>安装</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx mrm lint-staged</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用</strong><br>在执行了上面的命令后，package.json 中会添加相关的依赖和配置项,如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"My project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"my-custom-script\"</span>: <span class=\"string\">\"linter --arg1 --arg2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"husky\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"hooks\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"pre-commit\"</span>: <span class=\"string\">\"lint-staged\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"lint-staged\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"**/*\"</span>: [<span class=\"string\">\"eslint --cache --fix\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>添加 prettier 代码美化工具</strong></p>\n<ol>\n<li>npm 安装：<code>npm i prettier -D</code></li>\n<li>修改 package.json 中的配置项：</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"My project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"my-custom-script\"</span>: <span class=\"string\">\"linter --arg1 --arg2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"husky\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"hooks\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"pre-commit\"</span>: <span class=\"string\">\"lint-staged\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"lint-staged\"</span>: &#123;</span><br><span class=\"line\">+   \"**/*\": [\"prettier --write --single-quote --ignore-unknown\", \"eslint --cache --fix\"]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>–single-quote 为 prettier 的配置项：默认使用单引号，自定义配置参考此处<a href=\"https://prettier.io/docs/en/options.html\" target=\"_blank\" rel=\"noopener\">Prettier Options</a></p>\n</blockquote>\n<p><strong>指定 lint-staged 的生效目录</strong></p>\n<ol start=\"2\">\n<li>修改 package.json 中的配置项：</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"My project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"my-custom-script\"</span>: <span class=\"string\">\"linter --arg1 --arg2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"husky\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"hooks\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"pre-commit\"</span>: <span class=\"string\">\"lint-staged\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"lint-staged\"</span>: &#123;</span><br><span class=\"line\">+   \"src/**/*.&#123;js,vue&#125;\": [</span><br><span class=\"line\">      \"prettier --write --single-quote --ignore-unknown\",</span><br><span class=\"line\">      <span class=\"string\">\"eslint --cache --fix\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>说明:</p>\n<ul>\n<li><code>src/**/*.{js,vue}</code>：匹配 src 目录下所有的 js 和 vue 文件</li>\n<li>匹配规则为 glob-pattern:<ul>\n<li>** 表示递归匹配目录</li>\n<li><code>/*.{js,vue}</code>会展开为 <code>/*.js /*.vue</code></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>glob-pattern 文章参考：<ul>\n<li><a href=\"https://www.malikbrowne.com/blog/a-beginners-guide-glob-patterns\" target=\"_blank\" rel=\"noopener\">A Beginner’s Guide: Glob Patterns</a></li>\n<li><a href=\"https://www.cnblogs.com/liulangmao/p/4552339.html\" target=\"_blank\" rel=\"noopener\">返回主页流浪猫の窝: node-glob 学习</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>如果项目中配置了 eslint-loader 进行 eslint-on-save, 会和 lint-staged 冲突，需要关闭。</p>\n<p>因为 eslint-loader 是保存的时候进行检测，如果项目 lint 没通过，无法正常开发，此时开启 lint-staged 没有什么意义。</p>\n<p>所以二选一, 保存时候检测 OR commit 前自动格式化+检测</p>\n"},{"title":"apt-get 命令","toc":true,"date":"2021-01-05T16:00:00.000Z","_content":"\n## apt-get 是什么？\n\n执行 apt-get --help 可以得到以下的信息\n\n```bash\napt-get is a command line interface for retrieval of packages\nand information about them from authenticated sources and\nfor installation, upgrade and removal of packages together\nwith their dependencies.\n\nMost used commands:\n  update - Retrieve new lists of packages\n  upgrade - Perform an upgrade\n  install - Install new packages (pkg is libc6 not libc6.deb)\n  remove - Remove packages\n  purge - Remove packages and config files\n  autoremove - Remove automatically all unused packages\n  dist-upgrade - Distribution upgrade, see apt-get(8)\n  dselect-upgrade - Follow dselect selections\n  build-dep - Configure build-dependencies for source packages\n  clean - Erase downloaded archive files\n  autoclean - Erase old downloaded archive files\n  check - Verify that there are no broken dependencies\n  source - Download source archives\n  download - Download the binary package into the current directory\n  changelog - Download and display the changelog for the given package\n```\n\n简而言之，apt-get 是一个命令行交互工具，用来管理软件包。\n\n### 常用的命令\n\n- update: 更新当前 apt 的版本\n- upgrade: 升级包\n- install: 新安装一个包\n  - `apt-get install <package_1> <package_2> <package_3>`\n  - 安装指定版本 `sudo apt-get install <package_name>=<version_number>`\n- remove: 删除一个包，保留配置文件\n- purge: 删除包和相关的配置文件\n- autoremove: 自动清除所有冗余（没有使用）的包\n- apt-cache:\n  - 搜索指定包 完全匹配：`apt-cache search <search term>` 模糊匹配： `apt-cache pkgnames <search_term>`\n  - 获取跟多信息:`apt-cache showpkg <package_name>`\n","source":"_posts/linux-apt-get.md","raw":"---\ntitle: apt-get 命令\ncategories: [运维]\ntags: [linux]\ntoc: true\ndate: 2021/1/6\n---\n\n## apt-get 是什么？\n\n执行 apt-get --help 可以得到以下的信息\n\n```bash\napt-get is a command line interface for retrieval of packages\nand information about them from authenticated sources and\nfor installation, upgrade and removal of packages together\nwith their dependencies.\n\nMost used commands:\n  update - Retrieve new lists of packages\n  upgrade - Perform an upgrade\n  install - Install new packages (pkg is libc6 not libc6.deb)\n  remove - Remove packages\n  purge - Remove packages and config files\n  autoremove - Remove automatically all unused packages\n  dist-upgrade - Distribution upgrade, see apt-get(8)\n  dselect-upgrade - Follow dselect selections\n  build-dep - Configure build-dependencies for source packages\n  clean - Erase downloaded archive files\n  autoclean - Erase old downloaded archive files\n  check - Verify that there are no broken dependencies\n  source - Download source archives\n  download - Download the binary package into the current directory\n  changelog - Download and display the changelog for the given package\n```\n\n简而言之，apt-get 是一个命令行交互工具，用来管理软件包。\n\n### 常用的命令\n\n- update: 更新当前 apt 的版本\n- upgrade: 升级包\n- install: 新安装一个包\n  - `apt-get install <package_1> <package_2> <package_3>`\n  - 安装指定版本 `sudo apt-get install <package_name>=<version_number>`\n- remove: 删除一个包，保留配置文件\n- purge: 删除包和相关的配置文件\n- autoremove: 自动清除所有冗余（没有使用）的包\n- apt-cache:\n  - 搜索指定包 完全匹配：`apt-cache search <search term>` 模糊匹配： `apt-cache pkgnames <search_term>`\n  - 获取跟多信息:`apt-cache showpkg <package_name>`\n","slug":"linux-apt-get","published":1,"updated":"2021-04-22T08:18:57.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k0003ogoswaglpbhw0","content":"<h2 id=\"apt-get-是什么？\"><a href=\"#apt-get-是什么？\" class=\"headerlink\" title=\"apt-get 是什么？\"></a>apt-get 是什么？</h2><p>执行 apt-get –help 可以得到以下的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get is a <span class=\"built_in\">command</span> line interface <span class=\"keyword\">for</span> retrieval of packages</span><br><span class=\"line\">and information about them from authenticated sources and</span><br><span class=\"line\"><span class=\"keyword\">for</span> installation, upgrade and removal of packages together</span><br><span class=\"line\">with their dependencies.</span><br><span class=\"line\"></span><br><span class=\"line\">Most used commands:</span><br><span class=\"line\">  update - Retrieve new lists of packages</span><br><span class=\"line\">  upgrade - Perform an upgrade</span><br><span class=\"line\">  install - Install new packages (pkg is libc6 not libc6.deb)</span><br><span class=\"line\">  remove - Remove packages</span><br><span class=\"line\">  purge - Remove packages and config files</span><br><span class=\"line\">  autoremove - Remove automatically all unused packages</span><br><span class=\"line\">  dist-upgrade - Distribution upgrade, see apt-get(8)</span><br><span class=\"line\">  dselect-upgrade - Follow dselect selections</span><br><span class=\"line\">  build-dep - Configure build-dependencies <span class=\"keyword\">for</span> <span class=\"built_in\">source</span> packages</span><br><span class=\"line\">  clean - Erase downloaded archive files</span><br><span class=\"line\">  autoclean - Erase old downloaded archive files</span><br><span class=\"line\">  check - Verify that there are no broken dependencies</span><br><span class=\"line\">  <span class=\"built_in\">source</span> - Download <span class=\"built_in\">source</span> archives</span><br><span class=\"line\">  download - Download the binary package into the current directory</span><br><span class=\"line\">  changelog - Download and display the changelog <span class=\"keyword\">for</span> the given package</span><br></pre></td></tr></table></figure>\n\n<p>简而言之，apt-get 是一个命令行交互工具，用来管理软件包。</p>\n<h3 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h3><ul>\n<li>update: 更新当前 apt 的版本</li>\n<li>upgrade: 升级包</li>\n<li>install: 新安装一个包<ul>\n<li><code>apt-get install &lt;package_1&gt; &lt;package_2&gt; &lt;package_3&gt;</code></li>\n<li>安装指定版本 <code>sudo apt-get install &lt;package_name&gt;=&lt;version_number&gt;</code></li>\n</ul>\n</li>\n<li>remove: 删除一个包，保留配置文件</li>\n<li>purge: 删除包和相关的配置文件</li>\n<li>autoremove: 自动清除所有冗余（没有使用）的包</li>\n<li>apt-cache:<ul>\n<li>搜索指定包 完全匹配：<code>apt-cache search &lt;search term&gt;</code> 模糊匹配： <code>apt-cache pkgnames &lt;search_term&gt;</code></li>\n<li>获取跟多信息:<code>apt-cache showpkg &lt;package_name&gt;</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"apt-get-是什么？\"><a href=\"#apt-get-是什么？\" class=\"headerlink\" title=\"apt-get 是什么？\"></a>apt-get 是什么？</h2><p>执行 apt-get –help 可以得到以下的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get is a <span class=\"built_in\">command</span> line interface <span class=\"keyword\">for</span> retrieval of packages</span><br><span class=\"line\">and information about them from authenticated sources and</span><br><span class=\"line\"><span class=\"keyword\">for</span> installation, upgrade and removal of packages together</span><br><span class=\"line\">with their dependencies.</span><br><span class=\"line\"></span><br><span class=\"line\">Most used commands:</span><br><span class=\"line\">  update - Retrieve new lists of packages</span><br><span class=\"line\">  upgrade - Perform an upgrade</span><br><span class=\"line\">  install - Install new packages (pkg is libc6 not libc6.deb)</span><br><span class=\"line\">  remove - Remove packages</span><br><span class=\"line\">  purge - Remove packages and config files</span><br><span class=\"line\">  autoremove - Remove automatically all unused packages</span><br><span class=\"line\">  dist-upgrade - Distribution upgrade, see apt-get(8)</span><br><span class=\"line\">  dselect-upgrade - Follow dselect selections</span><br><span class=\"line\">  build-dep - Configure build-dependencies <span class=\"keyword\">for</span> <span class=\"built_in\">source</span> packages</span><br><span class=\"line\">  clean - Erase downloaded archive files</span><br><span class=\"line\">  autoclean - Erase old downloaded archive files</span><br><span class=\"line\">  check - Verify that there are no broken dependencies</span><br><span class=\"line\">  <span class=\"built_in\">source</span> - Download <span class=\"built_in\">source</span> archives</span><br><span class=\"line\">  download - Download the binary package into the current directory</span><br><span class=\"line\">  changelog - Download and display the changelog <span class=\"keyword\">for</span> the given package</span><br></pre></td></tr></table></figure>\n\n<p>简而言之，apt-get 是一个命令行交互工具，用来管理软件包。</p>\n<h3 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h3><ul>\n<li>update: 更新当前 apt 的版本</li>\n<li>upgrade: 升级包</li>\n<li>install: 新安装一个包<ul>\n<li><code>apt-get install &lt;package_1&gt; &lt;package_2&gt; &lt;package_3&gt;</code></li>\n<li>安装指定版本 <code>sudo apt-get install &lt;package_name&gt;=&lt;version_number&gt;</code></li>\n</ul>\n</li>\n<li>remove: 删除一个包，保留配置文件</li>\n<li>purge: 删除包和相关的配置文件</li>\n<li>autoremove: 自动清除所有冗余（没有使用）的包</li>\n<li>apt-cache:<ul>\n<li>搜索指定包 完全匹配：<code>apt-cache search &lt;search term&gt;</code> 模糊匹配： <code>apt-cache pkgnames &lt;search_term&gt;</code></li>\n<li>获取跟多信息:<code>apt-cache showpkg &lt;package_name&gt;</code></li>\n</ul>\n</li>\n</ul>\n"},{"title":"理清`constructor`，`[[prototype]]`, `prototype` 之间的区别","toc":true,"date":"2021-01-12T16:00:00.000Z","_content":"\n## 引入问题：下面两段代码输出结果为啥不同\n\n```js\nfunction MyConstructor() {}\nconst myObject = new MyConstructor();\nmyObject.constructor == MyConstructor; // true\n```\n\n```js\nfunction MyConstructor() {}\nMyConstructor.prototype = {};\nconst myObject = new MyConstructor();\nmyObject.constructor == MyConstructor; // false\n```\n\n## 前置知识\n\n### Objects 和 methods\n\njs 中的对象就是一堆可以读写的具名属性，**js 中没有 class**，函数（function）在 JS 中是一等公民（和普通变量等价），JS 中的方法（method）仅仅是一个指定了上下文的函数。\n\n### Prototypes\n\n- 对象的内置的属性`Prototype`，下文使用`[[Prototype]]`作为替代。\n- 注意`obj.prototype`和对象的`[[Prototype]]`是两个不同的概念。\n- js 本身并没有提供直接获取`[[Prototype]]`的方法，但绝大多数的现代浏览器支持通过 `__proto__`对`[[Prototype]]`进行获取和修改。\n\n### `[[Get]]`\n\n当获取对象的某个属性，比如 obj.a 会触发`[[Get]]`操作。对于默认情况下的 `[[Get]]`(没有被 Proxy 代理)会进行如下步骤：\n\n- 检查对象本身是否有这个属性，如果有就使用\n- 如果 a 不再 obj 中，那么就会检查 obj 的`[[Prototype]]`上是否存在 a 属性\n  - 如果存在则返回\n  - 不存在,继续检查 obj 的`[[Prototype]]`的`[[Prototype]]`,递归执行\n- `[[Prototype]]`的尽头是 `Object.prototype`，如果还是没有找到则会返回 undefined，值得一提的是，很多全局的方法就是通过这种方式获取的，如 `valueOf, toString, hasOwnProperty`\n\n### `[[Set]]`\n\n对于`myObject.foo = 'bar'`\n\n- foo 存在于 myObject.foo，那么只会进行修改。\n- **myObject 上不存在 foo**, 就会在[[Prototype]]链上进行查找，类似[[Get]]操作。\n  - [[Prototype]]链上没有找到 foo，则新添加一个 foo 属性\n  - [[Prototype]]链上存在 foo\n    - [[Prototype]]**链上的 foo writable 为 true：在 myObject 中添加一个新的属性 foo**\n    - [[Prototype]]**链上的 foo writable 为 false：严格模式报错，非严格模式忽略**\n    - [[Prototype]]链上的 foo 为 setter，直接调用这个 setter\n\n## 进入正题，逐行分析文初提出的问题的代码\n\n> 图示：椭圆形代表对象，箭头代表引用了其他对象的属性。[[Prototype]]链用绿色标出\n\n### #1: 定义构造函数\n\n```js\nfunction MyConstructor() {}\n```\n\n<img src=\"define-constructor.png\" alt=\"define-constructor\">\n\n- `MyConstructor.prototype`是一个自动创建的对象，这个对象又有一个 constructor 属性指回 MyConstructor。需要注意的是，**只有函数对象才拥有 prototype 属性**,因此，只有函数对象才拥有 constructor 属性\n- 上图的 MyConstructor 的[[Prototype]]指向 Function.prototype, 而不是 MyConstructor.prototype。\n- Object.prototype 是[[Prototype]]链的终点，而 Object.prototype 的[[Prototype]]则是 null\n  参考：\n\n* [Constructors Considered Mildly Confusing](https://zeekat.nl/articles/constructors-considered-mildly-confusing.html#sec-8-3)\n* [you-dont-know-js](https://github.com/getify/You-Dont-Know-JS) 第五章 Prototype\n\n### #2: 为 MyConstructor 分配新的 prototype 属性\n\n```js\nMyConstructor.prototype = {};\n```\n\n<img src=\"assign-new-prototype.png\" alt=\"assign-new-prototype.png\">\n\n将 MyConstructor 的 prototype 设置为空对象`{}`，这个对象没有 constructor 属性\n\n### #3: 调用构造函数生成新的对象\n\n```js\nconst myObject = new MyConstructor();\n```\n\n由于 new 操作会将 myObj 的[[Prototype]]设置为 MyConstructor.prototype，而 MyConstructor.prototype 为一个普通空对象，因此 MyConstructor 的[[Prototype]]就和 Object.prototype 关联了起来\n\n<img src=\"create-obj.png\" alt=\"调用构造函数生成新的对象\">\n\n因此`myObj.constructor`调用的时候，会按照图中绿色的原型链进行查找，最终找到了`Object.prototype.constructor`\n","source":"_posts/js-prototype-constructor.md","raw":"---\ntitle: 理清`constructor`，`[[prototype]]`, `prototype` 之间的区别\ncategories: [前端]\ntags: [js]\ntoc: true\ndate: 2021/1/13\n---\n\n## 引入问题：下面两段代码输出结果为啥不同\n\n```js\nfunction MyConstructor() {}\nconst myObject = new MyConstructor();\nmyObject.constructor == MyConstructor; // true\n```\n\n```js\nfunction MyConstructor() {}\nMyConstructor.prototype = {};\nconst myObject = new MyConstructor();\nmyObject.constructor == MyConstructor; // false\n```\n\n## 前置知识\n\n### Objects 和 methods\n\njs 中的对象就是一堆可以读写的具名属性，**js 中没有 class**，函数（function）在 JS 中是一等公民（和普通变量等价），JS 中的方法（method）仅仅是一个指定了上下文的函数。\n\n### Prototypes\n\n- 对象的内置的属性`Prototype`，下文使用`[[Prototype]]`作为替代。\n- 注意`obj.prototype`和对象的`[[Prototype]]`是两个不同的概念。\n- js 本身并没有提供直接获取`[[Prototype]]`的方法，但绝大多数的现代浏览器支持通过 `__proto__`对`[[Prototype]]`进行获取和修改。\n\n### `[[Get]]`\n\n当获取对象的某个属性，比如 obj.a 会触发`[[Get]]`操作。对于默认情况下的 `[[Get]]`(没有被 Proxy 代理)会进行如下步骤：\n\n- 检查对象本身是否有这个属性，如果有就使用\n- 如果 a 不再 obj 中，那么就会检查 obj 的`[[Prototype]]`上是否存在 a 属性\n  - 如果存在则返回\n  - 不存在,继续检查 obj 的`[[Prototype]]`的`[[Prototype]]`,递归执行\n- `[[Prototype]]`的尽头是 `Object.prototype`，如果还是没有找到则会返回 undefined，值得一提的是，很多全局的方法就是通过这种方式获取的，如 `valueOf, toString, hasOwnProperty`\n\n### `[[Set]]`\n\n对于`myObject.foo = 'bar'`\n\n- foo 存在于 myObject.foo，那么只会进行修改。\n- **myObject 上不存在 foo**, 就会在[[Prototype]]链上进行查找，类似[[Get]]操作。\n  - [[Prototype]]链上没有找到 foo，则新添加一个 foo 属性\n  - [[Prototype]]链上存在 foo\n    - [[Prototype]]**链上的 foo writable 为 true：在 myObject 中添加一个新的属性 foo**\n    - [[Prototype]]**链上的 foo writable 为 false：严格模式报错，非严格模式忽略**\n    - [[Prototype]]链上的 foo 为 setter，直接调用这个 setter\n\n## 进入正题，逐行分析文初提出的问题的代码\n\n> 图示：椭圆形代表对象，箭头代表引用了其他对象的属性。[[Prototype]]链用绿色标出\n\n### #1: 定义构造函数\n\n```js\nfunction MyConstructor() {}\n```\n\n<img src=\"define-constructor.png\" alt=\"define-constructor\">\n\n- `MyConstructor.prototype`是一个自动创建的对象，这个对象又有一个 constructor 属性指回 MyConstructor。需要注意的是，**只有函数对象才拥有 prototype 属性**,因此，只有函数对象才拥有 constructor 属性\n- 上图的 MyConstructor 的[[Prototype]]指向 Function.prototype, 而不是 MyConstructor.prototype。\n- Object.prototype 是[[Prototype]]链的终点，而 Object.prototype 的[[Prototype]]则是 null\n  参考：\n\n* [Constructors Considered Mildly Confusing](https://zeekat.nl/articles/constructors-considered-mildly-confusing.html#sec-8-3)\n* [you-dont-know-js](https://github.com/getify/You-Dont-Know-JS) 第五章 Prototype\n\n### #2: 为 MyConstructor 分配新的 prototype 属性\n\n```js\nMyConstructor.prototype = {};\n```\n\n<img src=\"assign-new-prototype.png\" alt=\"assign-new-prototype.png\">\n\n将 MyConstructor 的 prototype 设置为空对象`{}`，这个对象没有 constructor 属性\n\n### #3: 调用构造函数生成新的对象\n\n```js\nconst myObject = new MyConstructor();\n```\n\n由于 new 操作会将 myObj 的[[Prototype]]设置为 MyConstructor.prototype，而 MyConstructor.prototype 为一个普通空对象，因此 MyConstructor 的[[Prototype]]就和 Object.prototype 关联了起来\n\n<img src=\"create-obj.png\" alt=\"调用构造函数生成新的对象\">\n\n因此`myObj.constructor`调用的时候，会按照图中绿色的原型链进行查找，最终找到了`Object.prototype.constructor`\n","slug":"js-prototype-constructor","published":1,"updated":"2022-04-19T14:23:56.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k2003rgoswba78166v","content":"<h2 id=\"引入问题：下面两段代码输出结果为啥不同\"><a href=\"#引入问题：下面两段代码输出结果为啥不同\" class=\"headerlink\" title=\"引入问题：下面两段代码输出结果为啥不同\"></a>引入问题：下面两段代码输出结果为啥不同</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyConstructor</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myObject = <span class=\"keyword\">new</span> MyConstructor();</span><br><span class=\"line\">myObject.constructor == MyConstructor; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyConstructor</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">MyConstructor.prototype = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myObject = <span class=\"keyword\">new</span> MyConstructor();</span><br><span class=\"line\">myObject.constructor == MyConstructor; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h3 id=\"Objects-和-methods\"><a href=\"#Objects-和-methods\" class=\"headerlink\" title=\"Objects 和 methods\"></a>Objects 和 methods</h3><p>js 中的对象就是一堆可以读写的具名属性，<strong>js 中没有 class</strong>，函数（function）在 JS 中是一等公民（和普通变量等价），JS 中的方法（method）仅仅是一个指定了上下文的函数。</p>\n<h3 id=\"Prototypes\"><a href=\"#Prototypes\" class=\"headerlink\" title=\"Prototypes\"></a>Prototypes</h3><ul>\n<li>对象的内置的属性<code>Prototype</code>，下文使用<code>[[Prototype]]</code>作为替代。</li>\n<li>注意<code>obj.prototype</code>和对象的<code>[[Prototype]]</code>是两个不同的概念。</li>\n<li>js 本身并没有提供直接获取<code>[[Prototype]]</code>的方法，但绝大多数的现代浏览器支持通过 <code>__proto__</code>对<code>[[Prototype]]</code>进行获取和修改。</li>\n</ul>\n<h3 id=\"Get\"><a href=\"#Get\" class=\"headerlink\" title=\"[[Get]]\"></a><code>[[Get]]</code></h3><p>当获取对象的某个属性，比如 obj.a 会触发<code>[[Get]]</code>操作。对于默认情况下的 <code>[[Get]]</code>(没有被 Proxy 代理)会进行如下步骤：</p>\n<ul>\n<li>检查对象本身是否有这个属性，如果有就使用</li>\n<li>如果 a 不再 obj 中，那么就会检查 obj 的<code>[[Prototype]]</code>上是否存在 a 属性<ul>\n<li>如果存在则返回</li>\n<li>不存在,继续检查 obj 的<code>[[Prototype]]</code>的<code>[[Prototype]]</code>,递归执行</li>\n</ul>\n</li>\n<li><code>[[Prototype]]</code>的尽头是 <code>Object.prototype</code>，如果还是没有找到则会返回 undefined，值得一提的是，很多全局的方法就是通过这种方式获取的，如 <code>valueOf, toString, hasOwnProperty</code></li>\n</ul>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"[[Set]]\"></a><code>[[Set]]</code></h3><p>对于<code>myObject.foo = &#39;bar&#39;</code></p>\n<ul>\n<li>foo 存在于 myObject.foo，那么只会进行修改。</li>\n<li><strong>myObject 上不存在 foo</strong>, 就会在[[Prototype]]链上进行查找，类似[[Get]]操作。<ul>\n<li>[[Prototype]]链上没有找到 foo，则新添加一个 foo 属性</li>\n<li>[[Prototype]]链上存在 foo<ul>\n<li>[[Prototype]]<strong>链上的 foo writable 为 true：在 myObject 中添加一个新的属性 foo</strong></li>\n<li>[[Prototype]]<strong>链上的 foo writable 为 false：严格模式报错，非严格模式忽略</strong></li>\n<li>[[Prototype]]链上的 foo 为 setter，直接调用这个 setter</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"进入正题，逐行分析文初提出的问题的代码\"><a href=\"#进入正题，逐行分析文初提出的问题的代码\" class=\"headerlink\" title=\"进入正题，逐行分析文初提出的问题的代码\"></a>进入正题，逐行分析文初提出的问题的代码</h2><blockquote>\n<p>图示：椭圆形代表对象，箭头代表引用了其他对象的属性。[[Prototype]]链用绿色标出</p>\n</blockquote>\n<h3 id=\"1-定义构造函数\"><a href=\"#1-定义构造函数\" class=\"headerlink\" title=\"#1: 定义构造函数\"></a>#1: 定义构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyConstructor</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"define-constructor.png\" alt=\"define-constructor\">\n\n<ul>\n<li><code>MyConstructor.prototype</code>是一个自动创建的对象，这个对象又有一个 constructor 属性指回 MyConstructor。需要注意的是，<strong>只有函数对象才拥有 prototype 属性</strong>,因此，只有函数对象才拥有 constructor 属性</li>\n<li>上图的 MyConstructor 的[[Prototype]]指向 Function.prototype, 而不是 MyConstructor.prototype。</li>\n<li>Object.prototype 是[[Prototype]]链的终点，而 Object.prototype 的[[Prototype]]则是 null<br>参考：</li>\n</ul>\n<ul>\n<li><a href=\"https://zeekat.nl/articles/constructors-considered-mildly-confusing.html#sec-8-3\" target=\"_blank\" rel=\"noopener\">Constructors Considered Mildly Confusing</a></li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"noopener\">you-dont-know-js</a> 第五章 Prototype</li>\n</ul>\n<h3 id=\"2-为-MyConstructor-分配新的-prototype-属性\"><a href=\"#2-为-MyConstructor-分配新的-prototype-属性\" class=\"headerlink\" title=\"#2: 为 MyConstructor 分配新的 prototype 属性\"></a>#2: 为 MyConstructor 分配新的 prototype 属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyConstructor.prototype = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"assign-new-prototype.png\" alt=\"assign-new-prototype.png\">\n\n<p>将 MyConstructor 的 prototype 设置为空对象<code>{}</code>，这个对象没有 constructor 属性</p>\n<h3 id=\"3-调用构造函数生成新的对象\"><a href=\"#3-调用构造函数生成新的对象\" class=\"headerlink\" title=\"#3: 调用构造函数生成新的对象\"></a>#3: 调用构造函数生成新的对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObject = <span class=\"keyword\">new</span> MyConstructor();</span><br></pre></td></tr></table></figure>\n\n<p>由于 new 操作会将 myObj 的[[Prototype]]设置为 MyConstructor.prototype，而 MyConstructor.prototype 为一个普通空对象，因此 MyConstructor 的[[Prototype]]就和 Object.prototype 关联了起来</p>\n<img src=\"create-obj.png\" alt=\"调用构造函数生成新的对象\">\n\n<p>因此<code>myObj.constructor</code>调用的时候，会按照图中绿色的原型链进行查找，最终找到了<code>Object.prototype.constructor</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引入问题：下面两段代码输出结果为啥不同\"><a href=\"#引入问题：下面两段代码输出结果为啥不同\" class=\"headerlink\" title=\"引入问题：下面两段代码输出结果为啥不同\"></a>引入问题：下面两段代码输出结果为啥不同</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyConstructor</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myObject = <span class=\"keyword\">new</span> MyConstructor();</span><br><span class=\"line\">myObject.constructor == MyConstructor; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyConstructor</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">MyConstructor.prototype = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myObject = <span class=\"keyword\">new</span> MyConstructor();</span><br><span class=\"line\">myObject.constructor == MyConstructor; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h3 id=\"Objects-和-methods\"><a href=\"#Objects-和-methods\" class=\"headerlink\" title=\"Objects 和 methods\"></a>Objects 和 methods</h3><p>js 中的对象就是一堆可以读写的具名属性，<strong>js 中没有 class</strong>，函数（function）在 JS 中是一等公民（和普通变量等价），JS 中的方法（method）仅仅是一个指定了上下文的函数。</p>\n<h3 id=\"Prototypes\"><a href=\"#Prototypes\" class=\"headerlink\" title=\"Prototypes\"></a>Prototypes</h3><ul>\n<li>对象的内置的属性<code>Prototype</code>，下文使用<code>[[Prototype]]</code>作为替代。</li>\n<li>注意<code>obj.prototype</code>和对象的<code>[[Prototype]]</code>是两个不同的概念。</li>\n<li>js 本身并没有提供直接获取<code>[[Prototype]]</code>的方法，但绝大多数的现代浏览器支持通过 <code>__proto__</code>对<code>[[Prototype]]</code>进行获取和修改。</li>\n</ul>\n<h3 id=\"Get\"><a href=\"#Get\" class=\"headerlink\" title=\"[[Get]]\"></a><code>[[Get]]</code></h3><p>当获取对象的某个属性，比如 obj.a 会触发<code>[[Get]]</code>操作。对于默认情况下的 <code>[[Get]]</code>(没有被 Proxy 代理)会进行如下步骤：</p>\n<ul>\n<li>检查对象本身是否有这个属性，如果有就使用</li>\n<li>如果 a 不再 obj 中，那么就会检查 obj 的<code>[[Prototype]]</code>上是否存在 a 属性<ul>\n<li>如果存在则返回</li>\n<li>不存在,继续检查 obj 的<code>[[Prototype]]</code>的<code>[[Prototype]]</code>,递归执行</li>\n</ul>\n</li>\n<li><code>[[Prototype]]</code>的尽头是 <code>Object.prototype</code>，如果还是没有找到则会返回 undefined，值得一提的是，很多全局的方法就是通过这种方式获取的，如 <code>valueOf, toString, hasOwnProperty</code></li>\n</ul>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"[[Set]]\"></a><code>[[Set]]</code></h3><p>对于<code>myObject.foo = &#39;bar&#39;</code></p>\n<ul>\n<li>foo 存在于 myObject.foo，那么只会进行修改。</li>\n<li><strong>myObject 上不存在 foo</strong>, 就会在[[Prototype]]链上进行查找，类似[[Get]]操作。<ul>\n<li>[[Prototype]]链上没有找到 foo，则新添加一个 foo 属性</li>\n<li>[[Prototype]]链上存在 foo<ul>\n<li>[[Prototype]]<strong>链上的 foo writable 为 true：在 myObject 中添加一个新的属性 foo</strong></li>\n<li>[[Prototype]]<strong>链上的 foo writable 为 false：严格模式报错，非严格模式忽略</strong></li>\n<li>[[Prototype]]链上的 foo 为 setter，直接调用这个 setter</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"进入正题，逐行分析文初提出的问题的代码\"><a href=\"#进入正题，逐行分析文初提出的问题的代码\" class=\"headerlink\" title=\"进入正题，逐行分析文初提出的问题的代码\"></a>进入正题，逐行分析文初提出的问题的代码</h2><blockquote>\n<p>图示：椭圆形代表对象，箭头代表引用了其他对象的属性。[[Prototype]]链用绿色标出</p>\n</blockquote>\n<h3 id=\"1-定义构造函数\"><a href=\"#1-定义构造函数\" class=\"headerlink\" title=\"#1: 定义构造函数\"></a>#1: 定义构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyConstructor</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"define-constructor.png\" alt=\"define-constructor\">\n\n<ul>\n<li><code>MyConstructor.prototype</code>是一个自动创建的对象，这个对象又有一个 constructor 属性指回 MyConstructor。需要注意的是，<strong>只有函数对象才拥有 prototype 属性</strong>,因此，只有函数对象才拥有 constructor 属性</li>\n<li>上图的 MyConstructor 的[[Prototype]]指向 Function.prototype, 而不是 MyConstructor.prototype。</li>\n<li>Object.prototype 是[[Prototype]]链的终点，而 Object.prototype 的[[Prototype]]则是 null<br>参考：</li>\n</ul>\n<ul>\n<li><a href=\"https://zeekat.nl/articles/constructors-considered-mildly-confusing.html#sec-8-3\" target=\"_blank\" rel=\"noopener\">Constructors Considered Mildly Confusing</a></li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"noopener\">you-dont-know-js</a> 第五章 Prototype</li>\n</ul>\n<h3 id=\"2-为-MyConstructor-分配新的-prototype-属性\"><a href=\"#2-为-MyConstructor-分配新的-prototype-属性\" class=\"headerlink\" title=\"#2: 为 MyConstructor 分配新的 prototype 属性\"></a>#2: 为 MyConstructor 分配新的 prototype 属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyConstructor.prototype = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<img src=\"assign-new-prototype.png\" alt=\"assign-new-prototype.png\">\n\n<p>将 MyConstructor 的 prototype 设置为空对象<code>{}</code>，这个对象没有 constructor 属性</p>\n<h3 id=\"3-调用构造函数生成新的对象\"><a href=\"#3-调用构造函数生成新的对象\" class=\"headerlink\" title=\"#3: 调用构造函数生成新的对象\"></a>#3: 调用构造函数生成新的对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObject = <span class=\"keyword\">new</span> MyConstructor();</span><br></pre></td></tr></table></figure>\n\n<p>由于 new 操作会将 myObj 的[[Prototype]]设置为 MyConstructor.prototype，而 MyConstructor.prototype 为一个普通空对象，因此 MyConstructor 的[[Prototype]]就和 Object.prototype 关联了起来</p>\n<img src=\"create-obj.png\" alt=\"调用构造函数生成新的对象\">\n\n<p>因此<code>myObj.constructor</code>调用的时候，会按照图中绿色的原型链进行查找，最终找到了<code>Object.prototype.constructor</code></p>\n"},{"title":"如何在linux 上使用awk 命令","toc":true,"date":"2021-08-04T16:00:00.000Z","_content":"\n翻译自 [how to use the awk Command on Linux](https://www.howtogeek.com/562941/how-to-use-the-awk-command-on-linux/)\n查找指定端口 8080，并 kill：\nkill -9 $(netstat -nlp | grep 8080 | awk '{print $7}' | awk -F\"/\" '{ print $1 }');\n\n<!-- more -->\n\n## Rules, Patterns, and Actions\n\nawk 程序使用 单引号 标记，其中 pattern 在 `{}` 申明。如下是一个 awk 使用的简单例子\n\n```bash\n> who\ncyber    :0           2021-07-23 10:01 (:0)\ncyber    pts/3        2021-08-03 17:15 (192.168.1.92)\ncyber    pts/4        2021-08-06 09:21 (192.168.1.167)\ncyber    pts/5        2021-08-06 10:07 (192.168.1.92)\n\n> who | awk '{print $1}'\ncyber\ncyber\ncyber\ncyber\n```\n\n默认情况下，awk 认为 空格 + 字符串 + 空格 这种形式为一个 field，awk 通过 美元符 `$` + 数字进行标记。\n因此，$1 表示 第一个 field。print $1 表示只打印第一个 field，抛弃剩余 field。\n\n如果我们还想打印出用户的登陆时间：\n\n```bash\n> who | awk '{print $1,$3,$4}'\ncyber 2021-07-23 10:01\ncyber 2021-08-03 17:15\ncyber 2021-08-06 09:21\ncyber 2021-08-06 10:07\n```\n\n因此 field 相关语法如下：\n\n$0: 表示整行.\n$1: 表示当前行的第1个field.\n$2: 表示当前行的第2个field.\n$7: 表示当前行的第7个field.\n$NF: 表示当前行的最后一个 field.\n\n## 添加输出分隔符 OFS\n\n我们使用 OFS 变量在不同的 field 间添加连接符号\n\n```bash\n> date | awk 'OFS=\"-\" {print $1,$2,$3, $5}'\n2021年-08月-09日-10:15:23\n```\n\n## BEGIN 和 END 规则\n\n我们可以通过 BEGIN 和 END 为输出字符添加前缀，后缀字符串\n\n```bash\nawk 'BEGIN {print \"Dennis Ritchie\"} {print $0}' dennis_ritchie.txt\n```\n\n## 输入分隔符\n\n通过 -F 可以实现对 field 进行切分，比如对于\"2021/11/03\"\n\n```bash\n> awk -F\"/\" '{print $1}' xxxFile\n2021\n```\n\n## 在 awk 中使用 正则表达式进行查找\n\n例子：在/etc/fstab 文件中查找存在 UUID 关键字的 string。\n\n```bash\nawk '/^UUID/ {print $0} /etc/fstab'\n```\n","source":"_posts/linux-awk.md","raw":"---\ntitle: 如何在linux 上使用awk 命令\ncategories: [运维]\ntags: []\ntoc: true\ndate: 2021/8/5\n---\n\n翻译自 [how to use the awk Command on Linux](https://www.howtogeek.com/562941/how-to-use-the-awk-command-on-linux/)\n查找指定端口 8080，并 kill：\nkill -9 $(netstat -nlp | grep 8080 | awk '{print $7}' | awk -F\"/\" '{ print $1 }');\n\n<!-- more -->\n\n## Rules, Patterns, and Actions\n\nawk 程序使用 单引号 标记，其中 pattern 在 `{}` 申明。如下是一个 awk 使用的简单例子\n\n```bash\n> who\ncyber    :0           2021-07-23 10:01 (:0)\ncyber    pts/3        2021-08-03 17:15 (192.168.1.92)\ncyber    pts/4        2021-08-06 09:21 (192.168.1.167)\ncyber    pts/5        2021-08-06 10:07 (192.168.1.92)\n\n> who | awk '{print $1}'\ncyber\ncyber\ncyber\ncyber\n```\n\n默认情况下，awk 认为 空格 + 字符串 + 空格 这种形式为一个 field，awk 通过 美元符 `$` + 数字进行标记。\n因此，$1 表示 第一个 field。print $1 表示只打印第一个 field，抛弃剩余 field。\n\n如果我们还想打印出用户的登陆时间：\n\n```bash\n> who | awk '{print $1,$3,$4}'\ncyber 2021-07-23 10:01\ncyber 2021-08-03 17:15\ncyber 2021-08-06 09:21\ncyber 2021-08-06 10:07\n```\n\n因此 field 相关语法如下：\n\n$0: 表示整行.\n$1: 表示当前行的第1个field.\n$2: 表示当前行的第2个field.\n$7: 表示当前行的第7个field.\n$NF: 表示当前行的最后一个 field.\n\n## 添加输出分隔符 OFS\n\n我们使用 OFS 变量在不同的 field 间添加连接符号\n\n```bash\n> date | awk 'OFS=\"-\" {print $1,$2,$3, $5}'\n2021年-08月-09日-10:15:23\n```\n\n## BEGIN 和 END 规则\n\n我们可以通过 BEGIN 和 END 为输出字符添加前缀，后缀字符串\n\n```bash\nawk 'BEGIN {print \"Dennis Ritchie\"} {print $0}' dennis_ritchie.txt\n```\n\n## 输入分隔符\n\n通过 -F 可以实现对 field 进行切分，比如对于\"2021/11/03\"\n\n```bash\n> awk -F\"/\" '{print $1}' xxxFile\n2021\n```\n\n## 在 awk 中使用 正则表达式进行查找\n\n例子：在/etc/fstab 文件中查找存在 UUID 关键字的 string。\n\n```bash\nawk '/^UUID/ {print $0} /etc/fstab'\n```\n","slug":"linux-awk","published":1,"updated":"2021-08-10T06:34:22.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k3003ugoswd90ohov8","content":"<p>翻译自 <a href=\"https://www.howtogeek.com/562941/how-to-use-the-awk-command-on-linux/\" target=\"_blank\" rel=\"noopener\">how to use the awk Command on Linux</a><br>查找指定端口 8080，并 kill：<br>kill -9 $(netstat -nlp | grep 8080 | awk ‘{print $7}’ | awk -F”/“ ‘{ print $1 }’);</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Rules-Patterns-and-Actions\"><a href=\"#Rules-Patterns-and-Actions\" class=\"headerlink\" title=\"Rules, Patterns, and Actions\"></a>Rules, Patterns, and Actions</h2><p>awk 程序使用 单引号 标记，其中 pattern 在 <code>{}</code> 申明。如下是一个 awk 使用的简单例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; who</span><br><span class=\"line\">cyber    :0           2021-07-23 10:01 (:0)</span><br><span class=\"line\">cyber    pts/3        2021-08-03 17:15 (192.168.1.92)</span><br><span class=\"line\">cyber    pts/4        2021-08-06 09:21 (192.168.1.167)</span><br><span class=\"line\">cyber    pts/5        2021-08-06 10:07 (192.168.1.92)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; who | awk <span class=\"string\">'&#123;print $1&#125;'</span></span><br><span class=\"line\">cyber</span><br><span class=\"line\">cyber</span><br><span class=\"line\">cyber</span><br><span class=\"line\">cyber</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，awk 认为 空格 + 字符串 + 空格 这种形式为一个 field，awk 通过 美元符 <code>$</code> + 数字进行标记。<br>因此，$1 表示 第一个 field。print $1 表示只打印第一个 field，抛弃剩余 field。</p>\n<p>如果我们还想打印出用户的登陆时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; who | awk <span class=\"string\">'&#123;print $1,$3,$4&#125;'</span></span><br><span class=\"line\">cyber 2021-07-23 10:01</span><br><span class=\"line\">cyber 2021-08-03 17:15</span><br><span class=\"line\">cyber 2021-08-06 09:21</span><br><span class=\"line\">cyber 2021-08-06 10:07</span><br></pre></td></tr></table></figure>\n\n<p>因此 field 相关语法如下：</p>\n<p>$0: 表示整行.<br>$1: 表示当前行的第1个field.<br>$2: 表示当前行的第2个field.<br>$7: 表示当前行的第7个field.<br>$NF: 表示当前行的最后一个 field.</p>\n<h2 id=\"添加输出分隔符-OFS\"><a href=\"#添加输出分隔符-OFS\" class=\"headerlink\" title=\"添加输出分隔符 OFS\"></a>添加输出分隔符 OFS</h2><p>我们使用 OFS 变量在不同的 field 间添加连接符号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date | awk <span class=\"string\">'OFS=\"-\" &#123;print $1,$2,$3, $5&#125;'</span></span><br><span class=\"line\">2021年-08月-09日-10:15:23</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-和-END-规则\"><a href=\"#BEGIN-和-END-规则\" class=\"headerlink\" title=\"BEGIN 和 END 规则\"></a>BEGIN 和 END 规则</h2><p>我们可以通过 BEGIN 和 END 为输出字符添加前缀，后缀字符串</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'BEGIN &#123;print \"Dennis Ritchie\"&#125; &#123;print $0&#125;'</span> dennis_ritchie.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入分隔符\"><a href=\"#输入分隔符\" class=\"headerlink\" title=\"输入分隔符\"></a>输入分隔符</h2><p>通过 -F 可以实现对 field 进行切分，比如对于”2021/11/03”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; awk -F<span class=\"string\">\"/\"</span> <span class=\"string\">'&#123;print $1&#125;'</span> xxxFile</span><br><span class=\"line\">2021</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在-awk-中使用-正则表达式进行查找\"><a href=\"#在-awk-中使用-正则表达式进行查找\" class=\"headerlink\" title=\"在 awk 中使用 正则表达式进行查找\"></a>在 awk 中使用 正则表达式进行查找</h2><p>例子：在/etc/fstab 文件中查找存在 UUID 关键字的 string。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'/^UUID/ &#123;print $0&#125; /etc/fstab'</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>翻译自 <a href=\"https://www.howtogeek.com/562941/how-to-use-the-awk-command-on-linux/\" target=\"_blank\" rel=\"noopener\">how to use the awk Command on Linux</a><br>查找指定端口 8080，并 kill：<br>kill -9 $(netstat -nlp | grep 8080 | awk ‘{print $7}’ | awk -F”/“ ‘{ print $1 }’);</p>","more":"<h2 id=\"Rules-Patterns-and-Actions\"><a href=\"#Rules-Patterns-and-Actions\" class=\"headerlink\" title=\"Rules, Patterns, and Actions\"></a>Rules, Patterns, and Actions</h2><p>awk 程序使用 单引号 标记，其中 pattern 在 <code>{}</code> 申明。如下是一个 awk 使用的简单例子</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; who</span><br><span class=\"line\">cyber    :0           2021-07-23 10:01 (:0)</span><br><span class=\"line\">cyber    pts/3        2021-08-03 17:15 (192.168.1.92)</span><br><span class=\"line\">cyber    pts/4        2021-08-06 09:21 (192.168.1.167)</span><br><span class=\"line\">cyber    pts/5        2021-08-06 10:07 (192.168.1.92)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; who | awk <span class=\"string\">'&#123;print $1&#125;'</span></span><br><span class=\"line\">cyber</span><br><span class=\"line\">cyber</span><br><span class=\"line\">cyber</span><br><span class=\"line\">cyber</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，awk 认为 空格 + 字符串 + 空格 这种形式为一个 field，awk 通过 美元符 <code>$</code> + 数字进行标记。<br>因此，$1 表示 第一个 field。print $1 表示只打印第一个 field，抛弃剩余 field。</p>\n<p>如果我们还想打印出用户的登陆时间：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; who | awk <span class=\"string\">'&#123;print $1,$3,$4&#125;'</span></span><br><span class=\"line\">cyber 2021-07-23 10:01</span><br><span class=\"line\">cyber 2021-08-03 17:15</span><br><span class=\"line\">cyber 2021-08-06 09:21</span><br><span class=\"line\">cyber 2021-08-06 10:07</span><br></pre></td></tr></table></figure>\n\n<p>因此 field 相关语法如下：</p>\n<p>$0: 表示整行.<br>$1: 表示当前行的第1个field.<br>$2: 表示当前行的第2个field.<br>$7: 表示当前行的第7个field.<br>$NF: 表示当前行的最后一个 field.</p>\n<h2 id=\"添加输出分隔符-OFS\"><a href=\"#添加输出分隔符-OFS\" class=\"headerlink\" title=\"添加输出分隔符 OFS\"></a>添加输出分隔符 OFS</h2><p>我们使用 OFS 变量在不同的 field 间添加连接符号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; date | awk <span class=\"string\">'OFS=\"-\" &#123;print $1,$2,$3, $5&#125;'</span></span><br><span class=\"line\">2021年-08月-09日-10:15:23</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BEGIN-和-END-规则\"><a href=\"#BEGIN-和-END-规则\" class=\"headerlink\" title=\"BEGIN 和 END 规则\"></a>BEGIN 和 END 规则</h2><p>我们可以通过 BEGIN 和 END 为输出字符添加前缀，后缀字符串</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'BEGIN &#123;print \"Dennis Ritchie\"&#125; &#123;print $0&#125;'</span> dennis_ritchie.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输入分隔符\"><a href=\"#输入分隔符\" class=\"headerlink\" title=\"输入分隔符\"></a>输入分隔符</h2><p>通过 -F 可以实现对 field 进行切分，比如对于”2021/11/03”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; awk -F<span class=\"string\">\"/\"</span> <span class=\"string\">'&#123;print $1&#125;'</span> xxxFile</span><br><span class=\"line\">2021</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在-awk-中使用-正则表达式进行查找\"><a href=\"#在-awk-中使用-正则表达式进行查找\" class=\"headerlink\" title=\"在 awk 中使用 正则表达式进行查找\"></a>在 awk 中使用 正则表达式进行查找</h2><p>例子：在/etc/fstab 文件中查找存在 UUID 关键字的 string。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk <span class=\"string\">'/^UUID/ &#123;print $0&#125; /etc/fstab'</span></span><br></pre></td></tr></table></figure>"},{"title":"hibernate cascade 方法","toc":true,"date":"2021-11-15T16:00:00.000Z","_content":"\nJPA 允许将一个对象的更新操作联合到另一个对象的更新操作中，这样可以避免在更新一个对象时，还需要更新其他对象。\n\n`javax.persistence.CascadeType` 有以下几种类型\n\n- ALL: cascade 所有状态转换\n- PERSIST: cascade 实体的持久化\n- MERGE: cascade 实体的更新\n- REMOVE: cascade 实体的删除\n- REFRESH: cascade 实体的刷新\n- DETACH: cascade 实体的分离\n\n这篇文章通过具体例子介绍了 cascade 几种类型的效果\n\n<!-- more -->\n\n## ALL\n\n> CascadeType.ALL 除了上述所有类型的效果外，还可以指定以下类型的效果\n> SAVE_UPDATE: cascade 实体的 saveOrUpdate\n> REPLICATE: cascade 实体的复制操作\n> LOCK: cascade 实体的锁定\n\n下面几种类型类型的效果，通过如下两个实体进行展示\n\n```java\n@Entity\npublic class Person {\n  @Id\n  private Long id;\n\n  private String name;\n\n  @OneToMany(mappedBy = \"owner\", cascade = CascadeType.ALL)\n  private List<Phone> phones = new ArrayList<>();\n\n  //Getters and setters are omitted for brevity\n\n  public void addPhone(Phone phone) {\n      this.phones.add( phone );\n      phone.setOwner( this );\n  }\n}\n\n@Entity\npublic class Phone {\n\n    @Id\n    private Long id;\n\n    @Column(name = \"`number`\")\n    private String number;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    private Person owner;\n\n    //Getters and setters are omitted for brevity\n}\n\n```\n\n## PERSIST\n\n当对 person 实体进行持久化操作时候，persist 操作会被传递给 phone\n\n```java\nPerson person = new Person();\nperson.setId( 1L );\nperson.setName( \"John Doe\" );\n\nPhone phone = new Phone();\nphone.setId( 1L );\nphone.setNumber( \"123-456-7890\" );\n\nperson.addPhone( phone );\n\nentityManager.persist( person );\n```\n\n```sql\nINSERT INTO Person ( name, id )\nVALUES ( 'John Doe', 1 )\n\nINSERT INTO Phone ( `number`, person_id, id )\nVALUE ( '123-456-7890', 1, 1 )\n```\n\n## MERGE\n\n当对 person 实体进行 merge 操作时候，merge 操作会被传递给 phone\n\n```java\nPhone phone = entityManager.find( Phone.class, 1L );\nPerson person = phone.getOwner();\n\nperson.setName( \"John Doe Jr.\" );\nphone.setNumber( \"987-654-3210\" );\n\nentityManager.clear();\n\nentityManager.merge( person );\n```\n\n```sql\nSELECT\n    p.id as id1_0_1_,\n    p.name as name2_0_1_,\n    ph.owner_id as owner_id3_1_3_,\n    ph.id as id1_1_3_,\n    ph.id as id1_1_0_,\n    ph.\"number\" as number2_1_0_,\n    ph.owner_id as owner_id3_1_0_\nFROM\n    Person p\nLEFT OUTER JOIN\n    Phone ph\n        on p.id=ph.owner_id\nWHERE\n    p.id = 1\n```\n\n## REMOVE\n\n删除操作\n\n```java\nPerson person = entityManager.find( Person.class, 1L );\n\nentityManager.remove( person );\n```\n\n```sql\nDELETE FROM Phone WHERE id = 1\n\nDELETE FROM Person WHERE id = 1\n```\n\n## REFRESH\n\nrefresh 操作会抛弃现有的更改，并且重新从数据库中加载实体\n\n```java\nPerson person = entityManager.find( Person.class, 1L );\nPhone phone = person.getPhones().get( 0 );\n\nperson.setName( \"John Doe Jr.\" );\nphone.setNumber( \"987-654-3210\" );\n\nentityManager.refresh( person );\n\nassertEquals( \"John Doe\", person.getName() );\nassertEquals( \"123-456-7890\", phone.getNumber() );\n```\n\n```sql\nSELECT\n    p.id as id1_0_1_,\n    p.name as name2_0_1_,\n    ph.owner_id as owner_id3_1_3_,\n    ph.id as id1_1_3_,\n    ph.id as id1_1_0_,\n    ph.\"number\" as number2_1_0_,\n    ph.owner_id as owner_id3_1_0_\nFROM\n    Person p\nLEFT OUTER JOIN\n    Phone ph\n        ON p.id=ph.owner_id\nWHERE\n    p.id = 1\n```\n\n## DETACH\n\n```java\nPerson person = entityManager.find( Person.class, 1L );\nassertEquals( 1, person.getPhones().size() );\nPhone phone = person.getPhones().get( 0 );\n\nassertTrue( entityManager.contains( person ));\nassertTrue( entityManager.contains( phone ));\n\nentityManager.detach( person );\n\nassertFalse( entityManager.contains( person ));\nassertFalse( entityManager.contains( phone ));\n```\n","source":"_posts/java-hibernate-cascade.md","raw":"---\ntitle: hibernate cascade 方法\ncategories: [后端]\ntags: [hibernate]\ntoc: true\ndate: 2021/11/16\n---\n\nJPA 允许将一个对象的更新操作联合到另一个对象的更新操作中，这样可以避免在更新一个对象时，还需要更新其他对象。\n\n`javax.persistence.CascadeType` 有以下几种类型\n\n- ALL: cascade 所有状态转换\n- PERSIST: cascade 实体的持久化\n- MERGE: cascade 实体的更新\n- REMOVE: cascade 实体的删除\n- REFRESH: cascade 实体的刷新\n- DETACH: cascade 实体的分离\n\n这篇文章通过具体例子介绍了 cascade 几种类型的效果\n\n<!-- more -->\n\n## ALL\n\n> CascadeType.ALL 除了上述所有类型的效果外，还可以指定以下类型的效果\n> SAVE_UPDATE: cascade 实体的 saveOrUpdate\n> REPLICATE: cascade 实体的复制操作\n> LOCK: cascade 实体的锁定\n\n下面几种类型类型的效果，通过如下两个实体进行展示\n\n```java\n@Entity\npublic class Person {\n  @Id\n  private Long id;\n\n  private String name;\n\n  @OneToMany(mappedBy = \"owner\", cascade = CascadeType.ALL)\n  private List<Phone> phones = new ArrayList<>();\n\n  //Getters and setters are omitted for brevity\n\n  public void addPhone(Phone phone) {\n      this.phones.add( phone );\n      phone.setOwner( this );\n  }\n}\n\n@Entity\npublic class Phone {\n\n    @Id\n    private Long id;\n\n    @Column(name = \"`number`\")\n    private String number;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    private Person owner;\n\n    //Getters and setters are omitted for brevity\n}\n\n```\n\n## PERSIST\n\n当对 person 实体进行持久化操作时候，persist 操作会被传递给 phone\n\n```java\nPerson person = new Person();\nperson.setId( 1L );\nperson.setName( \"John Doe\" );\n\nPhone phone = new Phone();\nphone.setId( 1L );\nphone.setNumber( \"123-456-7890\" );\n\nperson.addPhone( phone );\n\nentityManager.persist( person );\n```\n\n```sql\nINSERT INTO Person ( name, id )\nVALUES ( 'John Doe', 1 )\n\nINSERT INTO Phone ( `number`, person_id, id )\nVALUE ( '123-456-7890', 1, 1 )\n```\n\n## MERGE\n\n当对 person 实体进行 merge 操作时候，merge 操作会被传递给 phone\n\n```java\nPhone phone = entityManager.find( Phone.class, 1L );\nPerson person = phone.getOwner();\n\nperson.setName( \"John Doe Jr.\" );\nphone.setNumber( \"987-654-3210\" );\n\nentityManager.clear();\n\nentityManager.merge( person );\n```\n\n```sql\nSELECT\n    p.id as id1_0_1_,\n    p.name as name2_0_1_,\n    ph.owner_id as owner_id3_1_3_,\n    ph.id as id1_1_3_,\n    ph.id as id1_1_0_,\n    ph.\"number\" as number2_1_0_,\n    ph.owner_id as owner_id3_1_0_\nFROM\n    Person p\nLEFT OUTER JOIN\n    Phone ph\n        on p.id=ph.owner_id\nWHERE\n    p.id = 1\n```\n\n## REMOVE\n\n删除操作\n\n```java\nPerson person = entityManager.find( Person.class, 1L );\n\nentityManager.remove( person );\n```\n\n```sql\nDELETE FROM Phone WHERE id = 1\n\nDELETE FROM Person WHERE id = 1\n```\n\n## REFRESH\n\nrefresh 操作会抛弃现有的更改，并且重新从数据库中加载实体\n\n```java\nPerson person = entityManager.find( Person.class, 1L );\nPhone phone = person.getPhones().get( 0 );\n\nperson.setName( \"John Doe Jr.\" );\nphone.setNumber( \"987-654-3210\" );\n\nentityManager.refresh( person );\n\nassertEquals( \"John Doe\", person.getName() );\nassertEquals( \"123-456-7890\", phone.getNumber() );\n```\n\n```sql\nSELECT\n    p.id as id1_0_1_,\n    p.name as name2_0_1_,\n    ph.owner_id as owner_id3_1_3_,\n    ph.id as id1_1_3_,\n    ph.id as id1_1_0_,\n    ph.\"number\" as number2_1_0_,\n    ph.owner_id as owner_id3_1_0_\nFROM\n    Person p\nLEFT OUTER JOIN\n    Phone ph\n        ON p.id=ph.owner_id\nWHERE\n    p.id = 1\n```\n\n## DETACH\n\n```java\nPerson person = entityManager.find( Person.class, 1L );\nassertEquals( 1, person.getPhones().size() );\nPhone phone = person.getPhones().get( 0 );\n\nassertTrue( entityManager.contains( person ));\nassertTrue( entityManager.contains( phone ));\n\nentityManager.detach( person );\n\nassertFalse( entityManager.contains( person ));\nassertFalse( entityManager.contains( phone ));\n```\n","slug":"java-hibernate-cascade","published":1,"updated":"2021-12-10T15:14:52.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k4003xgoswfsok6gew","content":"<p>JPA 允许将一个对象的更新操作联合到另一个对象的更新操作中，这样可以避免在更新一个对象时，还需要更新其他对象。</p>\n<p><code>javax.persistence.CascadeType</code> 有以下几种类型</p>\n<ul>\n<li>ALL: cascade 所有状态转换</li>\n<li>PERSIST: cascade 实体的持久化</li>\n<li>MERGE: cascade 实体的更新</li>\n<li>REMOVE: cascade 实体的删除</li>\n<li>REFRESH: cascade 实体的刷新</li>\n<li>DETACH: cascade 实体的分离</li>\n</ul>\n<p>这篇文章通过具体例子介绍了 cascade 几种类型的效果</p>\n<a id=\"more\"></a>\n\n<h2 id=\"ALL\"><a href=\"#ALL\" class=\"headerlink\" title=\"ALL\"></a>ALL</h2><blockquote>\n<p>CascadeType.ALL 除了上述所有类型的效果外，还可以指定以下类型的效果<br>SAVE_UPDATE: cascade 实体的 saveOrUpdate<br>REPLICATE: cascade 实体的复制操作<br>LOCK: cascade 实体的锁定</p>\n</blockquote>\n<p>下面几种类型类型的效果，通过如下两个实体进行展示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Id</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@OneToMany</span>(mappedBy = <span class=\"string\">\"owner\"</span>, cascade = CascadeType.ALL)</span><br><span class=\"line\">  <span class=\"keyword\">private</span> List&lt;Phone&gt; phones = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Getters and setters are omitted for brevity</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addPhone</span><span class=\"params\">(Phone phone)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.phones.add( phone );</span><br><span class=\"line\">      phone.setOwner( <span class=\"keyword\">this</span> );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"`number`\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String number;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span>(fetch = FetchType.LAZY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Person owner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Getters and setters are omitted for brevity</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PERSIST\"><a href=\"#PERSIST\" class=\"headerlink\" title=\"PERSIST\"></a>PERSIST</h2><p>当对 person 实体进行持久化操作时候，persist 操作会被传递给 phone</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.setId( <span class=\"number\">1L</span> );</span><br><span class=\"line\">person.setName( <span class=\"string\">\"John Doe\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">Phone phone = <span class=\"keyword\">new</span> Phone();</span><br><span class=\"line\">phone.setId( <span class=\"number\">1L</span> );</span><br><span class=\"line\">phone.setNumber( <span class=\"string\">\"123-456-7890\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">person.addPhone( phone );</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.persist( person );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Person ( <span class=\"keyword\">name</span>, <span class=\"keyword\">id</span> )</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> ( <span class=\"string\">'John Doe'</span>, <span class=\"number\">1</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Phone ( <span class=\"string\">`number`</span>, person_id, <span class=\"keyword\">id</span> )</span><br><span class=\"line\"><span class=\"keyword\">VALUE</span> ( <span class=\"string\">'123-456-7890'</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span> )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MERGE\"><a href=\"#MERGE\" class=\"headerlink\" title=\"MERGE\"></a>MERGE</h2><p>当对 person 实体进行 merge 操作时候，merge 操作会被传递给 phone</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Phone phone = entityManager.find( Phone<span class=\"class\">.<span class=\"keyword\">class</span>, 1<span class=\"title\">L</span> )</span>;</span><br><span class=\"line\">Person person = phone.getOwner();</span><br><span class=\"line\"></span><br><span class=\"line\">person.setName( <span class=\"string\">\"John Doe Jr.\"</span> );</span><br><span class=\"line\">phone.setNumber( <span class=\"string\">\"987-654-3210\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.merge( person );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    p.id <span class=\"keyword\">as</span> id1_0_1_,</span><br><span class=\"line\">    p.name <span class=\"keyword\">as</span> name2_0_1_,</span><br><span class=\"line\">    ph.owner_id <span class=\"keyword\">as</span> owner_id3_1_3_,</span><br><span class=\"line\">    ph.id <span class=\"keyword\">as</span> id1_1_3_,</span><br><span class=\"line\">    ph.id <span class=\"keyword\">as</span> id1_1_0_,</span><br><span class=\"line\">    ph.<span class=\"string\">\"number\"</span> <span class=\"keyword\">as</span> number2_1_0_,</span><br><span class=\"line\">    ph.owner_id <span class=\"keyword\">as</span> owner_id3_1_0_</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    Person p</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">    Phone ph</span><br><span class=\"line\">        <span class=\"keyword\">on</span> p.id=ph.owner_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    p.id = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REMOVE\"><a href=\"#REMOVE\" class=\"headerlink\" title=\"REMOVE\"></a>REMOVE</h2><p>删除操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = entityManager.find( Person<span class=\"class\">.<span class=\"keyword\">class</span>, 1<span class=\"title\">L</span> )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.remove( person );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Phone <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Person <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REFRESH\"><a href=\"#REFRESH\" class=\"headerlink\" title=\"REFRESH\"></a>REFRESH</h2><p>refresh 操作会抛弃现有的更改，并且重新从数据库中加载实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = entityManager.find( Person<span class=\"class\">.<span class=\"keyword\">class</span>, 1<span class=\"title\">L</span> )</span>;</span><br><span class=\"line\">Phone phone = person.getPhones().get( <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">person.setName( <span class=\"string\">\"John Doe Jr.\"</span> );</span><br><span class=\"line\">phone.setNumber( <span class=\"string\">\"987-654-3210\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.refresh( person );</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals( <span class=\"string\">\"John Doe\"</span>, person.getName() );</span><br><span class=\"line\">assertEquals( <span class=\"string\">\"123-456-7890\"</span>, phone.getNumber() );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    p.id <span class=\"keyword\">as</span> id1_0_1_,</span><br><span class=\"line\">    p.name <span class=\"keyword\">as</span> name2_0_1_,</span><br><span class=\"line\">    ph.owner_id <span class=\"keyword\">as</span> owner_id3_1_3_,</span><br><span class=\"line\">    ph.id <span class=\"keyword\">as</span> id1_1_3_,</span><br><span class=\"line\">    ph.id <span class=\"keyword\">as</span> id1_1_0_,</span><br><span class=\"line\">    ph.<span class=\"string\">\"number\"</span> <span class=\"keyword\">as</span> number2_1_0_,</span><br><span class=\"line\">    ph.owner_id <span class=\"keyword\">as</span> owner_id3_1_0_</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    Person p</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">    Phone ph</span><br><span class=\"line\">        <span class=\"keyword\">ON</span> p.id=ph.owner_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    p.id = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DETACH\"><a href=\"#DETACH\" class=\"headerlink\" title=\"DETACH\"></a>DETACH</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = entityManager.find( Person<span class=\"class\">.<span class=\"keyword\">class</span>, 1<span class=\"title\">L</span> )</span>;</span><br><span class=\"line\">assertEquals( <span class=\"number\">1</span>, person.getPhones().size() );</span><br><span class=\"line\">Phone phone = person.getPhones().get( <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">assertTrue( entityManager.contains( person ));</span><br><span class=\"line\">assertTrue( entityManager.contains( phone ));</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.detach( person );</span><br><span class=\"line\"></span><br><span class=\"line\">assertFalse( entityManager.contains( person ));</span><br><span class=\"line\">assertFalse( entityManager.contains( phone ));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>JPA 允许将一个对象的更新操作联合到另一个对象的更新操作中，这样可以避免在更新一个对象时，还需要更新其他对象。</p>\n<p><code>javax.persistence.CascadeType</code> 有以下几种类型</p>\n<ul>\n<li>ALL: cascade 所有状态转换</li>\n<li>PERSIST: cascade 实体的持久化</li>\n<li>MERGE: cascade 实体的更新</li>\n<li>REMOVE: cascade 实体的删除</li>\n<li>REFRESH: cascade 实体的刷新</li>\n<li>DETACH: cascade 实体的分离</li>\n</ul>\n<p>这篇文章通过具体例子介绍了 cascade 几种类型的效果</p>","more":"<h2 id=\"ALL\"><a href=\"#ALL\" class=\"headerlink\" title=\"ALL\"></a>ALL</h2><blockquote>\n<p>CascadeType.ALL 除了上述所有类型的效果外，还可以指定以下类型的效果<br>SAVE_UPDATE: cascade 实体的 saveOrUpdate<br>REPLICATE: cascade 实体的复制操作<br>LOCK: cascade 实体的锁定</p>\n</blockquote>\n<p>下面几种类型类型的效果，通过如下两个实体进行展示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Id</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@OneToMany</span>(mappedBy = <span class=\"string\">\"owner\"</span>, cascade = CascadeType.ALL)</span><br><span class=\"line\">  <span class=\"keyword\">private</span> List&lt;Phone&gt; phones = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//Getters and setters are omitted for brevity</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addPhone</span><span class=\"params\">(Phone phone)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.phones.add( phone );</span><br><span class=\"line\">      phone.setOwner( <span class=\"keyword\">this</span> );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"`number`\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String number;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span>(fetch = FetchType.LAZY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Person owner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Getters and setters are omitted for brevity</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PERSIST\"><a href=\"#PERSIST\" class=\"headerlink\" title=\"PERSIST\"></a>PERSIST</h2><p>当对 person 实体进行持久化操作时候，persist 操作会被传递给 phone</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">person.setId( <span class=\"number\">1L</span> );</span><br><span class=\"line\">person.setName( <span class=\"string\">\"John Doe\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">Phone phone = <span class=\"keyword\">new</span> Phone();</span><br><span class=\"line\">phone.setId( <span class=\"number\">1L</span> );</span><br><span class=\"line\">phone.setNumber( <span class=\"string\">\"123-456-7890\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">person.addPhone( phone );</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.persist( person );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Person ( <span class=\"keyword\">name</span>, <span class=\"keyword\">id</span> )</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> ( <span class=\"string\">'John Doe'</span>, <span class=\"number\">1</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Phone ( <span class=\"string\">`number`</span>, person_id, <span class=\"keyword\">id</span> )</span><br><span class=\"line\"><span class=\"keyword\">VALUE</span> ( <span class=\"string\">'123-456-7890'</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span> )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MERGE\"><a href=\"#MERGE\" class=\"headerlink\" title=\"MERGE\"></a>MERGE</h2><p>当对 person 实体进行 merge 操作时候，merge 操作会被传递给 phone</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Phone phone = entityManager.find( Phone<span class=\"class\">.<span class=\"keyword\">class</span>, 1<span class=\"title\">L</span> )</span>;</span><br><span class=\"line\">Person person = phone.getOwner();</span><br><span class=\"line\"></span><br><span class=\"line\">person.setName( <span class=\"string\">\"John Doe Jr.\"</span> );</span><br><span class=\"line\">phone.setNumber( <span class=\"string\">\"987-654-3210\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.merge( person );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    p.id <span class=\"keyword\">as</span> id1_0_1_,</span><br><span class=\"line\">    p.name <span class=\"keyword\">as</span> name2_0_1_,</span><br><span class=\"line\">    ph.owner_id <span class=\"keyword\">as</span> owner_id3_1_3_,</span><br><span class=\"line\">    ph.id <span class=\"keyword\">as</span> id1_1_3_,</span><br><span class=\"line\">    ph.id <span class=\"keyword\">as</span> id1_1_0_,</span><br><span class=\"line\">    ph.<span class=\"string\">\"number\"</span> <span class=\"keyword\">as</span> number2_1_0_,</span><br><span class=\"line\">    ph.owner_id <span class=\"keyword\">as</span> owner_id3_1_0_</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    Person p</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">    Phone ph</span><br><span class=\"line\">        <span class=\"keyword\">on</span> p.id=ph.owner_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    p.id = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REMOVE\"><a href=\"#REMOVE\" class=\"headerlink\" title=\"REMOVE\"></a>REMOVE</h2><p>删除操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = entityManager.find( Person<span class=\"class\">.<span class=\"keyword\">class</span>, 1<span class=\"title\">L</span> )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.remove( person );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Phone <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> Person <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REFRESH\"><a href=\"#REFRESH\" class=\"headerlink\" title=\"REFRESH\"></a>REFRESH</h2><p>refresh 操作会抛弃现有的更改，并且重新从数据库中加载实体</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = entityManager.find( Person<span class=\"class\">.<span class=\"keyword\">class</span>, 1<span class=\"title\">L</span> )</span>;</span><br><span class=\"line\">Phone phone = person.getPhones().get( <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">person.setName( <span class=\"string\">\"John Doe Jr.\"</span> );</span><br><span class=\"line\">phone.setNumber( <span class=\"string\">\"987-654-3210\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.refresh( person );</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals( <span class=\"string\">\"John Doe\"</span>, person.getName() );</span><br><span class=\"line\">assertEquals( <span class=\"string\">\"123-456-7890\"</span>, phone.getNumber() );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    p.id <span class=\"keyword\">as</span> id1_0_1_,</span><br><span class=\"line\">    p.name <span class=\"keyword\">as</span> name2_0_1_,</span><br><span class=\"line\">    ph.owner_id <span class=\"keyword\">as</span> owner_id3_1_3_,</span><br><span class=\"line\">    ph.id <span class=\"keyword\">as</span> id1_1_3_,</span><br><span class=\"line\">    ph.id <span class=\"keyword\">as</span> id1_1_0_,</span><br><span class=\"line\">    ph.<span class=\"string\">\"number\"</span> <span class=\"keyword\">as</span> number2_1_0_,</span><br><span class=\"line\">    ph.owner_id <span class=\"keyword\">as</span> owner_id3_1_0_</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    Person p</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span></span><br><span class=\"line\">    Phone ph</span><br><span class=\"line\">        <span class=\"keyword\">ON</span> p.id=ph.owner_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    p.id = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DETACH\"><a href=\"#DETACH\" class=\"headerlink\" title=\"DETACH\"></a>DETACH</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person person = entityManager.find( Person<span class=\"class\">.<span class=\"keyword\">class</span>, 1<span class=\"title\">L</span> )</span>;</span><br><span class=\"line\">assertEquals( <span class=\"number\">1</span>, person.getPhones().size() );</span><br><span class=\"line\">Phone phone = person.getPhones().get( <span class=\"number\">0</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">assertTrue( entityManager.contains( person ));</span><br><span class=\"line\">assertTrue( entityManager.contains( phone ));</span><br><span class=\"line\"></span><br><span class=\"line\">entityManager.detach( person );</span><br><span class=\"line\"></span><br><span class=\"line\">assertFalse( entityManager.contains( person ));</span><br><span class=\"line\">assertFalse( entityManager.contains( phone ));</span><br></pre></td></tr></table></figure>"},{"title":"linux curl handbook","toc":true,"date":"2021-03-25T16:00:00.000Z","_content":"\n本文介绍了 curl 的常用指令\n\n<!-- more -->\n\n## 下载文件\n\n- `-o or -O` 下载文件\n  ```bash\n  $ curl -O http://yourdomain.com/yourfile.tar.gz # 使用uri的名称作为文件名： yourfile.tar.gz\n  $ curl -o newfile.tar.gz http://yourdomain.com/yourfile.tar.gz # 保存为newfile：  newfile.tar.gz\n  ```\n- `-C -` 恢复下载\n  ```bash\n  $ curl -C - -O http://yourdomain.com/yourfile.tar.gz\n  ```\n  ![](/images/curl-resume-download.png)\n\n* 多文件下载\n  ```bash\n  $ curl -O http://yoursite.com/info.html -O http://mysite.com/about.html\n  ```\n\n- 限制下载速度\n  ```bash\n  $ curl --limit-rate 100K http://yourdomain.com/yourfile.tar.gz -O\n  ```\n\n## http request\n\n`curl -X [method] [options] [URL]`\n\n- post 请求\n  `curl -X POST [options] [URL]`\n\n  > -X 指定使用什么类型的 HTTP 请求，-X POST 使用 post 发送请求\n\n  - `-d` application/x-www-form-urlencoded\n    ```bash\n      curl -X POST -d 'name=linuxize' -d 'email=linuxize@example.com' https://example.com/contact.php\n    ```\n\n  * `-F`: multipart/form-data.\n    ```bash\n    curl -X POST -F 'name=linuxize' -F 'email=linuxize@example.com' https://example.com/contact.php\n    ```\n\n  - `-F + @` 文件上传\n    ```bash\n    curl -X POST -F 'image=@/home/user/Pictures/wallpaper.jpg' http://example.com/upload\n    ```\n\n* delete 请求\n  ```bash\n    curl -X DELETE http://localhost:8080/user/100\n  ```\n\n- `-H`: 自定义 Content-Type\n\n  ```bash\n    curl -X POST -H \"Content-Type: application/json\" \\\n    -d '{\"name\": \"linuxize\", \"email\": \"linuxize@example.com\"}' \\\n    https://example/contact\n  ```\n\n* cookie 操作\n  - 保存 cookie\n  ```bash\n  curl --cookie-jar yourCookies.txt https://www.cnn.com/index.html -O\n  ```\n  - 携带 cookie\n  ```\n  curl --cookie cnncookies.txt https://www.cnn.com\n  ```\n","source":"_posts/linux-curl-tips.md","raw":"---\ntitle: linux curl handbook\ncategories: [运维]\ntags: [linux]\ntoc: true\ndate: 2021/3/26\n---\n\n本文介绍了 curl 的常用指令\n\n<!-- more -->\n\n## 下载文件\n\n- `-o or -O` 下载文件\n  ```bash\n  $ curl -O http://yourdomain.com/yourfile.tar.gz # 使用uri的名称作为文件名： yourfile.tar.gz\n  $ curl -o newfile.tar.gz http://yourdomain.com/yourfile.tar.gz # 保存为newfile：  newfile.tar.gz\n  ```\n- `-C -` 恢复下载\n  ```bash\n  $ curl -C - -O http://yourdomain.com/yourfile.tar.gz\n  ```\n  ![](/images/curl-resume-download.png)\n\n* 多文件下载\n  ```bash\n  $ curl -O http://yoursite.com/info.html -O http://mysite.com/about.html\n  ```\n\n- 限制下载速度\n  ```bash\n  $ curl --limit-rate 100K http://yourdomain.com/yourfile.tar.gz -O\n  ```\n\n## http request\n\n`curl -X [method] [options] [URL]`\n\n- post 请求\n  `curl -X POST [options] [URL]`\n\n  > -X 指定使用什么类型的 HTTP 请求，-X POST 使用 post 发送请求\n\n  - `-d` application/x-www-form-urlencoded\n    ```bash\n      curl -X POST -d 'name=linuxize' -d 'email=linuxize@example.com' https://example.com/contact.php\n    ```\n\n  * `-F`: multipart/form-data.\n    ```bash\n    curl -X POST -F 'name=linuxize' -F 'email=linuxize@example.com' https://example.com/contact.php\n    ```\n\n  - `-F + @` 文件上传\n    ```bash\n    curl -X POST -F 'image=@/home/user/Pictures/wallpaper.jpg' http://example.com/upload\n    ```\n\n* delete 请求\n  ```bash\n    curl -X DELETE http://localhost:8080/user/100\n  ```\n\n- `-H`: 自定义 Content-Type\n\n  ```bash\n    curl -X POST -H \"Content-Type: application/json\" \\\n    -d '{\"name\": \"linuxize\", \"email\": \"linuxize@example.com\"}' \\\n    https://example/contact\n  ```\n\n* cookie 操作\n  - 保存 cookie\n  ```bash\n  curl --cookie-jar yourCookies.txt https://www.cnn.com/index.html -O\n  ```\n  - 携带 cookie\n  ```\n  curl --cookie cnncookies.txt https://www.cnn.com\n  ```\n","slug":"linux-curl-tips","published":1,"updated":"2021-04-22T08:19:02.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k40040goswceblf8xh","content":"<p>本文介绍了 curl 的常用指令</p>\n<a id=\"more\"></a>\n\n<h2 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h2><ul>\n<li><code>-o or -O</code> 下载文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -O http://yourdomain.com/yourfile.tar.gz <span class=\"comment\"># 使用uri的名称作为文件名： yourfile.tar.gz</span></span><br><span class=\"line\">$ curl -o newfile.tar.gz http://yourdomain.com/yourfile.tar.gz <span class=\"comment\"># 保存为newfile：  newfile.tar.gz</span></span><br></pre></td></tr></table></figure></li>\n<li><code>-C -</code> 恢复下载<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -C - -O http://yourdomain.com/yourfile.tar.gz</span><br></pre></td></tr></table></figure>\n<img src=\"/images/curl-resume-download.png\" alt=\"\"></li>\n</ul>\n<ul>\n<li>多文件下载<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -O http://yoursite.com/info.html -O http://mysite.com/about.html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>限制下载速度<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --<span class=\"built_in\">limit</span>-rate 100K http://yourdomain.com/yourfile.tar.gz -O</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"http-request\"><a href=\"#http-request\" class=\"headerlink\" title=\"http request\"></a>http request</h2><p><code>curl -X [method] [options] [URL]</code></p>\n<ul>\n<li><p>post 请求<br><code>curl -X POST [options] [URL]</code></p>\n<blockquote>\n<p>-X 指定使用什么类型的 HTTP 请求，-X POST 使用 post 发送请求</p>\n</blockquote>\n<ul>\n<li><code>-d</code> application/x-www-form-urlencoded<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -d <span class=\"string\">'name=linuxize'</span> -d <span class=\"string\">'email=linuxize@example.com'</span> https://example.com/contact.php</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><code>-F</code>: multipart/form-data.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -F <span class=\"string\">'name=linuxize'</span> -F <span class=\"string\">'email=linuxize@example.com'</span> https://example.com/contact.php</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><code>-F + @</code> 文件上传<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -F <span class=\"string\">'image=@/home/user/Pictures/wallpaper.jpg'</span> http://example.com/upload</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>delete 请求<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE http://localhost:8080/user/100</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>-H</code>: 自定义 Content-Type</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -H <span class=\"string\">\"Content-Type: application/json\"</span> \\</span><br><span class=\"line\">-d <span class=\"string\">'&#123;\"name\": \"linuxize\", \"email\": \"linuxize@example.com\"&#125;'</span> \\</span><br><span class=\"line\">https://example/contact</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>cookie 操作<ul>\n<li>保存 cookie<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --cookie-jar yourCookies.txt https://www.cnn.com/index.html -O</span><br></pre></td></tr></table></figure></li>\n<li>携带 cookie<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --cookie cnncookies.txt https:&#x2F;&#x2F;www.cnn.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文介绍了 curl 的常用指令</p>","more":"<h2 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h2><ul>\n<li><code>-o or -O</code> 下载文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -O http://yourdomain.com/yourfile.tar.gz <span class=\"comment\"># 使用uri的名称作为文件名： yourfile.tar.gz</span></span><br><span class=\"line\">$ curl -o newfile.tar.gz http://yourdomain.com/yourfile.tar.gz <span class=\"comment\"># 保存为newfile：  newfile.tar.gz</span></span><br></pre></td></tr></table></figure></li>\n<li><code>-C -</code> 恢复下载<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -C - -O http://yourdomain.com/yourfile.tar.gz</span><br></pre></td></tr></table></figure>\n<img src=\"/images/curl-resume-download.png\" alt=\"\"></li>\n</ul>\n<ul>\n<li>多文件下载<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -O http://yoursite.com/info.html -O http://mysite.com/about.html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>限制下载速度<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl --<span class=\"built_in\">limit</span>-rate 100K http://yourdomain.com/yourfile.tar.gz -O</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"http-request\"><a href=\"#http-request\" class=\"headerlink\" title=\"http request\"></a>http request</h2><p><code>curl -X [method] [options] [URL]</code></p>\n<ul>\n<li><p>post 请求<br><code>curl -X POST [options] [URL]</code></p>\n<blockquote>\n<p>-X 指定使用什么类型的 HTTP 请求，-X POST 使用 post 发送请求</p>\n</blockquote>\n<ul>\n<li><code>-d</code> application/x-www-form-urlencoded<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -d <span class=\"string\">'name=linuxize'</span> -d <span class=\"string\">'email=linuxize@example.com'</span> https://example.com/contact.php</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><code>-F</code>: multipart/form-data.<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -F <span class=\"string\">'name=linuxize'</span> -F <span class=\"string\">'email=linuxize@example.com'</span> https://example.com/contact.php</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><code>-F + @</code> 文件上传<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -F <span class=\"string\">'image=@/home/user/Pictures/wallpaper.jpg'</span> http://example.com/upload</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>delete 请求<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X DELETE http://localhost:8080/user/100</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>-H</code>: 自定义 Content-Type</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST -H <span class=\"string\">\"Content-Type: application/json\"</span> \\</span><br><span class=\"line\">-d <span class=\"string\">'&#123;\"name\": \"linuxize\", \"email\": \"linuxize@example.com\"&#125;'</span> \\</span><br><span class=\"line\">https://example/contact</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>cookie 操作<ul>\n<li>保存 cookie<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --cookie-jar yourCookies.txt https://www.cnn.com/index.html -O</span><br></pre></td></tr></table></figure></li>\n<li>携带 cookie<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --cookie cnncookies.txt https:&#x2F;&#x2F;www.cnn.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"nginx 使用手册","toc":true,"date":"2021-02-28T16:00:00.000Z","_content":"\n## 启动，停止，重载 配置文件\n\n- stop -- 强制关闭\n- quit -- 关闭服务（在当前存在的请求结束后）\n- reload -- 重载配置文件\n- reopen -- 重新打开 log 文件\n\n命令：`nginx -s [signal]` 如 `nginx -s stop`强制停掉配置文件\n\n## 可配置项目\n\n### 托管静态资源(如 SPA) （Serving Static Content）\n\n比如：将 image 和 HTML 两种类型的文件进行托管在 /data/www 和 /data/images\n\n修改配置文件如下:\n\n```bash\nhttp {\n  server {\n  }\n}\n```\n\nserver_name 输入的 url 的 host，可以用判断执行哪个 server 代码块\n\n```conf\nhttp {\n  server {\n    listen 80;\n    server_name www.example.com\n    # ... other config A\n  }\n  server {\n    listen 80;\n    server_name example.com\n    # ... other config B\n  }\n}\n```\n\n如上配置，如果输入 www.example.com 走的是 configA 。输入 example.com 走的是 configB\n\n## [proxy_pass](https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass)\n\n```bash\nSyntax:\tproxy_pass URL;\nDefault:\t—\nContext:\tlocation, if in location, limit_except\n```\n\n### 请求 URI 的转发规则：\n\n- 绝对路径：如果 proxy_pass 的 URL **指定了一个 URI**，此时这个 URI 会替换 请求(request)的 URI.\n  例 1:\n\n  ```conf\n    location /name/ {\n      proxy_pass http://127.0.0.1/remote/;\n    }\n\n    /name/shancw -> http://127.0.0.1/remote/shancw\n  ```\n\n  例 2:\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1/;\n  }\n\n  /name/test.html -> http://127.0.0.1/test.html\n  ```\n\n  例 3：\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1/extra;\n  }\n\n  /name/test.html -> http://127.0.0.1/extratest.html\n  ```\n\n* 相对路径： 如果 proxy_pass 的 URL **没有指定 URI**, 此时请求(request)的 URI 会被拼接到 proxy_pass 的 URL 上\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1;\n  }\n\n  /name/shancw -> http://127.0.0.1/name/shancw\n  ```\n\n应用：[nginx 根据不同 prefix 转接 请求, 实现一个服务器 + 域名托管多个应用服务](https://github.com/shancw96/tech-basis/tree/master/nginx)\n\n### 关于 nginx location 的更多使用\n\n[一文弄懂 Nginx 的 location 匹配](https://segmentfault.com/a/1190000013267839)\n\n## nginx 下 cache-control 配置\n\n[相关配置介绍](https://www.cnblogs.com/sfnz/p/5383647.html)\n\n使用例子：[blog 下配置指定路径的 cache - 3. 2d live 看板娘设置 -3.4 优化](http://blog.limiaomiao.site/2021/03/14/next-usage/)\n\n## nginx 配置 https\n\nhttp 转发\n\n```conf\nserver {\n    listen 80;\n    server_name blog.shancw.net;\n    return 301 https://$server_name$request_uri;\n}\n```\n\nhttps 配置\n\n```conf\nserver {\n    # ****** start 配置443端口 + 证书 ********\n    listen 443 ssl;\n    server_name blog.shancw.net;\n\t  ssl_certificate    /etc/nginx/https_cert/1_blog.shancw.net_bundle.crt;\n    ssl_certificate_key /etc/nginx/https_cert/2_blog.shancw.net.key;\n    # ******** end *********\n    root /home/shancw/Project/blogs/public;   #资源文件目录\n    index index.html index.htm index.nginx-debian.html;\n\n    location ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ {\n        expires 30d;\n    }\n\n    location ~* live2dw.* {\n      add_header    Cache-Control  \"max-age=31536000, public\";\n    }\n}\n```\n\n## resolver 解决 Nginx DNS 缓存导致转发失败\n\n```bash\nSyntax:\tresolver address ... [valid=time] [ipv6=on|off] [status_zone=zone];\nDefault:\t—\nContext:\thttp, server, location\n```\n\n买了阿里云作为中转，利用 Ngnix 作 TCP Proxy 结合 DDNS，可以实现域名直接访问家庭服务。由于 Nginx 转发会缓存 DNS 解析，但电信家庭宽带的公网 ip 是不固定的，导致转发失败。\n\n原因：\n\n- Nginx 在启动/重载的时候会去解析转发的域名\n- 如果域名无法解析 Nginx 就无法启动\n- 只有下次重启/重载的时候才会重新去解析，启动后无视 TTL\n\n解决方法：\n指定 DNS 解析服务器并设置 DNS 刷新频率。\n\n```bash\nhttp {\n  resolver 8.8.8.8 valid=1m;\n  server{\n    ...\n  }\n}\n```\n","source":"_posts/linux-nginx.md","raw":"---\ntitle: nginx 使用手册\ncategories: [运维]\ntags: [nginx]\ntoc: true\ndate: 2021/3/1\n---\n\n## 启动，停止，重载 配置文件\n\n- stop -- 强制关闭\n- quit -- 关闭服务（在当前存在的请求结束后）\n- reload -- 重载配置文件\n- reopen -- 重新打开 log 文件\n\n命令：`nginx -s [signal]` 如 `nginx -s stop`强制停掉配置文件\n\n## 可配置项目\n\n### 托管静态资源(如 SPA) （Serving Static Content）\n\n比如：将 image 和 HTML 两种类型的文件进行托管在 /data/www 和 /data/images\n\n修改配置文件如下:\n\n```bash\nhttp {\n  server {\n  }\n}\n```\n\nserver_name 输入的 url 的 host，可以用判断执行哪个 server 代码块\n\n```conf\nhttp {\n  server {\n    listen 80;\n    server_name www.example.com\n    # ... other config A\n  }\n  server {\n    listen 80;\n    server_name example.com\n    # ... other config B\n  }\n}\n```\n\n如上配置，如果输入 www.example.com 走的是 configA 。输入 example.com 走的是 configB\n\n## [proxy_pass](https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass)\n\n```bash\nSyntax:\tproxy_pass URL;\nDefault:\t—\nContext:\tlocation, if in location, limit_except\n```\n\n### 请求 URI 的转发规则：\n\n- 绝对路径：如果 proxy_pass 的 URL **指定了一个 URI**，此时这个 URI 会替换 请求(request)的 URI.\n  例 1:\n\n  ```conf\n    location /name/ {\n      proxy_pass http://127.0.0.1/remote/;\n    }\n\n    /name/shancw -> http://127.0.0.1/remote/shancw\n  ```\n\n  例 2:\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1/;\n  }\n\n  /name/test.html -> http://127.0.0.1/test.html\n  ```\n\n  例 3：\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1/extra;\n  }\n\n  /name/test.html -> http://127.0.0.1/extratest.html\n  ```\n\n* 相对路径： 如果 proxy_pass 的 URL **没有指定 URI**, 此时请求(request)的 URI 会被拼接到 proxy_pass 的 URL 上\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1;\n  }\n\n  /name/shancw -> http://127.0.0.1/name/shancw\n  ```\n\n应用：[nginx 根据不同 prefix 转接 请求, 实现一个服务器 + 域名托管多个应用服务](https://github.com/shancw96/tech-basis/tree/master/nginx)\n\n### 关于 nginx location 的更多使用\n\n[一文弄懂 Nginx 的 location 匹配](https://segmentfault.com/a/1190000013267839)\n\n## nginx 下 cache-control 配置\n\n[相关配置介绍](https://www.cnblogs.com/sfnz/p/5383647.html)\n\n使用例子：[blog 下配置指定路径的 cache - 3. 2d live 看板娘设置 -3.4 优化](http://blog.limiaomiao.site/2021/03/14/next-usage/)\n\n## nginx 配置 https\n\nhttp 转发\n\n```conf\nserver {\n    listen 80;\n    server_name blog.shancw.net;\n    return 301 https://$server_name$request_uri;\n}\n```\n\nhttps 配置\n\n```conf\nserver {\n    # ****** start 配置443端口 + 证书 ********\n    listen 443 ssl;\n    server_name blog.shancw.net;\n\t  ssl_certificate    /etc/nginx/https_cert/1_blog.shancw.net_bundle.crt;\n    ssl_certificate_key /etc/nginx/https_cert/2_blog.shancw.net.key;\n    # ******** end *********\n    root /home/shancw/Project/blogs/public;   #资源文件目录\n    index index.html index.htm index.nginx-debian.html;\n\n    location ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ {\n        expires 30d;\n    }\n\n    location ~* live2dw.* {\n      add_header    Cache-Control  \"max-age=31536000, public\";\n    }\n}\n```\n\n## resolver 解决 Nginx DNS 缓存导致转发失败\n\n```bash\nSyntax:\tresolver address ... [valid=time] [ipv6=on|off] [status_zone=zone];\nDefault:\t—\nContext:\thttp, server, location\n```\n\n买了阿里云作为中转，利用 Ngnix 作 TCP Proxy 结合 DDNS，可以实现域名直接访问家庭服务。由于 Nginx 转发会缓存 DNS 解析，但电信家庭宽带的公网 ip 是不固定的，导致转发失败。\n\n原因：\n\n- Nginx 在启动/重载的时候会去解析转发的域名\n- 如果域名无法解析 Nginx 就无法启动\n- 只有下次重启/重载的时候才会重新去解析，启动后无视 TTL\n\n解决方法：\n指定 DNS 解析服务器并设置 DNS 刷新频率。\n\n```bash\nhttp {\n  resolver 8.8.8.8 valid=1m;\n  server{\n    ...\n  }\n}\n```\n","slug":"linux-nginx","published":1,"updated":"2022-04-11T06:03:06.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k50043goswhsvq5331","content":"<h2 id=\"启动，停止，重载-配置文件\"><a href=\"#启动，停止，重载-配置文件\" class=\"headerlink\" title=\"启动，停止，重载 配置文件\"></a>启动，停止，重载 配置文件</h2><ul>\n<li>stop – 强制关闭</li>\n<li>quit – 关闭服务（在当前存在的请求结束后）</li>\n<li>reload – 重载配置文件</li>\n<li>reopen – 重新打开 log 文件</li>\n</ul>\n<p>命令：<code>nginx -s [signal]</code> 如 <code>nginx -s stop</code>强制停掉配置文件</p>\n<h2 id=\"可配置项目\"><a href=\"#可配置项目\" class=\"headerlink\" title=\"可配置项目\"></a>可配置项目</h2><h3 id=\"托管静态资源-如-SPA-（Serving-Static-Content）\"><a href=\"#托管静态资源-如-SPA-（Serving-Static-Content）\" class=\"headerlink\" title=\"托管静态资源(如 SPA) （Serving Static Content）\"></a>托管静态资源(如 SPA) （Serving Static Content）</h3><p>比如：将 image 和 HTML 两种类型的文件进行托管在 /data/www 和 /data/images</p>\n<p>修改配置文件如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>server_name 输入的 url 的 host，可以用判断执行哪个 server 代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.example.com</span><br><span class=\"line\">    # ... other config A</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name example.com</span><br><span class=\"line\">    # ... other config B</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上配置，如果输入 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a> 走的是 configA 。输入 example.com 走的是 configB</p>\n<h2 id=\"proxy-pass\"><a href=\"#proxy-pass\" class=\"headerlink\" title=\"proxy_pass\"></a><a href=\"https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass\" target=\"_blank\" rel=\"noopener\">proxy_pass</a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tproxy_pass URL;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\tlocation, <span class=\"keyword\">if</span> <span class=\"keyword\">in</span> location, limit_except</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"请求-URI-的转发规则：\"><a href=\"#请求-URI-的转发规则：\" class=\"headerlink\" title=\"请求 URI 的转发规则：\"></a>请求 URI 的转发规则：</h3><ul>\n<li><p>绝对路径：如果 proxy_pass 的 URL <strong>指定了一个 URI</strong>，此时这个 URI 会替换 请求(request)的 URI.<br>例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;shancw -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;shancw</span><br></pre></td></tr></table></figure>\n\n<p>例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;test.html -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;test.html</span><br></pre></td></tr></table></figure>\n\n<p>例 3：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;extra;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;test.html -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;extratest.html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>相对路径： 如果 proxy_pass 的 URL <strong>没有指定 URI</strong>, 此时请求(request)的 URI 会被拼接到 proxy_pass 的 URL 上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;shancw -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;name&#x2F;shancw</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>应用：<a href=\"https://github.com/shancw96/tech-basis/tree/master/nginx\" target=\"_blank\" rel=\"noopener\">nginx 根据不同 prefix 转接 请求, 实现一个服务器 + 域名托管多个应用服务</a></p>\n<h3 id=\"关于-nginx-location-的更多使用\"><a href=\"#关于-nginx-location-的更多使用\" class=\"headerlink\" title=\"关于 nginx location 的更多使用\"></a>关于 nginx location 的更多使用</h3><p><a href=\"https://segmentfault.com/a/1190000013267839\" target=\"_blank\" rel=\"noopener\">一文弄懂 Nginx 的 location 匹配</a></p>\n<h2 id=\"nginx-下-cache-control-配置\"><a href=\"#nginx-下-cache-control-配置\" class=\"headerlink\" title=\"nginx 下 cache-control 配置\"></a>nginx 下 cache-control 配置</h2><p><a href=\"https://www.cnblogs.com/sfnz/p/5383647.html\" target=\"_blank\" rel=\"noopener\">相关配置介绍</a></p>\n<p>使用例子：<a href=\"http://blog.limiaomiao.site/2021/03/14/next-usage/\" target=\"_blank\" rel=\"noopener\">blog 下配置指定路径的 cache - 3. 2d live 看板娘设置 -3.4 优化</a></p>\n<h2 id=\"nginx-配置-https\"><a href=\"#nginx-配置-https\" class=\"headerlink\" title=\"nginx 配置 https\"></a>nginx 配置 https</h2><p>http 转发</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.shancw.net;</span><br><span class=\"line\">    return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>https 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    # ****** start 配置443端口 + 证书 ********</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name blog.shancw.net;</span><br><span class=\"line\">\t  ssl_certificate    &#x2F;etc&#x2F;nginx&#x2F;https_cert&#x2F;1_blog.shancw.net_bundle.crt;</span><br><span class=\"line\">    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;https_cert&#x2F;2_blog.shancw.net.key;</span><br><span class=\"line\">    # ******** end *********</span><br><span class=\"line\">    root &#x2F;home&#x2F;shancw&#x2F;Project&#x2F;blogs&#x2F;public;   #资源文件目录</span><br><span class=\"line\">    index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ &#123;</span><br><span class=\"line\">        expires 30d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* live2dw.* &#123;</span><br><span class=\"line\">      add_header    Cache-Control  &quot;max-age&#x3D;31536000, public&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"resolver-解决-Nginx-DNS-缓存导致转发失败\"><a href=\"#resolver-解决-Nginx-DNS-缓存导致转发失败\" class=\"headerlink\" title=\"resolver 解决 Nginx DNS 缓存导致转发失败\"></a>resolver 解决 Nginx DNS 缓存导致转发失败</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tresolver address ... [valid=time] [ipv6=on|off] [status_zone=zone];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location</span><br></pre></td></tr></table></figure>\n\n<p>买了阿里云作为中转，利用 Ngnix 作 TCP Proxy 结合 DDNS，可以实现域名直接访问家庭服务。由于 Nginx 转发会缓存 DNS 解析，但电信家庭宽带的公网 ip 是不固定的，导致转发失败。</p>\n<p>原因：</p>\n<ul>\n<li>Nginx 在启动/重载的时候会去解析转发的域名</li>\n<li>如果域名无法解析 Nginx 就无法启动</li>\n<li>只有下次重启/重载的时候才会重新去解析，启动后无视 TTL</li>\n</ul>\n<p>解决方法：<br>指定 DNS 解析服务器并设置 DNS 刷新频率。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  resolver 8.8.8.8 valid=1m;</span><br><span class=\"line\">  server&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"启动，停止，重载-配置文件\"><a href=\"#启动，停止，重载-配置文件\" class=\"headerlink\" title=\"启动，停止，重载 配置文件\"></a>启动，停止，重载 配置文件</h2><ul>\n<li>stop – 强制关闭</li>\n<li>quit – 关闭服务（在当前存在的请求结束后）</li>\n<li>reload – 重载配置文件</li>\n<li>reopen – 重新打开 log 文件</li>\n</ul>\n<p>命令：<code>nginx -s [signal]</code> 如 <code>nginx -s stop</code>强制停掉配置文件</p>\n<h2 id=\"可配置项目\"><a href=\"#可配置项目\" class=\"headerlink\" title=\"可配置项目\"></a>可配置项目</h2><h3 id=\"托管静态资源-如-SPA-（Serving-Static-Content）\"><a href=\"#托管静态资源-如-SPA-（Serving-Static-Content）\" class=\"headerlink\" title=\"托管静态资源(如 SPA) （Serving Static Content）\"></a>托管静态资源(如 SPA) （Serving Static Content）</h3><p>比如：将 image 和 HTML 两种类型的文件进行托管在 /data/www 和 /data/images</p>\n<p>修改配置文件如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>server_name 输入的 url 的 host，可以用判断执行哪个 server 代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.example.com</span><br><span class=\"line\">    # ... other config A</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name example.com</span><br><span class=\"line\">    # ... other config B</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上配置，如果输入 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a> 走的是 configA 。输入 example.com 走的是 configB</p>\n<h2 id=\"proxy-pass\"><a href=\"#proxy-pass\" class=\"headerlink\" title=\"proxy_pass\"></a><a href=\"https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass\" target=\"_blank\" rel=\"noopener\">proxy_pass</a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tproxy_pass URL;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\tlocation, <span class=\"keyword\">if</span> <span class=\"keyword\">in</span> location, limit_except</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"请求-URI-的转发规则：\"><a href=\"#请求-URI-的转发规则：\" class=\"headerlink\" title=\"请求 URI 的转发规则：\"></a>请求 URI 的转发规则：</h3><ul>\n<li><p>绝对路径：如果 proxy_pass 的 URL <strong>指定了一个 URI</strong>，此时这个 URI 会替换 请求(request)的 URI.<br>例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;shancw -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;shancw</span><br></pre></td></tr></table></figure>\n\n<p>例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;test.html -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;test.html</span><br></pre></td></tr></table></figure>\n\n<p>例 3：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;extra;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;test.html -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;extratest.html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>相对路径： 如果 proxy_pass 的 URL <strong>没有指定 URI</strong>, 此时请求(request)的 URI 会被拼接到 proxy_pass 的 URL 上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;shancw -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;name&#x2F;shancw</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>应用：<a href=\"https://github.com/shancw96/tech-basis/tree/master/nginx\" target=\"_blank\" rel=\"noopener\">nginx 根据不同 prefix 转接 请求, 实现一个服务器 + 域名托管多个应用服务</a></p>\n<h3 id=\"关于-nginx-location-的更多使用\"><a href=\"#关于-nginx-location-的更多使用\" class=\"headerlink\" title=\"关于 nginx location 的更多使用\"></a>关于 nginx location 的更多使用</h3><p><a href=\"https://segmentfault.com/a/1190000013267839\" target=\"_blank\" rel=\"noopener\">一文弄懂 Nginx 的 location 匹配</a></p>\n<h2 id=\"nginx-下-cache-control-配置\"><a href=\"#nginx-下-cache-control-配置\" class=\"headerlink\" title=\"nginx 下 cache-control 配置\"></a>nginx 下 cache-control 配置</h2><p><a href=\"https://www.cnblogs.com/sfnz/p/5383647.html\" target=\"_blank\" rel=\"noopener\">相关配置介绍</a></p>\n<p>使用例子：<a href=\"http://blog.limiaomiao.site/2021/03/14/next-usage/\" target=\"_blank\" rel=\"noopener\">blog 下配置指定路径的 cache - 3. 2d live 看板娘设置 -3.4 优化</a></p>\n<h2 id=\"nginx-配置-https\"><a href=\"#nginx-配置-https\" class=\"headerlink\" title=\"nginx 配置 https\"></a>nginx 配置 https</h2><p>http 转发</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.shancw.net;</span><br><span class=\"line\">    return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>https 配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    # ****** start 配置443端口 + 证书 ********</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name blog.shancw.net;</span><br><span class=\"line\">\t  ssl_certificate    &#x2F;etc&#x2F;nginx&#x2F;https_cert&#x2F;1_blog.shancw.net_bundle.crt;</span><br><span class=\"line\">    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;https_cert&#x2F;2_blog.shancw.net.key;</span><br><span class=\"line\">    # ******** end *********</span><br><span class=\"line\">    root &#x2F;home&#x2F;shancw&#x2F;Project&#x2F;blogs&#x2F;public;   #资源文件目录</span><br><span class=\"line\">    index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ &#123;</span><br><span class=\"line\">        expires 30d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* live2dw.* &#123;</span><br><span class=\"line\">      add_header    Cache-Control  &quot;max-age&#x3D;31536000, public&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"resolver-解决-Nginx-DNS-缓存导致转发失败\"><a href=\"#resolver-解决-Nginx-DNS-缓存导致转发失败\" class=\"headerlink\" title=\"resolver 解决 Nginx DNS 缓存导致转发失败\"></a>resolver 解决 Nginx DNS 缓存导致转发失败</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tresolver address ... [valid=time] [ipv6=on|off] [status_zone=zone];</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\thttp, server, location</span><br></pre></td></tr></table></figure>\n\n<p>买了阿里云作为中转，利用 Ngnix 作 TCP Proxy 结合 DDNS，可以实现域名直接访问家庭服务。由于 Nginx 转发会缓存 DNS 解析，但电信家庭宽带的公网 ip 是不固定的，导致转发失败。</p>\n<p>原因：</p>\n<ul>\n<li>Nginx 在启动/重载的时候会去解析转发的域名</li>\n<li>如果域名无法解析 Nginx 就无法启动</li>\n<li>只有下次重启/重载的时候才会重新去解析，启动后无视 TTL</li>\n</ul>\n<p>解决方法：<br>指定 DNS 解析服务器并设置 DNS 刷新频率。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  resolver 8.8.8.8 valid=1m;</span><br><span class=\"line\">  server&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ubuntu-setup","toc":true,"date":"2021-06-12T16:00:00.000Z","_content":"\nubuntu 新系统个性化配置\n\n<!-- more -->\n\n# 关闭自动锁屏\n\nSetting - Privacy - Automatic Screen Lock 关闭\n\nLock screen on suspend 关闭\n\n# ssh 相关\n\n## ssh-server\n\n```bash\nsudo apt-get install openssh-server\n# 开启ssh\nsudo systemctl enable ssh\nsudo systemctl start ssh\n```\n\n## ssh 密钥登录\n\n`ssh-keygen` 生成密匙，`ssh-copy-id 用户名@ip地址`将公钥传送到远程主机\n\n# git 安装\n\n```bash\nsudo apt install git-all\n\n```\n\n# curl 安装\n\n```bash\napt-get install curl\n\n```\n\n# zerotier 相关配置\n\nhttps://jiajunhuang.com/articles/2019_09_11-zerotier.md.html\n\n# nginx 安装\n\n`apt-get install nginx`\n\n# NodeJS 安装\n\nnvm 管理工具下载：\n\n`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash`\n\n`source ~/.nvm/nvm.sh`\n\n`nvm install node`\n\n`nvm use node`\n\n# clash\n\n## 安装\n\nhttps://einverne.github.io/post/2021/03/linux-use-clash.html\n\n## 自启动配置\n\n```bash\n#!/bin/bash\ngsettings set org.gnome.system.proxy mode 'manual' #ubuntu网络模式配置为手动\ncd /home/shancw/project  #切换到Clash的目录\n./clash . &  #在后台执行clash客户端\necho \"start vpn successfully!\"  #启动成功的提示\nexit 0\n```\n\n# 配置自启动脚本\n\n1. `gnome-session-properties` 打开 startup Application Preference 界面\n2. 点击右侧的 add\n3. 在 command 输入框 输入想要执行的 shell 脚本如 sh clash-start.sh\n","source":"_posts/linux-set-up.md","raw":"---\ntitle: ubuntu-setup\ncategories: []\ntags: []\ntoc: true\ndate: 2021/6/13\n---\n\nubuntu 新系统个性化配置\n\n<!-- more -->\n\n# 关闭自动锁屏\n\nSetting - Privacy - Automatic Screen Lock 关闭\n\nLock screen on suspend 关闭\n\n# ssh 相关\n\n## ssh-server\n\n```bash\nsudo apt-get install openssh-server\n# 开启ssh\nsudo systemctl enable ssh\nsudo systemctl start ssh\n```\n\n## ssh 密钥登录\n\n`ssh-keygen` 生成密匙，`ssh-copy-id 用户名@ip地址`将公钥传送到远程主机\n\n# git 安装\n\n```bash\nsudo apt install git-all\n\n```\n\n# curl 安装\n\n```bash\napt-get install curl\n\n```\n\n# zerotier 相关配置\n\nhttps://jiajunhuang.com/articles/2019_09_11-zerotier.md.html\n\n# nginx 安装\n\n`apt-get install nginx`\n\n# NodeJS 安装\n\nnvm 管理工具下载：\n\n`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash`\n\n`source ~/.nvm/nvm.sh`\n\n`nvm install node`\n\n`nvm use node`\n\n# clash\n\n## 安装\n\nhttps://einverne.github.io/post/2021/03/linux-use-clash.html\n\n## 自启动配置\n\n```bash\n#!/bin/bash\ngsettings set org.gnome.system.proxy mode 'manual' #ubuntu网络模式配置为手动\ncd /home/shancw/project  #切换到Clash的目录\n./clash . &  #在后台执行clash客户端\necho \"start vpn successfully!\"  #启动成功的提示\nexit 0\n```\n\n# 配置自启动脚本\n\n1. `gnome-session-properties` 打开 startup Application Preference 界面\n2. 点击右侧的 add\n3. 在 command 输入框 输入想要执行的 shell 脚本如 sh clash-start.sh\n","slug":"linux-set-up","published":1,"updated":"2021-07-26T01:37:32.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k60045goswfwj58qnx","content":"<p>ubuntu 新系统个性化配置</p>\n<a id=\"more\"></a>\n\n<h1 id=\"关闭自动锁屏\"><a href=\"#关闭自动锁屏\" class=\"headerlink\" title=\"关闭自动锁屏\"></a>关闭自动锁屏</h1><p>Setting - Privacy - Automatic Screen Lock 关闭</p>\n<p>Lock screen on suspend 关闭</p>\n<h1 id=\"ssh-相关\"><a href=\"#ssh-相关\" class=\"headerlink\" title=\"ssh 相关\"></a>ssh 相关</h1><h2 id=\"ssh-server\"><a href=\"#ssh-server\" class=\"headerlink\" title=\"ssh-server\"></a>ssh-server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br><span class=\"line\"><span class=\"comment\"># 开启ssh</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> ssh</span><br><span class=\"line\">sudo systemctl start ssh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh-密钥登录\"><a href=\"#ssh-密钥登录\" class=\"headerlink\" title=\"ssh 密钥登录\"></a>ssh 密钥登录</h2><p><code>ssh-keygen</code> 生成密匙，<code>ssh-copy-id 用户名@ip地址</code>将公钥传送到远程主机</p>\n<h1 id=\"git-安装\"><a href=\"#git-安装\" class=\"headerlink\" title=\"git 安装\"></a>git 安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install git-all</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"curl-安装\"><a href=\"#curl-安装\" class=\"headerlink\" title=\"curl 安装\"></a>curl 安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install curl</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"zerotier-相关配置\"><a href=\"#zerotier-相关配置\" class=\"headerlink\" title=\"zerotier 相关配置\"></a>zerotier 相关配置</h1><p><a href=\"https://jiajunhuang.com/articles/2019_09_11-zerotier.md.html\" target=\"_blank\" rel=\"noopener\">https://jiajunhuang.com/articles/2019_09_11-zerotier.md.html</a></p>\n<h1 id=\"nginx-安装\"><a href=\"#nginx-安装\" class=\"headerlink\" title=\"nginx 安装\"></a>nginx 安装</h1><p><code>apt-get install nginx</code></p>\n<h1 id=\"NodeJS-安装\"><a href=\"#NodeJS-安装\" class=\"headerlink\" title=\"NodeJS 安装\"></a>NodeJS 安装</h1><p>nvm 管理工具下载：</p>\n<p><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</code></p>\n<p><code>source ~/.nvm/nvm.sh</code></p>\n<p><code>nvm install node</code></p>\n<p><code>nvm use node</code></p>\n<h1 id=\"clash\"><a href=\"#clash\" class=\"headerlink\" title=\"clash\"></a>clash</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://einverne.github.io/post/2021/03/linux-use-clash.html\" target=\"_blank\" rel=\"noopener\">https://einverne.github.io/post/2021/03/linux-use-clash.html</a></p>\n<h2 id=\"自启动配置\"><a href=\"#自启动配置\" class=\"headerlink\" title=\"自启动配置\"></a>自启动配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">gsettings <span class=\"built_in\">set</span> org.gnome.system.proxy mode <span class=\"string\">'manual'</span> <span class=\"comment\">#ubuntu网络模式配置为手动</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/shancw/project  <span class=\"comment\">#切换到Clash的目录</span></span><br><span class=\"line\">./clash . &amp;  <span class=\"comment\">#在后台执行clash客户端</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"start vpn successfully!\"</span>  <span class=\"comment\">#启动成功的提示</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置自启动脚本\"><a href=\"#配置自启动脚本\" class=\"headerlink\" title=\"配置自启动脚本\"></a>配置自启动脚本</h1><ol>\n<li><code>gnome-session-properties</code> 打开 startup Application Preference 界面</li>\n<li>点击右侧的 add</li>\n<li>在 command 输入框 输入想要执行的 shell 脚本如 sh clash-start.sh</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>ubuntu 新系统个性化配置</p>","more":"<h1 id=\"关闭自动锁屏\"><a href=\"#关闭自动锁屏\" class=\"headerlink\" title=\"关闭自动锁屏\"></a>关闭自动锁屏</h1><p>Setting - Privacy - Automatic Screen Lock 关闭</p>\n<p>Lock screen on suspend 关闭</p>\n<h1 id=\"ssh-相关\"><a href=\"#ssh-相关\" class=\"headerlink\" title=\"ssh 相关\"></a>ssh 相关</h1><h2 id=\"ssh-server\"><a href=\"#ssh-server\" class=\"headerlink\" title=\"ssh-server\"></a>ssh-server</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br><span class=\"line\"><span class=\"comment\"># 开启ssh</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> ssh</span><br><span class=\"line\">sudo systemctl start ssh</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh-密钥登录\"><a href=\"#ssh-密钥登录\" class=\"headerlink\" title=\"ssh 密钥登录\"></a>ssh 密钥登录</h2><p><code>ssh-keygen</code> 生成密匙，<code>ssh-copy-id 用户名@ip地址</code>将公钥传送到远程主机</p>\n<h1 id=\"git-安装\"><a href=\"#git-安装\" class=\"headerlink\" title=\"git 安装\"></a>git 安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install git-all</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"curl-安装\"><a href=\"#curl-安装\" class=\"headerlink\" title=\"curl 安装\"></a>curl 安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install curl</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"zerotier-相关配置\"><a href=\"#zerotier-相关配置\" class=\"headerlink\" title=\"zerotier 相关配置\"></a>zerotier 相关配置</h1><p><a href=\"https://jiajunhuang.com/articles/2019_09_11-zerotier.md.html\" target=\"_blank\" rel=\"noopener\">https://jiajunhuang.com/articles/2019_09_11-zerotier.md.html</a></p>\n<h1 id=\"nginx-安装\"><a href=\"#nginx-安装\" class=\"headerlink\" title=\"nginx 安装\"></a>nginx 安装</h1><p><code>apt-get install nginx</code></p>\n<h1 id=\"NodeJS-安装\"><a href=\"#NodeJS-安装\" class=\"headerlink\" title=\"NodeJS 安装\"></a>NodeJS 安装</h1><p>nvm 管理工具下载：</p>\n<p><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</code></p>\n<p><code>source ~/.nvm/nvm.sh</code></p>\n<p><code>nvm install node</code></p>\n<p><code>nvm use node</code></p>\n<h1 id=\"clash\"><a href=\"#clash\" class=\"headerlink\" title=\"clash\"></a>clash</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://einverne.github.io/post/2021/03/linux-use-clash.html\" target=\"_blank\" rel=\"noopener\">https://einverne.github.io/post/2021/03/linux-use-clash.html</a></p>\n<h2 id=\"自启动配置\"><a href=\"#自启动配置\" class=\"headerlink\" title=\"自启动配置\"></a>自启动配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">gsettings <span class=\"built_in\">set</span> org.gnome.system.proxy mode <span class=\"string\">'manual'</span> <span class=\"comment\">#ubuntu网络模式配置为手动</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/shancw/project  <span class=\"comment\">#切换到Clash的目录</span></span><br><span class=\"line\">./clash . &amp;  <span class=\"comment\">#在后台执行clash客户端</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"start vpn successfully!\"</span>  <span class=\"comment\">#启动成功的提示</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置自启动脚本\"><a href=\"#配置自启动脚本\" class=\"headerlink\" title=\"配置自启动脚本\"></a>配置自启动脚本</h1><ol>\n<li><code>gnome-session-properties</code> 打开 startup Application Preference 界面</li>\n<li>点击右侧的 add</li>\n<li>在 command 输入框 输入想要执行的 shell 脚本如 sh clash-start.sh</li>\n</ol>"},{"title":"自定义博客","toc":true,"date":"2021-03-13T16:00:00.000Z","_content":"\nnext 主题的使用 Tips\n\n <!--more-->\n\n## 在首页的时候显示 Read More\n\n`<!--more-->`\n\n## 在文章中插入图片\n\nHexo 博客搭建之在文章中插入图片\n\n绝对路径本地引用\n当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source/images 文件夹中，通过 markdown 语法访问它们。\n\n`![](/images/image.jpg)`\n\n图片既可以在首页内容中访问到，也可以在文章正文中访问到。\n\n## 2d live 看板娘设置\n\n[可选的人物模型](https://huaji8.top/post/live2d-plugin-2.0/)\n\n### install\n\n- 安装辅助插件\n\n  ```bash\n  npm install --save hexo-helper-live2d\n  ```\n\n- 安装对应的模型\n\n  `npm install --save live2d-widget-model-<mode-name>`\n\n  `<mode-name>`就是对应的模型名称， 如我选择的模型为 shizuku\n\n  ```bash\n    npm install --save live2d-widget-model-shizuku\n  ```\n\n### 配置\n\n在 blog root 目录 的 \\_config.yml 文件最后一行，添加如下代码\n\n```yml\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-shizuku # 选择的model\n  display:\n    position: right # 右下角\n    width: 200\n    height: 400\n    hOffset: 60 # 水平位置\n    vOffset: -20 # 垂直位置\n  mobile:\n    show: false # 手机显示\n```\n\n### 启动项目\n\n```bash\nhexo clean && hexo g && hexo s\n```\n\n### 优化\n\n#### hexo 托管在个人服务器上 live2d 每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢\n\n解决方法：nginx 配置 cache-control\n\n```conf\nserver {\n    listen 80;\n    server_name blog.limiaomiao.site;\n    root /home/shancw/Project/blogs/public;   #//这是我们的资源文件目录\n    index index.html index.htm index.nginx-debian.html;\n    #return 301 https://$server_name$request_uri;\n\n# 新添加的代码如下\n# 对blog 域名下的 图片进行缓存处理\n\tlocation ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ {\n   \t\texpires 30d;\n\t}\n# 对带有 live2dw 字段的uri request 设置缓存\n\tlocation ~* live2dw.* {\n\t\tadd_header    Cache-Control  max-age=3600;\n\t}\n}\n```\n\n> ~\\* 表示 后面的启用正则匹配, 关于 nginx location 更多参考 https://segmentfault.com/a/1190000013267839\n\n> 其实只需要对 live2dw 进行匹配就能达到目标效果。但是为 blog 下的图片进行缓存处理也是必要的。\n\n关于 hexo 个人服务器托管 + 自动化部署的教程可以参考这篇文章\n\n[使用 github webhook 自动部署 hexo](http://blog.limiaomiao.site/2021/03/01/auto-deploy/)\n","source":"_posts/next-usage.md","raw":"---\ntitle: 自定义博客\ncategories: [杂项]\ntags: []\ntoc: true\ndate: 2021/3/14\n---\n\nnext 主题的使用 Tips\n\n <!--more-->\n\n## 在首页的时候显示 Read More\n\n`<!--more-->`\n\n## 在文章中插入图片\n\nHexo 博客搭建之在文章中插入图片\n\n绝对路径本地引用\n当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source/images 文件夹中，通过 markdown 语法访问它们。\n\n`![](/images/image.jpg)`\n\n图片既可以在首页内容中访问到，也可以在文章正文中访问到。\n\n## 2d live 看板娘设置\n\n[可选的人物模型](https://huaji8.top/post/live2d-plugin-2.0/)\n\n### install\n\n- 安装辅助插件\n\n  ```bash\n  npm install --save hexo-helper-live2d\n  ```\n\n- 安装对应的模型\n\n  `npm install --save live2d-widget-model-<mode-name>`\n\n  `<mode-name>`就是对应的模型名称， 如我选择的模型为 shizuku\n\n  ```bash\n    npm install --save live2d-widget-model-shizuku\n  ```\n\n### 配置\n\n在 blog root 目录 的 \\_config.yml 文件最后一行，添加如下代码\n\n```yml\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-shizuku # 选择的model\n  display:\n    position: right # 右下角\n    width: 200\n    height: 400\n    hOffset: 60 # 水平位置\n    vOffset: -20 # 垂直位置\n  mobile:\n    show: false # 手机显示\n```\n\n### 启动项目\n\n```bash\nhexo clean && hexo g && hexo s\n```\n\n### 优化\n\n#### hexo 托管在个人服务器上 live2d 每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢\n\n解决方法：nginx 配置 cache-control\n\n```conf\nserver {\n    listen 80;\n    server_name blog.limiaomiao.site;\n    root /home/shancw/Project/blogs/public;   #//这是我们的资源文件目录\n    index index.html index.htm index.nginx-debian.html;\n    #return 301 https://$server_name$request_uri;\n\n# 新添加的代码如下\n# 对blog 域名下的 图片进行缓存处理\n\tlocation ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ {\n   \t\texpires 30d;\n\t}\n# 对带有 live2dw 字段的uri request 设置缓存\n\tlocation ~* live2dw.* {\n\t\tadd_header    Cache-Control  max-age=3600;\n\t}\n}\n```\n\n> ~\\* 表示 后面的启用正则匹配, 关于 nginx location 更多参考 https://segmentfault.com/a/1190000013267839\n\n> 其实只需要对 live2dw 进行匹配就能达到目标效果。但是为 blog 下的图片进行缓存处理也是必要的。\n\n关于 hexo 个人服务器托管 + 自动化部署的教程可以参考这篇文章\n\n[使用 github webhook 自动部署 hexo](http://blog.limiaomiao.site/2021/03/01/auto-deploy/)\n","slug":"next-usage","published":1,"updated":"2021-04-22T08:24:18.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k70048goswd5aycqe5","content":"<p>next 主题的使用 Tips</p>\n <a id=\"more\"></a>\n\n<h2 id=\"在首页的时候显示-Read-More\"><a href=\"#在首页的时候显示-Read-More\" class=\"headerlink\" title=\"在首页的时候显示 Read More\"></a>在首页的时候显示 Read More</h2><p><code>&lt;!--more--&gt;</code></p>\n<h2 id=\"在文章中插入图片\"><a href=\"#在文章中插入图片\" class=\"headerlink\" title=\"在文章中插入图片\"></a>在文章中插入图片</h2><p>Hexo 博客搭建之在文章中插入图片</p>\n<p>绝对路径本地引用<br>当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source/images 文件夹中，通过 markdown 语法访问它们。</p>\n<p><code>![](/images/image.jpg)</code></p>\n<p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>\n<h2 id=\"2d-live-看板娘设置\"><a href=\"#2d-live-看板娘设置\" class=\"headerlink\" title=\"2d live 看板娘设置\"></a>2d live 看板娘设置</h2><p><a href=\"https://huaji8.top/post/live2d-plugin-2.0/\" target=\"_blank\" rel=\"noopener\">可选的人物模型</a></p>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><ul>\n<li><p>安装辅助插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装对应的模型</p>\n<p><code>npm install --save live2d-widget-model-&lt;mode-name&gt;</code></p>\n<p><code>&lt;mode-name&gt;</code>就是对应的模型名称， 如我选择的模型为 shizuku</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>在 blog root 目录 的 _config.yml 文件最后一行，添加如下代码</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\">  <span class=\"attr\">tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">model:</span></span><br><span class=\"line\">    <span class=\"attr\">use:</span> <span class=\"string\">live2d-widget-model-shizuku</span> <span class=\"comment\"># 选择的model</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span></span><br><span class=\"line\">    <span class=\"attr\">position:</span> <span class=\"string\">right</span> <span class=\"comment\"># 右下角</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"attr\">height:</span> <span class=\"number\">400</span></span><br><span class=\"line\">    <span class=\"attr\">hOffset:</span> <span class=\"number\">60</span> <span class=\"comment\"># 水平位置</span></span><br><span class=\"line\">    <span class=\"attr\">vOffset:</span> <span class=\"number\">-20</span> <span class=\"comment\"># 垂直位置</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span></span><br><span class=\"line\">    <span class=\"attr\">show:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 手机显示</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><h4 id=\"hexo-托管在个人服务器上-live2d-每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢\"><a href=\"#hexo-托管在个人服务器上-live2d-每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢\" class=\"headerlink\" title=\"hexo 托管在个人服务器上 live2d 每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢\"></a>hexo 托管在个人服务器上 live2d 每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢</h4><p>解决方法：nginx 配置 cache-control</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.limiaomiao.site;</span><br><span class=\"line\">    root &#x2F;home&#x2F;shancw&#x2F;Project&#x2F;blogs&#x2F;public;   #&#x2F;&#x2F;这是我们的资源文件目录</span><br><span class=\"line\">    index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">    #return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class=\"line\"></span><br><span class=\"line\"># 新添加的代码如下</span><br><span class=\"line\"># 对blog 域名下的 图片进行缓存处理</span><br><span class=\"line\">\tlocation ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ &#123;</span><br><span class=\"line\">   \t\texpires 30d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"># 对带有 live2dw 字段的uri request 设置缓存</span><br><span class=\"line\">\tlocation ~* live2dw.* &#123;</span><br><span class=\"line\">\t\tadd_header    Cache-Control  max-age&#x3D;3600;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>~* 表示 后面的启用正则匹配, 关于 nginx location 更多参考 <a href=\"https://segmentfault.com/a/1190000013267839\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000013267839</a></p>\n</blockquote>\n<blockquote>\n<p>其实只需要对 live2dw 进行匹配就能达到目标效果。但是为 blog 下的图片进行缓存处理也是必要的。</p>\n</blockquote>\n<p>关于 hexo 个人服务器托管 + 自动化部署的教程可以参考这篇文章</p>\n<p><a href=\"http://blog.limiaomiao.site/2021/03/01/auto-deploy/\" target=\"_blank\" rel=\"noopener\">使用 github webhook 自动部署 hexo</a></p>\n","site":{"data":{}},"excerpt":"<p>next 主题的使用 Tips</p>","more":"<h2 id=\"在首页的时候显示-Read-More\"><a href=\"#在首页的时候显示-Read-More\" class=\"headerlink\" title=\"在首页的时候显示 Read More\"></a>在首页的时候显示 Read More</h2><p><code>&lt;!--more--&gt;</code></p>\n<h2 id=\"在文章中插入图片\"><a href=\"#在文章中插入图片\" class=\"headerlink\" title=\"在文章中插入图片\"></a>在文章中插入图片</h2><p>Hexo 博客搭建之在文章中插入图片</p>\n<p>绝对路径本地引用<br>当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source/images 文件夹中，通过 markdown 语法访问它们。</p>\n<p><code>![](/images/image.jpg)</code></p>\n<p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>\n<h2 id=\"2d-live-看板娘设置\"><a href=\"#2d-live-看板娘设置\" class=\"headerlink\" title=\"2d live 看板娘设置\"></a>2d live 看板娘设置</h2><p><a href=\"https://huaji8.top/post/live2d-plugin-2.0/\" target=\"_blank\" rel=\"noopener\">可选的人物模型</a></p>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><ul>\n<li><p>安装辅助插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装对应的模型</p>\n<p><code>npm install --save live2d-widget-model-&lt;mode-name&gt;</code></p>\n<p><code>&lt;mode-name&gt;</code>就是对应的模型名称， 如我选择的模型为 shizuku</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>在 blog root 目录 的 _config.yml 文件最后一行，添加如下代码</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\">  <span class=\"attr\">tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">model:</span></span><br><span class=\"line\">    <span class=\"attr\">use:</span> <span class=\"string\">live2d-widget-model-shizuku</span> <span class=\"comment\"># 选择的model</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span></span><br><span class=\"line\">    <span class=\"attr\">position:</span> <span class=\"string\">right</span> <span class=\"comment\"># 右下角</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">200</span></span><br><span class=\"line\">    <span class=\"attr\">height:</span> <span class=\"number\">400</span></span><br><span class=\"line\">    <span class=\"attr\">hOffset:</span> <span class=\"number\">60</span> <span class=\"comment\"># 水平位置</span></span><br><span class=\"line\">    <span class=\"attr\">vOffset:</span> <span class=\"number\">-20</span> <span class=\"comment\"># 垂直位置</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span></span><br><span class=\"line\">    <span class=\"attr\">show:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 手机显示</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><h4 id=\"hexo-托管在个人服务器上-live2d-每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢\"><a href=\"#hexo-托管在个人服务器上-live2d-每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢\" class=\"headerlink\" title=\"hexo 托管在个人服务器上 live2d 每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢\"></a>hexo 托管在个人服务器上 live2d 每次打开新的页面都会重新向服务器发送请求，导致模型加载太慢</h4><p>解决方法：nginx 配置 cache-control</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.limiaomiao.site;</span><br><span class=\"line\">    root &#x2F;home&#x2F;shancw&#x2F;Project&#x2F;blogs&#x2F;public;   #&#x2F;&#x2F;这是我们的资源文件目录</span><br><span class=\"line\">    index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">    #return 301 https:&#x2F;&#x2F;$server_name$request_uri;</span><br><span class=\"line\"></span><br><span class=\"line\"># 新添加的代码如下</span><br><span class=\"line\"># 对blog 域名下的 图片进行缓存处理</span><br><span class=\"line\">\tlocation ~ \\.(gif|jpg|jpeg|png|bmp|ico)$ &#123;</span><br><span class=\"line\">   \t\texpires 30d;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"># 对带有 live2dw 字段的uri request 设置缓存</span><br><span class=\"line\">\tlocation ~* live2dw.* &#123;</span><br><span class=\"line\">\t\tadd_header    Cache-Control  max-age&#x3D;3600;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>~* 表示 后面的启用正则匹配, 关于 nginx location 更多参考 <a href=\"https://segmentfault.com/a/1190000013267839\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000013267839</a></p>\n</blockquote>\n<blockquote>\n<p>其实只需要对 live2dw 进行匹配就能达到目标效果。但是为 blog 下的图片进行缓存处理也是必要的。</p>\n</blockquote>\n<p>关于 hexo 个人服务器托管 + 自动化部署的教程可以参考这篇文章</p>\n<p><a href=\"http://blog.limiaomiao.site/2021/03/01/auto-deploy/\" target=\"_blank\" rel=\"noopener\">使用 github webhook 自动部署 hexo</a></p>"},{"title":"MySQL-handbook","toc":true,"date":"2021-04-21T16:00:00.000Z","_content":"\n这篇文章覆盖了 mysql 的常用知识，比如常用的语句 Select,Where ，常用的操作符 IN,BETWEEN, AND...常用的连接如 Inner Join, Self Join, 等等等。。。\n\n这篇文章是[YouTube: MySQL Tutorial for Beginner - Programming with Mosh](https://www.youtube.com/watch?v=7S_tz1z_5bA&list=WL&index=6&t=1881s&ab_channel=ProgrammingwithMosh)的笔记\n\n<!-- more -->\n\n# The SELECT Clause\n\n## 筛选出特定的行\n\n```sql\n-- first_name, last_name 是表名对应的数据项,\nselect first_name, last_name\nfrom customers\n```\n\n## 数学（加减乘除）计算 和 as 别名使用\n\n```sql\nselect\n  last_name,\n  first_name,\n  points,\n  (points + 10) * 100 as 'discount factor'\nfrom customers\n```\n\n## select 去重 - distinct\n\n```sql\nselect state from customer;\n-- VA VA CO FL TX\n```\n\n```sql\nselect distinct state from customer;\n-- VA CO FL TX\n```\n\n## 练习：\n\n返回数据库中所有的商品并标上打 9 折的价格\n\n```sql\n-- return all products\n-- name\n-- unit price\n-- new price\n\nselect\n  name,\n  unit_price,\n  unit_price * 1.1 as new_price\nfrom product\n```\n\n# The WHERE Clause\n\nmysql 的字符检索策略: utf8_general_ci 是不区分大小的,也就是说下面两个语法相同\n\n```sql\nselect * from user where username = 'admin' and password = 'admin'\n-- ==\nselect * from user where username = 'ADMIN' and password = 'Admin'\n```\n\n解决方法： https://blog.csdn.net/Veir_123/article/details/73730751\n\n## 运算符\n\n```sql\n-- 大于/小于\n-- > , >= , < <=,\n\n-- 不等于\nselect * from Customer where state != 'va'\nselect * from Customer where state <> 'va'\n-- !==, <>\n```\n\n## 多条件查询\n\n## The AND, OR, and NOT Operators\n\nand 并且： 找出出生年月在 1990/01/01 之后的并且 分数大于 1000\n\n```sql\nselect * from customer\nwhere birth_data > '1990-01-01' and points > 1000;\n```\n\nNOT 非 找出出生年月在 1990/01/01 之后, 分数不小于等于 1000 的人\n\n```sql\nselect * from customer\nwhere birth_data > '1990/01/01' not point <= 1000\n```\n\n我们可以使用 （）来提升优先级\n注意：and 优先级是高于 OR 的，我们为了方便理解，增加了（）来主动提升优先级\n\n```sql\nselect * from customer\nwhere birth_data > '1990-01-01'\n  OR (points > 1000 AND state = 'VA')\n\n```\n\n练习：\n\n```sql\n-- from the order_items table, get the order_items\n-- for order #6\n-- where the total price is greater than 30\n\nselect * from order_items\nwhere order_id = 6 and unit_price * quantity > 30;\n```\n\n## The IN Operator\n\n当多个 OR 语句来联合查询，我们可以使用 IN 来代替。\n例子：找出在'VA'或者 'FL'或者 'GA'这三个州的顾客\n\nOR\n\n```sql\nselect *\nfrom customer\nwhere state = 'VA' OR state = 'FL' OR state = 'GA'\n```\n\nIN\n\n```sql\nselect *\nfrom customer\nwhere state IN('VA', 'FL', 'GA')\n```\n\n例子：找出不在'VA'或者 'FL'或者 'GA'这三个州的顾客\n\n```sql\nselect *\nfrom customer\nwhere state NOT IN('VA', 'FL', 'GA')\n```\n\n练习：\n\n```sql\n-- return product with\n--  quantity in stock equal to 49, 38, 72\n\nselect *\nfrom products\nwhere quantity_in_stock in(49, 38, 72)\n```\n\n## The BETWEEN Operator\n\n在什么之间\n\nAND\n\n```sql\nselect * from customer\nwhere points >= 1000 AND points <= 3000\n```\n\nBetween\n\n```sql\nselect * from customer\nwhere points between(1000, 3000)\n```\n\n## The LIKE Operator\n\n模糊查询\n\n- `%`符号代表 0 ～多个字符\n  ```sql\n  -- 找出所有last_name以admin开头的顾客\n  SELECT * from customer where last_name like 'admin%'\n  -- 找出所有last_name 包含了admin 的顾客\n  SELECT * from customer where last_name like '%admin%'\n  ```\n- `_`表示 1 个字符\n  ```sql\n  -- 找出所有last_name 以y结尾，长度为5的 customer\n  SELECT * from customer where last_name like '____y'\n  ```\n\n练习\n\n```sql\n-- get the customer whose\n--  addresses contain TRAIL or AVENUE\n--  phone numbers end with 9\n\nselect * from customer\nwhere (address like '%TRAIL%' OR address like '%AVENUE%')\n  and phone_number like '%9';\n```\n\n## The REGEXP Operator\n\n正则表达式更加灵活，可以实现和 like 相同的效果\n\n```sql\n-- 找出所有last_name以admin开头的顾客\nSELECT * from customer where last_name REGEXP '^admin'\n-- 找出所有last_name 包含了admin 的顾客\nSELECT * from customer where last_name REGEXP 'admin'\n-- 找出所有last_name 以admin结尾 的顾客\nSELECT * from customer where last_name REGEXP 'admin$'\n```\n\n```sql\n-- get the customer whose\n--  addresses contain TRAIL or AVENUE\nselect * from customer\nwhere address REGEXP 'TRAIL|AVENUE'\n```\n\n## The IS NULL Operator\n\n判断字段是否为 null\n\n```sql\n-- 找出手机号为空的用户\nselect * from customer where phone is null\n-- 找出手机号不为空的用户\nselect * from customer where phone is not null\n```\n\n## The ORDER BY Operator\n\n排序: 默认情况下以 id 排序，如果想要改变查询结果的排序规则，需要使用 order by 操作符号，如果想要倒序排，则需要额外加上 DESC\n\n注意： order by 使用的字段是 select 设置的，支持使用 as 别名，进行动态计算，具体参考这块的练习\n\n按照用户的出生日期倒序排列\n\n```sql\nselect * from customer order by birth_date desc\n```\n\n如果用户出生日期相同按照，所在州进行再次排序\n\n```sql\nselect * from customer\norder by birth_data desc, state desc\n```\n\n练习： 按照订单 quantity 和 unit_price 构成的总价来排序订单\n\n```sql\nselect *, quantity * unit_price as total_price\nfrom order_items\nwhere order_id =2\norder by total_price desc\n```\n\n## The LIMIT Operator\n\n限制数据库返回的 customer 个数\n\n```sql\n-- 限制返回的数量为3个\n\nselect * from customer limit 3\n```\n\n选择 6 条数据后的 3 条数据\n\n```sql\nselect * from customer limit 6, 3 -- offset 6, pick 3\n```\n\n# Join\n\n## 基本用法\n\njoin 可以实现将多张不同的表的数据关联在一起\n\n```sql\nselect *\nfrom orders\njoin customers on customer.customer_id = orders.customer_id\n```\n\n- on：两个表是如何关联在一起的, 上述代码表示 通过两边的 customer_id 进行关联\n\n### join 返回 指定 table 下的 column\n\n之间选择 customer_id 会抛出错误，因为 orders 和 customers 都有相同的 customer_id 选项，我们可以通过 customers.customer_id 来指定返回具体 customer_id\n\n```sql\nselect orders.customer_id\nfrom orders\njoin customers on customer.customer_id = orders.customer_id\n```\n\n### 为表名设置 alias\n\n```sql\nselect o.customer_id\nfrom orders o\njoin customers c on c.customer_id = o.customer_id\n```\n\n```sql\nselect p.product_id, product_name, unit_price\nfrom order_items oi\njoin product p on p.product.product_id = oi.product_id\n```\n\n## Self Joins\n\nself join 表示自己和自己 join ，有点像是递归那味，用处如下情景\n\n有个雇员表，包括了雇员的信息和他所属的上级的 id，我们现在要返回 雇员的 id，姓名和他的上级 的名称\n\nemployees\n\n| id   | name       | report_to |\n| ---- | ---------- | --------- |\n| 1    | 雇员 1     | 666       |\n| 2    | 雇员 2     | 666       |\n| 3    | 雇员 3     | 666       |\n| 4    | 雇员 4     | 666       |\n| 666  | 市场部经理 | 9527      |\n| 11   | 雇员 11    | 777       |\n| 22   | 雇员 22    | 777       |\n| 33   | 雇员 33    | 777       |\n| 44   | 雇员 44    | 777       |\n| 777  | 技术部经理 | 9527      |\n| 9527 | CEO        | null      |\n\n```sql\nselect e.id, e.name, m.name as manage\nfrom employees e\njoin employees m on e.report_to = m.id\n```\n\n得到\n\n| id  | name       | manager    |\n| --- | ---------- | ---------- |\n| 1   | 雇员 1     | 市场部经理 |\n| 2   | 雇员 2     | 市场部经理 |\n| 3   | 雇员 3     | 市场部经理 |\n| 4   | 雇员 4     | 市场部经理 |\n| 666 | 市场部经理 | CEO        |\n| 11  | 雇员 11    | 技术部经理 |\n| 22  | 雇员 22    | 技术部经理 |\n| 33  | 雇员 33    | 技术部经理 |\n| 44  | 雇员 44    | 技术部经理 |\n| 777 | 技术部经理 | CEO        |\n\n## Joining Multiple Tables\n\ntable1: orders\n\n| id  | name        | customer_id | status |\n| --- | ----------- | ----------- | ------ |\n| 1   | zlaorlaz_qe | 1           | 1      |\n\ntable2: customers\n\n| id  | name   |\n| --- | ------ |\n| 1   | shancw |\n\ntable3: order_statuses\n\n| id  | name      |\n| --- | --------- |\n| 1   | processed |\n| 2   | shipped   |\n| 3   | Delivered |\n\n需要的效果\n\n| id  | name        | customer_name | status    |\n| --- | ----------- | ------------- | --------- |\n| 1   | zlaorlaz_qe | shancw        | processed |\n\n```sql\nselect o.id, o.name, c.customer_name as customer_name, os.name as status\nfrom orders o\njoin customers c\n  on o.customer_id = customers.id\njoin order_statuses os\n  on o.status = order_statuses.id\n```\n\n## Compound Join Conditions\n\n对于主键不止一个的情况，如果需要使用 join，那么需要额外使用 AND 操作\n\n```sql\nselect * from order_items oi\njoin order_item_notes oin\n  on oi.order_id = oin.order_id\n  and oi.product_id = oin.product_id\n```\n\n## Implicit Join Syntax\n\n使用 where 关键字实现 join，不推荐使用\n\n```sql\nselect *\nfrom orders o\njoin customers c\n  on o.customer_id = c.customer_id\n\n-- Implpicit Join Syntax\nselect *\nfrom orders o, customers c\nwhere o.customer_id = c.customer_id\n```\n\n## Outer Joins\n\n### 基础使用\n\n我们上面的所有 join 都是 inner join，我们使用个简单的例子来说明 order join 和 inner join 的区别\n\norder:\n\n| id  | name |\n| --- | ---- |\n| 1   | 进贡 |\n\ncustomer:\n\n| id  | name   | order_id |\n| --- | ------ | -------- |\n| 1   | shancw | 1        |\n| 2   | john   | null     |\n\n#### inner join\n\n```sql\nselect order.id order.name as order_name customer.name as customer_name\nfrom customer\njoin order\n  on customer.order_id = order.id\n```\n\n得到:\n\n| id  | order_name | customer_name |\n| --- | ---------- | ------------- |\n| 1   | 进贡       | shancw        |\n\n因为我们的 on 是一个条件判断，只有带有 order_id 的 customer 才会被匹配出来\n\n#### outer join\n\nouter join 有两种，left join 和 right join\n\nleft join\n\n保留左侧的所有行数据，即使没有正确匹配\n\n```sql\nselect order.id order.name as order_name customer.name as customer_name\nfrom customer\nleft join order\n  on customer.order_id = order.id\n```\n\n保留右侧的所有行数据，即使没有正确匹配\n\nright join\n\n```sql\nselect order.id order.name as order_name customer.name as customer_name\nfrom customer\nleft join order\n  on customer.order_id = order.id\n```\n\n得到:\n\n| id  | order_name | customer_name |\n| --- | ---------- | ------------- |\n| 1   | 进贡       | shancw        |\n| 2   | null       | john          |\n\n## The USING Clause\n\nUSING 语句是对 on 的一种简化，如果两个 table 的比较字段相同，那么可以用 USING 代替\n\n```sql\nselect\n  o.order_id,\n  c.first_name\nfrom orders o\njoin customers c\n  -- on o.customer_id = c.customer_id\n  USING (customer_id)\n```\n\n## Cross Joins\n\n笛卡尔乘积, 将所有可能性相乘\n\ntable1 : a, b, c, d, e\ntable2 : A, B, C, D, E\n\ncross join table: aA,aB,aC,aD,aE, ...., eA,eB,eC,eD,eE\n![cross join pic](https://www.w3resource.com/w3r_images/cross-join-round.png)\n\n```sql\nselect xxx, yyy\nfrom table1\ncross join table2\n\n```\n\n# Unions\n\nUNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中\n\n```sql\nSELECT expression1, expression2, ... expression_n\nFROM tables\n[WHERE conditions]\nUNION [ALL | DISTINCT]\nSELECT expression1, expression2, ... expression_n\nFROM tables\n[WHERE conditions];\n```\n\n# Inserting\n\n新增数据\n\n## Inserting a Single Row\n\n```sql\ninsert into customers (\n  first_name,\n  last_name,\n  phone,\n  address\n)\n-- first_name, last_name, phone, address\nvalues (\n  'John',\n  'Smith',\n  188888888888,\n  'New York'\n)\n```\n\n## Inserting Multiple Rows\n\n```sql\ninsert into customers (first_name)\n-- first_name, last_name, phone, address\nvalues ('John')\nvalues ('Arche')\n```\n\n# Updating\n\nUPDATE 语句\n\n## Updating a Single Row\n\n```sql\nupdate invoices\nset payment_total = invoice_total * 0.5, payment_data = due_date\nwhere client_id = 3; -- 更新client_id 为3 或者是4\n```\n\n## Updating Multiple Rows\n\nIN 操作符号\n\n```sql\nupdate invoices\nset payment_total = invoice_total * 0.5, payment_data = due_date\nwhere client_id in (3, 4); -- 更新client_id 为3 或者是4\n```\n\n# Using Subqueries in Updates\n\n子表达式\n\n```sql\nupdate invoices\nset payment_total = invoice_total * 0.5, payment_data = d(ue_date\nwhere client_id in (\n  select client_id\n  from clients\n  where state in ('CA', 'NY')\n)\n```\n\n# Deleting Rows\n\n```sql\ndelete from invoices\nwhere client_id in (\n  select client_id from clients\n  where name = \"Myworks\"\n)\n```\n","source":"_posts/mysql-handbook.md","raw":"---\ntitle: MySQL-handbook\ncategories: [数据库]\ntags: [database, mysql]\ntoc: true\ndate: 2021/4/22\n---\n\n这篇文章覆盖了 mysql 的常用知识，比如常用的语句 Select,Where ，常用的操作符 IN,BETWEEN, AND...常用的连接如 Inner Join, Self Join, 等等等。。。\n\n这篇文章是[YouTube: MySQL Tutorial for Beginner - Programming with Mosh](https://www.youtube.com/watch?v=7S_tz1z_5bA&list=WL&index=6&t=1881s&ab_channel=ProgrammingwithMosh)的笔记\n\n<!-- more -->\n\n# The SELECT Clause\n\n## 筛选出特定的行\n\n```sql\n-- first_name, last_name 是表名对应的数据项,\nselect first_name, last_name\nfrom customers\n```\n\n## 数学（加减乘除）计算 和 as 别名使用\n\n```sql\nselect\n  last_name,\n  first_name,\n  points,\n  (points + 10) * 100 as 'discount factor'\nfrom customers\n```\n\n## select 去重 - distinct\n\n```sql\nselect state from customer;\n-- VA VA CO FL TX\n```\n\n```sql\nselect distinct state from customer;\n-- VA CO FL TX\n```\n\n## 练习：\n\n返回数据库中所有的商品并标上打 9 折的价格\n\n```sql\n-- return all products\n-- name\n-- unit price\n-- new price\n\nselect\n  name,\n  unit_price,\n  unit_price * 1.1 as new_price\nfrom product\n```\n\n# The WHERE Clause\n\nmysql 的字符检索策略: utf8_general_ci 是不区分大小的,也就是说下面两个语法相同\n\n```sql\nselect * from user where username = 'admin' and password = 'admin'\n-- ==\nselect * from user where username = 'ADMIN' and password = 'Admin'\n```\n\n解决方法： https://blog.csdn.net/Veir_123/article/details/73730751\n\n## 运算符\n\n```sql\n-- 大于/小于\n-- > , >= , < <=,\n\n-- 不等于\nselect * from Customer where state != 'va'\nselect * from Customer where state <> 'va'\n-- !==, <>\n```\n\n## 多条件查询\n\n## The AND, OR, and NOT Operators\n\nand 并且： 找出出生年月在 1990/01/01 之后的并且 分数大于 1000\n\n```sql\nselect * from customer\nwhere birth_data > '1990-01-01' and points > 1000;\n```\n\nNOT 非 找出出生年月在 1990/01/01 之后, 分数不小于等于 1000 的人\n\n```sql\nselect * from customer\nwhere birth_data > '1990/01/01' not point <= 1000\n```\n\n我们可以使用 （）来提升优先级\n注意：and 优先级是高于 OR 的，我们为了方便理解，增加了（）来主动提升优先级\n\n```sql\nselect * from customer\nwhere birth_data > '1990-01-01'\n  OR (points > 1000 AND state = 'VA')\n\n```\n\n练习：\n\n```sql\n-- from the order_items table, get the order_items\n-- for order #6\n-- where the total price is greater than 30\n\nselect * from order_items\nwhere order_id = 6 and unit_price * quantity > 30;\n```\n\n## The IN Operator\n\n当多个 OR 语句来联合查询，我们可以使用 IN 来代替。\n例子：找出在'VA'或者 'FL'或者 'GA'这三个州的顾客\n\nOR\n\n```sql\nselect *\nfrom customer\nwhere state = 'VA' OR state = 'FL' OR state = 'GA'\n```\n\nIN\n\n```sql\nselect *\nfrom customer\nwhere state IN('VA', 'FL', 'GA')\n```\n\n例子：找出不在'VA'或者 'FL'或者 'GA'这三个州的顾客\n\n```sql\nselect *\nfrom customer\nwhere state NOT IN('VA', 'FL', 'GA')\n```\n\n练习：\n\n```sql\n-- return product with\n--  quantity in stock equal to 49, 38, 72\n\nselect *\nfrom products\nwhere quantity_in_stock in(49, 38, 72)\n```\n\n## The BETWEEN Operator\n\n在什么之间\n\nAND\n\n```sql\nselect * from customer\nwhere points >= 1000 AND points <= 3000\n```\n\nBetween\n\n```sql\nselect * from customer\nwhere points between(1000, 3000)\n```\n\n## The LIKE Operator\n\n模糊查询\n\n- `%`符号代表 0 ～多个字符\n  ```sql\n  -- 找出所有last_name以admin开头的顾客\n  SELECT * from customer where last_name like 'admin%'\n  -- 找出所有last_name 包含了admin 的顾客\n  SELECT * from customer where last_name like '%admin%'\n  ```\n- `_`表示 1 个字符\n  ```sql\n  -- 找出所有last_name 以y结尾，长度为5的 customer\n  SELECT * from customer where last_name like '____y'\n  ```\n\n练习\n\n```sql\n-- get the customer whose\n--  addresses contain TRAIL or AVENUE\n--  phone numbers end with 9\n\nselect * from customer\nwhere (address like '%TRAIL%' OR address like '%AVENUE%')\n  and phone_number like '%9';\n```\n\n## The REGEXP Operator\n\n正则表达式更加灵活，可以实现和 like 相同的效果\n\n```sql\n-- 找出所有last_name以admin开头的顾客\nSELECT * from customer where last_name REGEXP '^admin'\n-- 找出所有last_name 包含了admin 的顾客\nSELECT * from customer where last_name REGEXP 'admin'\n-- 找出所有last_name 以admin结尾 的顾客\nSELECT * from customer where last_name REGEXP 'admin$'\n```\n\n```sql\n-- get the customer whose\n--  addresses contain TRAIL or AVENUE\nselect * from customer\nwhere address REGEXP 'TRAIL|AVENUE'\n```\n\n## The IS NULL Operator\n\n判断字段是否为 null\n\n```sql\n-- 找出手机号为空的用户\nselect * from customer where phone is null\n-- 找出手机号不为空的用户\nselect * from customer where phone is not null\n```\n\n## The ORDER BY Operator\n\n排序: 默认情况下以 id 排序，如果想要改变查询结果的排序规则，需要使用 order by 操作符号，如果想要倒序排，则需要额外加上 DESC\n\n注意： order by 使用的字段是 select 设置的，支持使用 as 别名，进行动态计算，具体参考这块的练习\n\n按照用户的出生日期倒序排列\n\n```sql\nselect * from customer order by birth_date desc\n```\n\n如果用户出生日期相同按照，所在州进行再次排序\n\n```sql\nselect * from customer\norder by birth_data desc, state desc\n```\n\n练习： 按照订单 quantity 和 unit_price 构成的总价来排序订单\n\n```sql\nselect *, quantity * unit_price as total_price\nfrom order_items\nwhere order_id =2\norder by total_price desc\n```\n\n## The LIMIT Operator\n\n限制数据库返回的 customer 个数\n\n```sql\n-- 限制返回的数量为3个\n\nselect * from customer limit 3\n```\n\n选择 6 条数据后的 3 条数据\n\n```sql\nselect * from customer limit 6, 3 -- offset 6, pick 3\n```\n\n# Join\n\n## 基本用法\n\njoin 可以实现将多张不同的表的数据关联在一起\n\n```sql\nselect *\nfrom orders\njoin customers on customer.customer_id = orders.customer_id\n```\n\n- on：两个表是如何关联在一起的, 上述代码表示 通过两边的 customer_id 进行关联\n\n### join 返回 指定 table 下的 column\n\n之间选择 customer_id 会抛出错误，因为 orders 和 customers 都有相同的 customer_id 选项，我们可以通过 customers.customer_id 来指定返回具体 customer_id\n\n```sql\nselect orders.customer_id\nfrom orders\njoin customers on customer.customer_id = orders.customer_id\n```\n\n### 为表名设置 alias\n\n```sql\nselect o.customer_id\nfrom orders o\njoin customers c on c.customer_id = o.customer_id\n```\n\n```sql\nselect p.product_id, product_name, unit_price\nfrom order_items oi\njoin product p on p.product.product_id = oi.product_id\n```\n\n## Self Joins\n\nself join 表示自己和自己 join ，有点像是递归那味，用处如下情景\n\n有个雇员表，包括了雇员的信息和他所属的上级的 id，我们现在要返回 雇员的 id，姓名和他的上级 的名称\n\nemployees\n\n| id   | name       | report_to |\n| ---- | ---------- | --------- |\n| 1    | 雇员 1     | 666       |\n| 2    | 雇员 2     | 666       |\n| 3    | 雇员 3     | 666       |\n| 4    | 雇员 4     | 666       |\n| 666  | 市场部经理 | 9527      |\n| 11   | 雇员 11    | 777       |\n| 22   | 雇员 22    | 777       |\n| 33   | 雇员 33    | 777       |\n| 44   | 雇员 44    | 777       |\n| 777  | 技术部经理 | 9527      |\n| 9527 | CEO        | null      |\n\n```sql\nselect e.id, e.name, m.name as manage\nfrom employees e\njoin employees m on e.report_to = m.id\n```\n\n得到\n\n| id  | name       | manager    |\n| --- | ---------- | ---------- |\n| 1   | 雇员 1     | 市场部经理 |\n| 2   | 雇员 2     | 市场部经理 |\n| 3   | 雇员 3     | 市场部经理 |\n| 4   | 雇员 4     | 市场部经理 |\n| 666 | 市场部经理 | CEO        |\n| 11  | 雇员 11    | 技术部经理 |\n| 22  | 雇员 22    | 技术部经理 |\n| 33  | 雇员 33    | 技术部经理 |\n| 44  | 雇员 44    | 技术部经理 |\n| 777 | 技术部经理 | CEO        |\n\n## Joining Multiple Tables\n\ntable1: orders\n\n| id  | name        | customer_id | status |\n| --- | ----------- | ----------- | ------ |\n| 1   | zlaorlaz_qe | 1           | 1      |\n\ntable2: customers\n\n| id  | name   |\n| --- | ------ |\n| 1   | shancw |\n\ntable3: order_statuses\n\n| id  | name      |\n| --- | --------- |\n| 1   | processed |\n| 2   | shipped   |\n| 3   | Delivered |\n\n需要的效果\n\n| id  | name        | customer_name | status    |\n| --- | ----------- | ------------- | --------- |\n| 1   | zlaorlaz_qe | shancw        | processed |\n\n```sql\nselect o.id, o.name, c.customer_name as customer_name, os.name as status\nfrom orders o\njoin customers c\n  on o.customer_id = customers.id\njoin order_statuses os\n  on o.status = order_statuses.id\n```\n\n## Compound Join Conditions\n\n对于主键不止一个的情况，如果需要使用 join，那么需要额外使用 AND 操作\n\n```sql\nselect * from order_items oi\njoin order_item_notes oin\n  on oi.order_id = oin.order_id\n  and oi.product_id = oin.product_id\n```\n\n## Implicit Join Syntax\n\n使用 where 关键字实现 join，不推荐使用\n\n```sql\nselect *\nfrom orders o\njoin customers c\n  on o.customer_id = c.customer_id\n\n-- Implpicit Join Syntax\nselect *\nfrom orders o, customers c\nwhere o.customer_id = c.customer_id\n```\n\n## Outer Joins\n\n### 基础使用\n\n我们上面的所有 join 都是 inner join，我们使用个简单的例子来说明 order join 和 inner join 的区别\n\norder:\n\n| id  | name |\n| --- | ---- |\n| 1   | 进贡 |\n\ncustomer:\n\n| id  | name   | order_id |\n| --- | ------ | -------- |\n| 1   | shancw | 1        |\n| 2   | john   | null     |\n\n#### inner join\n\n```sql\nselect order.id order.name as order_name customer.name as customer_name\nfrom customer\njoin order\n  on customer.order_id = order.id\n```\n\n得到:\n\n| id  | order_name | customer_name |\n| --- | ---------- | ------------- |\n| 1   | 进贡       | shancw        |\n\n因为我们的 on 是一个条件判断，只有带有 order_id 的 customer 才会被匹配出来\n\n#### outer join\n\nouter join 有两种，left join 和 right join\n\nleft join\n\n保留左侧的所有行数据，即使没有正确匹配\n\n```sql\nselect order.id order.name as order_name customer.name as customer_name\nfrom customer\nleft join order\n  on customer.order_id = order.id\n```\n\n保留右侧的所有行数据，即使没有正确匹配\n\nright join\n\n```sql\nselect order.id order.name as order_name customer.name as customer_name\nfrom customer\nleft join order\n  on customer.order_id = order.id\n```\n\n得到:\n\n| id  | order_name | customer_name |\n| --- | ---------- | ------------- |\n| 1   | 进贡       | shancw        |\n| 2   | null       | john          |\n\n## The USING Clause\n\nUSING 语句是对 on 的一种简化，如果两个 table 的比较字段相同，那么可以用 USING 代替\n\n```sql\nselect\n  o.order_id,\n  c.first_name\nfrom orders o\njoin customers c\n  -- on o.customer_id = c.customer_id\n  USING (customer_id)\n```\n\n## Cross Joins\n\n笛卡尔乘积, 将所有可能性相乘\n\ntable1 : a, b, c, d, e\ntable2 : A, B, C, D, E\n\ncross join table: aA,aB,aC,aD,aE, ...., eA,eB,eC,eD,eE\n![cross join pic](https://www.w3resource.com/w3r_images/cross-join-round.png)\n\n```sql\nselect xxx, yyy\nfrom table1\ncross join table2\n\n```\n\n# Unions\n\nUNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中\n\n```sql\nSELECT expression1, expression2, ... expression_n\nFROM tables\n[WHERE conditions]\nUNION [ALL | DISTINCT]\nSELECT expression1, expression2, ... expression_n\nFROM tables\n[WHERE conditions];\n```\n\n# Inserting\n\n新增数据\n\n## Inserting a Single Row\n\n```sql\ninsert into customers (\n  first_name,\n  last_name,\n  phone,\n  address\n)\n-- first_name, last_name, phone, address\nvalues (\n  'John',\n  'Smith',\n  188888888888,\n  'New York'\n)\n```\n\n## Inserting Multiple Rows\n\n```sql\ninsert into customers (first_name)\n-- first_name, last_name, phone, address\nvalues ('John')\nvalues ('Arche')\n```\n\n# Updating\n\nUPDATE 语句\n\n## Updating a Single Row\n\n```sql\nupdate invoices\nset payment_total = invoice_total * 0.5, payment_data = due_date\nwhere client_id = 3; -- 更新client_id 为3 或者是4\n```\n\n## Updating Multiple Rows\n\nIN 操作符号\n\n```sql\nupdate invoices\nset payment_total = invoice_total * 0.5, payment_data = due_date\nwhere client_id in (3, 4); -- 更新client_id 为3 或者是4\n```\n\n# Using Subqueries in Updates\n\n子表达式\n\n```sql\nupdate invoices\nset payment_total = invoice_total * 0.5, payment_data = d(ue_date\nwhere client_id in (\n  select client_id\n  from clients\n  where state in ('CA', 'NY')\n)\n```\n\n# Deleting Rows\n\n```sql\ndelete from invoices\nwhere client_id in (\n  select client_id from clients\n  where name = \"Myworks\"\n)\n```\n","slug":"mysql-handbook","published":1,"updated":"2021-04-22T15:55:04.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k7004bgosw4wh14ogc","content":"<p>这篇文章覆盖了 mysql 的常用知识，比如常用的语句 Select,Where ，常用的操作符 IN,BETWEEN, AND…常用的连接如 Inner Join, Self Join, 等等等。。。</p>\n<p>这篇文章是<a href=\"https://www.youtube.com/watch?v=7S_tz1z_5bA&list=WL&index=6&t=1881s&ab_channel=ProgrammingwithMosh\" target=\"_blank\" rel=\"noopener\">YouTube: MySQL Tutorial for Beginner - Programming with Mosh</a>的笔记</p>\n<a id=\"more\"></a>\n\n<h1 id=\"The-SELECT-Clause\"><a href=\"#The-SELECT-Clause\" class=\"headerlink\" title=\"The SELECT Clause\"></a>The SELECT Clause</h1><h2 id=\"筛选出特定的行\"><a href=\"#筛选出特定的行\" class=\"headerlink\" title=\"筛选出特定的行\"></a>筛选出特定的行</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- first_name, last_name 是表名对应的数据项,</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> first_name, last_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数学（加减乘除）计算-和-as-别名使用\"><a href=\"#数学（加减乘除）计算-和-as-别名使用\" class=\"headerlink\" title=\"数学（加减乘除）计算 和 as 别名使用\"></a>数学（加减乘除）计算 和 as 别名使用</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  last_name,</span><br><span class=\"line\">  first_name,</span><br><span class=\"line\">  points,</span><br><span class=\"line\">  (points + <span class=\"number\">10</span>) * <span class=\"number\">100</span> <span class=\"keyword\">as</span> <span class=\"string\">'discount factor'</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"select-去重-distinct\"><a href=\"#select-去重-distinct\" class=\"headerlink\" title=\"select 去重 - distinct\"></a>select 去重 - distinct</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> state <span class=\"keyword\">from</span> customer;</span><br><span class=\"line\"><span class=\"comment\">-- VA VA CO FL TX</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> state <span class=\"keyword\">from</span> customer;</span><br><span class=\"line\"><span class=\"comment\">-- VA CO FL TX</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习：\"><a href=\"#练习：\" class=\"headerlink\" title=\"练习：\"></a>练习：</h2><p>返回数据库中所有的商品并标上打 9 折的价格</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- return all products</span></span><br><span class=\"line\"><span class=\"comment\">-- name</span></span><br><span class=\"line\"><span class=\"comment\">-- unit price</span></span><br><span class=\"line\"><span class=\"comment\">-- new price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  <span class=\"keyword\">name</span>,</span><br><span class=\"line\">  unit_price,</span><br><span class=\"line\">  unit_price * <span class=\"number\">1.1</span> <span class=\"keyword\">as</span> new_price</span><br><span class=\"line\"><span class=\"keyword\">from</span> product</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-WHERE-Clause\"><a href=\"#The-WHERE-Clause\" class=\"headerlink\" title=\"The WHERE Clause\"></a>The WHERE Clause</h1><p>mysql 的字符检索策略: utf8_general_ci 是不区分大小的,也就是说下面两个语法相同</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> username = <span class=\"string\">'admin'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">password</span> = <span class=\"string\">'admin'</span></span><br><span class=\"line\"><span class=\"comment\">-- ==</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> username = <span class=\"string\">'ADMIN'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">password</span> = <span class=\"string\">'Admin'</span></span><br></pre></td></tr></table></figure>\n\n<p>解决方法： <a href=\"https://blog.csdn.net/Veir_123/article/details/73730751\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Veir_123/article/details/73730751</a></p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 大于/小于</span></span><br><span class=\"line\"><span class=\"comment\">-- &gt; , &gt;= , &lt; &lt;=,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不等于</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> Customer <span class=\"keyword\">where</span> state != <span class=\"string\">'va'</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> Customer <span class=\"keyword\">where</span> state &lt;&gt; <span class=\"string\">'va'</span></span><br><span class=\"line\"><span class=\"comment\">-- !==, &lt;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多条件查询\"><a href=\"#多条件查询\" class=\"headerlink\" title=\"多条件查询\"></a>多条件查询</h2><h2 id=\"The-AND-OR-and-NOT-Operators\"><a href=\"#The-AND-OR-and-NOT-Operators\" class=\"headerlink\" title=\"The AND, OR, and NOT Operators\"></a>The AND, OR, and NOT Operators</h2><p>and 并且： 找出出生年月在 1990/01/01 之后的并且 分数大于 1000</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> birth_data &gt; <span class=\"string\">'1990-01-01'</span> <span class=\"keyword\">and</span> points &gt; <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n\n<p>NOT 非 找出出生年月在 1990/01/01 之后, 分数不小于等于 1000 的人</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> birth_data &gt; <span class=\"string\">'1990/01/01'</span> <span class=\"keyword\">not</span> point &lt;= <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以使用 （）来提升优先级<br>注意：and 优先级是高于 OR 的，我们为了方便理解，增加了（）来主动提升优先级</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> birth_data &gt; <span class=\"string\">'1990-01-01'</span></span><br><span class=\"line\">  <span class=\"keyword\">OR</span> (points &gt; <span class=\"number\">1000</span> <span class=\"keyword\">AND</span> state = <span class=\"string\">'VA'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>练习：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- from the order_items table, get the order_items</span></span><br><span class=\"line\"><span class=\"comment\">-- for order #6</span></span><br><span class=\"line\"><span class=\"comment\">-- where the total price is greater than 30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> order_items</span><br><span class=\"line\"><span class=\"keyword\">where</span> order_id = <span class=\"number\">6</span> <span class=\"keyword\">and</span> unit_price * quantity &gt; <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-IN-Operator\"><a href=\"#The-IN-Operator\" class=\"headerlink\" title=\"The IN Operator\"></a>The IN Operator</h2><p>当多个 OR 语句来联合查询，我们可以使用 IN 来代替。<br>例子：找出在’VA’或者 ‘FL’或者 ‘GA’这三个州的顾客</p>\n<p>OR</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> state = <span class=\"string\">'VA'</span> <span class=\"keyword\">OR</span> state = <span class=\"string\">'FL'</span> <span class=\"keyword\">OR</span> state = <span class=\"string\">'GA'</span></span><br></pre></td></tr></table></figure>\n\n<p>IN</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> state <span class=\"keyword\">IN</span>(<span class=\"string\">'VA'</span>, <span class=\"string\">'FL'</span>, <span class=\"string\">'GA'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例子：找出不在’VA’或者 ‘FL’或者 ‘GA’这三个州的顾客</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> state <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span>(<span class=\"string\">'VA'</span>, <span class=\"string\">'FL'</span>, <span class=\"string\">'GA'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>练习：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- return product with</span></span><br><span class=\"line\"><span class=\"comment\">--  quantity in stock equal to 49, 38, 72</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> products</span><br><span class=\"line\"><span class=\"keyword\">where</span> quantity_in_stock <span class=\"keyword\">in</span>(<span class=\"number\">49</span>, <span class=\"number\">38</span>, <span class=\"number\">72</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-BETWEEN-Operator\"><a href=\"#The-BETWEEN-Operator\" class=\"headerlink\" title=\"The BETWEEN Operator\"></a>The BETWEEN Operator</h2><p>在什么之间</p>\n<p>AND</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> points &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">AND</span> points &lt;= <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>\n\n<p>Between</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> points <span class=\"keyword\">between</span>(<span class=\"number\">1000</span>, <span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-LIKE-Operator\"><a href=\"#The-LIKE-Operator\" class=\"headerlink\" title=\"The LIKE Operator\"></a>The LIKE Operator</h2><p>模糊查询</p>\n<ul>\n<li><code>%</code>符号代表 0 ～多个字符<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 找出所有last_name以admin开头的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name <span class=\"keyword\">like</span> <span class=\"string\">'admin%'</span></span><br><span class=\"line\"><span class=\"comment\">-- 找出所有last_name 包含了admin 的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name <span class=\"keyword\">like</span> <span class=\"string\">'%admin%'</span></span><br></pre></td></tr></table></figure></li>\n<li><code>_</code>表示 1 个字符<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 找出所有last_name 以y结尾，长度为5的 customer</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name <span class=\"keyword\">like</span> <span class=\"string\">'____y'</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- get the customer whose</span></span><br><span class=\"line\"><span class=\"comment\">--  addresses contain TRAIL or AVENUE</span></span><br><span class=\"line\"><span class=\"comment\">--  phone numbers end with 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> (address <span class=\"keyword\">like</span> <span class=\"string\">'%TRAIL%'</span> <span class=\"keyword\">OR</span> address <span class=\"keyword\">like</span> <span class=\"string\">'%AVENUE%'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">and</span> phone_number <span class=\"keyword\">like</span> <span class=\"string\">'%9'</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-REGEXP-Operator\"><a href=\"#The-REGEXP-Operator\" class=\"headerlink\" title=\"The REGEXP Operator\"></a>The REGEXP Operator</h2><p>正则表达式更加灵活，可以实现和 like 相同的效果</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 找出所有last_name以admin开头的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name REGEXP <span class=\"string\">'^admin'</span></span><br><span class=\"line\"><span class=\"comment\">-- 找出所有last_name 包含了admin 的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name REGEXP <span class=\"string\">'admin'</span></span><br><span class=\"line\"><span class=\"comment\">-- 找出所有last_name 以admin结尾 的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name REGEXP <span class=\"string\">'admin$'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- get the customer whose</span></span><br><span class=\"line\"><span class=\"comment\">--  addresses contain TRAIL or AVENUE</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> address REGEXP <span class=\"string\">'TRAIL|AVENUE'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-IS-NULL-Operator\"><a href=\"#The-IS-NULL-Operator\" class=\"headerlink\" title=\"The IS NULL Operator\"></a>The IS NULL Operator</h2><p>判断字段是否为 null</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 找出手机号为空的用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> phone <span class=\"keyword\">is</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">-- 找出手机号不为空的用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> phone <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-ORDER-BY-Operator\"><a href=\"#The-ORDER-BY-Operator\" class=\"headerlink\" title=\"The ORDER BY Operator\"></a>The ORDER BY Operator</h2><p>排序: 默认情况下以 id 排序，如果想要改变查询结果的排序规则，需要使用 order by 操作符号，如果想要倒序排，则需要额外加上 DESC</p>\n<p>注意： order by 使用的字段是 select 设置的，支持使用 as 别名，进行动态计算，具体参考这块的练习</p>\n<p>按照用户的出生日期倒序排列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> birth_date <span class=\"keyword\">desc</span></span><br></pre></td></tr></table></figure>\n\n<p>如果用户出生日期相同按照，所在州进行再次排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> birth_data <span class=\"keyword\">desc</span>, state <span class=\"keyword\">desc</span></span><br></pre></td></tr></table></figure>\n\n<p>练习： 按照订单 quantity 和 unit_price 构成的总价来排序订单</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *, quantity * unit_price <span class=\"keyword\">as</span> total_price</span><br><span class=\"line\"><span class=\"keyword\">from</span> order_items</span><br><span class=\"line\"><span class=\"keyword\">where</span> order_id =<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> total_price <span class=\"keyword\">desc</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-LIMIT-Operator\"><a href=\"#The-LIMIT-Operator\" class=\"headerlink\" title=\"The LIMIT Operator\"></a>The LIMIT Operator</h2><p>限制数据库返回的 customer 个数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 限制返回的数量为3个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">limit</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>选择 6 条数据后的 3 条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">limit</span> <span class=\"number\">6</span>, <span class=\"number\">3</span> <span class=\"comment\">-- offset 6, pick 3</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>join 可以实现将多张不同的表的数据关联在一起</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers <span class=\"keyword\">on</span> customer.customer_id = orders.customer_id</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>on：两个表是如何关联在一起的, 上述代码表示 通过两边的 customer_id 进行关联</li>\n</ul>\n<h3 id=\"join-返回-指定-table-下的-column\"><a href=\"#join-返回-指定-table-下的-column\" class=\"headerlink\" title=\"join 返回 指定 table 下的 column\"></a>join 返回 指定 table 下的 column</h3><p>之间选择 customer_id 会抛出错误，因为 orders 和 customers 都有相同的 customer_id 选项，我们可以通过 customers.customer_id 来指定返回具体 customer_id</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> orders.customer_id</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers <span class=\"keyword\">on</span> customer.customer_id = orders.customer_id</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为表名设置-alias\"><a href=\"#为表名设置-alias\" class=\"headerlink\" title=\"为表名设置 alias\"></a>为表名设置 alias</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> o.customer_id</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers c <span class=\"keyword\">on</span> c.customer_id = o.customer_id</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> p.product_id, product_name, unit_price</span><br><span class=\"line\"><span class=\"keyword\">from</span> order_items oi</span><br><span class=\"line\"><span class=\"keyword\">join</span> product p <span class=\"keyword\">on</span> p.product.product_id = oi.product_id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Self-Joins\"><a href=\"#Self-Joins\" class=\"headerlink\" title=\"Self Joins\"></a>Self Joins</h2><p>self join 表示自己和自己 join ，有点像是递归那味，用处如下情景</p>\n<p>有个雇员表，包括了雇员的信息和他所属的上级的 id，我们现在要返回 雇员的 id，姓名和他的上级 的名称</p>\n<p>employees</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>report_to</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>雇员 1</td>\n<td>666</td>\n</tr>\n<tr>\n<td>2</td>\n<td>雇员 2</td>\n<td>666</td>\n</tr>\n<tr>\n<td>3</td>\n<td>雇员 3</td>\n<td>666</td>\n</tr>\n<tr>\n<td>4</td>\n<td>雇员 4</td>\n<td>666</td>\n</tr>\n<tr>\n<td>666</td>\n<td>市场部经理</td>\n<td>9527</td>\n</tr>\n<tr>\n<td>11</td>\n<td>雇员 11</td>\n<td>777</td>\n</tr>\n<tr>\n<td>22</td>\n<td>雇员 22</td>\n<td>777</td>\n</tr>\n<tr>\n<td>33</td>\n<td>雇员 33</td>\n<td>777</td>\n</tr>\n<tr>\n<td>44</td>\n<td>雇员 44</td>\n<td>777</td>\n</tr>\n<tr>\n<td>777</td>\n<td>技术部经理</td>\n<td>9527</td>\n</tr>\n<tr>\n<td>9527</td>\n<td>CEO</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> e.id, e.name, m.name <span class=\"keyword\">as</span> manage</span><br><span class=\"line\"><span class=\"keyword\">from</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">join</span> employees m <span class=\"keyword\">on</span> e.report_to = m.id</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>manager</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>雇员 1</td>\n<td>市场部经理</td>\n</tr>\n<tr>\n<td>2</td>\n<td>雇员 2</td>\n<td>市场部经理</td>\n</tr>\n<tr>\n<td>3</td>\n<td>雇员 3</td>\n<td>市场部经理</td>\n</tr>\n<tr>\n<td>4</td>\n<td>雇员 4</td>\n<td>市场部经理</td>\n</tr>\n<tr>\n<td>666</td>\n<td>市场部经理</td>\n<td>CEO</td>\n</tr>\n<tr>\n<td>11</td>\n<td>雇员 11</td>\n<td>技术部经理</td>\n</tr>\n<tr>\n<td>22</td>\n<td>雇员 22</td>\n<td>技术部经理</td>\n</tr>\n<tr>\n<td>33</td>\n<td>雇员 33</td>\n<td>技术部经理</td>\n</tr>\n<tr>\n<td>44</td>\n<td>雇员 44</td>\n<td>技术部经理</td>\n</tr>\n<tr>\n<td>777</td>\n<td>技术部经理</td>\n<td>CEO</td>\n</tr>\n</tbody></table>\n<h2 id=\"Joining-Multiple-Tables\"><a href=\"#Joining-Multiple-Tables\" class=\"headerlink\" title=\"Joining Multiple Tables\"></a>Joining Multiple Tables</h2><p>table1: orders</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>customer_id</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>zlaorlaz_qe</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>table2: customers</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>shancw</td>\n</tr>\n</tbody></table>\n<p>table3: order_statuses</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>processed</td>\n</tr>\n<tr>\n<td>2</td>\n<td>shipped</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Delivered</td>\n</tr>\n</tbody></table>\n<p>需要的效果</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>customer_name</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>zlaorlaz_qe</td>\n<td>shancw</td>\n<td>processed</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> o.id, o.name, c.customer_name <span class=\"keyword\">as</span> customer_name, os.name <span class=\"keyword\">as</span> <span class=\"keyword\">status</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers c</span><br><span class=\"line\">  <span class=\"keyword\">on</span> o.customer_id = customers.id</span><br><span class=\"line\"><span class=\"keyword\">join</span> order_statuses os</span><br><span class=\"line\">  <span class=\"keyword\">on</span> o.status = order_statuses.id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Compound-Join-Conditions\"><a href=\"#Compound-Join-Conditions\" class=\"headerlink\" title=\"Compound Join Conditions\"></a>Compound Join Conditions</h2><p>对于主键不止一个的情况，如果需要使用 join，那么需要额外使用 AND 操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> order_items oi</span><br><span class=\"line\"><span class=\"keyword\">join</span> order_item_notes oin</span><br><span class=\"line\">  <span class=\"keyword\">on</span> oi.order_id = oin.order_id</span><br><span class=\"line\">  <span class=\"keyword\">and</span> oi.product_id = oin.product_id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Implicit-Join-Syntax\"><a href=\"#Implicit-Join-Syntax\" class=\"headerlink\" title=\"Implicit Join Syntax\"></a>Implicit Join Syntax</h2><p>使用 where 关键字实现 join，不推荐使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers c</span><br><span class=\"line\">  <span class=\"keyword\">on</span> o.customer_id = c.customer_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Implpicit Join Syntax</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o, customers c</span><br><span class=\"line\"><span class=\"keyword\">where</span> o.customer_id = c.customer_id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Outer-Joins\"><a href=\"#Outer-Joins\" class=\"headerlink\" title=\"Outer Joins\"></a>Outer Joins</h2><h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><p>我们上面的所有 join 都是 inner join，我们使用个简单的例子来说明 order join 和 inner join 的区别</p>\n<p>order:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>进贡</td>\n</tr>\n</tbody></table>\n<p>customer:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>order_id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>shancw</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>john</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<h4 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> order.id order.name <span class=\"keyword\">as</span> order_name customer.name <span class=\"keyword\">as</span> customer_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">join</span> <span class=\"keyword\">order</span></span><br><span class=\"line\">  <span class=\"keyword\">on</span> customer.order_id = order.id</span><br></pre></td></tr></table></figure>\n\n<p>得到:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>order_name</th>\n<th>customer_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>进贡</td>\n<td>shancw</td>\n</tr>\n</tbody></table>\n<p>因为我们的 on 是一个条件判断，只有带有 order_id 的 customer 才会被匹配出来</p>\n<h4 id=\"outer-join\"><a href=\"#outer-join\" class=\"headerlink\" title=\"outer join\"></a>outer join</h4><p>outer join 有两种，left join 和 right join</p>\n<p>left join</p>\n<p>保留左侧的所有行数据，即使没有正确匹配</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> order.id order.name <span class=\"keyword\">as</span> order_name customer.name <span class=\"keyword\">as</span> customer_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> <span class=\"keyword\">order</span></span><br><span class=\"line\">  <span class=\"keyword\">on</span> customer.order_id = order.id</span><br></pre></td></tr></table></figure>\n\n<p>保留右侧的所有行数据，即使没有正确匹配</p>\n<p>right join</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> order.id order.name <span class=\"keyword\">as</span> order_name customer.name <span class=\"keyword\">as</span> customer_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> <span class=\"keyword\">order</span></span><br><span class=\"line\">  <span class=\"keyword\">on</span> customer.order_id = order.id</span><br></pre></td></tr></table></figure>\n\n<p>得到:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>order_name</th>\n<th>customer_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>进贡</td>\n<td>shancw</td>\n</tr>\n<tr>\n<td>2</td>\n<td>null</td>\n<td>john</td>\n</tr>\n</tbody></table>\n<h2 id=\"The-USING-Clause\"><a href=\"#The-USING-Clause\" class=\"headerlink\" title=\"The USING Clause\"></a>The USING Clause</h2><p>USING 语句是对 on 的一种简化，如果两个 table 的比较字段相同，那么可以用 USING 代替</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  o.order_id,</span><br><span class=\"line\">  c.first_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers c</span><br><span class=\"line\">  <span class=\"comment\">-- on o.customer_id = c.customer_id</span></span><br><span class=\"line\">  <span class=\"keyword\">USING</span> (customer_id)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cross-Joins\"><a href=\"#Cross-Joins\" class=\"headerlink\" title=\"Cross Joins\"></a>Cross Joins</h2><p>笛卡尔乘积, 将所有可能性相乘</p>\n<p>table1 : a, b, c, d, e<br>table2 : A, B, C, D, E</p>\n<p>cross join table: aA,aB,aC,aD,aE, …., eA,eB,eC,eD,eE<br><img src=\"https://www.w3resource.com/w3r_images/cross-join-round.png\" alt=\"cross join pic\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> xxx, yyy</span><br><span class=\"line\"><span class=\"keyword\">from</span> table1</span><br><span class=\"line\"><span class=\"keyword\">cross</span> <span class=\"keyword\">join</span> table2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Unions\"><a href=\"#Unions\" class=\"headerlink\" title=\"Unions\"></a>Unions</h1><p>UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> expression1, expression2, ... expression_n</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">tables</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> conditions]</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> [<span class=\"keyword\">ALL</span> | <span class=\"keyword\">DISTINCT</span>]</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> expression1, expression2, ... expression_n</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">tables</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> conditions];</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Inserting\"><a href=\"#Inserting\" class=\"headerlink\" title=\"Inserting\"></a>Inserting</h1><p>新增数据</p>\n<h2 id=\"Inserting-a-Single-Row\"><a href=\"#Inserting-a-Single-Row\" class=\"headerlink\" title=\"Inserting a Single Row\"></a>Inserting a Single Row</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> customers (</span><br><span class=\"line\">  first_name,</span><br><span class=\"line\">  last_name,</span><br><span class=\"line\">  phone,</span><br><span class=\"line\">  address</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">-- first_name, last_name, phone, address</span></span><br><span class=\"line\"><span class=\"keyword\">values</span> (</span><br><span class=\"line\">  <span class=\"string\">'John'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Smith'</span>,</span><br><span class=\"line\">  <span class=\"number\">188888888888</span>,</span><br><span class=\"line\">  <span class=\"string\">'New York'</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Inserting-Multiple-Rows\"><a href=\"#Inserting-Multiple-Rows\" class=\"headerlink\" title=\"Inserting Multiple Rows\"></a>Inserting Multiple Rows</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> customers (first_name)</span><br><span class=\"line\"><span class=\"comment\">-- first_name, last_name, phone, address</span></span><br><span class=\"line\"><span class=\"keyword\">values</span> (<span class=\"string\">'John'</span>)</span><br><span class=\"line\"><span class=\"keyword\">values</span> (<span class=\"string\">'Arche'</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Updating\"><a href=\"#Updating\" class=\"headerlink\" title=\"Updating\"></a>Updating</h1><p>UPDATE 语句</p>\n<h2 id=\"Updating-a-Single-Row\"><a href=\"#Updating-a-Single-Row\" class=\"headerlink\" title=\"Updating a Single Row\"></a>Updating a Single Row</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> payment_total = invoice_total * <span class=\"number\">0.5</span>, payment_data = due_date</span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id = <span class=\"number\">3</span>; <span class=\"comment\">-- 更新client_id 为3 或者是4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Updating-Multiple-Rows\"><a href=\"#Updating-Multiple-Rows\" class=\"headerlink\" title=\"Updating Multiple Rows\"></a>Updating Multiple Rows</h2><p>IN 操作符号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> payment_total = invoice_total * <span class=\"number\">0.5</span>, payment_data = due_date</span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">in</span> (<span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">-- 更新client_id 为3 或者是4</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Using-Subqueries-in-Updates\"><a href=\"#Using-Subqueries-in-Updates\" class=\"headerlink\" title=\"Using Subqueries in Updates\"></a>Using Subqueries in Updates</h1><p>子表达式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> payment_total = invoice_total * <span class=\"number\">0.5</span>, payment_data = d(ue_date</span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">in</span> (</span><br><span class=\"line\">  <span class=\"keyword\">select</span> client_id</span><br><span class=\"line\">  <span class=\"keyword\">from</span> clients</span><br><span class=\"line\">  <span class=\"keyword\">where</span> state <span class=\"keyword\">in</span> (<span class=\"string\">'CA'</span>, <span class=\"string\">'NY'</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Deleting-Rows\"><a href=\"#Deleting-Rows\" class=\"headerlink\" title=\"Deleting Rows\"></a>Deleting Rows</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">in</span> (</span><br><span class=\"line\">  <span class=\"keyword\">select</span> client_id <span class=\"keyword\">from</span> clients</span><br><span class=\"line\">  <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> = <span class=\"string\">\"Myworks\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>这篇文章覆盖了 mysql 的常用知识，比如常用的语句 Select,Where ，常用的操作符 IN,BETWEEN, AND…常用的连接如 Inner Join, Self Join, 等等等。。。</p>\n<p>这篇文章是<a href=\"https://www.youtube.com/watch?v=7S_tz1z_5bA&list=WL&index=6&t=1881s&ab_channel=ProgrammingwithMosh\" target=\"_blank\" rel=\"noopener\">YouTube: MySQL Tutorial for Beginner - Programming with Mosh</a>的笔记</p>","more":"<h1 id=\"The-SELECT-Clause\"><a href=\"#The-SELECT-Clause\" class=\"headerlink\" title=\"The SELECT Clause\"></a>The SELECT Clause</h1><h2 id=\"筛选出特定的行\"><a href=\"#筛选出特定的行\" class=\"headerlink\" title=\"筛选出特定的行\"></a>筛选出特定的行</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- first_name, last_name 是表名对应的数据项,</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> first_name, last_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数学（加减乘除）计算-和-as-别名使用\"><a href=\"#数学（加减乘除）计算-和-as-别名使用\" class=\"headerlink\" title=\"数学（加减乘除）计算 和 as 别名使用\"></a>数学（加减乘除）计算 和 as 别名使用</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  last_name,</span><br><span class=\"line\">  first_name,</span><br><span class=\"line\">  points,</span><br><span class=\"line\">  (points + <span class=\"number\">10</span>) * <span class=\"number\">100</span> <span class=\"keyword\">as</span> <span class=\"string\">'discount factor'</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> customers</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"select-去重-distinct\"><a href=\"#select-去重-distinct\" class=\"headerlink\" title=\"select 去重 - distinct\"></a>select 去重 - distinct</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> state <span class=\"keyword\">from</span> customer;</span><br><span class=\"line\"><span class=\"comment\">-- VA VA CO FL TX</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> state <span class=\"keyword\">from</span> customer;</span><br><span class=\"line\"><span class=\"comment\">-- VA CO FL TX</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习：\"><a href=\"#练习：\" class=\"headerlink\" title=\"练习：\"></a>练习：</h2><p>返回数据库中所有的商品并标上打 9 折的价格</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- return all products</span></span><br><span class=\"line\"><span class=\"comment\">-- name</span></span><br><span class=\"line\"><span class=\"comment\">-- unit price</span></span><br><span class=\"line\"><span class=\"comment\">-- new price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  <span class=\"keyword\">name</span>,</span><br><span class=\"line\">  unit_price,</span><br><span class=\"line\">  unit_price * <span class=\"number\">1.1</span> <span class=\"keyword\">as</span> new_price</span><br><span class=\"line\"><span class=\"keyword\">from</span> product</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-WHERE-Clause\"><a href=\"#The-WHERE-Clause\" class=\"headerlink\" title=\"The WHERE Clause\"></a>The WHERE Clause</h1><p>mysql 的字符检索策略: utf8_general_ci 是不区分大小的,也就是说下面两个语法相同</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> username = <span class=\"string\">'admin'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">password</span> = <span class=\"string\">'admin'</span></span><br><span class=\"line\"><span class=\"comment\">-- ==</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> username = <span class=\"string\">'ADMIN'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">password</span> = <span class=\"string\">'Admin'</span></span><br></pre></td></tr></table></figure>\n\n<p>解决方法： <a href=\"https://blog.csdn.net/Veir_123/article/details/73730751\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Veir_123/article/details/73730751</a></p>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 大于/小于</span></span><br><span class=\"line\"><span class=\"comment\">-- &gt; , &gt;= , &lt; &lt;=,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不等于</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> Customer <span class=\"keyword\">where</span> state != <span class=\"string\">'va'</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> Customer <span class=\"keyword\">where</span> state &lt;&gt; <span class=\"string\">'va'</span></span><br><span class=\"line\"><span class=\"comment\">-- !==, &lt;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多条件查询\"><a href=\"#多条件查询\" class=\"headerlink\" title=\"多条件查询\"></a>多条件查询</h2><h2 id=\"The-AND-OR-and-NOT-Operators\"><a href=\"#The-AND-OR-and-NOT-Operators\" class=\"headerlink\" title=\"The AND, OR, and NOT Operators\"></a>The AND, OR, and NOT Operators</h2><p>and 并且： 找出出生年月在 1990/01/01 之后的并且 分数大于 1000</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> birth_data &gt; <span class=\"string\">'1990-01-01'</span> <span class=\"keyword\">and</span> points &gt; <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n\n<p>NOT 非 找出出生年月在 1990/01/01 之后, 分数不小于等于 1000 的人</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> birth_data &gt; <span class=\"string\">'1990/01/01'</span> <span class=\"keyword\">not</span> point &lt;= <span class=\"number\">1000</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以使用 （）来提升优先级<br>注意：and 优先级是高于 OR 的，我们为了方便理解，增加了（）来主动提升优先级</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> birth_data &gt; <span class=\"string\">'1990-01-01'</span></span><br><span class=\"line\">  <span class=\"keyword\">OR</span> (points &gt; <span class=\"number\">1000</span> <span class=\"keyword\">AND</span> state = <span class=\"string\">'VA'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>练习：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- from the order_items table, get the order_items</span></span><br><span class=\"line\"><span class=\"comment\">-- for order #6</span></span><br><span class=\"line\"><span class=\"comment\">-- where the total price is greater than 30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> order_items</span><br><span class=\"line\"><span class=\"keyword\">where</span> order_id = <span class=\"number\">6</span> <span class=\"keyword\">and</span> unit_price * quantity &gt; <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-IN-Operator\"><a href=\"#The-IN-Operator\" class=\"headerlink\" title=\"The IN Operator\"></a>The IN Operator</h2><p>当多个 OR 语句来联合查询，我们可以使用 IN 来代替。<br>例子：找出在’VA’或者 ‘FL’或者 ‘GA’这三个州的顾客</p>\n<p>OR</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> state = <span class=\"string\">'VA'</span> <span class=\"keyword\">OR</span> state = <span class=\"string\">'FL'</span> <span class=\"keyword\">OR</span> state = <span class=\"string\">'GA'</span></span><br></pre></td></tr></table></figure>\n\n<p>IN</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> state <span class=\"keyword\">IN</span>(<span class=\"string\">'VA'</span>, <span class=\"string\">'FL'</span>, <span class=\"string\">'GA'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>例子：找出不在’VA’或者 ‘FL’或者 ‘GA’这三个州的顾客</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> state <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span>(<span class=\"string\">'VA'</span>, <span class=\"string\">'FL'</span>, <span class=\"string\">'GA'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>练习：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- return product with</span></span><br><span class=\"line\"><span class=\"comment\">--  quantity in stock equal to 49, 38, 72</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> products</span><br><span class=\"line\"><span class=\"keyword\">where</span> quantity_in_stock <span class=\"keyword\">in</span>(<span class=\"number\">49</span>, <span class=\"number\">38</span>, <span class=\"number\">72</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-BETWEEN-Operator\"><a href=\"#The-BETWEEN-Operator\" class=\"headerlink\" title=\"The BETWEEN Operator\"></a>The BETWEEN Operator</h2><p>在什么之间</p>\n<p>AND</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> points &gt;= <span class=\"number\">1000</span> <span class=\"keyword\">AND</span> points &lt;= <span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>\n\n<p>Between</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> points <span class=\"keyword\">between</span>(<span class=\"number\">1000</span>, <span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-LIKE-Operator\"><a href=\"#The-LIKE-Operator\" class=\"headerlink\" title=\"The LIKE Operator\"></a>The LIKE Operator</h2><p>模糊查询</p>\n<ul>\n<li><code>%</code>符号代表 0 ～多个字符<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 找出所有last_name以admin开头的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name <span class=\"keyword\">like</span> <span class=\"string\">'admin%'</span></span><br><span class=\"line\"><span class=\"comment\">-- 找出所有last_name 包含了admin 的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name <span class=\"keyword\">like</span> <span class=\"string\">'%admin%'</span></span><br></pre></td></tr></table></figure></li>\n<li><code>_</code>表示 1 个字符<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 找出所有last_name 以y结尾，长度为5的 customer</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name <span class=\"keyword\">like</span> <span class=\"string\">'____y'</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- get the customer whose</span></span><br><span class=\"line\"><span class=\"comment\">--  addresses contain TRAIL or AVENUE</span></span><br><span class=\"line\"><span class=\"comment\">--  phone numbers end with 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> (address <span class=\"keyword\">like</span> <span class=\"string\">'%TRAIL%'</span> <span class=\"keyword\">OR</span> address <span class=\"keyword\">like</span> <span class=\"string\">'%AVENUE%'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">and</span> phone_number <span class=\"keyword\">like</span> <span class=\"string\">'%9'</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-REGEXP-Operator\"><a href=\"#The-REGEXP-Operator\" class=\"headerlink\" title=\"The REGEXP Operator\"></a>The REGEXP Operator</h2><p>正则表达式更加灵活，可以实现和 like 相同的效果</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 找出所有last_name以admin开头的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name REGEXP <span class=\"string\">'^admin'</span></span><br><span class=\"line\"><span class=\"comment\">-- 找出所有last_name 包含了admin 的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name REGEXP <span class=\"string\">'admin'</span></span><br><span class=\"line\"><span class=\"comment\">-- 找出所有last_name 以admin结尾 的顾客</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> last_name REGEXP <span class=\"string\">'admin$'</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- get the customer whose</span></span><br><span class=\"line\"><span class=\"comment\">--  addresses contain TRAIL or AVENUE</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">where</span> address REGEXP <span class=\"string\">'TRAIL|AVENUE'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-IS-NULL-Operator\"><a href=\"#The-IS-NULL-Operator\" class=\"headerlink\" title=\"The IS NULL Operator\"></a>The IS NULL Operator</h2><p>判断字段是否为 null</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 找出手机号为空的用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> phone <span class=\"keyword\">is</span> <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">-- 找出手机号不为空的用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">where</span> phone <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-ORDER-BY-Operator\"><a href=\"#The-ORDER-BY-Operator\" class=\"headerlink\" title=\"The ORDER BY Operator\"></a>The ORDER BY Operator</h2><p>排序: 默认情况下以 id 排序，如果想要改变查询结果的排序规则，需要使用 order by 操作符号，如果想要倒序排，则需要额外加上 DESC</p>\n<p>注意： order by 使用的字段是 select 设置的，支持使用 as 别名，进行动态计算，具体参考这块的练习</p>\n<p>按照用户的出生日期倒序排列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> birth_date <span class=\"keyword\">desc</span></span><br></pre></td></tr></table></figure>\n\n<p>如果用户出生日期相同按照，所在州进行再次排序</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> birth_data <span class=\"keyword\">desc</span>, state <span class=\"keyword\">desc</span></span><br></pre></td></tr></table></figure>\n\n<p>练习： 按照订单 quantity 和 unit_price 构成的总价来排序订单</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *, quantity * unit_price <span class=\"keyword\">as</span> total_price</span><br><span class=\"line\"><span class=\"keyword\">from</span> order_items</span><br><span class=\"line\"><span class=\"keyword\">where</span> order_id =<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> total_price <span class=\"keyword\">desc</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-LIMIT-Operator\"><a href=\"#The-LIMIT-Operator\" class=\"headerlink\" title=\"The LIMIT Operator\"></a>The LIMIT Operator</h2><p>限制数据库返回的 customer 个数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 限制返回的数量为3个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">limit</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>选择 6 条数据后的 3 条数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> customer <span class=\"keyword\">limit</span> <span class=\"number\">6</span>, <span class=\"number\">3</span> <span class=\"comment\">-- offset 6, pick 3</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>join 可以实现将多张不同的表的数据关联在一起</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers <span class=\"keyword\">on</span> customer.customer_id = orders.customer_id</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>on：两个表是如何关联在一起的, 上述代码表示 通过两边的 customer_id 进行关联</li>\n</ul>\n<h3 id=\"join-返回-指定-table-下的-column\"><a href=\"#join-返回-指定-table-下的-column\" class=\"headerlink\" title=\"join 返回 指定 table 下的 column\"></a>join 返回 指定 table 下的 column</h3><p>之间选择 customer_id 会抛出错误，因为 orders 和 customers 都有相同的 customer_id 选项，我们可以通过 customers.customer_id 来指定返回具体 customer_id</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> orders.customer_id</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers <span class=\"keyword\">on</span> customer.customer_id = orders.customer_id</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"为表名设置-alias\"><a href=\"#为表名设置-alias\" class=\"headerlink\" title=\"为表名设置 alias\"></a>为表名设置 alias</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> o.customer_id</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers c <span class=\"keyword\">on</span> c.customer_id = o.customer_id</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> p.product_id, product_name, unit_price</span><br><span class=\"line\"><span class=\"keyword\">from</span> order_items oi</span><br><span class=\"line\"><span class=\"keyword\">join</span> product p <span class=\"keyword\">on</span> p.product.product_id = oi.product_id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Self-Joins\"><a href=\"#Self-Joins\" class=\"headerlink\" title=\"Self Joins\"></a>Self Joins</h2><p>self join 表示自己和自己 join ，有点像是递归那味，用处如下情景</p>\n<p>有个雇员表，包括了雇员的信息和他所属的上级的 id，我们现在要返回 雇员的 id，姓名和他的上级 的名称</p>\n<p>employees</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>report_to</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>雇员 1</td>\n<td>666</td>\n</tr>\n<tr>\n<td>2</td>\n<td>雇员 2</td>\n<td>666</td>\n</tr>\n<tr>\n<td>3</td>\n<td>雇员 3</td>\n<td>666</td>\n</tr>\n<tr>\n<td>4</td>\n<td>雇员 4</td>\n<td>666</td>\n</tr>\n<tr>\n<td>666</td>\n<td>市场部经理</td>\n<td>9527</td>\n</tr>\n<tr>\n<td>11</td>\n<td>雇员 11</td>\n<td>777</td>\n</tr>\n<tr>\n<td>22</td>\n<td>雇员 22</td>\n<td>777</td>\n</tr>\n<tr>\n<td>33</td>\n<td>雇员 33</td>\n<td>777</td>\n</tr>\n<tr>\n<td>44</td>\n<td>雇员 44</td>\n<td>777</td>\n</tr>\n<tr>\n<td>777</td>\n<td>技术部经理</td>\n<td>9527</td>\n</tr>\n<tr>\n<td>9527</td>\n<td>CEO</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> e.id, e.name, m.name <span class=\"keyword\">as</span> manage</span><br><span class=\"line\"><span class=\"keyword\">from</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">join</span> employees m <span class=\"keyword\">on</span> e.report_to = m.id</span><br></pre></td></tr></table></figure>\n\n<p>得到</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>manager</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>雇员 1</td>\n<td>市场部经理</td>\n</tr>\n<tr>\n<td>2</td>\n<td>雇员 2</td>\n<td>市场部经理</td>\n</tr>\n<tr>\n<td>3</td>\n<td>雇员 3</td>\n<td>市场部经理</td>\n</tr>\n<tr>\n<td>4</td>\n<td>雇员 4</td>\n<td>市场部经理</td>\n</tr>\n<tr>\n<td>666</td>\n<td>市场部经理</td>\n<td>CEO</td>\n</tr>\n<tr>\n<td>11</td>\n<td>雇员 11</td>\n<td>技术部经理</td>\n</tr>\n<tr>\n<td>22</td>\n<td>雇员 22</td>\n<td>技术部经理</td>\n</tr>\n<tr>\n<td>33</td>\n<td>雇员 33</td>\n<td>技术部经理</td>\n</tr>\n<tr>\n<td>44</td>\n<td>雇员 44</td>\n<td>技术部经理</td>\n</tr>\n<tr>\n<td>777</td>\n<td>技术部经理</td>\n<td>CEO</td>\n</tr>\n</tbody></table>\n<h2 id=\"Joining-Multiple-Tables\"><a href=\"#Joining-Multiple-Tables\" class=\"headerlink\" title=\"Joining Multiple Tables\"></a>Joining Multiple Tables</h2><p>table1: orders</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>customer_id</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>zlaorlaz_qe</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>table2: customers</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>shancw</td>\n</tr>\n</tbody></table>\n<p>table3: order_statuses</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>processed</td>\n</tr>\n<tr>\n<td>2</td>\n<td>shipped</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Delivered</td>\n</tr>\n</tbody></table>\n<p>需要的效果</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>customer_name</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>zlaorlaz_qe</td>\n<td>shancw</td>\n<td>processed</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> o.id, o.name, c.customer_name <span class=\"keyword\">as</span> customer_name, os.name <span class=\"keyword\">as</span> <span class=\"keyword\">status</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers c</span><br><span class=\"line\">  <span class=\"keyword\">on</span> o.customer_id = customers.id</span><br><span class=\"line\"><span class=\"keyword\">join</span> order_statuses os</span><br><span class=\"line\">  <span class=\"keyword\">on</span> o.status = order_statuses.id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Compound-Join-Conditions\"><a href=\"#Compound-Join-Conditions\" class=\"headerlink\" title=\"Compound Join Conditions\"></a>Compound Join Conditions</h2><p>对于主键不止一个的情况，如果需要使用 join，那么需要额外使用 AND 操作</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> order_items oi</span><br><span class=\"line\"><span class=\"keyword\">join</span> order_item_notes oin</span><br><span class=\"line\">  <span class=\"keyword\">on</span> oi.order_id = oin.order_id</span><br><span class=\"line\">  <span class=\"keyword\">and</span> oi.product_id = oin.product_id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Implicit-Join-Syntax\"><a href=\"#Implicit-Join-Syntax\" class=\"headerlink\" title=\"Implicit Join Syntax\"></a>Implicit Join Syntax</h2><p>使用 where 关键字实现 join，不推荐使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers c</span><br><span class=\"line\">  <span class=\"keyword\">on</span> o.customer_id = c.customer_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Implpicit Join Syntax</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o, customers c</span><br><span class=\"line\"><span class=\"keyword\">where</span> o.customer_id = c.customer_id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Outer-Joins\"><a href=\"#Outer-Joins\" class=\"headerlink\" title=\"Outer Joins\"></a>Outer Joins</h2><h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><p>我们上面的所有 join 都是 inner join，我们使用个简单的例子来说明 order join 和 inner join 的区别</p>\n<p>order:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>进贡</td>\n</tr>\n</tbody></table>\n<p>customer:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>order_id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>shancw</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>john</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<h4 id=\"inner-join\"><a href=\"#inner-join\" class=\"headerlink\" title=\"inner join\"></a>inner join</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> order.id order.name <span class=\"keyword\">as</span> order_name customer.name <span class=\"keyword\">as</span> customer_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">join</span> <span class=\"keyword\">order</span></span><br><span class=\"line\">  <span class=\"keyword\">on</span> customer.order_id = order.id</span><br></pre></td></tr></table></figure>\n\n<p>得到:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>order_name</th>\n<th>customer_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>进贡</td>\n<td>shancw</td>\n</tr>\n</tbody></table>\n<p>因为我们的 on 是一个条件判断，只有带有 order_id 的 customer 才会被匹配出来</p>\n<h4 id=\"outer-join\"><a href=\"#outer-join\" class=\"headerlink\" title=\"outer join\"></a>outer join</h4><p>outer join 有两种，left join 和 right join</p>\n<p>left join</p>\n<p>保留左侧的所有行数据，即使没有正确匹配</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> order.id order.name <span class=\"keyword\">as</span> order_name customer.name <span class=\"keyword\">as</span> customer_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> <span class=\"keyword\">order</span></span><br><span class=\"line\">  <span class=\"keyword\">on</span> customer.order_id = order.id</span><br></pre></td></tr></table></figure>\n\n<p>保留右侧的所有行数据，即使没有正确匹配</p>\n<p>right join</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> order.id order.name <span class=\"keyword\">as</span> order_name customer.name <span class=\"keyword\">as</span> customer_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> customer</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> <span class=\"keyword\">order</span></span><br><span class=\"line\">  <span class=\"keyword\">on</span> customer.order_id = order.id</span><br></pre></td></tr></table></figure>\n\n<p>得到:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>order_name</th>\n<th>customer_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>进贡</td>\n<td>shancw</td>\n</tr>\n<tr>\n<td>2</td>\n<td>null</td>\n<td>john</td>\n</tr>\n</tbody></table>\n<h2 id=\"The-USING-Clause\"><a href=\"#The-USING-Clause\" class=\"headerlink\" title=\"The USING Clause\"></a>The USING Clause</h2><p>USING 语句是对 on 的一种简化，如果两个 table 的比较字段相同，那么可以用 USING 代替</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  o.order_id,</span><br><span class=\"line\">  c.first_name</span><br><span class=\"line\"><span class=\"keyword\">from</span> orders o</span><br><span class=\"line\"><span class=\"keyword\">join</span> customers c</span><br><span class=\"line\">  <span class=\"comment\">-- on o.customer_id = c.customer_id</span></span><br><span class=\"line\">  <span class=\"keyword\">USING</span> (customer_id)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cross-Joins\"><a href=\"#Cross-Joins\" class=\"headerlink\" title=\"Cross Joins\"></a>Cross Joins</h2><p>笛卡尔乘积, 将所有可能性相乘</p>\n<p>table1 : a, b, c, d, e<br>table2 : A, B, C, D, E</p>\n<p>cross join table: aA,aB,aC,aD,aE, …., eA,eB,eC,eD,eE<br><img src=\"https://www.w3resource.com/w3r_images/cross-join-round.png\" alt=\"cross join pic\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> xxx, yyy</span><br><span class=\"line\"><span class=\"keyword\">from</span> table1</span><br><span class=\"line\"><span class=\"keyword\">cross</span> <span class=\"keyword\">join</span> table2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Unions\"><a href=\"#Unions\" class=\"headerlink\" title=\"Unions\"></a>Unions</h1><p>UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> expression1, expression2, ... expression_n</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">tables</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> conditions]</span><br><span class=\"line\"><span class=\"keyword\">UNION</span> [<span class=\"keyword\">ALL</span> | <span class=\"keyword\">DISTINCT</span>]</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> expression1, expression2, ... expression_n</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> <span class=\"keyword\">tables</span></span><br><span class=\"line\">[<span class=\"keyword\">WHERE</span> conditions];</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Inserting\"><a href=\"#Inserting\" class=\"headerlink\" title=\"Inserting\"></a>Inserting</h1><p>新增数据</p>\n<h2 id=\"Inserting-a-Single-Row\"><a href=\"#Inserting-a-Single-Row\" class=\"headerlink\" title=\"Inserting a Single Row\"></a>Inserting a Single Row</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> customers (</span><br><span class=\"line\">  first_name,</span><br><span class=\"line\">  last_name,</span><br><span class=\"line\">  phone,</span><br><span class=\"line\">  address</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">-- first_name, last_name, phone, address</span></span><br><span class=\"line\"><span class=\"keyword\">values</span> (</span><br><span class=\"line\">  <span class=\"string\">'John'</span>,</span><br><span class=\"line\">  <span class=\"string\">'Smith'</span>,</span><br><span class=\"line\">  <span class=\"number\">188888888888</span>,</span><br><span class=\"line\">  <span class=\"string\">'New York'</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Inserting-Multiple-Rows\"><a href=\"#Inserting-Multiple-Rows\" class=\"headerlink\" title=\"Inserting Multiple Rows\"></a>Inserting Multiple Rows</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> customers (first_name)</span><br><span class=\"line\"><span class=\"comment\">-- first_name, last_name, phone, address</span></span><br><span class=\"line\"><span class=\"keyword\">values</span> (<span class=\"string\">'John'</span>)</span><br><span class=\"line\"><span class=\"keyword\">values</span> (<span class=\"string\">'Arche'</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Updating\"><a href=\"#Updating\" class=\"headerlink\" title=\"Updating\"></a>Updating</h1><p>UPDATE 语句</p>\n<h2 id=\"Updating-a-Single-Row\"><a href=\"#Updating-a-Single-Row\" class=\"headerlink\" title=\"Updating a Single Row\"></a>Updating a Single Row</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> payment_total = invoice_total * <span class=\"number\">0.5</span>, payment_data = due_date</span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id = <span class=\"number\">3</span>; <span class=\"comment\">-- 更新client_id 为3 或者是4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Updating-Multiple-Rows\"><a href=\"#Updating-Multiple-Rows\" class=\"headerlink\" title=\"Updating Multiple Rows\"></a>Updating Multiple Rows</h2><p>IN 操作符号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> payment_total = invoice_total * <span class=\"number\">0.5</span>, payment_data = due_date</span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">in</span> (<span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">-- 更新client_id 为3 或者是4</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Using-Subqueries-in-Updates\"><a href=\"#Using-Subqueries-in-Updates\" class=\"headerlink\" title=\"Using Subqueries in Updates\"></a>Using Subqueries in Updates</h1><p>子表达式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">set</span> payment_total = invoice_total * <span class=\"number\">0.5</span>, payment_data = d(ue_date</span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">in</span> (</span><br><span class=\"line\">  <span class=\"keyword\">select</span> client_id</span><br><span class=\"line\">  <span class=\"keyword\">from</span> clients</span><br><span class=\"line\">  <span class=\"keyword\">where</span> state <span class=\"keyword\">in</span> (<span class=\"string\">'CA'</span>, <span class=\"string\">'NY'</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Deleting-Rows\"><a href=\"#Deleting-Rows\" class=\"headerlink\" title=\"Deleting Rows\"></a>Deleting Rows</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> invoices</span><br><span class=\"line\"><span class=\"keyword\">where</span> client_id <span class=\"keyword\">in</span> (</span><br><span class=\"line\">  <span class=\"keyword\">select</span> client_id <span class=\"keyword\">from</span> clients</span><br><span class=\"line\">  <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> = <span class=\"string\">\"Myworks\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>"},{"title":"Node.js rename files","toc":true,"date":"2022-04-05T16:00:00.000Z","_content":"\n最近按照 网上的 高阶追剧流程搞了一套 emby + sonarr + radarr + jacket 的私有家庭媒体库。对于美剧字幕的搜索使用 chinese_subfinder，但是偶尔会出现整季字幕查询不到，或者某一集字幕缺失的情况。\n\n对于上述问题，手动重命名显然不符合我们程序员的脾气，因此就有了如下文章，写个 js 脚本自动替换[字幕库](http://zimuku.org/)的文件命名，使他符合 emby 的字幕规范\n\n<!-- more -->\n\n## 先上代码\n\n```js\n// Import filesystem module\nconst fs = require(\"fs\");\n\n// List all the filenames before renaming\ngetCurrentFilenames();\n\nfunction getCurrentFilenames() {\n  const dirName = readSyncByfs();\n  console.log(dirName, __dirname);\n  fs.readdirSync(dirName).forEach((file) => {\n    replaceName(file, dirName);\n    // console.log(file);\n  });\n}\n\nfunction replaceName(originName, staticPath) {\n  fs.rename(\n    `${staticPath}\\\\${originName}`,\n    `${staticPath}\\\\${regExpReplace(originName)}`,\n    (err) => {\n      if (err) throw err;\n      console.log(\n        `${staticPath}\\\\${originName}------------>${staticPath}\\\\${regExpReplace(\n          originName\n        )}`\n      );\n    }\n  );\n  // ---- utils -----\n  function regExpReplace(str) {\n    return str.replace(\n      /(.*)\\.(S\\d+E\\d+)\\.(\\w+)(.*)/,\n      (match, group1, group2, group3) => {\n        return `${group1.replace(\n          /\\./g,\n          \" \"\n        )} - ${group2} - ${group3}.chinese(简体).ass`;\n      }\n    );\n  }\n}\n\nfunction readSyncByfs(tips) {\n  tips = tips || \"> \";\n  process.stdout.write(tips);\n  process.stdin.pause();\n\n  const buf = Buffer.allocUnsafe(10000);\n  const response = fs.readSync(process.stdin.fd, buf, 0, 10000, 0);\n  process.stdin.end();\n  return buf.toString(\"utf8\", 0, response).trim();\n}\n```\n\n使用方式：\n\n> 需要先安装 nodejs\n\n1. 找到字幕库的字幕文件夹路径，比如：`C:\\Users\\shancw\\Downloads\\[zmk.pw]绝命律师.第3季.全10集[8.7]Better.Call.Saul.S03.1080p.WEB-DL.DD5.1.H264-RARBG.ChsEng`\n2. 在命令行中输入：`node rename-files.js` 这里的文件名就是上述代码的名称\n3. 按照提示输入文件夹路径\n4. 完成\n\n涉及到的知识点\n\n- nodejs 读取用户输入\n\n  ```js\n  function readSyncByfs(tips) {\n    tips = tips || \"> \";\n    process.stdout.write(tips);\n    process.stdin.pause();\n\n    const buf = Buffer.allocUnsafe(10000);\n    const response = fs.readSync(process.stdin.fd, buf, 0, 10000, 0);\n    process.stdin.end();\n    return buf.toString(\"utf8\", 0, response).trim();\n  }\n  ```\n\n* 根据用户输入的路径，获取当前路径下的所有文件\n\n```js\nfunction getCurrentFilenames() {\n  const dirName = readSyncByfs();\n  fs.readdirSync(dirName).forEach((file) => replaceName(file, dirName));\n}\n```\n\n- 正则替换字幕库的命名格式\n  - 文件夹重命名：fs.rename\n  - 正则替换: str.replace(/regexp/g, replacement)\n  ```js\n  function replaceName(originName, staticPath) {\n    fs.rename(\n      `${staticPath}\\\\${originName}`,\n      `${staticPath}\\\\${regExpReplace(originName)}`,\n      (err) => {\n        if (err) throw err;\n        console.log(\n          `${staticPath}\\\\${originName}------------>${staticPath}\\\\${regExpReplace(\n            originName\n          )}`\n        );\n      }\n    );\n    // ---- utils -----\n    function regExpReplace(str) {\n      return str.replace(\n        /(.*)\\.(S\\d+E\\d+)\\.(\\w+)(.*)/,\n        (match, group1, group2, group3) => {\n          return `${group1.replace(\n            /\\./g,\n            \" \"\n          )} - ${group2} - ${group3}.chinese(简体).ass`;\n        }\n      );\n    }\n  }\n  ```\n","source":"_posts/nodejs-rename-files.md","raw":"---\ntitle: Node.js rename files\ncategories: [杂项]\ntags: [nodejs, emby, chinese_subfinder]\ntoc: true\ndate: 2022/4/6\n---\n\n最近按照 网上的 高阶追剧流程搞了一套 emby + sonarr + radarr + jacket 的私有家庭媒体库。对于美剧字幕的搜索使用 chinese_subfinder，但是偶尔会出现整季字幕查询不到，或者某一集字幕缺失的情况。\n\n对于上述问题，手动重命名显然不符合我们程序员的脾气，因此就有了如下文章，写个 js 脚本自动替换[字幕库](http://zimuku.org/)的文件命名，使他符合 emby 的字幕规范\n\n<!-- more -->\n\n## 先上代码\n\n```js\n// Import filesystem module\nconst fs = require(\"fs\");\n\n// List all the filenames before renaming\ngetCurrentFilenames();\n\nfunction getCurrentFilenames() {\n  const dirName = readSyncByfs();\n  console.log(dirName, __dirname);\n  fs.readdirSync(dirName).forEach((file) => {\n    replaceName(file, dirName);\n    // console.log(file);\n  });\n}\n\nfunction replaceName(originName, staticPath) {\n  fs.rename(\n    `${staticPath}\\\\${originName}`,\n    `${staticPath}\\\\${regExpReplace(originName)}`,\n    (err) => {\n      if (err) throw err;\n      console.log(\n        `${staticPath}\\\\${originName}------------>${staticPath}\\\\${regExpReplace(\n          originName\n        )}`\n      );\n    }\n  );\n  // ---- utils -----\n  function regExpReplace(str) {\n    return str.replace(\n      /(.*)\\.(S\\d+E\\d+)\\.(\\w+)(.*)/,\n      (match, group1, group2, group3) => {\n        return `${group1.replace(\n          /\\./g,\n          \" \"\n        )} - ${group2} - ${group3}.chinese(简体).ass`;\n      }\n    );\n  }\n}\n\nfunction readSyncByfs(tips) {\n  tips = tips || \"> \";\n  process.stdout.write(tips);\n  process.stdin.pause();\n\n  const buf = Buffer.allocUnsafe(10000);\n  const response = fs.readSync(process.stdin.fd, buf, 0, 10000, 0);\n  process.stdin.end();\n  return buf.toString(\"utf8\", 0, response).trim();\n}\n```\n\n使用方式：\n\n> 需要先安装 nodejs\n\n1. 找到字幕库的字幕文件夹路径，比如：`C:\\Users\\shancw\\Downloads\\[zmk.pw]绝命律师.第3季.全10集[8.7]Better.Call.Saul.S03.1080p.WEB-DL.DD5.1.H264-RARBG.ChsEng`\n2. 在命令行中输入：`node rename-files.js` 这里的文件名就是上述代码的名称\n3. 按照提示输入文件夹路径\n4. 完成\n\n涉及到的知识点\n\n- nodejs 读取用户输入\n\n  ```js\n  function readSyncByfs(tips) {\n    tips = tips || \"> \";\n    process.stdout.write(tips);\n    process.stdin.pause();\n\n    const buf = Buffer.allocUnsafe(10000);\n    const response = fs.readSync(process.stdin.fd, buf, 0, 10000, 0);\n    process.stdin.end();\n    return buf.toString(\"utf8\", 0, response).trim();\n  }\n  ```\n\n* 根据用户输入的路径，获取当前路径下的所有文件\n\n```js\nfunction getCurrentFilenames() {\n  const dirName = readSyncByfs();\n  fs.readdirSync(dirName).forEach((file) => replaceName(file, dirName));\n}\n```\n\n- 正则替换字幕库的命名格式\n  - 文件夹重命名：fs.rename\n  - 正则替换: str.replace(/regexp/g, replacement)\n  ```js\n  function replaceName(originName, staticPath) {\n    fs.rename(\n      `${staticPath}\\\\${originName}`,\n      `${staticPath}\\\\${regExpReplace(originName)}`,\n      (err) => {\n        if (err) throw err;\n        console.log(\n          `${staticPath}\\\\${originName}------------>${staticPath}\\\\${regExpReplace(\n            originName\n          )}`\n        );\n      }\n    );\n    // ---- utils -----\n    function regExpReplace(str) {\n      return str.replace(\n        /(.*)\\.(S\\d+E\\d+)\\.(\\w+)(.*)/,\n        (match, group1, group2, group3) => {\n          return `${group1.replace(\n            /\\./g,\n            \" \"\n          )} - ${group2} - ${group3}.chinese(简体).ass`;\n        }\n      );\n    }\n  }\n  ```\n","slug":"nodejs-rename-files","published":1,"updated":"2022-04-06T15:24:09.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k8004egoswelhcbl4h","content":"<p>最近按照 网上的 高阶追剧流程搞了一套 emby + sonarr + radarr + jacket 的私有家庭媒体库。对于美剧字幕的搜索使用 chinese_subfinder，但是偶尔会出现整季字幕查询不到，或者某一集字幕缺失的情况。</p>\n<p>对于上述问题，手动重命名显然不符合我们程序员的脾气，因此就有了如下文章，写个 js 脚本自动替换<a href=\"http://zimuku.org/\" target=\"_blank\" rel=\"noopener\">字幕库</a>的文件命名，使他符合 emby 的字幕规范</p>\n<a id=\"more\"></a>\n\n<h2 id=\"先上代码\"><a href=\"#先上代码\" class=\"headerlink\" title=\"先上代码\"></a>先上代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Import filesystem module</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List all the filenames before renaming</span></span><br><span class=\"line\">getCurrentFilenames();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentFilenames</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dirName = readSyncByfs();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dirName, __dirname);</span><br><span class=\"line\">  fs.readdirSync(dirName).forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    replaceName(file, dirName);</span><br><span class=\"line\">    <span class=\"comment\">// console.log(file);</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceName</span>(<span class=\"params\">originName, staticPath</span>) </span>&#123;</span><br><span class=\"line\">  fs.rename(</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;originName&#125;</span>`</span>,</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;regExpReplace(originName)&#125;</span>`</span>,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;originName&#125;</span>------------&gt;<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;regExpReplace(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          originName</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        )&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// ---- utils -----</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regExpReplace</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.replace(</span><br><span class=\"line\">      /(.*)\\.(S\\d+E\\d+)\\.(\\w+)(.*)/,</span><br><span class=\"line\">      (match, group1, group2, group3) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;group1.replace(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"regexp\">/\\./g</span>,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"string\">\" \"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        )&#125;</span> - <span class=\"subst\">$&#123;group2&#125;</span> - <span class=\"subst\">$&#123;group3&#125;</span>.chinese(简体).ass`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readSyncByfs</span>(<span class=\"params\">tips</span>) </span>&#123;</span><br><span class=\"line\">  tips = tips || <span class=\"string\">\"&gt; \"</span>;</span><br><span class=\"line\">  process.stdout.write(tips);</span><br><span class=\"line\">  process.stdin.pause();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buf = Buffer.allocUnsafe(<span class=\"number\">10000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = fs.readSync(process.stdin.fd, buf, <span class=\"number\">0</span>, <span class=\"number\">10000</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  process.stdin.end();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> buf.toString(<span class=\"string\">\"utf8\"</span>, <span class=\"number\">0</span>, response).trim();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方式：</p>\n<blockquote>\n<p>需要先安装 nodejs</p>\n</blockquote>\n<ol>\n<li>找到字幕库的字幕文件夹路径，比如：<code>C:\\Users\\shancw\\Downloads\\[zmk.pw]绝命律师.第3季.全10集[8.7]Better.Call.Saul.S03.1080p.WEB-DL.DD5.1.H264-RARBG.ChsEng</code></li>\n<li>在命令行中输入：<code>node rename-files.js</code> 这里的文件名就是上述代码的名称</li>\n<li>按照提示输入文件夹路径</li>\n<li>完成</li>\n</ol>\n<p>涉及到的知识点</p>\n<ul>\n<li><p>nodejs 读取用户输入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readSyncByfs</span>(<span class=\"params\">tips</span>) </span>&#123;</span><br><span class=\"line\">  tips = tips || <span class=\"string\">\"&gt; \"</span>;</span><br><span class=\"line\">  process.stdout.write(tips);</span><br><span class=\"line\">  process.stdin.pause();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buf = Buffer.allocUnsafe(<span class=\"number\">10000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = fs.readSync(process.stdin.fd, buf, <span class=\"number\">0</span>, <span class=\"number\">10000</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  process.stdin.end();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> buf.toString(<span class=\"string\">\"utf8\"</span>, <span class=\"number\">0</span>, response).trim();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>根据用户输入的路径，获取当前路径下的所有文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentFilenames</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dirName = readSyncByfs();</span><br><span class=\"line\">  fs.readdirSync(dirName).forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> replaceName(file, dirName));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正则替换字幕库的命名格式<ul>\n<li>文件夹重命名：fs.rename</li>\n<li>正则替换: str.replace(/regexp/g, replacement)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceName</span>(<span class=\"params\">originName, staticPath</span>) </span>&#123;</span><br><span class=\"line\">  fs.rename(</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;originName&#125;</span>`</span>,</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;regExpReplace(originName)&#125;</span>`</span>,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;originName&#125;</span>------------&gt;<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;regExpReplace(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          originName</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        )&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// ---- utils -----</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regExpReplace</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.replace(</span><br><span class=\"line\">      /(.*)\\.(S\\d+E\\d+)\\.(\\w+)(.*)/,</span><br><span class=\"line\">      (match, group1, group2, group3) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;group1.replace(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"regexp\">/\\./g</span>,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"string\">\" \"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        )&#125;</span> - <span class=\"subst\">$&#123;group2&#125;</span> - <span class=\"subst\">$&#123;group3&#125;</span>.chinese(简体).ass`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近按照 网上的 高阶追剧流程搞了一套 emby + sonarr + radarr + jacket 的私有家庭媒体库。对于美剧字幕的搜索使用 chinese_subfinder，但是偶尔会出现整季字幕查询不到，或者某一集字幕缺失的情况。</p>\n<p>对于上述问题，手动重命名显然不符合我们程序员的脾气，因此就有了如下文章，写个 js 脚本自动替换<a href=\"http://zimuku.org/\" target=\"_blank\" rel=\"noopener\">字幕库</a>的文件命名，使他符合 emby 的字幕规范</p>","more":"<h2 id=\"先上代码\"><a href=\"#先上代码\" class=\"headerlink\" title=\"先上代码\"></a>先上代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Import filesystem module</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// List all the filenames before renaming</span></span><br><span class=\"line\">getCurrentFilenames();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentFilenames</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dirName = readSyncByfs();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(dirName, __dirname);</span><br><span class=\"line\">  fs.readdirSync(dirName).forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    replaceName(file, dirName);</span><br><span class=\"line\">    <span class=\"comment\">// console.log(file);</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceName</span>(<span class=\"params\">originName, staticPath</span>) </span>&#123;</span><br><span class=\"line\">  fs.rename(</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;originName&#125;</span>`</span>,</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;regExpReplace(originName)&#125;</span>`</span>,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;originName&#125;</span>------------&gt;<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;regExpReplace(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          originName</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        )&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// ---- utils -----</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regExpReplace</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.replace(</span><br><span class=\"line\">      /(.*)\\.(S\\d+E\\d+)\\.(\\w+)(.*)/,</span><br><span class=\"line\">      (match, group1, group2, group3) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;group1.replace(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"regexp\">/\\./g</span>,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"string\">\" \"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        )&#125;</span> - <span class=\"subst\">$&#123;group2&#125;</span> - <span class=\"subst\">$&#123;group3&#125;</span>.chinese(简体).ass`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readSyncByfs</span>(<span class=\"params\">tips</span>) </span>&#123;</span><br><span class=\"line\">  tips = tips || <span class=\"string\">\"&gt; \"</span>;</span><br><span class=\"line\">  process.stdout.write(tips);</span><br><span class=\"line\">  process.stdin.pause();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buf = Buffer.allocUnsafe(<span class=\"number\">10000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = fs.readSync(process.stdin.fd, buf, <span class=\"number\">0</span>, <span class=\"number\">10000</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  process.stdin.end();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> buf.toString(<span class=\"string\">\"utf8\"</span>, <span class=\"number\">0</span>, response).trim();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方式：</p>\n<blockquote>\n<p>需要先安装 nodejs</p>\n</blockquote>\n<ol>\n<li>找到字幕库的字幕文件夹路径，比如：<code>C:\\Users\\shancw\\Downloads\\[zmk.pw]绝命律师.第3季.全10集[8.7]Better.Call.Saul.S03.1080p.WEB-DL.DD5.1.H264-RARBG.ChsEng</code></li>\n<li>在命令行中输入：<code>node rename-files.js</code> 这里的文件名就是上述代码的名称</li>\n<li>按照提示输入文件夹路径</li>\n<li>完成</li>\n</ol>\n<p>涉及到的知识点</p>\n<ul>\n<li><p>nodejs 读取用户输入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readSyncByfs</span>(<span class=\"params\">tips</span>) </span>&#123;</span><br><span class=\"line\">  tips = tips || <span class=\"string\">\"&gt; \"</span>;</span><br><span class=\"line\">  process.stdout.write(tips);</span><br><span class=\"line\">  process.stdin.pause();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buf = Buffer.allocUnsafe(<span class=\"number\">10000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = fs.readSync(process.stdin.fd, buf, <span class=\"number\">0</span>, <span class=\"number\">10000</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  process.stdin.end();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> buf.toString(<span class=\"string\">\"utf8\"</span>, <span class=\"number\">0</span>, response).trim();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>根据用户输入的路径，获取当前路径下的所有文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentFilenames</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dirName = readSyncByfs();</span><br><span class=\"line\">  fs.readdirSync(dirName).forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> replaceName(file, dirName));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正则替换字幕库的命名格式<ul>\n<li>文件夹重命名：fs.rename</li>\n<li>正则替换: str.replace(/regexp/g, replacement)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replaceName</span>(<span class=\"params\">originName, staticPath</span>) </span>&#123;</span><br><span class=\"line\">  fs.rename(</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;originName&#125;</span>`</span>,</span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;regExpReplace(originName)&#125;</span>`</span>,</span><br><span class=\"line\">    (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">        <span class=\"string\">`<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;originName&#125;</span>------------&gt;<span class=\"subst\">$&#123;staticPath&#125;</span>\\\\<span class=\"subst\">$&#123;regExpReplace(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          originName</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        )&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// ---- utils -----</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regExpReplace</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.replace(</span><br><span class=\"line\">      /(.*)\\.(S\\d+E\\d+)\\.(\\w+)(.*)/,</span><br><span class=\"line\">      (match, group1, group2, group3) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;group1.replace(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"regexp\">/\\./g</span>,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          <span class=\"string\">\" \"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        )&#125;</span> - <span class=\"subst\">$&#123;group2&#125;</span> - <span class=\"subst\">$&#123;group3&#125;</span>.chinese(简体).ass`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"nginx http proxy 相关API 介绍","toc":true,"date":"2021-02-25T16:00:00.000Z","_content":"\n## [proxy_pass](https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass)\n\n```bash\nSyntax:\tproxy_pass URL;\nDefault:\t—\nContext:\tlocation, if in location, limit_except\n```\n\n### 请求 URI 的转发规则：\n\n- 绝对路径：如果 proxy_pass 的 URL **指定了一个 URI**，此时这个 URI 会替换 请求(request)的 URI.\n  例 1:\n\n  ```conf\n    location /name/ {\n      proxy_pass http://127.0.0.1/remote/;\n    }\n\n    /name/shancw -> http://127.0.0.1/remote/shancw\n  ```\n\n  例 2:\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1/;\n  }\n\n  /name/test.html -> http://127.0.0.1/test.html\n  ```\n\n  例 3：\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1/extra;\n  }\n\n  /name/test.html -> http://127.0.0.1/extratest.html\n  ```\n\n* 相对路径： 如果 proxy_pass 的 URL **没有指定 URI**, 此时请求(request)的 URI 会被拼接到 proxy_pass 的 URL 上\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1;\n  }\n\n  /name/shancw -> http://127.0.0.1/name/shancw\n  ```\n\n应用：[nginx 根据不同 prefix 转接 请求, 实现一个服务器 + 域名托管多个应用服务](https://github.com/shancw96/tech-basis/tree/master/nginx)\n","source":"_posts/nginx-http-proxy.md","raw":"---\ntitle: nginx http proxy 相关API 介绍\ncategories: [运维]\ntags: [nginx]\ntoc: true\ndate: 2021/2/26\n---\n\n## [proxy_pass](https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass)\n\n```bash\nSyntax:\tproxy_pass URL;\nDefault:\t—\nContext:\tlocation, if in location, limit_except\n```\n\n### 请求 URI 的转发规则：\n\n- 绝对路径：如果 proxy_pass 的 URL **指定了一个 URI**，此时这个 URI 会替换 请求(request)的 URI.\n  例 1:\n\n  ```conf\n    location /name/ {\n      proxy_pass http://127.0.0.1/remote/;\n    }\n\n    /name/shancw -> http://127.0.0.1/remote/shancw\n  ```\n\n  例 2:\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1/;\n  }\n\n  /name/test.html -> http://127.0.0.1/test.html\n  ```\n\n  例 3：\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1/extra;\n  }\n\n  /name/test.html -> http://127.0.0.1/extratest.html\n  ```\n\n* 相对路径： 如果 proxy_pass 的 URL **没有指定 URI**, 此时请求(request)的 URI 会被拼接到 proxy_pass 的 URL 上\n\n  ```conf\n  location /name/ {\n    proxy_pass http://127.0.0.1;\n  }\n\n  /name/shancw -> http://127.0.0.1/name/shancw\n  ```\n\n应用：[nginx 根据不同 prefix 转接 请求, 实现一个服务器 + 域名托管多个应用服务](https://github.com/shancw96/tech-basis/tree/master/nginx)\n","slug":"nginx-http-proxy","published":1,"updated":"2021-04-22T08:26:34.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k9004igosw2nqngewm","content":"<h2 id=\"proxy-pass\"><a href=\"#proxy-pass\" class=\"headerlink\" title=\"proxy_pass\"></a><a href=\"https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass\" target=\"_blank\" rel=\"noopener\">proxy_pass</a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tproxy_pass URL;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\tlocation, <span class=\"keyword\">if</span> <span class=\"keyword\">in</span> location, limit_except</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"请求-URI-的转发规则：\"><a href=\"#请求-URI-的转发规则：\" class=\"headerlink\" title=\"请求 URI 的转发规则：\"></a>请求 URI 的转发规则：</h3><ul>\n<li><p>绝对路径：如果 proxy_pass 的 URL <strong>指定了一个 URI</strong>，此时这个 URI 会替换 请求(request)的 URI.<br>例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;shancw -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;shancw</span><br></pre></td></tr></table></figure>\n\n<p>例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;test.html -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;test.html</span><br></pre></td></tr></table></figure>\n\n<p>例 3：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;extra;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;test.html -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;extratest.html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>相对路径： 如果 proxy_pass 的 URL <strong>没有指定 URI</strong>, 此时请求(request)的 URI 会被拼接到 proxy_pass 的 URL 上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;shancw -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;name&#x2F;shancw</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>应用：<a href=\"https://github.com/shancw96/tech-basis/tree/master/nginx\" target=\"_blank\" rel=\"noopener\">nginx 根据不同 prefix 转接 请求, 实现一个服务器 + 域名托管多个应用服务</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"proxy-pass\"><a href=\"#proxy-pass\" class=\"headerlink\" title=\"proxy_pass\"></a><a href=\"https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass\" target=\"_blank\" rel=\"noopener\">proxy_pass</a></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax:\tproxy_pass URL;</span><br><span class=\"line\">Default:\t—</span><br><span class=\"line\">Context:\tlocation, <span class=\"keyword\">if</span> <span class=\"keyword\">in</span> location, limit_except</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"请求-URI-的转发规则：\"><a href=\"#请求-URI-的转发规则：\" class=\"headerlink\" title=\"请求 URI 的转发规则：\"></a>请求 URI 的转发规则：</h3><ul>\n<li><p>绝对路径：如果 proxy_pass 的 URL <strong>指定了一个 URI</strong>，此时这个 URI 会替换 请求(request)的 URI.<br>例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;shancw -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;shancw</span><br></pre></td></tr></table></figure>\n\n<p>例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;test.html -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;test.html</span><br></pre></td></tr></table></figure>\n\n<p>例 3：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;extra;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;test.html -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;extratest.html</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>相对路径： 如果 proxy_pass 的 URL <strong>没有指定 URI</strong>, 此时请求(request)的 URI 会被拼接到 proxy_pass 的 URL 上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;name&#x2F; &#123;</span><br><span class=\"line\">  proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;name&#x2F;shancw -&gt; http:&#x2F;&#x2F;127.0.0.1&#x2F;name&#x2F;shancw</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>应用：<a href=\"https://github.com/shancw96/tech-basis/tree/master/nginx\" target=\"_blank\" rel=\"noopener\">nginx 根据不同 prefix 转接 请求, 实现一个服务器 + 域名托管多个应用服务</a></p>\n"},{"title":"linux常用命令-nslookup","toc":true,"date":"2022-04-10T16:00:00.000Z","_content":"\nNslookup(Name Server Lookup 缩写)：查询Dns服务器，获取域名或ip地址。\n\n<!-- more -->\n\n语法：\n\n```bash\nnslookup [option]\n```\n\nOption 可选项：\n\n+ nslookup google.com\n\n  nslookup 加域名 会显示 域名的IP地址\n\n  ```bash\n  > nslookup google.com\n  Server:\t\tfe80::1%12\n  Address:\tfe80::1%12#53\n  \n  Non-authoritative answer:\n  Name:\tgoogle.com\n  Address: 142.251.42.238\n  ```\n\n+ nslookup 142.251.42.238\n\n  反向dns查询\n\n  ```bash\n  Server:\t\tfe80::1%12\n  Address:\tfe80::1%12#53\n  \n  Non-authoritative answer:\n  238.42.251.142.in-addr.arpa\tname = tsa01s11-in-f14.1e100.net.\n  \n  Authoritative answers can be found from:\n  ```\n\n更多option选项查看 \n\n[nslookup command in linux](https://www.geeksforgeeks.org/nslookup-command-in-linux-with-examples)","source":"_posts/nslookup-linux.md","raw":"---\ntitle: linux常用命令-nslookup\ncategories: [运维]\ntags: [nslookup, dns]\ntoc: true\ndate: 2022/4/11\n---\n\nNslookup(Name Server Lookup 缩写)：查询Dns服务器，获取域名或ip地址。\n\n<!-- more -->\n\n语法：\n\n```bash\nnslookup [option]\n```\n\nOption 可选项：\n\n+ nslookup google.com\n\n  nslookup 加域名 会显示 域名的IP地址\n\n  ```bash\n  > nslookup google.com\n  Server:\t\tfe80::1%12\n  Address:\tfe80::1%12#53\n  \n  Non-authoritative answer:\n  Name:\tgoogle.com\n  Address: 142.251.42.238\n  ```\n\n+ nslookup 142.251.42.238\n\n  反向dns查询\n\n  ```bash\n  Server:\t\tfe80::1%12\n  Address:\tfe80::1%12#53\n  \n  Non-authoritative answer:\n  238.42.251.142.in-addr.arpa\tname = tsa01s11-in-f14.1e100.net.\n  \n  Authoritative answers can be found from:\n  ```\n\n更多option选项查看 \n\n[nslookup command in linux](https://www.geeksforgeeks.org/nslookup-command-in-linux-with-examples)","slug":"nslookup-linux","published":1,"updated":"2022-04-11T05:43:56.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7k9004kgoswevz6280j","content":"<p>Nslookup(Name Server Lookup 缩写)：查询Dns服务器，获取域名或ip地址。</p>\n<a id=\"more\"></a>\n\n<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nslookup [option]</span><br></pre></td></tr></table></figure>\n\n<p>Option 可选项：</p>\n<ul>\n<li><p>nslookup google.com</p>\n<p>nslookup 加域名 会显示 域名的IP地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nslookup google.com</span><br><span class=\"line\">Server:\t\tfe80::1%12</span><br><span class=\"line\">Address:\tfe80::1%12<span class=\"comment\">#53</span></span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:</span><br><span class=\"line\">Name:\tgoogle.com</span><br><span class=\"line\">Address: 142.251.42.238</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>nslookup 142.251.42.238</p>\n<p>反向dns查询</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server:\t\tfe80::1%12</span><br><span class=\"line\">Address:\tfe80::1%12<span class=\"comment\">#53</span></span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:</span><br><span class=\"line\">238.42.251.142.in-addr.arpa\tname = tsa01s11-in-f14.1e100.net.</span><br><span class=\"line\"></span><br><span class=\"line\">Authoritative answers can be found from:</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>更多option选项查看 </p>\n<p><a href=\"https://www.geeksforgeeks.org/nslookup-command-in-linux-with-examples\" target=\"_blank\" rel=\"noopener\">nslookup command in linux</a></p>\n","site":{"data":{}},"excerpt":"<p>Nslookup(Name Server Lookup 缩写)：查询Dns服务器，获取域名或ip地址。</p>","more":"<p>语法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nslookup [option]</span><br></pre></td></tr></table></figure>\n\n<p>Option 可选项：</p>\n<ul>\n<li><p>nslookup google.com</p>\n<p>nslookup 加域名 会显示 域名的IP地址</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nslookup google.com</span><br><span class=\"line\">Server:\t\tfe80::1%12</span><br><span class=\"line\">Address:\tfe80::1%12<span class=\"comment\">#53</span></span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:</span><br><span class=\"line\">Name:\tgoogle.com</span><br><span class=\"line\">Address: 142.251.42.238</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>nslookup 142.251.42.238</p>\n<p>反向dns查询</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Server:\t\tfe80::1%12</span><br><span class=\"line\">Address:\tfe80::1%12<span class=\"comment\">#53</span></span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:</span><br><span class=\"line\">238.42.251.142.in-addr.arpa\tname = tsa01s11-in-f14.1e100.net.</span><br><span class=\"line\"></span><br><span class=\"line\">Authoritative answers can be found from:</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>更多option选项查看 </p>\n<p><a href=\"https://www.geeksforgeeks.org/nslookup-command-in-linux-with-examples\" target=\"_blank\" rel=\"noopener\">nslookup command in linux</a></p>"},{"title":"React 开发 - useEffect,useState","toc":true,"date":"2020-09-10T16:00:00.000Z","_content":"\n## useState\n\n```js\n// 声明一个叫 “count” 的 state 变量\nconst [count, setCount] = useState(0);\nconsole.log(count); // -> 0\nsetCount(count + 1);\nconsole.log(count); // -> 1\n```\n\n## useEffect\n\n`useEffect(fn, [dependence, .., dependence ])`\n\n- **useEffect 接收两个参数，第一个为副作用函数，第二个为 hook 的依赖**，只有当依赖发生改变的时候，才会触发执行\n- **useEffect 在初始化的时候会执行一次**，如果依赖为空，便不会再次执行，这实现了类似 mounted 的效果\n\n* **useEffect 返回值必须是一个 cleanup 函数**，用于清除 Effect，这意味着下面的代码结构是错误的\n\n  ```js\n  useEffect(async () => {\n    await fetchSomething();\n  });\n  ```\n\n  <u>每一个带有 async 标注的函数，都会返回一个 Promise</u>，如果代码结构写成上面的这种将会抛出错误\n\n  ```js\n  Warning: useEffect function must return a cleanup function or nothing.\n  Promises and useEffect(async () => ...) are not supported,\n  but you can call an async function inside an effect\n  ```\n\n* 什么是 useEffect 的 cleanup\n  cleanUp 设计来 Undo 一些 Effect 如订阅\n\n```js\nuseEffect(() => {\n  ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange);\n  return () => {\n    ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange);\n  };\n});\n```\n\n- Render 的某一刻的状态是固定的，相当于快照\n  **原理**\n\n  ```js\n  function sayHi(person) {\n    const name = person.name;\n    setTimeout(() => {\n      alert(\"Hello, \" + name);\n    }, 3000);\n  }\n\n  let someone = { name: \"Dan\" };\n  sayHi(someone);\n\n  someone = { name: \"Yuzhi\" };\n  sayHi(someone);\n\n  someone = { name: \"Dominic\" };\n  sayHi(someone);\n  ```\n","source":"_posts/react-dev-02.md","raw":"---\ntitle: React 开发 - useEffect,useState\ncategories: [前端]\ntags: [react]\ntoc: true\ndate: 2020/9/11\n---\n\n## useState\n\n```js\n// 声明一个叫 “count” 的 state 变量\nconst [count, setCount] = useState(0);\nconsole.log(count); // -> 0\nsetCount(count + 1);\nconsole.log(count); // -> 1\n```\n\n## useEffect\n\n`useEffect(fn, [dependence, .., dependence ])`\n\n- **useEffect 接收两个参数，第一个为副作用函数，第二个为 hook 的依赖**，只有当依赖发生改变的时候，才会触发执行\n- **useEffect 在初始化的时候会执行一次**，如果依赖为空，便不会再次执行，这实现了类似 mounted 的效果\n\n* **useEffect 返回值必须是一个 cleanup 函数**，用于清除 Effect，这意味着下面的代码结构是错误的\n\n  ```js\n  useEffect(async () => {\n    await fetchSomething();\n  });\n  ```\n\n  <u>每一个带有 async 标注的函数，都会返回一个 Promise</u>，如果代码结构写成上面的这种将会抛出错误\n\n  ```js\n  Warning: useEffect function must return a cleanup function or nothing.\n  Promises and useEffect(async () => ...) are not supported,\n  but you can call an async function inside an effect\n  ```\n\n* 什么是 useEffect 的 cleanup\n  cleanUp 设计来 Undo 一些 Effect 如订阅\n\n```js\nuseEffect(() => {\n  ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange);\n  return () => {\n    ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange);\n  };\n});\n```\n\n- Render 的某一刻的状态是固定的，相当于快照\n  **原理**\n\n  ```js\n  function sayHi(person) {\n    const name = person.name;\n    setTimeout(() => {\n      alert(\"Hello, \" + name);\n    }, 3000);\n  }\n\n  let someone = { name: \"Dan\" };\n  sayHi(someone);\n\n  someone = { name: \"Yuzhi\" };\n  sayHi(someone);\n\n  someone = { name: \"Dominic\" };\n  sayHi(someone);\n  ```\n","slug":"react-dev-02","published":1,"updated":"2021-04-22T08:19:25.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ka004ogosw0bg7dyaz","content":"<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个叫 “count” 的 state 变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// -&gt; 0</span></span><br><span class=\"line\">setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// -&gt; 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p><code>useEffect(fn, [dependence, .., dependence ])</code></p>\n<ul>\n<li><strong>useEffect 接收两个参数，第一个为副作用函数，第二个为 hook 的依赖</strong>，只有当依赖发生改变的时候，才会触发执行</li>\n<li><strong>useEffect 在初始化的时候会执行一次</strong>，如果依赖为空，便不会再次执行，这实现了类似 mounted 的效果</li>\n</ul>\n<ul>\n<li><p><strong>useEffect 返回值必须是一个 cleanup 函数</strong>，用于清除 Effect，这意味着下面的代码结构是错误的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> fetchSomething();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><u>每一个带有 async 标注的函数，都会返回一个 Promise</u>，如果代码结构写成上面的这种将会抛出错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: useEffect <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">must</span> <span class=\"title\">return</span> <span class=\"title\">a</span> <span class=\"title\">cleanup</span> <span class=\"title\">function</span> <span class=\"title\">or</span> <span class=\"title\">nothing</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Promises</span> <span class=\"title\">and</span> <span class=\"title\">useEffect</span>(<span class=\"params\">async (</span>) =&gt; ...) <span class=\"title\">are</span> <span class=\"title\">not</span> <span class=\"title\">supported</span>,</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">but</span> <span class=\"title\">you</span> <span class=\"title\">can</span> <span class=\"title\">call</span> <span class=\"title\">an</span> <span class=\"title\">async</span> <span class=\"title\">function</span> <span class=\"title\">inside</span> <span class=\"title\">an</span> <span class=\"title\">effect</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是 useEffect 的 cleanup<br>cleanUp 设计来 Undo 一些 Effect 如订阅</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Render 的某一刻的状态是固定的，相当于快照<br><strong>原理</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = person.name;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Hello, \"</span> + name);</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> someone = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Dan\"</span> &#125;;</span><br><span class=\"line\">sayHi(someone);</span><br><span class=\"line\"></span><br><span class=\"line\">someone = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Yuzhi\"</span> &#125;;</span><br><span class=\"line\">sayHi(someone);</span><br><span class=\"line\"></span><br><span class=\"line\">someone = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Dominic\"</span> &#125;;</span><br><span class=\"line\">sayHi(someone);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个叫 “count” 的 state 变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// -&gt; 0</span></span><br><span class=\"line\">setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count); <span class=\"comment\">// -&gt; 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p><code>useEffect(fn, [dependence, .., dependence ])</code></p>\n<ul>\n<li><strong>useEffect 接收两个参数，第一个为副作用函数，第二个为 hook 的依赖</strong>，只有当依赖发生改变的时候，才会触发执行</li>\n<li><strong>useEffect 在初始化的时候会执行一次</strong>，如果依赖为空，便不会再次执行，这实现了类似 mounted 的效果</li>\n</ul>\n<ul>\n<li><p><strong>useEffect 返回值必须是一个 cleanup 函数</strong>，用于清除 Effect，这意味着下面的代码结构是错误的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> fetchSomething();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><u>每一个带有 async 标注的函数，都会返回一个 Promise</u>，如果代码结构写成上面的这种将会抛出错误</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: useEffect <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">must</span> <span class=\"title\">return</span> <span class=\"title\">a</span> <span class=\"title\">cleanup</span> <span class=\"title\">function</span> <span class=\"title\">or</span> <span class=\"title\">nothing</span>.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Promises</span> <span class=\"title\">and</span> <span class=\"title\">useEffect</span>(<span class=\"params\">async (</span>) =&gt; ...) <span class=\"title\">are</span> <span class=\"title\">not</span> <span class=\"title\">supported</span>,</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">but</span> <span class=\"title\">you</span> <span class=\"title\">can</span> <span class=\"title\">call</span> <span class=\"title\">an</span> <span class=\"title\">async</span> <span class=\"title\">function</span> <span class=\"title\">inside</span> <span class=\"title\">an</span> <span class=\"title\">effect</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>什么是 useEffect 的 cleanup<br>cleanUp 设计来 Undo 一些 Effect 如订阅</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  ChatAPI.subscribeToFriendStatus(props.id, handleStatusChange);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ChatAPI.unsubscribeFromFriendStatus(props.id, handleStatusChange);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Render 的某一刻的状态是固定的，相当于快照<br><strong>原理</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = person.name;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Hello, \"</span> + name);</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> someone = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Dan\"</span> &#125;;</span><br><span class=\"line\">sayHi(someone);</span><br><span class=\"line\"></span><br><span class=\"line\">someone = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Yuzhi\"</span> &#125;;</span><br><span class=\"line\">sayHi(someone);</span><br><span class=\"line\"></span><br><span class=\"line\">someone = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"Dominic\"</span> &#125;;</span><br><span class=\"line\">sayHi(someone);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"React 开发 - redux hook","toc":true,"date":"2020-09-11T16:00:00.000Z","_content":"\n此文章只涉及入门，不涉及高阶用法，等框架熟悉后再学习高阶\n\n## 使用 redux 提供的 hook 来替代繁琐的 connect 包裹\n\n### [useSelector()](https://react-redux.js.org/api/hooks#useselector) 获取 state\n\n> useSelector 等价于 mapStateToProps + connect\n\nexample: 导入子模块的 state\n\n```js\nimport { useSelector } from \"react-redux\";\nimport { IProductState, IStateType } from \"~/store/models/root.interface\";\n\nconst Home: React.FC = () => {\n  const products: IProductState = useSelector((state: IStateType) => state.products);\n  return (...)\n}\n```\n\n### [useDispatch()](https://react-redux.js.org/api/hooks#usedispatch) 更改值\n\nexample\n\n```js\n// 1.导入将要修改的state 对应的action\nimport { updateCurrentPath } from \"~/store/actions/root.actions\";\n// 2. 导入dispatch hook\nimport { useDispatch } from \"react-redux\";\n// 3. 使用dispatch hook 执行对应的action\n\ndispatch(updateCurrentPath(\"home\", \"\"));\n```\n\ntips: root.actions\n\n```js\nexport const UPDATE_CURRENT_PATH: string = \"UPDATE_CURRENT_PATH\";\n\nexport function updateCurrentPath(\n  area: string,\n  subArea: string\n): IUpdateCurrentPathActionType {\n  return { type: UPDATE_CURRENT_PATH, area: area, subArea: subArea };\n}\n```\n\n### useStore() 获取整个 redux store 的 reference 引用，不推荐直接再组件中使用\n\n```js\nimport React from \"react\";\nimport { useStore } from \"react-redux\";\n\nexport const CounterComponent = ({ value }) => {\n  const store = useStore();\n\n  // EXAMPLE ONLY! Do not do this in a real app.\n  // The component will not automatically update if the store state changes\n  return <div>{store.getState()}</div>;\n};\n```\n\n## 总结\n\n- redux hooks 是在 connect 之后发布的，属于较新的版本，可以简化代码\n- redux hooks 提供了读写两种对应的 hooks\n- useSelector 用于读 state， 可以读取某一个模块下的 state\n- useDispatch 用于写 state，一般通过调用定义的 actions 来进行写\n- useStore 也是读 state，它权限最大，获取的是整个 state 的 ref，不推荐直接使用\n","source":"_posts/react-dev-03.md","raw":"---\ntitle: React 开发 - redux hook\ncategories: [前端]\ntags: [react]\ntoc: true\ndate: 2020/9/12\n---\n\n此文章只涉及入门，不涉及高阶用法，等框架熟悉后再学习高阶\n\n## 使用 redux 提供的 hook 来替代繁琐的 connect 包裹\n\n### [useSelector()](https://react-redux.js.org/api/hooks#useselector) 获取 state\n\n> useSelector 等价于 mapStateToProps + connect\n\nexample: 导入子模块的 state\n\n```js\nimport { useSelector } from \"react-redux\";\nimport { IProductState, IStateType } from \"~/store/models/root.interface\";\n\nconst Home: React.FC = () => {\n  const products: IProductState = useSelector((state: IStateType) => state.products);\n  return (...)\n}\n```\n\n### [useDispatch()](https://react-redux.js.org/api/hooks#usedispatch) 更改值\n\nexample\n\n```js\n// 1.导入将要修改的state 对应的action\nimport { updateCurrentPath } from \"~/store/actions/root.actions\";\n// 2. 导入dispatch hook\nimport { useDispatch } from \"react-redux\";\n// 3. 使用dispatch hook 执行对应的action\n\ndispatch(updateCurrentPath(\"home\", \"\"));\n```\n\ntips: root.actions\n\n```js\nexport const UPDATE_CURRENT_PATH: string = \"UPDATE_CURRENT_PATH\";\n\nexport function updateCurrentPath(\n  area: string,\n  subArea: string\n): IUpdateCurrentPathActionType {\n  return { type: UPDATE_CURRENT_PATH, area: area, subArea: subArea };\n}\n```\n\n### useStore() 获取整个 redux store 的 reference 引用，不推荐直接再组件中使用\n\n```js\nimport React from \"react\";\nimport { useStore } from \"react-redux\";\n\nexport const CounterComponent = ({ value }) => {\n  const store = useStore();\n\n  // EXAMPLE ONLY! Do not do this in a real app.\n  // The component will not automatically update if the store state changes\n  return <div>{store.getState()}</div>;\n};\n```\n\n## 总结\n\n- redux hooks 是在 connect 之后发布的，属于较新的版本，可以简化代码\n- redux hooks 提供了读写两种对应的 hooks\n- useSelector 用于读 state， 可以读取某一个模块下的 state\n- useDispatch 用于写 state，一般通过调用定义的 actions 来进行写\n- useStore 也是读 state，它权限最大，获取的是整个 state 的 ref，不推荐直接使用\n","slug":"react-dev-03","published":1,"updated":"2021-04-22T08:19:35.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kb004rgosw97ppa8fh","content":"<p>此文章只涉及入门，不涉及高阶用法，等框架熟悉后再学习高阶</p>\n<h2 id=\"使用-redux-提供的-hook-来替代繁琐的-connect-包裹\"><a href=\"#使用-redux-提供的-hook-来替代繁琐的-connect-包裹\" class=\"headerlink\" title=\"使用 redux 提供的 hook 来替代繁琐的 connect 包裹\"></a>使用 redux 提供的 hook 来替代繁琐的 connect 包裹</h2><h3 id=\"useSelector-获取-state\"><a href=\"#useSelector-获取-state\" class=\"headerlink\" title=\"useSelector() 获取 state\"></a><a href=\"https://react-redux.js.org/api/hooks#useselector\" target=\"_blank\" rel=\"noopener\">useSelector()</a> 获取 state</h3><blockquote>\n<p>useSelector 等价于 mapStateToProps + connect</p>\n</blockquote>\n<p>example: 导入子模块的 state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; IProductState, IStateType &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"~/store/models/root.interface\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Home: React.FC = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> products: IProductState = useSelector(<span class=\"function\">(<span class=\"params\">state: IStateType</span>) =&gt;</span> state.products);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useDispatch-更改值\"><a href=\"#useDispatch-更改值\" class=\"headerlink\" title=\"useDispatch() 更改值\"></a><a href=\"https://react-redux.js.org/api/hooks#usedispatch\" target=\"_blank\" rel=\"noopener\">useDispatch()</a> 更改值</h3><p>example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.导入将要修改的state 对应的action</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; updateCurrentPath &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"~/store/actions/root.actions\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 2. 导入dispatch hook</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useDispatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 3. 使用dispatch hook 执行对应的action</span></span><br><span class=\"line\"></span><br><span class=\"line\">dispatch(updateCurrentPath(<span class=\"string\">\"home\"</span>, <span class=\"string\">\"\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p>tips: root.actions</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> UPDATE_CURRENT_PATH: string = <span class=\"string\">\"UPDATE_CURRENT_PATH\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateCurrentPath</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  area: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  subArea: string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">IUpdateCurrentPathActionType</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: UPDATE_CURRENT_PATH, <span class=\"attr\">area</span>: area, <span class=\"attr\">subArea</span>: subArea &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useStore-获取整个-redux-store-的-reference-引用，不推荐直接再组件中使用\"><a href=\"#useStore-获取整个-redux-store-的-reference-引用，不推荐直接再组件中使用\" class=\"headerlink\" title=\"useStore() 获取整个 redux store 的 reference 引用，不推荐直接再组件中使用\"></a>useStore() 获取整个 redux store 的 reference 引用，不推荐直接再组件中使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> CounterComponent = <span class=\"function\">(<span class=\"params\">&#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = useStore();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// EXAMPLE ONLY! Do not do this in a real app.</span></span><br><span class=\"line\">  <span class=\"comment\">// The component will not automatically update if the store state changes</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;store.getState()&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>redux hooks 是在 connect 之后发布的，属于较新的版本，可以简化代码</li>\n<li>redux hooks 提供了读写两种对应的 hooks</li>\n<li>useSelector 用于读 state， 可以读取某一个模块下的 state</li>\n<li>useDispatch 用于写 state，一般通过调用定义的 actions 来进行写</li>\n<li>useStore 也是读 state，它权限最大，获取的是整个 state 的 ref，不推荐直接使用</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>此文章只涉及入门，不涉及高阶用法，等框架熟悉后再学习高阶</p>\n<h2 id=\"使用-redux-提供的-hook-来替代繁琐的-connect-包裹\"><a href=\"#使用-redux-提供的-hook-来替代繁琐的-connect-包裹\" class=\"headerlink\" title=\"使用 redux 提供的 hook 来替代繁琐的 connect 包裹\"></a>使用 redux 提供的 hook 来替代繁琐的 connect 包裹</h2><h3 id=\"useSelector-获取-state\"><a href=\"#useSelector-获取-state\" class=\"headerlink\" title=\"useSelector() 获取 state\"></a><a href=\"https://react-redux.js.org/api/hooks#useselector\" target=\"_blank\" rel=\"noopener\">useSelector()</a> 获取 state</h3><blockquote>\n<p>useSelector 等价于 mapStateToProps + connect</p>\n</blockquote>\n<p>example: 导入子模块的 state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; IProductState, IStateType &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"~/store/models/root.interface\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Home: React.FC = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> products: IProductState = useSelector(<span class=\"function\">(<span class=\"params\">state: IStateType</span>) =&gt;</span> state.products);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useDispatch-更改值\"><a href=\"#useDispatch-更改值\" class=\"headerlink\" title=\"useDispatch() 更改值\"></a><a href=\"https://react-redux.js.org/api/hooks#usedispatch\" target=\"_blank\" rel=\"noopener\">useDispatch()</a> 更改值</h3><p>example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.导入将要修改的state 对应的action</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; updateCurrentPath &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"~/store/actions/root.actions\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 2. 导入dispatch hook</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useDispatch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 3. 使用dispatch hook 执行对应的action</span></span><br><span class=\"line\"></span><br><span class=\"line\">dispatch(updateCurrentPath(<span class=\"string\">\"home\"</span>, <span class=\"string\">\"\"</span>));</span><br></pre></td></tr></table></figure>\n\n<p>tips: root.actions</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> UPDATE_CURRENT_PATH: string = <span class=\"string\">\"UPDATE_CURRENT_PATH\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateCurrentPath</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  area: string,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  subArea: string</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">IUpdateCurrentPathActionType</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: UPDATE_CURRENT_PATH, <span class=\"attr\">area</span>: area, <span class=\"attr\">subArea</span>: subArea &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useStore-获取整个-redux-store-的-reference-引用，不推荐直接再组件中使用\"><a href=\"#useStore-获取整个-redux-store-的-reference-引用，不推荐直接再组件中使用\" class=\"headerlink\" title=\"useStore() 获取整个 redux store 的 reference 引用，不推荐直接再组件中使用\"></a>useStore() 获取整个 redux store 的 reference 引用，不推荐直接再组件中使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> CounterComponent = <span class=\"function\">(<span class=\"params\">&#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> store = useStore();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// EXAMPLE ONLY! Do not do this in a real app.</span></span><br><span class=\"line\">  <span class=\"comment\">// The component will not automatically update if the store state changes</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;store.getState()&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>redux hooks 是在 connect 之后发布的，属于较新的版本，可以简化代码</li>\n<li>redux hooks 提供了读写两种对应的 hooks</li>\n<li>useSelector 用于读 state， 可以读取某一个模块下的 state</li>\n<li>useDispatch 用于写 state，一般通过调用定义的 actions 来进行写</li>\n<li>useStore 也是读 state，它权限最大，获取的是整个 state 的 ref，不推荐直接使用</li>\n</ul>\n"},{"title":"Oh My Zsh 常用plugin","toc":true,"date":"2022-03-21T16:00:00.000Z","_content":"\n- [zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting) 语法高亮\n- [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 自动补全\n\n<!-- more -->\n\n## 插件的添加方式\n\n- 安装插件\n  ```bash\n  cd ~/.oh-my-zsh/plugins\n  # git clone plugins\n  ```\n\n* .zshrc 中配置\n  ```bash\n  vim ~/.zshrc\n  # 找到plugins\n  plugins=(\n        git\n        zsh-autosuggestions\n        zsh-syntax-highlighting\n        想要新添加的插件添加在此处\n  )\n  ```\n","source":"_posts/oh-my-zsh.md","raw":"---\ntitle: Oh My Zsh 常用plugin\ncategories: []\ntags: []\ntoc: true\ndate: 2022/3/22\n---\n\n- [zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting) 语法高亮\n- [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 自动补全\n\n<!-- more -->\n\n## 插件的添加方式\n\n- 安装插件\n  ```bash\n  cd ~/.oh-my-zsh/plugins\n  # git clone plugins\n  ```\n\n* .zshrc 中配置\n  ```bash\n  vim ~/.zshrc\n  # 找到plugins\n  plugins=(\n        git\n        zsh-autosuggestions\n        zsh-syntax-highlighting\n        想要新添加的插件添加在此处\n  )\n  ```\n","slug":"oh-my-zsh","published":1,"updated":"2022-03-22T04:57:20.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kb004vgoswefprevmi","content":"<ul>\n<li><a href=\"https://github.com/zsh-users/zsh-syntax-highlighting\" target=\"_blank\" rel=\"noopener\">zsh-syntax-highlighting</a> 语法高亮</li>\n<li><a href=\"https://github.com/zsh-users/zsh-autosuggestions\" target=\"_blank\" rel=\"noopener\">zsh-autosuggestions</a> 自动补全</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"插件的添加方式\"><a href=\"#插件的添加方式\" class=\"headerlink\" title=\"插件的添加方式\"></a>插件的添加方式</h2><ul>\n<li>安装插件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/plugins</span><br><span class=\"line\"><span class=\"comment\"># git clone plugins</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>.zshrc 中配置<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 找到plugins</span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">      git</span><br><span class=\"line\">      zsh-autosuggestions</span><br><span class=\"line\">      zsh-syntax-highlighting</span><br><span class=\"line\">      想要新添加的插件添加在此处</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><a href=\"https://github.com/zsh-users/zsh-syntax-highlighting\" target=\"_blank\" rel=\"noopener\">zsh-syntax-highlighting</a> 语法高亮</li>\n<li><a href=\"https://github.com/zsh-users/zsh-autosuggestions\" target=\"_blank\" rel=\"noopener\">zsh-autosuggestions</a> 自动补全</li>\n</ul>","more":"<h2 id=\"插件的添加方式\"><a href=\"#插件的添加方式\" class=\"headerlink\" title=\"插件的添加方式\"></a>插件的添加方式</h2><ul>\n<li>安装插件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/plugins</span><br><span class=\"line\"><span class=\"comment\"># git clone plugins</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>.zshrc 中配置<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.zshrc</span><br><span class=\"line\"><span class=\"comment\"># 找到plugins</span></span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">      git</span><br><span class=\"line\">      zsh-autosuggestions</span><br><span class=\"line\">      zsh-syntax-highlighting</span><br><span class=\"line\">      想要新添加的插件添加在此处</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"React 开发 - react router","toc":true,"date":"2020-09-11T16:00:00.000Z","_content":"\n## 在 React Router 使用同一套 Layout，只渲染一次 Layout\n\n对应知识点\n\n- Route 的 path 属性 可以传入数组，进行模糊匹配\n- exact 属性用于精确匹配\n\n  | path | location.pathname | exact | matches? |\n  | ---- | ----------------- | ----- | -------- |\n  | /one | /one/two          | true  | no       |\n  | /one | /one/two          | false | yes      |\n\n* component 当路由匹配成功时候，渲染的组件\n\nexamples\n\n```jsx\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n<Router>\n  <Switch>\n    <Route exact path={[\"/\", \"/timeLine\"]}>\n      <Layout>\n        <Route exact path=\"/\" component={FileLists} />\n        <Route exact path=\"/timeLine\" component={TimeLine} />\n      </Layout>\n    </Route>\n  </Switch>\n</Router>;\n```\n\n### [route 的 component 和 render 属性的区别](https://medium.com/@migcoder/difference-between-render-and-component-prop-on-react-router-v4-368ca7fedbec)\n\n> if you provide an inline function to the component prop, you would create a new component every render. --- React Router Document\n\n结论：\n\n1. component={AppComponent} 和 render 形式没有区别\n2. 当想要进行条件渲染的时候，使用 render 属性\n   `render={() => judgement ? <AppComponent {...props}/> : <Other /> }`\n   而不是 `component={() => judgement ? <AppComponent {...props}/> : <Other /> }`\n\nexample:\n每当我们点击 section 标签触发 render 的时候，childComponent 都会被当做全新组件重新渲染，而不会走 diff patch 算法\n\n```jsx\nconst father = () => {\n  const [count, useState] = useState(0)\n  return (\n    <section onClick={useState(count+1)}>{count}</section>\n    ...\n      <Route Path componet={() =>  judgement ? <AppComponent {...props}/> : <Other />} />\n    ...\n  )\n}\n```\n","source":"_posts/react-dev-04.md","raw":"---\ntitle: React 开发 - react router\ncategories: [前端]\ntags: [react]\ntoc: true\ndate: 2020/9/12\n---\n\n## 在 React Router 使用同一套 Layout，只渲染一次 Layout\n\n对应知识点\n\n- Route 的 path 属性 可以传入数组，进行模糊匹配\n- exact 属性用于精确匹配\n\n  | path | location.pathname | exact | matches? |\n  | ---- | ----------------- | ----- | -------- |\n  | /one | /one/two          | true  | no       |\n  | /one | /one/two          | false | yes      |\n\n* component 当路由匹配成功时候，渲染的组件\n\nexamples\n\n```jsx\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n<Router>\n  <Switch>\n    <Route exact path={[\"/\", \"/timeLine\"]}>\n      <Layout>\n        <Route exact path=\"/\" component={FileLists} />\n        <Route exact path=\"/timeLine\" component={TimeLine} />\n      </Layout>\n    </Route>\n  </Switch>\n</Router>;\n```\n\n### [route 的 component 和 render 属性的区别](https://medium.com/@migcoder/difference-between-render-and-component-prop-on-react-router-v4-368ca7fedbec)\n\n> if you provide an inline function to the component prop, you would create a new component every render. --- React Router Document\n\n结论：\n\n1. component={AppComponent} 和 render 形式没有区别\n2. 当想要进行条件渲染的时候，使用 render 属性\n   `render={() => judgement ? <AppComponent {...props}/> : <Other /> }`\n   而不是 `component={() => judgement ? <AppComponent {...props}/> : <Other /> }`\n\nexample:\n每当我们点击 section 标签触发 render 的时候，childComponent 都会被当做全新组件重新渲染，而不会走 diff patch 算法\n\n```jsx\nconst father = () => {\n  const [count, useState] = useState(0)\n  return (\n    <section onClick={useState(count+1)}>{count}</section>\n    ...\n      <Route Path componet={() =>  judgement ? <AppComponent {...props}/> : <Other />} />\n    ...\n  )\n}\n```\n","slug":"react-dev-04","published":1,"updated":"2021-04-22T08:19:48.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kc004ygoswafdzb3yx","content":"<h2 id=\"在-React-Router-使用同一套-Layout，只渲染一次-Layout\"><a href=\"#在-React-Router-使用同一套-Layout，只渲染一次-Layout\" class=\"headerlink\" title=\"在 React Router 使用同一套 Layout，只渲染一次 Layout\"></a>在 React Router 使用同一套 Layout，只渲染一次 Layout</h2><p>对应知识点</p>\n<ul>\n<li><p>Route 的 path 属性 可以传入数组，进行模糊匹配</p>\n</li>\n<li><p>exact 属性用于精确匹配</p>\n<table>\n<thead>\n<tr>\n<th>path</th>\n<th>location.pathname</th>\n<th>exact</th>\n<th>matches?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/one</td>\n<td>/one/two</td>\n<td>true</td>\n<td>no</td>\n</tr>\n<tr>\n<td>/one</td>\n<td>/one/two</td>\n<td>false</td>\n<td>yes</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li>component 当路由匹配成功时候，渲染的组件</li>\n</ul>\n<p>examples</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router&gt;</span><br><span class=\"line\">  &lt;Switch&gt;</span><br><span class=\"line\">    &lt;Route exact path=&#123;[<span class=\"string\">\"/\"</span>, <span class=\"string\">\"/timeLine\"</span>]&#125;&gt;</span><br><span class=\"line\">      &lt;Layout&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;FileLists&#125; /&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/timeLine\"</span> component=&#123;TimeLine&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Layout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"route-的-component-和-render-属性的区别\"><a href=\"#route-的-component-和-render-属性的区别\" class=\"headerlink\" title=\"route 的 component 和 render 属性的区别\"></a><a href=\"https://medium.com/@migcoder/difference-between-render-and-component-prop-on-react-router-v4-368ca7fedbec\" target=\"_blank\" rel=\"noopener\">route 的 component 和 render 属性的区别</a></h3><blockquote>\n<p>if you provide an inline function to the component prop, you would create a new component every render. — React Router Document</p>\n</blockquote>\n<p>结论：</p>\n<ol>\n<li>component={AppComponent} 和 render 形式没有区别</li>\n<li>当想要进行条件渲染的时候，使用 render 属性<br><code>render={() =&gt; judgement ? &lt;AppComponent {...props}/&gt; : &lt;Other /&gt; }</code><br>而不是 <code>component={() =&gt; judgement ? &lt;AppComponent {...props}/&gt; : &lt;Other /&gt; }</code></li>\n</ol>\n<p>example:<br>每当我们点击 section 标签触发 render 的时候，childComponent 都会被当做全新组件重新渲染，而不会走 diff patch 算法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> father = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, useState] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;section onClick=&#123;useState(count+<span class=\"number\">1</span>)&#125;&gt;&#123;count&#125;&lt;<span class=\"regexp\">/section&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Route Path componet=&#123;() =&gt;  judgement ? &lt;AppComponent &#123;...props&#125;/</span>&gt; : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Other</span> /&gt;</span></span>&#125; /&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在-React-Router-使用同一套-Layout，只渲染一次-Layout\"><a href=\"#在-React-Router-使用同一套-Layout，只渲染一次-Layout\" class=\"headerlink\" title=\"在 React Router 使用同一套 Layout，只渲染一次 Layout\"></a>在 React Router 使用同一套 Layout，只渲染一次 Layout</h2><p>对应知识点</p>\n<ul>\n<li><p>Route 的 path 属性 可以传入数组，进行模糊匹配</p>\n</li>\n<li><p>exact 属性用于精确匹配</p>\n<table>\n<thead>\n<tr>\n<th>path</th>\n<th>location.pathname</th>\n<th>exact</th>\n<th>matches?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/one</td>\n<td>/one/two</td>\n<td>true</td>\n<td>no</td>\n</tr>\n<tr>\n<td>/one</td>\n<td>/one/two</td>\n<td>false</td>\n<td>yes</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<ul>\n<li>component 当路由匹配成功时候，渲染的组件</li>\n</ul>\n<p>examples</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-router-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Router&gt;</span><br><span class=\"line\">  &lt;Switch&gt;</span><br><span class=\"line\">    &lt;Route exact path=&#123;[<span class=\"string\">\"/\"</span>, <span class=\"string\">\"/timeLine\"</span>]&#125;&gt;</span><br><span class=\"line\">      &lt;Layout&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;FileLists&#125; /&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/timeLine\"</span> component=&#123;TimeLine&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Layout&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Route&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>Router&gt;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"route-的-component-和-render-属性的区别\"><a href=\"#route-的-component-和-render-属性的区别\" class=\"headerlink\" title=\"route 的 component 和 render 属性的区别\"></a><a href=\"https://medium.com/@migcoder/difference-between-render-and-component-prop-on-react-router-v4-368ca7fedbec\" target=\"_blank\" rel=\"noopener\">route 的 component 和 render 属性的区别</a></h3><blockquote>\n<p>if you provide an inline function to the component prop, you would create a new component every render. — React Router Document</p>\n</blockquote>\n<p>结论：</p>\n<ol>\n<li>component={AppComponent} 和 render 形式没有区别</li>\n<li>当想要进行条件渲染的时候，使用 render 属性<br><code>render={() =&gt; judgement ? &lt;AppComponent {...props}/&gt; : &lt;Other /&gt; }</code><br>而不是 <code>component={() =&gt; judgement ? &lt;AppComponent {...props}/&gt; : &lt;Other /&gt; }</code></li>\n</ol>\n<p>example:<br>每当我们点击 section 标签触发 render 的时候，childComponent 都会被当做全新组件重新渲染，而不会走 diff patch 算法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> father = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, useState] = useState(<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;section onClick=&#123;useState(count+<span class=\"number\">1</span>)&#125;&gt;&#123;count&#125;&lt;<span class=\"regexp\">/section&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    ...</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Route Path componet=&#123;() =&gt;  judgement ? &lt;AppComponent &#123;...props&#125;/</span>&gt; : <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Other</span> /&gt;</span></span>&#125; /&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"React 常用Hooks介绍与实现","toc":true,"date":"2021-10-31T16:00:00.000Z","_content":"\n这篇文章介绍了 useReducer, useState, useMemo, useCallback, useRef 的实现\n\n<!-- more -->\n\n## 数据操作 - useReducer & useState & useRef\n\nuseState 和 useReducer 都用于组件内的状态管理，useState 由 useReducer 实现\n\n### useReducer\n\nuseReducer 传入一个 reducer 函数来描述怎么更新状态，传入一个初始状态来描述最初的 data 值\n\nUsage\n\n```js\nconst initialState = { count: 0 };\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\": {\n      return { count: state.count + 1 };\n    }\n    case \"decrement\": {\n      return { count: state.count - 1 };\n    }\n  }\n}\n// functional component\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <div>\n      <p>{state.count}</p>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n    </div>\n  );\n}\n```\n\nuseReducer 接受三个参数，第一个是 reducer，第二个是初始状态，第三个是可选的 context\n\n```js\nfunction useReducer(reducer, initializerArg, initializer) {\n  const slot = [];\n  // state\n  slot[0] =\n    typeof initializer === \"function\"\n      ? initializer(initializerArg)\n      : initializerArg;\n  // dispatch\n  slot[1] = (action) => {\n    slot[0] = reducer(slot[0], action);\n  };\n  return slot;\n}\n```\n\n### useState\n\nuseState 通过 useReducer 实现, 传入一个初始值来描述最初的 data 值\n\nusage\n\n```js\n// version1\nconst [count, setCount] = useState(0);\nsetCount(count + 1);\n// version2 lazy evaluate\nconst [count, setCount] = useState(() => /*expensive evaluation*/ \"someThing\"));\n```\n\n```js\nconst reducer = (state, nextState) => {\n  return typeof state === \"function\" ? nextState(state()) : nextState;\n};\nfunction useState(initialState) {\n  if (typeof initialState === \"function\") {\n    return useReducer(reducer, undefined, initialState);\n  } else {\n    return useReducer(reducer, initialState);\n  }\n}\n```\n\n### useRef\n\nuseRef 通过 useState 实现\n\n```js\nfunction useRef(initialValue) {\n  const [ref] = useState({ current: initialValue });\n  return ref;\n}\n```\n\n## 性能优化 - useMemo & useCallback\n\n记忆化函数是性能优化的一种方式。通过完全存储函数的执行结果，可以避免重复计算。\n\n一个简单的记忆化数据结构如下：\n\n```js\nfunction memoize(fn) {\n  const cache = {};\n  return function (...args) {\n    if (cache[args]) {\n      return cache[args];\n    }\n    const result = fn.apply(this, args);\n    cache[args] = result;\n    return result;\n  };\n}\n```\n\n### useMemo\n\nuseMemo 和 Vue 的 Computed 功能类似，依赖不变的情况下，可以记忆化计算结果，以提高性能, 注意：与上述 memoize 函数不一样的是**useMemo 只记录上一次的结果，不会对已有的结果进行全部缓存**。\n\nUsage:\n\n```js\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\nuseMemo 接收两个参数，计算函数和依赖数组\n\n```js\nfunction depsChanged(deps1, deps2) {\n  if (deps1 === undefined || deps2 === undefined) return true;\n  if (deps1.length !== deps2.length) return true;\n  for (let i in deps1) {\n    if (!Object.is(deps1[i], deps2[i])) return true;\n  }\n  return false;\n}\nfunction useMemo(fn, deps) {\n  const slot = [];\n  if (depsChanged(slot[1], deps)) {\n    slot[0] = fn();\n  }\n  slot[1] = deps;\n  return slot[0];\n}\n```\n\n### useCallback\n\nuseCallback 通过 useMemo 实现，他返回一个 callback 函数，当依赖发生变化时，callback 函数会被重新计算，以提高性能\n\n```js\nfunction useCallback(fn, deps) {\n  return useMemo(() => fn, deps);\n}\n```\n","source":"_posts/react-hooks-implement.md","raw":"---\ntitle: React 常用Hooks介绍与实现\ncategories: [前端]\ntags: [react]\ntoc: true\ndate: 2021/11/1\n---\n\n这篇文章介绍了 useReducer, useState, useMemo, useCallback, useRef 的实现\n\n<!-- more -->\n\n## 数据操作 - useReducer & useState & useRef\n\nuseState 和 useReducer 都用于组件内的状态管理，useState 由 useReducer 实现\n\n### useReducer\n\nuseReducer 传入一个 reducer 函数来描述怎么更新状态，传入一个初始状态来描述最初的 data 值\n\nUsage\n\n```js\nconst initialState = { count: 0 };\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\": {\n      return { count: state.count + 1 };\n    }\n    case \"decrement\": {\n      return { count: state.count - 1 };\n    }\n  }\n}\n// functional component\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <div>\n      <p>{state.count}</p>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n    </div>\n  );\n}\n```\n\nuseReducer 接受三个参数，第一个是 reducer，第二个是初始状态，第三个是可选的 context\n\n```js\nfunction useReducer(reducer, initializerArg, initializer) {\n  const slot = [];\n  // state\n  slot[0] =\n    typeof initializer === \"function\"\n      ? initializer(initializerArg)\n      : initializerArg;\n  // dispatch\n  slot[1] = (action) => {\n    slot[0] = reducer(slot[0], action);\n  };\n  return slot;\n}\n```\n\n### useState\n\nuseState 通过 useReducer 实现, 传入一个初始值来描述最初的 data 值\n\nusage\n\n```js\n// version1\nconst [count, setCount] = useState(0);\nsetCount(count + 1);\n// version2 lazy evaluate\nconst [count, setCount] = useState(() => /*expensive evaluation*/ \"someThing\"));\n```\n\n```js\nconst reducer = (state, nextState) => {\n  return typeof state === \"function\" ? nextState(state()) : nextState;\n};\nfunction useState(initialState) {\n  if (typeof initialState === \"function\") {\n    return useReducer(reducer, undefined, initialState);\n  } else {\n    return useReducer(reducer, initialState);\n  }\n}\n```\n\n### useRef\n\nuseRef 通过 useState 实现\n\n```js\nfunction useRef(initialValue) {\n  const [ref] = useState({ current: initialValue });\n  return ref;\n}\n```\n\n## 性能优化 - useMemo & useCallback\n\n记忆化函数是性能优化的一种方式。通过完全存储函数的执行结果，可以避免重复计算。\n\n一个简单的记忆化数据结构如下：\n\n```js\nfunction memoize(fn) {\n  const cache = {};\n  return function (...args) {\n    if (cache[args]) {\n      return cache[args];\n    }\n    const result = fn.apply(this, args);\n    cache[args] = result;\n    return result;\n  };\n}\n```\n\n### useMemo\n\nuseMemo 和 Vue 的 Computed 功能类似，依赖不变的情况下，可以记忆化计算结果，以提高性能, 注意：与上述 memoize 函数不一样的是**useMemo 只记录上一次的结果，不会对已有的结果进行全部缓存**。\n\nUsage:\n\n```js\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\nuseMemo 接收两个参数，计算函数和依赖数组\n\n```js\nfunction depsChanged(deps1, deps2) {\n  if (deps1 === undefined || deps2 === undefined) return true;\n  if (deps1.length !== deps2.length) return true;\n  for (let i in deps1) {\n    if (!Object.is(deps1[i], deps2[i])) return true;\n  }\n  return false;\n}\nfunction useMemo(fn, deps) {\n  const slot = [];\n  if (depsChanged(slot[1], deps)) {\n    slot[0] = fn();\n  }\n  slot[1] = deps;\n  return slot[0];\n}\n```\n\n### useCallback\n\nuseCallback 通过 useMemo 实现，他返回一个 callback 函数，当依赖发生变化时，callback 函数会被重新计算，以提高性能\n\n```js\nfunction useCallback(fn, deps) {\n  return useMemo(() => fn, deps);\n}\n```\n","slug":"react-hooks-implement","published":1,"updated":"2021-11-03T01:46:16.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kd0052goswafos6lfd","content":"<p>这篇文章介绍了 useReducer, useState, useMemo, useCallback, useRef 的实现</p>\n<a id=\"more\"></a>\n\n<h2 id=\"数据操作-useReducer-amp-useState-amp-useRef\"><a href=\"#数据操作-useReducer-amp-useState-amp-useRef\" class=\"headerlink\" title=\"数据操作 - useReducer &amp; useState &amp; useRef\"></a>数据操作 - useReducer &amp; useState &amp; useRef</h2><p>useState 和 useReducer 都用于组件内的状态管理，useState 由 useReducer 实现</p>\n<h3 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h3><p>useReducer 传入一个 reducer 函数来描述怎么更新状态，传入一个初始状态来描述最初的 data 值</p>\n<p>Usage</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"increment\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"decrement\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// functional component</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;state.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"increment\" &#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"decrement\"</span> &#125;)&#125;&gt;-&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>useReducer 接受三个参数，第一个是 reducer，第二个是初始状态，第三个是可选的 context</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useReducer</span>(<span class=\"params\">reducer, initializerArg, initializer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> slot = [];</span><br><span class=\"line\">  <span class=\"comment\">// state</span></span><br><span class=\"line\">  slot[<span class=\"number\">0</span>] =</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> initializer === <span class=\"string\">\"function\"</span></span><br><span class=\"line\">      ? initializer(initializerArg)</span><br><span class=\"line\">      : initializerArg;</span><br><span class=\"line\">  <span class=\"comment\">// dispatch</span></span><br><span class=\"line\">  slot[<span class=\"number\">1</span>] = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    slot[<span class=\"number\">0</span>] = reducer(slot[<span class=\"number\">0</span>], action);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> slot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><p>useState 通过 useReducer 实现, 传入一个初始值来描述最初的 data 值</p>\n<p>usage</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// version1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// version2 lazy evaluate</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"comment\">/*expensive evaluation*/</span> <span class=\"string\">\"someThing\"</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state, nextState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> state === <span class=\"string\">\"function\"</span> ? nextState(state()) : nextState;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useState</span>(<span class=\"params\">initialState</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> useReducer(reducer, <span class=\"literal\">undefined</span>, initialState);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> useReducer(reducer, initialState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><p>useRef 通过 useState 实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useRef</span>(<span class=\"params\">initialValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [ref] = useState(&#123; <span class=\"attr\">current</span>: initialValue &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ref;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能优化-useMemo-amp-useCallback\"><a href=\"#性能优化-useMemo-amp-useCallback\" class=\"headerlink\" title=\"性能优化 - useMemo &amp; useCallback\"></a>性能优化 - useMemo &amp; useCallback</h2><p>记忆化函数是性能优化的一种方式。通过完全存储函数的执行结果，可以避免重复计算。</p>\n<p>一个简单的记忆化数据结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">memoize</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cache = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache[args]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache[args];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    cache[args] = result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h3><p>useMemo 和 Vue 的 Computed 功能类似，依赖不变的情况下，可以记忆化计算结果，以提高性能, 注意：与上述 memoize 函数不一样的是<strong>useMemo 只记录上一次的结果，不会对已有的结果进行全部缓存</strong>。</p>\n<p>Usage:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedValue = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure>\n\n<p>useMemo 接收两个参数，计算函数和依赖数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">depsChanged</span>(<span class=\"params\">deps1, deps2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (deps1 === <span class=\"literal\">undefined</span> || deps2 === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (deps1.length !== deps2.length) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> deps1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.is(deps1[i], deps2[i])) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useMemo</span>(<span class=\"params\">fn, deps</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> slot = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (depsChanged(slot[<span class=\"number\">1</span>], deps)) &#123;</span><br><span class=\"line\">    slot[<span class=\"number\">0</span>] = fn();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  slot[<span class=\"number\">1</span>] = deps;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> slot[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h3><p>useCallback 通过 useMemo 实现，他返回一个 callback 函数，当依赖发生变化时，callback 函数会被重新计算，以提高性能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useCallback</span>(<span class=\"params\">fn, deps</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn, deps);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>这篇文章介绍了 useReducer, useState, useMemo, useCallback, useRef 的实现</p>","more":"<h2 id=\"数据操作-useReducer-amp-useState-amp-useRef\"><a href=\"#数据操作-useReducer-amp-useState-amp-useRef\" class=\"headerlink\" title=\"数据操作 - useReducer &amp; useState &amp; useRef\"></a>数据操作 - useReducer &amp; useState &amp; useRef</h2><p>useState 和 useReducer 都用于组件内的状态管理，useState 由 useReducer 实现</p>\n<h3 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h3><p>useReducer 传入一个 reducer 函数来描述怎么更新状态，传入一个初始状态来描述最初的 data 值</p>\n<p>Usage</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reducer</span>(<span class=\"params\">state, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"increment\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"decrement\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">count</span>: state.count - <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// functional component</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Counter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123;state.count&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: \"increment\" &#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"decrement\"</span> &#125;)&#125;&gt;-&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>useReducer 接受三个参数，第一个是 reducer，第二个是初始状态，第三个是可选的 context</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useReducer</span>(<span class=\"params\">reducer, initializerArg, initializer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> slot = [];</span><br><span class=\"line\">  <span class=\"comment\">// state</span></span><br><span class=\"line\">  slot[<span class=\"number\">0</span>] =</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> initializer === <span class=\"string\">\"function\"</span></span><br><span class=\"line\">      ? initializer(initializerArg)</span><br><span class=\"line\">      : initializerArg;</span><br><span class=\"line\">  <span class=\"comment\">// dispatch</span></span><br><span class=\"line\">  slot[<span class=\"number\">1</span>] = <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    slot[<span class=\"number\">0</span>] = reducer(slot[<span class=\"number\">0</span>], action);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> slot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><p>useState 通过 useReducer 实现, 传入一个初始值来描述最初的 data 值</p>\n<p>usage</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// version1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>);</span><br><span class=\"line\">setCount(count + <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// version2 lazy evaluate</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"comment\">/*expensive evaluation*/</span> <span class=\"string\">\"someThing\"</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state, nextState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> state === <span class=\"string\">\"function\"</span> ? nextState(state()) : nextState;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useState</span>(<span class=\"params\">initialState</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> useReducer(reducer, <span class=\"literal\">undefined</span>, initialState);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> useReducer(reducer, initialState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><p>useRef 通过 useState 实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useRef</span>(<span class=\"params\">initialValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [ref] = useState(&#123; <span class=\"attr\">current</span>: initialValue &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ref;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能优化-useMemo-amp-useCallback\"><a href=\"#性能优化-useMemo-amp-useCallback\" class=\"headerlink\" title=\"性能优化 - useMemo &amp; useCallback\"></a>性能优化 - useMemo &amp; useCallback</h2><p>记忆化函数是性能优化的一种方式。通过完全存储函数的执行结果，可以避免重复计算。</p>\n<p>一个简单的记忆化数据结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">memoize</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cache = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache[args]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache[args];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">    cache[args] = result;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h3><p>useMemo 和 Vue 的 Computed 功能类似，依赖不变的情况下，可以记忆化计算结果，以提高性能, 注意：与上述 memoize 函数不一样的是<strong>useMemo 只记录上一次的结果，不会对已有的结果进行全部缓存</strong>。</p>\n<p>Usage:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedValue = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> computeExpensiveValue(a, b), [a, b]);</span><br></pre></td></tr></table></figure>\n\n<p>useMemo 接收两个参数，计算函数和依赖数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">depsChanged</span>(<span class=\"params\">deps1, deps2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (deps1 === <span class=\"literal\">undefined</span> || deps2 === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (deps1.length !== deps2.length) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> deps1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Object</span>.is(deps1[i], deps2[i])) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useMemo</span>(<span class=\"params\">fn, deps</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> slot = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (depsChanged(slot[<span class=\"number\">1</span>], deps)) &#123;</span><br><span class=\"line\">    slot[<span class=\"number\">0</span>] = fn();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  slot[<span class=\"number\">1</span>] = deps;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> slot[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h3><p>useCallback 通过 useMemo 实现，他返回一个 callback 函数，当依赖发生变化时，callback 函数会被重新计算，以提高性能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useCallback</span>(<span class=\"params\">fn, deps</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fn, deps);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"【前端】Redux Slice 开发模式快速入门","toc":true,"date":"2021-10-23T16:00:00.000Z","_content":"\n文章目的在于让读者快速了解基于 Redux ToolKit 的 主流 workflow 的基本使用，看完后能够知道如何在 React 中正确使用 Slice 模式进行开发。\n\n> 文章主要翻译自 [react-boilerplate-cra-template](https://cansahin.gitbook.io/react-boilerplate-cra-template/) 官网\n\n**下述的 slice 基本结构可通过 `yarn generate slice`自动生成！！！**\n\n<!-- more -->\n\n## Slice 模块的创建\n\n### 1. 创建具体的 slice 文件夹\n\n让我们创建一个 Slice 来管理 HomePage 的数据并命名为 HomePageSlice\n\n空文件夹位置: `../HomePage/slice/`\n\n### 2. 申明 state 的类型\n\nredux 管理你的 state，所以我们必须告诉 redux，state 长什么样子，我们可以在 slice 的同级目录创建 types.ts 文件来定义类型。\n\n`../HomePage/slice/types.ts`\n\n### 3. 更新 State 状态\n\n当添加新的 slice 到 App State 中，我们必须先在`types/RootState.ts`文件中声明这个 slice 类型。\n\n由于我们使用了 `Redux-injectors`来异步加载 Redux slices，因此在构建阶段 Redux State 是没办法确定 Slice 的所有种类的。所以我们主动去在 types/RootState.ts 文件中申明\n\n`types/RootState.ts`\n\n```ts\nimport { HomepageState } from \"app/.../Homepage/slice/types\";\n\n// 这里属性值必须是 optional，因为异步插入Redux state，所以slice在项目运行的时候并不是一直存在的\nexport interface RootState {\n  homepage?: HomepageState;\n}\n```\n\n### 4. 创建你自己的 slice\n\n对于创建 slice，redux-toolkit 做了绝大部分的工作，我们只需要创建`index.ts`文件在对应的 slice 文件夹。index.ts 的主要负责如下工作\n\n- 初始 state 数据\n- Actions\n- Reducers\n\n```ts\nimport { PayloadAction } from \"@reduxjs/toolkit\";\nimport { createSlice } from \"utils/@reduxjs/toolkit\"; // Importing from `utils` makes them more type-safe ✅\nimport { HomepageState } from \"./types\";\n\n// HomePage 的初始状态\nexport const initialState: HomepageState = {\n  username: \"Initial username for my state\",\n};\n\nconst slice = createSlice({\n  name: \"homepage\",\n  initialState,\n  reducers: {\n    changeUsername(state, action: PayloadAction<string>) {\n      // 在toolkit中不需要手动return，此处的修改为一个副本，toolkit会自动return 修改后的副本\n      state.username = action.payload;\n    },\n  },\n});\n\n/**\n * `actions` 可以在任意地方触发你的状态修改\n */\nexport const { actions: homepageActions } = slice;\n```\n\n### 5. 将定义好的 slice 加入到 Redux Store\n\n到目前为止，我们写了一个完整的 slice，但是如果想要使用，需要将其导入到 Root Store 中（异步）。\n\n我们可以通过自定义一个简单的 hook，实现在任意组件中动态导入特定模块的 slice\n\n```ts\n// ... 接上述代码\n\n/**\n *  1. 调用这个hook，会将HomePageSlice 导入到 Redux Store中\n *  2. 这个Hook 会返回一个Actions 用于在组件内部动态设置HomePageSlice的State状态\n */\nexport const useHomepageSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  return { actions: slice.actions };\n};\n```\n\n### 6. 使用`yarn generate slice`自动生成 slice 模块\n\n上述模版代码，可以通过 yarn generate slice 自动生成一整套的代码\n\n比如 login 模块的 slice 生成效果如下\n\n```bash\nShancw~MBP > yarn generate slice\n\n? What should it be called (automatically adds ...Slice postfix)\nShancw~MBP > login\n\n? Where do you want it to be created?\nShancw~MBP > pages/LoginPage\n\n? Do you want sagas for asynchronous flows? (e.g. fetching data)\nShancw~MBP > Yes\n\n## LOG INFO\n✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/index.ts\n✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/selectors.ts\n✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/types.ts\n✔  +- /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/types/RootState.ts\n✔  +- /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/types/RootState.ts\n✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/saga.ts\n✔  prettify\n✨  Done in 18.70s.\n\n```\n\n## 通过 ReSelect 获取 Redux Store 的数据\n\n一个创建 缓存 selector 函数的工具库，为 redux 深度定制，但是可以独立 redux，作为一种计算缓存使用\n\n- Selector：计算派生属性，让 Redux 存储最小状态\n- Selector 的计算效率非常高，Selector 是 pure function，无副作用，因此在传入的参数不变的情况下，不会重复计算即可返回值。\n- Selector 可组合使用，他们可以作为传入参数，提供给其他的 Selector 进行派生计算\n\n### 使用\n\nSelector 分为简易 Selector 和复杂 Selector\n\n#### 简易 Selector\n\n```js\nexport const mySelector = (state: MyRootState) => state.someState;\n```\n\n#### 复杂 Selector\n\n通过 reselect 的 createSelector 方法，我们可以将 多个简易 Selector 组合起来，构建出一个更加复杂的 Selector\n\n```js\nimport { createSelector } from \"@reduxjs/toolkit\";\n\nexport const mySelector = (state: MyRootState) => state.someState;\n\n// Here type of `someState` will be inferred ✅\nconst myComplexSelector = createSelector(\n  mySelector,\n  (someState) => someState.someNestedState\n);\n\nexport { myComplexSelector };\n```\n\n#### 在组件中通过 useSelector 使用\n\n```js\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUsername } from \"./slice/selectors\";\n\nexport function HomePage() {\n  // Type of the `username` will be inferred  ✅\n  const username = useSelector(selectUsername);\n  // ...\n}\n```\n\n## Redux-Saga\n\nRedux-Saga 是 Redux 中处理副作用（比如数据异步获取）的库，和 Redux-thunk 的区别在于 Redux-Saga 是声明式(Declarative)的，而 Redux-thunk 是指令式(Imperative)的。\n\n> Declarative 和 Imperative 的区别可参考 Stackoverflow 的这篇文章\n>\n> [What is the difference between declarative and imperative paradigm in programming?](https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin)\n>\n> Declarative 注重做什么（宏观），而 Imperative 注重 怎么做（控制流的细节）\n\n简而言之，Redux-Saga 更符合函数式编程的理念，无论是与 Redux 还是 React 都是非常契合的。\n\n### 使用\n\nSaga 通常和 Slice 一起使用。\n\n`../slice/saga.ts`\n\n```js\nimport { takeLatest, call, put, select } from \"redux-saga/effects\";\nimport { homepageActions } from \".\";\n\n// Root saga\nexport default function* homepageSaga() {\n  // if necessary, start multiple sagas at once with `all`\n  yield [\n    takeLatest(actions.someAction.type, getSomething),\n    takeLatest(actions.someOtherAction.type, getOtherThing),\n  ];\n}\n```\n\n#### 在组件中使用 saga\n\n`redux-injectors` 提供的 `useInjectSaga` 会将上面定义好的 slice 注入到 rootSaga 中。\n\n```js\n// ... code from above\n\nexport const useHomepageSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  useInjectSaga({ key: sliceKey, saga: homepageSaga });\n  return { actions: slice.actions };\n};\n```\n\nSaga 的注入提供以下几种模式\n\n- `DAEMON` (default value) — 在组件初次 mount 的时候，执行注入。此后 rootSaga 中会一直存在\n\n- `RESTART_ON_REMOUNT` — 当组件 mounted 之后，执行注入。当组件 unmounted 的时候执行销毁。从而实现性能优化\n\n- `ONCE_TILL_UNMOUNT` — behaves like `RESTART_ON_REMOUNT` but never runs the saga again.\n\n## Redux Injector\n\nRedux Injector 可以让你动态的加载 reducers 和 saga，而不是一次性加载完。动态加载最大的优点就是性能优化，其次还有利于 Webpack 的 Code Spliting（类似于 Vue 的组件动态加载效果）\n\n### 使用\n\n在组件中通过 useInjectReducer 和 useInjectSaga 来动态导入特定的 reducer 和 saga\n\n```js\nimport {\n  useInjectSaga,\n  useInjectReducer,\n  SagaInjectionModes,\n} from \"utils/redux-injectors\";\nimport { saga } from \"./saga\";\nimport { reducer } from \".\";\n\nexport function SomeComponent() {\n  useInjectReducer({ key: \"SomeComponent\", reducer });\n  useInjectSaga({\n    key: \"SomeComponent\",\n    saga,\n    mode: SagaInjectionModes.DAEMON,\n  });\n  // ...\n}\n```\n","source":"_posts/react-redux-slice-ecosystem.md","raw":"---\ntitle: 【前端】Redux Slice 开发模式快速入门\ncategories: [前端]\ntags: [redux]\ntoc: true\ndate: 2021/10/24\n---\n\n文章目的在于让读者快速了解基于 Redux ToolKit 的 主流 workflow 的基本使用，看完后能够知道如何在 React 中正确使用 Slice 模式进行开发。\n\n> 文章主要翻译自 [react-boilerplate-cra-template](https://cansahin.gitbook.io/react-boilerplate-cra-template/) 官网\n\n**下述的 slice 基本结构可通过 `yarn generate slice`自动生成！！！**\n\n<!-- more -->\n\n## Slice 模块的创建\n\n### 1. 创建具体的 slice 文件夹\n\n让我们创建一个 Slice 来管理 HomePage 的数据并命名为 HomePageSlice\n\n空文件夹位置: `../HomePage/slice/`\n\n### 2. 申明 state 的类型\n\nredux 管理你的 state，所以我们必须告诉 redux，state 长什么样子，我们可以在 slice 的同级目录创建 types.ts 文件来定义类型。\n\n`../HomePage/slice/types.ts`\n\n### 3. 更新 State 状态\n\n当添加新的 slice 到 App State 中，我们必须先在`types/RootState.ts`文件中声明这个 slice 类型。\n\n由于我们使用了 `Redux-injectors`来异步加载 Redux slices，因此在构建阶段 Redux State 是没办法确定 Slice 的所有种类的。所以我们主动去在 types/RootState.ts 文件中申明\n\n`types/RootState.ts`\n\n```ts\nimport { HomepageState } from \"app/.../Homepage/slice/types\";\n\n// 这里属性值必须是 optional，因为异步插入Redux state，所以slice在项目运行的时候并不是一直存在的\nexport interface RootState {\n  homepage?: HomepageState;\n}\n```\n\n### 4. 创建你自己的 slice\n\n对于创建 slice，redux-toolkit 做了绝大部分的工作，我们只需要创建`index.ts`文件在对应的 slice 文件夹。index.ts 的主要负责如下工作\n\n- 初始 state 数据\n- Actions\n- Reducers\n\n```ts\nimport { PayloadAction } from \"@reduxjs/toolkit\";\nimport { createSlice } from \"utils/@reduxjs/toolkit\"; // Importing from `utils` makes them more type-safe ✅\nimport { HomepageState } from \"./types\";\n\n// HomePage 的初始状态\nexport const initialState: HomepageState = {\n  username: \"Initial username for my state\",\n};\n\nconst slice = createSlice({\n  name: \"homepage\",\n  initialState,\n  reducers: {\n    changeUsername(state, action: PayloadAction<string>) {\n      // 在toolkit中不需要手动return，此处的修改为一个副本，toolkit会自动return 修改后的副本\n      state.username = action.payload;\n    },\n  },\n});\n\n/**\n * `actions` 可以在任意地方触发你的状态修改\n */\nexport const { actions: homepageActions } = slice;\n```\n\n### 5. 将定义好的 slice 加入到 Redux Store\n\n到目前为止，我们写了一个完整的 slice，但是如果想要使用，需要将其导入到 Root Store 中（异步）。\n\n我们可以通过自定义一个简单的 hook，实现在任意组件中动态导入特定模块的 slice\n\n```ts\n// ... 接上述代码\n\n/**\n *  1. 调用这个hook，会将HomePageSlice 导入到 Redux Store中\n *  2. 这个Hook 会返回一个Actions 用于在组件内部动态设置HomePageSlice的State状态\n */\nexport const useHomepageSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  return { actions: slice.actions };\n};\n```\n\n### 6. 使用`yarn generate slice`自动生成 slice 模块\n\n上述模版代码，可以通过 yarn generate slice 自动生成一整套的代码\n\n比如 login 模块的 slice 生成效果如下\n\n```bash\nShancw~MBP > yarn generate slice\n\n? What should it be called (automatically adds ...Slice postfix)\nShancw~MBP > login\n\n? Where do you want it to be created?\nShancw~MBP > pages/LoginPage\n\n? Do you want sagas for asynchronous flows? (e.g. fetching data)\nShancw~MBP > Yes\n\n## LOG INFO\n✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/index.ts\n✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/selectors.ts\n✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/types.ts\n✔  +- /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/types/RootState.ts\n✔  +- /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/types/RootState.ts\n✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/saga.ts\n✔  prettify\n✨  Done in 18.70s.\n\n```\n\n## 通过 ReSelect 获取 Redux Store 的数据\n\n一个创建 缓存 selector 函数的工具库，为 redux 深度定制，但是可以独立 redux，作为一种计算缓存使用\n\n- Selector：计算派生属性，让 Redux 存储最小状态\n- Selector 的计算效率非常高，Selector 是 pure function，无副作用，因此在传入的参数不变的情况下，不会重复计算即可返回值。\n- Selector 可组合使用，他们可以作为传入参数，提供给其他的 Selector 进行派生计算\n\n### 使用\n\nSelector 分为简易 Selector 和复杂 Selector\n\n#### 简易 Selector\n\n```js\nexport const mySelector = (state: MyRootState) => state.someState;\n```\n\n#### 复杂 Selector\n\n通过 reselect 的 createSelector 方法，我们可以将 多个简易 Selector 组合起来，构建出一个更加复杂的 Selector\n\n```js\nimport { createSelector } from \"@reduxjs/toolkit\";\n\nexport const mySelector = (state: MyRootState) => state.someState;\n\n// Here type of `someState` will be inferred ✅\nconst myComplexSelector = createSelector(\n  mySelector,\n  (someState) => someState.someNestedState\n);\n\nexport { myComplexSelector };\n```\n\n#### 在组件中通过 useSelector 使用\n\n```js\nimport React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUsername } from \"./slice/selectors\";\n\nexport function HomePage() {\n  // Type of the `username` will be inferred  ✅\n  const username = useSelector(selectUsername);\n  // ...\n}\n```\n\n## Redux-Saga\n\nRedux-Saga 是 Redux 中处理副作用（比如数据异步获取）的库，和 Redux-thunk 的区别在于 Redux-Saga 是声明式(Declarative)的，而 Redux-thunk 是指令式(Imperative)的。\n\n> Declarative 和 Imperative 的区别可参考 Stackoverflow 的这篇文章\n>\n> [What is the difference between declarative and imperative paradigm in programming?](https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin)\n>\n> Declarative 注重做什么（宏观），而 Imperative 注重 怎么做（控制流的细节）\n\n简而言之，Redux-Saga 更符合函数式编程的理念，无论是与 Redux 还是 React 都是非常契合的。\n\n### 使用\n\nSaga 通常和 Slice 一起使用。\n\n`../slice/saga.ts`\n\n```js\nimport { takeLatest, call, put, select } from \"redux-saga/effects\";\nimport { homepageActions } from \".\";\n\n// Root saga\nexport default function* homepageSaga() {\n  // if necessary, start multiple sagas at once with `all`\n  yield [\n    takeLatest(actions.someAction.type, getSomething),\n    takeLatest(actions.someOtherAction.type, getOtherThing),\n  ];\n}\n```\n\n#### 在组件中使用 saga\n\n`redux-injectors` 提供的 `useInjectSaga` 会将上面定义好的 slice 注入到 rootSaga 中。\n\n```js\n// ... code from above\n\nexport const useHomepageSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  useInjectSaga({ key: sliceKey, saga: homepageSaga });\n  return { actions: slice.actions };\n};\n```\n\nSaga 的注入提供以下几种模式\n\n- `DAEMON` (default value) — 在组件初次 mount 的时候，执行注入。此后 rootSaga 中会一直存在\n\n- `RESTART_ON_REMOUNT` — 当组件 mounted 之后，执行注入。当组件 unmounted 的时候执行销毁。从而实现性能优化\n\n- `ONCE_TILL_UNMOUNT` — behaves like `RESTART_ON_REMOUNT` but never runs the saga again.\n\n## Redux Injector\n\nRedux Injector 可以让你动态的加载 reducers 和 saga，而不是一次性加载完。动态加载最大的优点就是性能优化，其次还有利于 Webpack 的 Code Spliting（类似于 Vue 的组件动态加载效果）\n\n### 使用\n\n在组件中通过 useInjectReducer 和 useInjectSaga 来动态导入特定的 reducer 和 saga\n\n```js\nimport {\n  useInjectSaga,\n  useInjectReducer,\n  SagaInjectionModes,\n} from \"utils/redux-injectors\";\nimport { saga } from \"./saga\";\nimport { reducer } from \".\";\n\nexport function SomeComponent() {\n  useInjectReducer({ key: \"SomeComponent\", reducer });\n  useInjectSaga({\n    key: \"SomeComponent\",\n    saga,\n    mode: SagaInjectionModes.DAEMON,\n  });\n  // ...\n}\n```\n","slug":"react-redux-slice-ecosystem","published":1,"updated":"2021-10-24T06:20:41.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kg0055gosw4xovfi3a","content":"<p>文章目的在于让读者快速了解基于 Redux ToolKit 的 主流 workflow 的基本使用，看完后能够知道如何在 React 中正确使用 Slice 模式进行开发。</p>\n<blockquote>\n<p>文章主要翻译自 <a href=\"https://cansahin.gitbook.io/react-boilerplate-cra-template/\" target=\"_blank\" rel=\"noopener\">react-boilerplate-cra-template</a> 官网</p>\n</blockquote>\n<p><strong>下述的 slice 基本结构可通过 <code>yarn generate slice</code>自动生成！！！</strong></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Slice-模块的创建\"><a href=\"#Slice-模块的创建\" class=\"headerlink\" title=\"Slice 模块的创建\"></a>Slice 模块的创建</h2><h3 id=\"1-创建具体的-slice-文件夹\"><a href=\"#1-创建具体的-slice-文件夹\" class=\"headerlink\" title=\"1. 创建具体的 slice 文件夹\"></a>1. 创建具体的 slice 文件夹</h3><p>让我们创建一个 Slice 来管理 HomePage 的数据并命名为 HomePageSlice</p>\n<p>空文件夹位置: <code>../HomePage/slice/</code></p>\n<h3 id=\"2-申明-state-的类型\"><a href=\"#2-申明-state-的类型\" class=\"headerlink\" title=\"2. 申明 state 的类型\"></a>2. 申明 state 的类型</h3><p>redux 管理你的 state，所以我们必须告诉 redux，state 长什么样子，我们可以在 slice 的同级目录创建 types.ts 文件来定义类型。</p>\n<p><code>../HomePage/slice/types.ts</code></p>\n<h3 id=\"3-更新-State-状态\"><a href=\"#3-更新-State-状态\" class=\"headerlink\" title=\"3. 更新 State 状态\"></a>3. 更新 State 状态</h3><p>当添加新的 slice 到 App State 中，我们必须先在<code>types/RootState.ts</code>文件中声明这个 slice 类型。</p>\n<p>由于我们使用了 <code>Redux-injectors</code>来异步加载 Redux slices，因此在构建阶段 Redux State 是没办法确定 Slice 的所有种类的。所以我们主动去在 types/RootState.ts 文件中申明</p>\n<p><code>types/RootState.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomepageState &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"app/.../Homepage/slice/types\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里属性值必须是 optional，因为异步插入Redux state，所以slice在项目运行的时候并不是一直存在的</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> RootState &#123;</span><br><span class=\"line\">  homepage?: HomepageState;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-创建你自己的-slice\"><a href=\"#4-创建你自己的-slice\" class=\"headerlink\" title=\"4. 创建你自己的 slice\"></a>4. 创建你自己的 slice</h3><p>对于创建 slice，redux-toolkit 做了绝大部分的工作，我们只需要创建<code>index.ts</code>文件在对应的 slice 文件夹。index.ts 的主要负责如下工作</p>\n<ul>\n<li>初始 state 数据</li>\n<li>Actions</li>\n<li>Reducers</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; PayloadAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"utils/@reduxjs/toolkit\"</span>; <span class=\"comment\">// Importing from `utils` makes them more type-safe ✅</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomepageState &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./types\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// HomePage 的初始状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> initialState: HomepageState = &#123;</span><br><span class=\"line\">  username: <span class=\"string\">\"Initial username for my state\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> slice = createSlice(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"homepage\"</span>,</span><br><span class=\"line\">  initialState,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    changeUsername(state, action: PayloadAction&lt;<span class=\"built_in\">string</span>&gt;) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在toolkit中不需要手动return，此处的修改为一个副本，toolkit会自动return 修改后的副本</span></span><br><span class=\"line\">      state.username = action.payload;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * `actions` 可以在任意地方触发你的状态修改</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; actions: homepageActions &#125; = slice;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-将定义好的-slice-加入到-Redux-Store\"><a href=\"#5-将定义好的-slice-加入到-Redux-Store\" class=\"headerlink\" title=\"5. 将定义好的 slice 加入到 Redux Store\"></a>5. 将定义好的 slice 加入到 Redux Store</h3><p>到目前为止，我们写了一个完整的 slice，但是如果想要使用，需要将其导入到 Root Store 中（异步）。</p>\n<p>我们可以通过自定义一个简单的 hook，实现在任意组件中动态导入特定模块的 slice</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... 接上述代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  1. 调用这个hook，会将HomePageSlice 导入到 Redux Store中</span></span><br><span class=\"line\"><span class=\"comment\"> *  2. 这个Hook 会返回一个Actions 用于在组件内部动态设置HomePageSlice的State状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useHomepageSlice = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  useInjectReducer(&#123; key: slice.name, reducer: slice.reducer &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; actions: slice.actions &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-使用yarn-generate-slice自动生成-slice-模块\"><a href=\"#6-使用yarn-generate-slice自动生成-slice-模块\" class=\"headerlink\" title=\"6. 使用yarn generate slice自动生成 slice 模块\"></a>6. 使用<code>yarn generate slice</code>自动生成 slice 模块</h3><p>上述模版代码，可以通过 yarn generate slice 自动生成一整套的代码</p>\n<p>比如 login 模块的 slice 生成效果如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shancw~MBP &gt; yarn generate slice</span><br><span class=\"line\"></span><br><span class=\"line\">? What should it be called (automatically adds ...Slice postfix)</span><br><span class=\"line\">Shancw~MBP &gt; login</span><br><span class=\"line\"></span><br><span class=\"line\">? Where <span class=\"keyword\">do</span> you want it to be created?</span><br><span class=\"line\">Shancw~MBP &gt; pages/LoginPage</span><br><span class=\"line\"></span><br><span class=\"line\">? Do you want sagas <span class=\"keyword\">for</span> asynchronous flows? (e.g. fetching data)</span><br><span class=\"line\">Shancw~MBP &gt; Yes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## LOG INFO</span></span><br><span class=\"line\">✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/index.ts</span><br><span class=\"line\">✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/selectors.ts</span><br><span class=\"line\">✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/types.ts</span><br><span class=\"line\">✔  +- /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/types/RootState.ts</span><br><span class=\"line\">✔  +- /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/types/RootState.ts</span><br><span class=\"line\">✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/saga.ts</span><br><span class=\"line\">✔  prettify</span><br><span class=\"line\">✨  Done <span class=\"keyword\">in</span> 18.70s.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过-ReSelect-获取-Redux-Store-的数据\"><a href=\"#通过-ReSelect-获取-Redux-Store-的数据\" class=\"headerlink\" title=\"通过 ReSelect 获取 Redux Store 的数据\"></a>通过 ReSelect 获取 Redux Store 的数据</h2><p>一个创建 缓存 selector 函数的工具库，为 redux 深度定制，但是可以独立 redux，作为一种计算缓存使用</p>\n<ul>\n<li>Selector：计算派生属性，让 Redux 存储最小状态</li>\n<li>Selector 的计算效率非常高，Selector 是 pure function，无副作用，因此在传入的参数不变的情况下，不会重复计算即可返回值。</li>\n<li>Selector 可组合使用，他们可以作为传入参数，提供给其他的 Selector 进行派生计算</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>Selector 分为简易 Selector 和复杂 Selector</p>\n<h4 id=\"简易-Selector\"><a href=\"#简易-Selector\" class=\"headerlink\" title=\"简易 Selector\"></a>简易 Selector</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mySelector = <span class=\"function\">(<span class=\"params\">state: MyRootState</span>) =&gt;</span> state.someState;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"复杂-Selector\"><a href=\"#复杂-Selector\" class=\"headerlink\" title=\"复杂 Selector\"></a>复杂 Selector</h4><p>通过 reselect 的 createSelector 方法，我们可以将 多个简易 Selector 组合起来，构建出一个更加复杂的 Selector</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mySelector = <span class=\"function\">(<span class=\"params\">state: MyRootState</span>) =&gt;</span> state.someState;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Here type of `someState` will be inferred ✅</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myComplexSelector = createSelector(</span><br><span class=\"line\">  mySelector,</span><br><span class=\"line\">  (someState) =&gt; someState.someNestedState</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; myComplexSelector &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在组件中通过-useSelector-使用\"><a href=\"#在组件中通过-useSelector-使用\" class=\"headerlink\" title=\"在组件中通过 useSelector 使用\"></a>在组件中通过 useSelector 使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; selectUsername &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./slice/selectors\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HomePage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Type of the `username` will be inferred  ✅</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> username = useSelector(selectUsername);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redux-Saga\"><a href=\"#Redux-Saga\" class=\"headerlink\" title=\"Redux-Saga\"></a>Redux-Saga</h2><p>Redux-Saga 是 Redux 中处理副作用（比如数据异步获取）的库，和 Redux-thunk 的区别在于 Redux-Saga 是声明式(Declarative)的，而 Redux-thunk 是指令式(Imperative)的。</p>\n<blockquote>\n<p>Declarative 和 Imperative 的区别可参考 Stackoverflow 的这篇文章</p>\n<p><a href=\"https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin\" target=\"_blank\" rel=\"noopener\">What is the difference between declarative and imperative paradigm in programming?</a></p>\n<p>Declarative 注重做什么（宏观），而 Imperative 注重 怎么做（控制流的细节）</p>\n</blockquote>\n<p>简而言之，Redux-Saga 更符合函数式编程的理念，无论是与 Redux 还是 React 都是非常契合的。</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>Saga 通常和 Slice 一起使用。</p>\n<p><code>../slice/saga.ts</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; takeLatest, call, put, select &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux-saga/effects\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; homepageActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">\".\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Root saga</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">homepageSaga</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// if necessary, start multiple sagas at once with `all`</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> [</span><br><span class=\"line\">    takeLatest(actions.someAction.type, getSomething),</span><br><span class=\"line\">    takeLatest(actions.someOtherAction.type, getOtherThing),</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在组件中使用-saga\"><a href=\"#在组件中使用-saga\" class=\"headerlink\" title=\"在组件中使用 saga\"></a>在组件中使用 saga</h4><p><code>redux-injectors</code> 提供的 <code>useInjectSaga</code> 会将上面定义好的 slice 注入到 rootSaga 中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... code from above</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useHomepageSlice = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  useInjectReducer(&#123; <span class=\"attr\">key</span>: slice.name, <span class=\"attr\">reducer</span>: slice.reducer &#125;);</span><br><span class=\"line\">  useInjectSaga(&#123; <span class=\"attr\">key</span>: sliceKey, <span class=\"attr\">saga</span>: homepageSaga &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">actions</span>: slice.actions &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Saga 的注入提供以下几种模式</p>\n<ul>\n<li><p><code>DAEMON</code> (default value) — 在组件初次 mount 的时候，执行注入。此后 rootSaga 中会一直存在</p>\n</li>\n<li><p><code>RESTART_ON_REMOUNT</code> — 当组件 mounted 之后，执行注入。当组件 unmounted 的时候执行销毁。从而实现性能优化</p>\n</li>\n<li><p><code>ONCE_TILL_UNMOUNT</code> — behaves like <code>RESTART_ON_REMOUNT</code> but never runs the saga again.</p>\n</li>\n</ul>\n<h2 id=\"Redux-Injector\"><a href=\"#Redux-Injector\" class=\"headerlink\" title=\"Redux Injector\"></a>Redux Injector</h2><p>Redux Injector 可以让你动态的加载 reducers 和 saga，而不是一次性加载完。动态加载最大的优点就是性能优化，其次还有利于 Webpack 的 Code Spliting（类似于 Vue 的组件动态加载效果）</p>\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在组件中通过 useInjectReducer 和 useInjectSaga 来动态导入特定的 reducer 和 saga</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  useInjectSaga,</span><br><span class=\"line\">  useInjectReducer,</span><br><span class=\"line\">  SagaInjectionModes,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"utils/redux-injectors\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; saga &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./saga\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">\".\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  useInjectReducer(&#123; <span class=\"attr\">key</span>: <span class=\"string\">\"SomeComponent\"</span>, reducer &#125;);</span><br><span class=\"line\">  useInjectSaga(&#123;</span><br><span class=\"line\">    key: <span class=\"string\">\"SomeComponent\"</span>,</span><br><span class=\"line\">    saga,</span><br><span class=\"line\">    mode: SagaInjectionModes.DAEMON,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>文章目的在于让读者快速了解基于 Redux ToolKit 的 主流 workflow 的基本使用，看完后能够知道如何在 React 中正确使用 Slice 模式进行开发。</p>\n<blockquote>\n<p>文章主要翻译自 <a href=\"https://cansahin.gitbook.io/react-boilerplate-cra-template/\" target=\"_blank\" rel=\"noopener\">react-boilerplate-cra-template</a> 官网</p>\n</blockquote>\n<p><strong>下述的 slice 基本结构可通过 <code>yarn generate slice</code>自动生成！！！</strong></p>","more":"<h2 id=\"Slice-模块的创建\"><a href=\"#Slice-模块的创建\" class=\"headerlink\" title=\"Slice 模块的创建\"></a>Slice 模块的创建</h2><h3 id=\"1-创建具体的-slice-文件夹\"><a href=\"#1-创建具体的-slice-文件夹\" class=\"headerlink\" title=\"1. 创建具体的 slice 文件夹\"></a>1. 创建具体的 slice 文件夹</h3><p>让我们创建一个 Slice 来管理 HomePage 的数据并命名为 HomePageSlice</p>\n<p>空文件夹位置: <code>../HomePage/slice/</code></p>\n<h3 id=\"2-申明-state-的类型\"><a href=\"#2-申明-state-的类型\" class=\"headerlink\" title=\"2. 申明 state 的类型\"></a>2. 申明 state 的类型</h3><p>redux 管理你的 state，所以我们必须告诉 redux，state 长什么样子，我们可以在 slice 的同级目录创建 types.ts 文件来定义类型。</p>\n<p><code>../HomePage/slice/types.ts</code></p>\n<h3 id=\"3-更新-State-状态\"><a href=\"#3-更新-State-状态\" class=\"headerlink\" title=\"3. 更新 State 状态\"></a>3. 更新 State 状态</h3><p>当添加新的 slice 到 App State 中，我们必须先在<code>types/RootState.ts</code>文件中声明这个 slice 类型。</p>\n<p>由于我们使用了 <code>Redux-injectors</code>来异步加载 Redux slices，因此在构建阶段 Redux State 是没办法确定 Slice 的所有种类的。所以我们主动去在 types/RootState.ts 文件中申明</p>\n<p><code>types/RootState.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomepageState &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"app/.../Homepage/slice/types\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里属性值必须是 optional，因为异步插入Redux state，所以slice在项目运行的时候并不是一直存在的</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> RootState &#123;</span><br><span class=\"line\">  homepage?: HomepageState;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-创建你自己的-slice\"><a href=\"#4-创建你自己的-slice\" class=\"headerlink\" title=\"4. 创建你自己的 slice\"></a>4. 创建你自己的 slice</h3><p>对于创建 slice，redux-toolkit 做了绝大部分的工作，我们只需要创建<code>index.ts</code>文件在对应的 slice 文件夹。index.ts 的主要负责如下工作</p>\n<ul>\n<li>初始 state 数据</li>\n<li>Actions</li>\n<li>Reducers</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; PayloadAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"utils/@reduxjs/toolkit\"</span>; <span class=\"comment\">// Importing from `utils` makes them more type-safe ✅</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomepageState &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./types\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// HomePage 的初始状态</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> initialState: HomepageState = &#123;</span><br><span class=\"line\">  username: <span class=\"string\">\"Initial username for my state\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> slice = createSlice(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"homepage\"</span>,</span><br><span class=\"line\">  initialState,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    changeUsername(state, action: PayloadAction&lt;<span class=\"built_in\">string</span>&gt;) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 在toolkit中不需要手动return，此处的修改为一个副本，toolkit会自动return 修改后的副本</span></span><br><span class=\"line\">      state.username = action.payload;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * `actions` 可以在任意地方触发你的状态修改</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; actions: homepageActions &#125; = slice;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-将定义好的-slice-加入到-Redux-Store\"><a href=\"#5-将定义好的-slice-加入到-Redux-Store\" class=\"headerlink\" title=\"5. 将定义好的 slice 加入到 Redux Store\"></a>5. 将定义好的 slice 加入到 Redux Store</h3><p>到目前为止，我们写了一个完整的 slice，但是如果想要使用，需要将其导入到 Root Store 中（异步）。</p>\n<p>我们可以通过自定义一个简单的 hook，实现在任意组件中动态导入特定模块的 slice</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... 接上述代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  1. 调用这个hook，会将HomePageSlice 导入到 Redux Store中</span></span><br><span class=\"line\"><span class=\"comment\"> *  2. 这个Hook 会返回一个Actions 用于在组件内部动态设置HomePageSlice的State状态</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useHomepageSlice = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  useInjectReducer(&#123; key: slice.name, reducer: slice.reducer &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; actions: slice.actions &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-使用yarn-generate-slice自动生成-slice-模块\"><a href=\"#6-使用yarn-generate-slice自动生成-slice-模块\" class=\"headerlink\" title=\"6. 使用yarn generate slice自动生成 slice 模块\"></a>6. 使用<code>yarn generate slice</code>自动生成 slice 模块</h3><p>上述模版代码，可以通过 yarn generate slice 自动生成一整套的代码</p>\n<p>比如 login 模块的 slice 生成效果如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shancw~MBP &gt; yarn generate slice</span><br><span class=\"line\"></span><br><span class=\"line\">? What should it be called (automatically adds ...Slice postfix)</span><br><span class=\"line\">Shancw~MBP &gt; login</span><br><span class=\"line\"></span><br><span class=\"line\">? Where <span class=\"keyword\">do</span> you want it to be created?</span><br><span class=\"line\">Shancw~MBP &gt; pages/LoginPage</span><br><span class=\"line\"></span><br><span class=\"line\">? Do you want sagas <span class=\"keyword\">for</span> asynchronous flows? (e.g. fetching data)</span><br><span class=\"line\">Shancw~MBP &gt; Yes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## LOG INFO</span></span><br><span class=\"line\">✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/index.ts</span><br><span class=\"line\">✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/selectors.ts</span><br><span class=\"line\">✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/types.ts</span><br><span class=\"line\">✔  +- /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/types/RootState.ts</span><br><span class=\"line\">✔  +- /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/types/RootState.ts</span><br><span class=\"line\">✔  ++ /Users/wushangcheng/work/photovoltaic/photovoltaic-web/src/app/pages/LoginPage/slice/saga.ts</span><br><span class=\"line\">✔  prettify</span><br><span class=\"line\">✨  Done <span class=\"keyword\">in</span> 18.70s.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过-ReSelect-获取-Redux-Store-的数据\"><a href=\"#通过-ReSelect-获取-Redux-Store-的数据\" class=\"headerlink\" title=\"通过 ReSelect 获取 Redux Store 的数据\"></a>通过 ReSelect 获取 Redux Store 的数据</h2><p>一个创建 缓存 selector 函数的工具库，为 redux 深度定制，但是可以独立 redux，作为一种计算缓存使用</p>\n<ul>\n<li>Selector：计算派生属性，让 Redux 存储最小状态</li>\n<li>Selector 的计算效率非常高，Selector 是 pure function，无副作用，因此在传入的参数不变的情况下，不会重复计算即可返回值。</li>\n<li>Selector 可组合使用，他们可以作为传入参数，提供给其他的 Selector 进行派生计算</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>Selector 分为简易 Selector 和复杂 Selector</p>\n<h4 id=\"简易-Selector\"><a href=\"#简易-Selector\" class=\"headerlink\" title=\"简易 Selector\"></a>简易 Selector</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mySelector = <span class=\"function\">(<span class=\"params\">state: MyRootState</span>) =&gt;</span> state.someState;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"复杂-Selector\"><a href=\"#复杂-Selector\" class=\"headerlink\" title=\"复杂 Selector\"></a>复杂 Selector</h4><p>通过 reselect 的 createSelector 方法，我们可以将 多个简易 Selector 组合起来，构建出一个更加复杂的 Selector</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mySelector = <span class=\"function\">(<span class=\"params\">state: MyRootState</span>) =&gt;</span> state.someState;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Here type of `someState` will be inferred ✅</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myComplexSelector = createSelector(</span><br><span class=\"line\">  mySelector,</span><br><span class=\"line\">  (someState) =&gt; someState.someNestedState</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; myComplexSelector &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在组件中通过-useSelector-使用\"><a href=\"#在组件中通过-useSelector-使用\" class=\"headerlink\" title=\"在组件中通过 useSelector 使用\"></a>在组件中通过 useSelector 使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useSelector &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-redux\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; selectUsername &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./slice/selectors\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HomePage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Type of the `username` will be inferred  ✅</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> username = useSelector(selectUsername);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redux-Saga\"><a href=\"#Redux-Saga\" class=\"headerlink\" title=\"Redux-Saga\"></a>Redux-Saga</h2><p>Redux-Saga 是 Redux 中处理副作用（比如数据异步获取）的库，和 Redux-thunk 的区别在于 Redux-Saga 是声明式(Declarative)的，而 Redux-thunk 是指令式(Imperative)的。</p>\n<blockquote>\n<p>Declarative 和 Imperative 的区别可参考 Stackoverflow 的这篇文章</p>\n<p><a href=\"https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin\" target=\"_blank\" rel=\"noopener\">What is the difference between declarative and imperative paradigm in programming?</a></p>\n<p>Declarative 注重做什么（宏观），而 Imperative 注重 怎么做（控制流的细节）</p>\n</blockquote>\n<p>简而言之，Redux-Saga 更符合函数式编程的理念，无论是与 Redux 还是 React 都是非常契合的。</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>Saga 通常和 Slice 一起使用。</p>\n<p><code>../slice/saga.ts</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; takeLatest, call, put, select &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"redux-saga/effects\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; homepageActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">\".\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Root saga</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">homepageSaga</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// if necessary, start multiple sagas at once with `all`</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> [</span><br><span class=\"line\">    takeLatest(actions.someAction.type, getSomething),</span><br><span class=\"line\">    takeLatest(actions.someOtherAction.type, getOtherThing),</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"在组件中使用-saga\"><a href=\"#在组件中使用-saga\" class=\"headerlink\" title=\"在组件中使用 saga\"></a>在组件中使用 saga</h4><p><code>redux-injectors</code> 提供的 <code>useInjectSaga</code> 会将上面定义好的 slice 注入到 rootSaga 中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... code from above</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useHomepageSlice = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  useInjectReducer(&#123; <span class=\"attr\">key</span>: slice.name, <span class=\"attr\">reducer</span>: slice.reducer &#125;);</span><br><span class=\"line\">  useInjectSaga(&#123; <span class=\"attr\">key</span>: sliceKey, <span class=\"attr\">saga</span>: homepageSaga &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">actions</span>: slice.actions &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Saga 的注入提供以下几种模式</p>\n<ul>\n<li><p><code>DAEMON</code> (default value) — 在组件初次 mount 的时候，执行注入。此后 rootSaga 中会一直存在</p>\n</li>\n<li><p><code>RESTART_ON_REMOUNT</code> — 当组件 mounted 之后，执行注入。当组件 unmounted 的时候执行销毁。从而实现性能优化</p>\n</li>\n<li><p><code>ONCE_TILL_UNMOUNT</code> — behaves like <code>RESTART_ON_REMOUNT</code> but never runs the saga again.</p>\n</li>\n</ul>\n<h2 id=\"Redux-Injector\"><a href=\"#Redux-Injector\" class=\"headerlink\" title=\"Redux Injector\"></a>Redux Injector</h2><p>Redux Injector 可以让你动态的加载 reducers 和 saga，而不是一次性加载完。动态加载最大的优点就是性能优化，其次还有利于 Webpack 的 Code Spliting（类似于 Vue 的组件动态加载效果）</p>\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在组件中通过 useInjectReducer 和 useInjectSaga 来动态导入特定的 reducer 和 saga</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  useInjectSaga,</span><br><span class=\"line\">  useInjectReducer,</span><br><span class=\"line\">  SagaInjectionModes,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"utils/redux-injectors\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; saga &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./saga\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">\".\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SomeComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  useInjectReducer(&#123; <span class=\"attr\">key</span>: <span class=\"string\">\"SomeComponent\"</span>, reducer &#125;);</span><br><span class=\"line\">  useInjectSaga(&#123;</span><br><span class=\"line\">    key: <span class=\"string\">\"SomeComponent\"</span>,</span><br><span class=\"line\">    saga,</span><br><span class=\"line\">    mode: SagaInjectionModes.DAEMON,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"styled-component cheat sheet","toc":true,"date":"2021-10-10T16:00:00.000Z","_content":"\n通过 styled-component，当你在定义 style 的时候，就已经在创建一个常规的 React 组件，这个组件管理了定义的样式。\n\n<!-- more -->\n\n## 基本使用\n\n```jsx\n// Create a Title component that'll render an <h1> tag with some styles\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\n// Create a Wrapper component that'll render a <section> tag with some styles\nconst Wrapper = styled.section`\n  padding: 4em;\n  background: papayawhip;\n`;\n\n// Use Title and Wrapper like any other React component – except they're styled!\nrender(\n  <Wrapper>\n    <Title>Hello World!</Title>\n  </Wrapper>\n);\n```\n\n效果图：\n![](/images/styled-components/01.png)\n\n## 通过 props 控制组件 style/attrs\n\n### style\n\n通过 JS 提供的模板语法，`${props => {/*props操作*/}}`即可实现对具体样式进行控制\n\n```jsx\nconst Button = styled.button`\n  /* Adapt the colors based on primary prop */\n  background: ${(props) => (props.primary ? \"palevioletred\" : \"white\")};\n  color: ${(props) => (props.primary ? \"white\" : \"palevioletred\")};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nrender(\n  <div>\n    <Button>Normal</Button>\n    <Button primary>Primary</Button>\n  </div>\n);\n```\n\n### attrs\n\n通过 attrs 构造器，我们可以给组件增加额外的 props（或者说 attributes）\n\n```js\nconst Input = styled.input.attrs((props) => ({\n  // we can define static props\n  type: \"text\",\n\n  // or we can define dynamic ones\n  size: props.size || \"1em\",\n}))`\n  color: palevioletred;\n  font-size: 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n\n  /* here we use the dynamically computed prop */\n  margin: ${(props) => props.size};\n  padding: ${(props) => props.size};\n`;\n\nrender(\n  <div>\n    <Input placeholder=\"A small text input\" />\n    <br />\n    <Input placeholder=\"A bigger text input\" size=\"2em\" />\n  </div>\n);\n```\n\n![](/images/styled-components/03.png)\n\n## 组件样式扩展与覆写 - extending styles\n\n### 对 styled.xxx 组件的扩展\n\n有时候我们需要对组件样式进行一些小的修改，比如字体，颜色等。或者在此基础上，增加额外的效果。\n\n语法：styled(...)\n将定义好的组件，直接传入 styled 构造函数中\n\n```jsx\n// 基础组件\nconst Button = styled.button`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// 拓展组件\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nrender(\n  <div>\n    <Button>Normal Button</Button>\n    <TomatoButton>Tomato Button</TomatoButton>\n  </div>\n);\n```\n\n![](/images/styled-components/02.png)\n\n### 对任意组件的扩展\n\nstyled 方法支持任何组件的扩展，**只要他们的 className 被传递到组件上**\n\n```jsx\n// This could be react-router-dom's Link for example\nconst Link = ({ className, children }) => (\n  <a className={`some-global-class ${className}`}>{children}</a>\n);\n\nconst StyledLink = styled(Link)`\n  color: palevioletred;\n  font-weight: bold;\n`;\n\nrender(\n  <div>\n    <Link>Unstyled, boring Link</Link>\n    <br />\n    <StyledLink>Styled, exciting Link</StyledLink>\n  </div>\n);\n```\n\n![](/images/styled-components/03.png)\n\n## 组件样式的嵌套设置（类 scss）\n\n[传送门](https://styled-components.com/docs/basics#pseudoelements-pseudoselectors-and-nesting)\n\n```jsx\nconst Thing = styled.div.attrs((/* props */) => ({ tabIndex: 0 }))`\n  color: blue;\n\n  &:hover {\n    color: red; // <Thing> when hovered\n  }\n\n  & ~ & {\n    background: tomato; // <Thing> as a sibling of <Thing>, but maybe not directly next to it\n  }\n\n  & + & {\n    background: lime; // <Thing> next to <Thing>\n  }\n\n  &.something {\n    background: orange; // <Thing> tagged with an additional CSS class \".something\"\n  }\n\n  .something-else & {\n    border: 1px solid; // <Thing> inside another element labeled \".something-else\"\n  }\n`;\nrender(\n  <React.Fragment>\n    <Thing>Hello world!</Thing>\n    <Thing>How ya doing?</Thing>\n    <Thing className=\"something\">The sun is shining...</Thing>\n    <div>Pretty nice day today.</div>\n    <Thing>Don't you think?</Thing>\n    <div className=\"something-else\">\n      <Thing>Splendid.</Thing>\n    </div>\n  </React.Fragment>\n);\n```\n\n![](/images/styled-components/05.png)\n","source":"_posts/react-styled-component-cheat-sheets.md","raw":"---\ntitle: styled-component cheat sheet\ncategories: [前端]\ntags: [react, styled-component]\ntoc: true\ndate: 2021/10/11\n---\n\n通过 styled-component，当你在定义 style 的时候，就已经在创建一个常规的 React 组件，这个组件管理了定义的样式。\n\n<!-- more -->\n\n## 基本使用\n\n```jsx\n// Create a Title component that'll render an <h1> tag with some styles\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\n// Create a Wrapper component that'll render a <section> tag with some styles\nconst Wrapper = styled.section`\n  padding: 4em;\n  background: papayawhip;\n`;\n\n// Use Title and Wrapper like any other React component – except they're styled!\nrender(\n  <Wrapper>\n    <Title>Hello World!</Title>\n  </Wrapper>\n);\n```\n\n效果图：\n![](/images/styled-components/01.png)\n\n## 通过 props 控制组件 style/attrs\n\n### style\n\n通过 JS 提供的模板语法，`${props => {/*props操作*/}}`即可实现对具体样式进行控制\n\n```jsx\nconst Button = styled.button`\n  /* Adapt the colors based on primary prop */\n  background: ${(props) => (props.primary ? \"palevioletred\" : \"white\")};\n  color: ${(props) => (props.primary ? \"white\" : \"palevioletred\")};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nrender(\n  <div>\n    <Button>Normal</Button>\n    <Button primary>Primary</Button>\n  </div>\n);\n```\n\n### attrs\n\n通过 attrs 构造器，我们可以给组件增加额外的 props（或者说 attributes）\n\n```js\nconst Input = styled.input.attrs((props) => ({\n  // we can define static props\n  type: \"text\",\n\n  // or we can define dynamic ones\n  size: props.size || \"1em\",\n}))`\n  color: palevioletred;\n  font-size: 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n\n  /* here we use the dynamically computed prop */\n  margin: ${(props) => props.size};\n  padding: ${(props) => props.size};\n`;\n\nrender(\n  <div>\n    <Input placeholder=\"A small text input\" />\n    <br />\n    <Input placeholder=\"A bigger text input\" size=\"2em\" />\n  </div>\n);\n```\n\n![](/images/styled-components/03.png)\n\n## 组件样式扩展与覆写 - extending styles\n\n### 对 styled.xxx 组件的扩展\n\n有时候我们需要对组件样式进行一些小的修改，比如字体，颜色等。或者在此基础上，增加额外的效果。\n\n语法：styled(...)\n将定义好的组件，直接传入 styled 构造函数中\n\n```jsx\n// 基础组件\nconst Button = styled.button`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// 拓展组件\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nrender(\n  <div>\n    <Button>Normal Button</Button>\n    <TomatoButton>Tomato Button</TomatoButton>\n  </div>\n);\n```\n\n![](/images/styled-components/02.png)\n\n### 对任意组件的扩展\n\nstyled 方法支持任何组件的扩展，**只要他们的 className 被传递到组件上**\n\n```jsx\n// This could be react-router-dom's Link for example\nconst Link = ({ className, children }) => (\n  <a className={`some-global-class ${className}`}>{children}</a>\n);\n\nconst StyledLink = styled(Link)`\n  color: palevioletred;\n  font-weight: bold;\n`;\n\nrender(\n  <div>\n    <Link>Unstyled, boring Link</Link>\n    <br />\n    <StyledLink>Styled, exciting Link</StyledLink>\n  </div>\n);\n```\n\n![](/images/styled-components/03.png)\n\n## 组件样式的嵌套设置（类 scss）\n\n[传送门](https://styled-components.com/docs/basics#pseudoelements-pseudoselectors-and-nesting)\n\n```jsx\nconst Thing = styled.div.attrs((/* props */) => ({ tabIndex: 0 }))`\n  color: blue;\n\n  &:hover {\n    color: red; // <Thing> when hovered\n  }\n\n  & ~ & {\n    background: tomato; // <Thing> as a sibling of <Thing>, but maybe not directly next to it\n  }\n\n  & + & {\n    background: lime; // <Thing> next to <Thing>\n  }\n\n  &.something {\n    background: orange; // <Thing> tagged with an additional CSS class \".something\"\n  }\n\n  .something-else & {\n    border: 1px solid; // <Thing> inside another element labeled \".something-else\"\n  }\n`;\nrender(\n  <React.Fragment>\n    <Thing>Hello world!</Thing>\n    <Thing>How ya doing?</Thing>\n    <Thing className=\"something\">The sun is shining...</Thing>\n    <div>Pretty nice day today.</div>\n    <Thing>Don't you think?</Thing>\n    <div className=\"something-else\">\n      <Thing>Splendid.</Thing>\n    </div>\n  </React.Fragment>\n);\n```\n\n![](/images/styled-components/05.png)\n","slug":"react-styled-component-cheat-sheets","published":1,"updated":"2021-10-11T05:39:14.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kh0059goswestig7du","content":"<p>通过 styled-component，当你在定义 style 的时候，就已经在创建一个常规的 React 组件，这个组件管理了定义的样式。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a Title component that'll render an &lt;h1&gt; tag with some styles</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Title = styled.h1<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  font-size: 1.5em;</span></span><br><span class=\"line\"><span class=\"string\">  text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">  color: palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a Wrapper component that'll render a &lt;section&gt; tag with some styles</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Wrapper = styled.section<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  padding: 4em;</span></span><br><span class=\"line\"><span class=\"string\">  background: papayawhip;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use Title and Wrapper like any other React component – except they're styled!</span></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;Wrapper&gt;</span><br><span class=\"line\">    &lt;Title&gt;Hello World!&lt;<span class=\"regexp\">/Title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Wrapper&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>效果图：<br><img src=\"/images/styled-components/01.png\" alt=\"\"></p>\n<h2 id=\"通过-props-控制组件-style-attrs\"><a href=\"#通过-props-控制组件-style-attrs\" class=\"headerlink\" title=\"通过 props 控制组件 style/attrs\"></a>通过 props 控制组件 style/attrs</h2><h3 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h3><p>通过 JS 提供的模板语法，<code>${props =&gt; {/*props操作*/}}</code>即可实现对具体样式进行控制</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button = styled.button<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  /* Adapt the colors based on primary prop */</span></span><br><span class=\"line\"><span class=\"string\">  background: <span class=\"subst\">$&#123;(props) =&gt; (props.primary ? <span class=\"string\">\"palevioletred\"</span> : <span class=\"string\">\"white\"</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  color: <span class=\"subst\">$&#123;(props) =&gt; (props.primary ? <span class=\"string\">\"white\"</span> : <span class=\"string\">\"palevioletred\"</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  font-size: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  margin: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  padding: 0.25em 1em;</span></span><br><span class=\"line\"><span class=\"string\">  border: 2px solid palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  border-radius: 3px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Button&gt;Normal&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Button primary&gt;Primary&lt;/</span>Button&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attrs\"><a href=\"#attrs\" class=\"headerlink\" title=\"attrs\"></a>attrs</h3><p>通过 attrs 构造器，我们可以给组件增加额外的 props（或者说 attributes）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input = styled.input.attrs(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"comment\">// we can define static props</span></span><br><span class=\"line\">  type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// or we can define dynamic ones</span></span><br><span class=\"line\">  size: props.size || <span class=\"string\">\"1em\"</span>,</span><br><span class=\"line\">&#125;))<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  color: palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  font-size: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  border: 2px solid palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  border-radius: 3px;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  /* here we use the dynamically computed prop */</span></span><br><span class=\"line\"><span class=\"string\">  margin: <span class=\"subst\">$&#123;(props) =&gt; props.size&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  padding: <span class=\"subst\">$&#123;(props) =&gt; props.size&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Input placeholder=<span class=\"string\">\"A small text input\"</span> /&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">    &lt;Input placeholder=<span class=\"string\">\"A bigger text input\"</span> size=<span class=\"string\">\"2em\"</span> /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/styled-components/03.png\" alt=\"\"></p>\n<h2 id=\"组件样式扩展与覆写-extending-styles\"><a href=\"#组件样式扩展与覆写-extending-styles\" class=\"headerlink\" title=\"组件样式扩展与覆写 - extending styles\"></a>组件样式扩展与覆写 - extending styles</h2><h3 id=\"对-styled-xxx-组件的扩展\"><a href=\"#对-styled-xxx-组件的扩展\" class=\"headerlink\" title=\"对 styled.xxx 组件的扩展\"></a>对 styled.xxx 组件的扩展</h3><p>有时候我们需要对组件样式进行一些小的修改，比如字体，颜色等。或者在此基础上，增加额外的效果。</p>\n<p>语法：styled(…)<br>将定义好的组件，直接传入 styled 构造函数中</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基础组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Button = styled.button<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  color: palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  font-size: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  margin: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  padding: 0.25em 1em;</span></span><br><span class=\"line\"><span class=\"string\">  border: 2px solid palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  border-radius: 3px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拓展组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> TomatoButton = styled(Button)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  color: tomato;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: tomato;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Button&gt;Normal Button&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;TomatoButton&gt;Tomato Button&lt;/</span>TomatoButton&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/styled-components/02.png\" alt=\"\"></p>\n<h3 id=\"对任意组件的扩展\"><a href=\"#对任意组件的扩展\" class=\"headerlink\" title=\"对任意组件的扩展\"></a>对任意组件的扩展</h3><p>styled 方法支持任何组件的扩展，<strong>只要他们的 className 被传递到组件上</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This could be react-router-dom's Link for example</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Link = <span class=\"function\">(<span class=\"params\">&#123; className, children &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;a className=&#123;<span class=\"string\">`some-global-class <span class=\"subst\">$&#123;className&#125;</span>`</span>&#125;&gt;&#123;children&#125;&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const StyledLink = styled(Link)`</span></span><br><span class=\"line\"><span class=\"regexp\">  color: palevioletred;</span></span><br><span class=\"line\"><span class=\"regexp\">  font-weight: bold;</span></span><br><span class=\"line\"><span class=\"regexp\">`;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Link&gt;Unstyled, boring Link&lt;/</span>Link&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">    &lt;StyledLink&gt;Styled, exciting Link&lt;<span class=\"regexp\">/StyledLink&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/styled-components/03.png\" alt=\"\"></p>\n<h2 id=\"组件样式的嵌套设置（类-scss）\"><a href=\"#组件样式的嵌套设置（类-scss）\" class=\"headerlink\" title=\"组件样式的嵌套设置（类 scss）\"></a>组件样式的嵌套设置（类 scss）</h2><p><a href=\"https://styled-components.com/docs/basics#pseudoelements-pseudoselectors-and-nesting\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Thing = styled.div.attrs(<span class=\"function\">(<span class=\"params\"><span class=\"regexp\">/* props */</span></span>) =&gt;</span> (&#123; <span class=\"attr\">tabIndex</span>: <span class=\"number\">0</span> &#125;))<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  color: blue;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &amp;:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: red; // &lt;Thing&gt; when hovered</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &amp; ~ &amp; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    background: tomato; // &lt;Thing&gt; as a sibling of &lt;Thing&gt;, but maybe not directly next to it</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &amp; + &amp; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    background: lime; // &lt;Thing&gt; next to &lt;Thing&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &amp;.something &#123;</span></span><br><span class=\"line\"><span class=\"string\">    background: orange; // &lt;Thing&gt; tagged with an additional CSS class \".something\"</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  .something-else &amp; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    border: 1px solid; // &lt;Thing&gt; inside another element labeled \".something-else\"</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;React.Fragment&gt;</span><br><span class=\"line\">    &lt;Thing&gt;Hello world!&lt;<span class=\"regexp\">/Thing&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Thing&gt;How ya doing?&lt;/</span>Thing&gt;</span><br><span class=\"line\">    &lt;Thing className=<span class=\"string\">\"something\"</span>&gt;The sun is shining...&lt;<span class=\"regexp\">/Thing&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;Pretty nice day today.&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;Thing&gt;Don<span class=\"string\">'t you think?&lt;/Thing&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div className=\"something-else\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Thing&gt;Splendid.&lt;/Thing&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/React.Fragment&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/styled-components/05.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>通过 styled-component，当你在定义 style 的时候，就已经在创建一个常规的 React 组件，这个组件管理了定义的样式。</p>","more":"<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a Title component that'll render an &lt;h1&gt; tag with some styles</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Title = styled.h1<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  font-size: 1.5em;</span></span><br><span class=\"line\"><span class=\"string\">  text-align: center;</span></span><br><span class=\"line\"><span class=\"string\">  color: palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Create a Wrapper component that'll render a &lt;section&gt; tag with some styles</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Wrapper = styled.section<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  padding: 4em;</span></span><br><span class=\"line\"><span class=\"string\">  background: papayawhip;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use Title and Wrapper like any other React component – except they're styled!</span></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;Wrapper&gt;</span><br><span class=\"line\">    &lt;Title&gt;Hello World!&lt;<span class=\"regexp\">/Title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>Wrapper&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>效果图：<br><img src=\"/images/styled-components/01.png\" alt=\"\"></p>\n<h2 id=\"通过-props-控制组件-style-attrs\"><a href=\"#通过-props-控制组件-style-attrs\" class=\"headerlink\" title=\"通过 props 控制组件 style/attrs\"></a>通过 props 控制组件 style/attrs</h2><h3 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h3><p>通过 JS 提供的模板语法，<code>${props =&gt; {/*props操作*/}}</code>即可实现对具体样式进行控制</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Button = styled.button<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  /* Adapt the colors based on primary prop */</span></span><br><span class=\"line\"><span class=\"string\">  background: <span class=\"subst\">$&#123;(props) =&gt; (props.primary ? <span class=\"string\">\"palevioletred\"</span> : <span class=\"string\">\"white\"</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  color: <span class=\"subst\">$&#123;(props) =&gt; (props.primary ? <span class=\"string\">\"white\"</span> : <span class=\"string\">\"palevioletred\"</span>)&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  font-size: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  margin: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  padding: 0.25em 1em;</span></span><br><span class=\"line\"><span class=\"string\">  border: 2px solid palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  border-radius: 3px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Button&gt;Normal&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Button primary&gt;Primary&lt;/</span>Button&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attrs\"><a href=\"#attrs\" class=\"headerlink\" title=\"attrs\"></a>attrs</h3><p>通过 attrs 构造器，我们可以给组件增加额外的 props（或者说 attributes）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Input = styled.input.attrs(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"comment\">// we can define static props</span></span><br><span class=\"line\">  type: <span class=\"string\">\"text\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// or we can define dynamic ones</span></span><br><span class=\"line\">  size: props.size || <span class=\"string\">\"1em\"</span>,</span><br><span class=\"line\">&#125;))<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  color: palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  font-size: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  border: 2px solid palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  border-radius: 3px;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  /* here we use the dynamically computed prop */</span></span><br><span class=\"line\"><span class=\"string\">  margin: <span class=\"subst\">$&#123;(props) =&gt; props.size&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">  padding: <span class=\"subst\">$&#123;(props) =&gt; props.size&#125;</span>;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Input placeholder=<span class=\"string\">\"A small text input\"</span> /&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">    &lt;Input placeholder=<span class=\"string\">\"A bigger text input\"</span> size=<span class=\"string\">\"2em\"</span> /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/styled-components/03.png\" alt=\"\"></p>\n<h2 id=\"组件样式扩展与覆写-extending-styles\"><a href=\"#组件样式扩展与覆写-extending-styles\" class=\"headerlink\" title=\"组件样式扩展与覆写 - extending styles\"></a>组件样式扩展与覆写 - extending styles</h2><h3 id=\"对-styled-xxx-组件的扩展\"><a href=\"#对-styled-xxx-组件的扩展\" class=\"headerlink\" title=\"对 styled.xxx 组件的扩展\"></a>对 styled.xxx 组件的扩展</h3><p>有时候我们需要对组件样式进行一些小的修改，比如字体，颜色等。或者在此基础上，增加额外的效果。</p>\n<p>语法：styled(…)<br>将定义好的组件，直接传入 styled 构造函数中</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基础组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Button = styled.button<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  color: palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  font-size: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  margin: 1em;</span></span><br><span class=\"line\"><span class=\"string\">  padding: 0.25em 1em;</span></span><br><span class=\"line\"><span class=\"string\">  border: 2px solid palevioletred;</span></span><br><span class=\"line\"><span class=\"string\">  border-radius: 3px;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拓展组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> TomatoButton = styled(Button)<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  color: tomato;</span></span><br><span class=\"line\"><span class=\"string\">  border-color: tomato;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;Button&gt;Normal Button&lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;TomatoButton&gt;Tomato Button&lt;/</span>TomatoButton&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/styled-components/02.png\" alt=\"\"></p>\n<h3 id=\"对任意组件的扩展\"><a href=\"#对任意组件的扩展\" class=\"headerlink\" title=\"对任意组件的扩展\"></a>对任意组件的扩展</h3><p>styled 方法支持任何组件的扩展，<strong>只要他们的 className 被传递到组件上</strong></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This could be react-router-dom's Link for example</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Link = <span class=\"function\">(<span class=\"params\">&#123; className, children &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;a className=&#123;<span class=\"string\">`some-global-class <span class=\"subst\">$&#123;className&#125;</span>`</span>&#125;&gt;&#123;children&#125;&lt;<span class=\"regexp\">/a&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const StyledLink = styled(Link)`</span></span><br><span class=\"line\"><span class=\"regexp\">  color: palevioletred;</span></span><br><span class=\"line\"><span class=\"regexp\">  font-weight: bold;</span></span><br><span class=\"line\"><span class=\"regexp\">`;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">render(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Link&gt;Unstyled, boring Link&lt;/</span>Link&gt;</span><br><span class=\"line\">    &lt;br /&gt;</span><br><span class=\"line\">    &lt;StyledLink&gt;Styled, exciting Link&lt;<span class=\"regexp\">/StyledLink&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/styled-components/03.png\" alt=\"\"></p>\n<h2 id=\"组件样式的嵌套设置（类-scss）\"><a href=\"#组件样式的嵌套设置（类-scss）\" class=\"headerlink\" title=\"组件样式的嵌套设置（类 scss）\"></a>组件样式的嵌套设置（类 scss）</h2><p><a href=\"https://styled-components.com/docs/basics#pseudoelements-pseudoselectors-and-nesting\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Thing = styled.div.attrs(<span class=\"function\">(<span class=\"params\"><span class=\"regexp\">/* props */</span></span>) =&gt;</span> (&#123; <span class=\"attr\">tabIndex</span>: <span class=\"number\">0</span> &#125;))<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  color: blue;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &amp;:hover &#123;</span></span><br><span class=\"line\"><span class=\"string\">    color: red; // &lt;Thing&gt; when hovered</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &amp; ~ &amp; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    background: tomato; // &lt;Thing&gt; as a sibling of &lt;Thing&gt;, but maybe not directly next to it</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &amp; + &amp; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    background: lime; // &lt;Thing&gt; next to &lt;Thing&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  &amp;.something &#123;</span></span><br><span class=\"line\"><span class=\"string\">    background: orange; // &lt;Thing&gt; tagged with an additional CSS class \".something\"</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  .something-else &amp; &#123;</span></span><br><span class=\"line\"><span class=\"string\">    border: 1px solid; // &lt;Thing&gt; inside another element labeled \".something-else\"</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;React.Fragment&gt;</span><br><span class=\"line\">    &lt;Thing&gt;Hello world!&lt;<span class=\"regexp\">/Thing&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;Thing&gt;How ya doing?&lt;/</span>Thing&gt;</span><br><span class=\"line\">    &lt;Thing className=<span class=\"string\">\"something\"</span>&gt;The sun is shining...&lt;<span class=\"regexp\">/Thing&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;Pretty nice day today.&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;Thing&gt;Don<span class=\"string\">'t you think?&lt;/Thing&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div className=\"something-else\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Thing&gt;Splendid.&lt;/Thing&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/React.Fragment&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/styled-components/05.png\" alt=\"\"></p>"},{"title":"【前端】使用useCallback 和 React.memo 优化性能","toc":true,"date":"2021-10-28T16:00:00.000Z","_content":"\n[blog ref](<https://blog.shancw.net/2021/10/29/react-UseCallback%20%E5%92%8C%20React.memo()%20%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/>)\nuseCallback 和 React.memo 都是用空间换时间的缓存优化方式。这篇文章介绍了 useCallback 和 React.memo 的使用场景和简单入门介绍\n\n<!-- more -->\n\n## useCallback\n\n### 理解函数相等检查\n\n在深入了解 useCallback 的使用之前，让我们一起深入了解 useCallback 解决的问题 - 函数相等性检测\n\n函数在 Javascript 中作为 一等公民存在，这意味着函数就是一个普通对象。函数对象可以被其他的函数返回，比较。\n\n对于如下函数 `factory`，返回了一个累加函数\n\n```js\nfunction factory() {\n  return (a, b) => a + b;\n}\nconst sum1 = factory();\nconst sum2 = factory();\nsum1(1, 2); // => 3\nsum2(1, 2); // => 3\nsum1 === sum2; // => false\nsum1 === sum1; // => true\n```\n\n**函数和其他的对象一样，当比较的时候，通过判断指针是否指向同一个内存地址来决定是否相等。**\n\n换句话说，函数只等于他自身，因此上述代码 `sum1 === sum2`输出 false\n\n### 为什么要使用 useCallback\n\n对于如下 MyComponent 组件，handleClick 函数在每次 MyComponent 组件渲染的时候，都会重新创建。\n\n```js\nfunction MyComponent() {\n  // handleClick 函数在每次MyComponent 重新render的时候都会重新创建\n  const handleClick = () => {\n    console.log(\"Clicked!\");\n  };\n  // ...\n}\n```\n\ninline-function 的创建，对性能消耗是很小的。因此在 MyComponent 重新渲染的时候，handleClick 方法重新创建并没有什么大的影响。\n\n_A few inline functions per component are acceptable._\n\n但是有些情况，则需要保证 inline- function 在不同的 render 阶段始终是同一个，比如：\n\n- 使用 React.memo()组件包裹的组件，接受了此 inline-function 作为参数\n- **当使用 此 inline-function 作为其他 hook 的依赖，比如 `useEffect(..., [callback])`**\n- 当使用 debounce 或者 throttle 的时候\n\n对于这些情况，当我们传入相同的依赖，在组件重新 render 后，返回的函数是之前的那个（记忆化）\n\n### 正确的使用案例\n\n假设你有个组件，渲染了长列表,因为 MyBigList 的 list 列表可能上万，因此需要使用 React.memo 对 MyBigList 进行优化处理。\n\n```js\nimport useSearch from \"./fetch-items\";\nfunction MyBigList({ term, onItemClick }) {\n  const items = useSearch(term);\n  const map = (item) => <div onClick={onItemClick}>{item}</div>;\n  return <div>{items.map(map)}</div>;\n}\nexport default React.memo(MyBigList);\n```\n\n现在 MyBigList 的父组件 MyParent 提供了一个点击监听事件，用于处理 MyBigList 的点击\n\n```js\nimport { useCallback } from \"react\";\nexport function MyParent({ term }) {\n  const onItemClick = (event) => {\n    console.log(\"You clicked \", event.currentTarget);\n  };\n  return <MyBigList term={term} onItemClick={onItemClick} />;\n}\n```\n\n这是我们没有使用 useCallback 时候的状态，现在分析下存在的问题：\n\nMyParent 每次 render，都会生成新的 onItemClick，这个 onItemClick 作为 prop 传入了 React.memo(MyBigList)。React.memo 因为 onItemClick 每次都是全新的，因此会重新渲染，并进行缓存。这会导致严重的性能问题及内存消耗\n\n这时候 useCallback 就出场了 onItemClick 使用 useCallback 进行记忆化，只有 term 改变才会生成新的 onItemClick\n\n```js\nimport { useCallback } from \"react\";\nexport function MyParent({ term }) {\n  const onItemClick = useCallback(\n    (event) => {\n      console.log(\"You clicked \", event.currentTarget);\n    },\n    [term]\n  );\n  return <MyBigList term={term} onItemClick={onItemClick} />;\n}\n```\n\n## React.memo\n\n当决定更新 DOM，React 首先会 render 你的组件，然后对前后对比 render 结果差异，如果不同，那么 React 就会更新 DOM\n\nrender 结果的比较是很快的。但是你在某些情况下，还可以优化这个过程。\n\n当组件被 React.memo()包裹，react render 并缓存解决。在下次 render 前，如果传入的 props 相同，那么 React 则会复用缓存的结果，并直接跳过下次 render。\n\n如下组件 Movie 被`React.memo()`包裹\n\n```js\nexport function Movie({ title, releaseDate }) {\n  return (\n    <div>\n      <div>Movie title: {title}</div>\n      <div>Release date: {releaseDate}</div>\n    </div>\n  );\n}\nexport const MemoizedMovie = React.memo(Movie);\n```\n\nReact.memo(Movie) 返回一个新的记忆化组件 MemoizedMovie\n\n这个组件输出和 Movie 组件相同，但是它的 render 结果会被缓存。当传入的 title 和 releaseDate 参数相同，那么 React 就会复用已有的 render 结果\n\n```js\n// First render - MemoizedMovie IS INVOKED.\n<MemoizedMovie\n  title=\"Heat\"\n  releaseDate=\"December 15, 1995\"\n/>\n// Second render - MemoizedMovie IS NOT INVOKED.\n<MemoizedMovie\n  title=\"Heat\"\n  releaseDate=\"December 15, 1995\"\n/>\n```\n\n[在线 Demo 演示](https://codesandbox.io/s/react-memo-demo-c9dx1)\n\n### 自定义 props 相等性检查\n\n默认情况下，React.memo 对 props 进行浅比较，如果 props 是 object，那么会对 object 的第一层 key 进行相等性检查。\n\n[React props 比较的默认方式代码](https://github.com/facebook/react/blob/v16.8.6/packages/shared/shallowEqual.js)\n\n如果我们想自定义它的监测方式，可以对 memo 传入第二个参数\n\n```js\nReact.memo(Component, [areEqual(prevProps, nextProps)]);\n```\n\n`areEqual(prevProps, nextProps)`返回一个 boolean\n\n```js\nfunction moviePropsAreEqual(prevMovie, nextMovie) {\n  return (\n    prevMovie.title === nextMovie.title &&\n    prevMovie.releaseDate === nextMovie.releaseDate\n  );\n}\nconst MemoizedMovie2 = React.memo(Movie, moviePropsAreEqual);\n```\n","source":"_posts/react-UseCallback 和 React.memo() 使用介绍.md","raw":"---\ntitle: 【前端】使用useCallback 和 React.memo 优化性能\ncategories: [前端]\ntags: [react]\ntoc: true\ndate: 2021/10/29\n---\n\n[blog ref](<https://blog.shancw.net/2021/10/29/react-UseCallback%20%E5%92%8C%20React.memo()%20%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/>)\nuseCallback 和 React.memo 都是用空间换时间的缓存优化方式。这篇文章介绍了 useCallback 和 React.memo 的使用场景和简单入门介绍\n\n<!-- more -->\n\n## useCallback\n\n### 理解函数相等检查\n\n在深入了解 useCallback 的使用之前，让我们一起深入了解 useCallback 解决的问题 - 函数相等性检测\n\n函数在 Javascript 中作为 一等公民存在，这意味着函数就是一个普通对象。函数对象可以被其他的函数返回，比较。\n\n对于如下函数 `factory`，返回了一个累加函数\n\n```js\nfunction factory() {\n  return (a, b) => a + b;\n}\nconst sum1 = factory();\nconst sum2 = factory();\nsum1(1, 2); // => 3\nsum2(1, 2); // => 3\nsum1 === sum2; // => false\nsum1 === sum1; // => true\n```\n\n**函数和其他的对象一样，当比较的时候，通过判断指针是否指向同一个内存地址来决定是否相等。**\n\n换句话说，函数只等于他自身，因此上述代码 `sum1 === sum2`输出 false\n\n### 为什么要使用 useCallback\n\n对于如下 MyComponent 组件，handleClick 函数在每次 MyComponent 组件渲染的时候，都会重新创建。\n\n```js\nfunction MyComponent() {\n  // handleClick 函数在每次MyComponent 重新render的时候都会重新创建\n  const handleClick = () => {\n    console.log(\"Clicked!\");\n  };\n  // ...\n}\n```\n\ninline-function 的创建，对性能消耗是很小的。因此在 MyComponent 重新渲染的时候，handleClick 方法重新创建并没有什么大的影响。\n\n_A few inline functions per component are acceptable._\n\n但是有些情况，则需要保证 inline- function 在不同的 render 阶段始终是同一个，比如：\n\n- 使用 React.memo()组件包裹的组件，接受了此 inline-function 作为参数\n- **当使用 此 inline-function 作为其他 hook 的依赖，比如 `useEffect(..., [callback])`**\n- 当使用 debounce 或者 throttle 的时候\n\n对于这些情况，当我们传入相同的依赖，在组件重新 render 后，返回的函数是之前的那个（记忆化）\n\n### 正确的使用案例\n\n假设你有个组件，渲染了长列表,因为 MyBigList 的 list 列表可能上万，因此需要使用 React.memo 对 MyBigList 进行优化处理。\n\n```js\nimport useSearch from \"./fetch-items\";\nfunction MyBigList({ term, onItemClick }) {\n  const items = useSearch(term);\n  const map = (item) => <div onClick={onItemClick}>{item}</div>;\n  return <div>{items.map(map)}</div>;\n}\nexport default React.memo(MyBigList);\n```\n\n现在 MyBigList 的父组件 MyParent 提供了一个点击监听事件，用于处理 MyBigList 的点击\n\n```js\nimport { useCallback } from \"react\";\nexport function MyParent({ term }) {\n  const onItemClick = (event) => {\n    console.log(\"You clicked \", event.currentTarget);\n  };\n  return <MyBigList term={term} onItemClick={onItemClick} />;\n}\n```\n\n这是我们没有使用 useCallback 时候的状态，现在分析下存在的问题：\n\nMyParent 每次 render，都会生成新的 onItemClick，这个 onItemClick 作为 prop 传入了 React.memo(MyBigList)。React.memo 因为 onItemClick 每次都是全新的，因此会重新渲染，并进行缓存。这会导致严重的性能问题及内存消耗\n\n这时候 useCallback 就出场了 onItemClick 使用 useCallback 进行记忆化，只有 term 改变才会生成新的 onItemClick\n\n```js\nimport { useCallback } from \"react\";\nexport function MyParent({ term }) {\n  const onItemClick = useCallback(\n    (event) => {\n      console.log(\"You clicked \", event.currentTarget);\n    },\n    [term]\n  );\n  return <MyBigList term={term} onItemClick={onItemClick} />;\n}\n```\n\n## React.memo\n\n当决定更新 DOM，React 首先会 render 你的组件，然后对前后对比 render 结果差异，如果不同，那么 React 就会更新 DOM\n\nrender 结果的比较是很快的。但是你在某些情况下，还可以优化这个过程。\n\n当组件被 React.memo()包裹，react render 并缓存解决。在下次 render 前，如果传入的 props 相同，那么 React 则会复用缓存的结果，并直接跳过下次 render。\n\n如下组件 Movie 被`React.memo()`包裹\n\n```js\nexport function Movie({ title, releaseDate }) {\n  return (\n    <div>\n      <div>Movie title: {title}</div>\n      <div>Release date: {releaseDate}</div>\n    </div>\n  );\n}\nexport const MemoizedMovie = React.memo(Movie);\n```\n\nReact.memo(Movie) 返回一个新的记忆化组件 MemoizedMovie\n\n这个组件输出和 Movie 组件相同，但是它的 render 结果会被缓存。当传入的 title 和 releaseDate 参数相同，那么 React 就会复用已有的 render 结果\n\n```js\n// First render - MemoizedMovie IS INVOKED.\n<MemoizedMovie\n  title=\"Heat\"\n  releaseDate=\"December 15, 1995\"\n/>\n// Second render - MemoizedMovie IS NOT INVOKED.\n<MemoizedMovie\n  title=\"Heat\"\n  releaseDate=\"December 15, 1995\"\n/>\n```\n\n[在线 Demo 演示](https://codesandbox.io/s/react-memo-demo-c9dx1)\n\n### 自定义 props 相等性检查\n\n默认情况下，React.memo 对 props 进行浅比较，如果 props 是 object，那么会对 object 的第一层 key 进行相等性检查。\n\n[React props 比较的默认方式代码](https://github.com/facebook/react/blob/v16.8.6/packages/shared/shallowEqual.js)\n\n如果我们想自定义它的监测方式，可以对 memo 传入第二个参数\n\n```js\nReact.memo(Component, [areEqual(prevProps, nextProps)]);\n```\n\n`areEqual(prevProps, nextProps)`返回一个 boolean\n\n```js\nfunction moviePropsAreEqual(prevMovie, nextMovie) {\n  return (\n    prevMovie.title === nextMovie.title &&\n    prevMovie.releaseDate === nextMovie.releaseDate\n  );\n}\nconst MemoizedMovie2 = React.memo(Movie, moviePropsAreEqual);\n```\n","slug":"react-UseCallback 和 React.memo() 使用介绍","published":1,"updated":"2021-10-29T05:15:43.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ki005cgosw3gl00sdb","content":"<p><a href=\"https://blog.shancw.net/2021/10/29/react-UseCallback%20%E5%92%8C%20React.memo()%20%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/\">blog ref</a><br>useCallback 和 React.memo 都是用空间换时间的缓存优化方式。这篇文章介绍了 useCallback 和 React.memo 的使用场景和简单入门介绍</p>\n<a id=\"more\"></a>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><h3 id=\"理解函数相等检查\"><a href=\"#理解函数相等检查\" class=\"headerlink\" title=\"理解函数相等检查\"></a>理解函数相等检查</h3><p>在深入了解 useCallback 的使用之前，让我们一起深入了解 useCallback 解决的问题 - 函数相等性检测</p>\n<p>函数在 Javascript 中作为 一等公民存在，这意味着函数就是一个普通对象。函数对象可以被其他的函数返回，比较。</p>\n<p>对于如下函数 <code>factory</code>，返回了一个累加函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factory</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum1 = factory();</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum2 = factory();</span><br><span class=\"line\">sum1(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\">sum2(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\">sum1 === sum2; <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\">sum1 === sum1; <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数和其他的对象一样，当比较的时候，通过判断指针是否指向同一个内存地址来决定是否相等。</strong></p>\n<p>换句话说，函数只等于他自身，因此上述代码 <code>sum1 === sum2</code>输出 false</p>\n<h3 id=\"为什么要使用-useCallback\"><a href=\"#为什么要使用-useCallback\" class=\"headerlink\" title=\"为什么要使用 useCallback\"></a>为什么要使用 useCallback</h3><p>对于如下 MyComponent 组件，handleClick 函数在每次 MyComponent 组件渲染的时候，都会重新创建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// handleClick 函数在每次MyComponent 重新render的时候都会重新创建</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Clicked!\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>inline-function 的创建，对性能消耗是很小的。因此在 MyComponent 重新渲染的时候，handleClick 方法重新创建并没有什么大的影响。</p>\n<p><em>A few inline functions per component are acceptable.</em></p>\n<p>但是有些情况，则需要保证 inline- function 在不同的 render 阶段始终是同一个，比如：</p>\n<ul>\n<li>使用 React.memo()组件包裹的组件，接受了此 inline-function 作为参数</li>\n<li><strong>当使用 此 inline-function 作为其他 hook 的依赖，比如 <code>useEffect(..., [callback])</code></strong></li>\n<li>当使用 debounce 或者 throttle 的时候</li>\n</ul>\n<p>对于这些情况，当我们传入相同的依赖，在组件重新 render 后，返回的函数是之前的那个（记忆化）</p>\n<h3 id=\"正确的使用案例\"><a href=\"#正确的使用案例\" class=\"headerlink\" title=\"正确的使用案例\"></a>正确的使用案例</h3><p>假设你有个组件，渲染了长列表,因为 MyBigList 的 list 列表可能上万，因此需要使用 React.memo 对 MyBigList 进行优化处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> useSearch <span class=\"keyword\">from</span> <span class=\"string\">\"./fetch-items\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyBigList</span>(<span class=\"params\">&#123; term, onItemClick &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> items = useSearch(term);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onItemClick&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;items.map(map)&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.memo(MyBigList);</span><br></pre></td></tr></table></figure>\n\n<p>现在 MyBigList 的父组件 MyParent 提供了一个点击监听事件，用于处理 MyBigList 的点击</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyParent</span>(<span class=\"params\">&#123; term &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onItemClick = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"You clicked \"</span>, event.currentTarget);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyBigList</span> <span class=\"attr\">term</span>=<span class=\"string\">&#123;term&#125;</span> <span class=\"attr\">onItemClick</span>=<span class=\"string\">&#123;onItemClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是我们没有使用 useCallback 时候的状态，现在分析下存在的问题：</p>\n<p>MyParent 每次 render，都会生成新的 onItemClick，这个 onItemClick 作为 prop 传入了 React.memo(MyBigList)。React.memo 因为 onItemClick 每次都是全新的，因此会重新渲染，并进行缓存。这会导致严重的性能问题及内存消耗</p>\n<p>这时候 useCallback 就出场了 onItemClick 使用 useCallback 进行记忆化，只有 term 改变才会生成新的 onItemClick</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyParent</span>(<span class=\"params\">&#123; term &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onItemClick = useCallback(</span><br><span class=\"line\">    (event) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"You clicked \"</span>, event.currentTarget);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [term]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyBigList</span> <span class=\"attr\">term</span>=<span class=\"string\">&#123;term&#125;</span> <span class=\"attr\">onItemClick</span>=<span class=\"string\">&#123;onItemClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"React-memo\"><a href=\"#React-memo\" class=\"headerlink\" title=\"React.memo\"></a>React.memo</h2><p>当决定更新 DOM，React 首先会 render 你的组件，然后对前后对比 render 结果差异，如果不同，那么 React 就会更新 DOM</p>\n<p>render 结果的比较是很快的。但是你在某些情况下，还可以优化这个过程。</p>\n<p>当组件被 React.memo()包裹，react render 并缓存解决。在下次 render 前，如果传入的 props 相同，那么 React 则会复用缓存的结果，并直接跳过下次 render。</p>\n<p>如下组件 Movie 被<code>React.memo()</code>包裹</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Movie</span>(<span class=\"params\">&#123; title, releaseDate &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div&gt;Movie title: &#123;title&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;Release date: &#123;releaseDate&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">export const MemoizedMovie = React.memo(Movie);</span></span><br></pre></td></tr></table></figure>\n\n<p>React.memo(Movie) 返回一个新的记忆化组件 MemoizedMovie</p>\n<p>这个组件输出和 Movie 组件相同，但是它的 render 结果会被缓存。当传入的 title 和 releaseDate 参数相同，那么 React 就会复用已有的 render 结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// First render - MemoizedMovie IS INVOKED.</span></span><br><span class=\"line\">&lt;MemoizedMovie</span><br><span class=\"line\">  title=<span class=\"string\">\"Heat\"</span></span><br><span class=\"line\">  releaseDate=<span class=\"string\">\"December 15, 1995\"</span></span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"><span class=\"comment\">// Second render - MemoizedMovie IS NOT INVOKED.</span></span><br><span class=\"line\">&lt;MemoizedMovie</span><br><span class=\"line\">  title=<span class=\"string\">\"Heat\"</span></span><br><span class=\"line\">  releaseDate=<span class=\"string\">\"December 15, 1995\"</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codesandbox.io/s/react-memo-demo-c9dx1\" target=\"_blank\" rel=\"noopener\">在线 Demo 演示</a></p>\n<h3 id=\"自定义-props-相等性检查\"><a href=\"#自定义-props-相等性检查\" class=\"headerlink\" title=\"自定义 props 相等性检查\"></a>自定义 props 相等性检查</h3><p>默认情况下，React.memo 对 props 进行浅比较，如果 props 是 object，那么会对 object 的第一层 key 进行相等性检查。</p>\n<p><a href=\"https://github.com/facebook/react/blob/v16.8.6/packages/shared/shallowEqual.js\" target=\"_blank\" rel=\"noopener\">React props 比较的默认方式代码</a></p>\n<p>如果我们想自定义它的监测方式，可以对 memo 传入第二个参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.memo(Component, [areEqual(prevProps, nextProps)]);</span><br></pre></td></tr></table></figure>\n\n<p><code>areEqual(prevProps, nextProps)</code>返回一个 boolean</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moviePropsAreEqual</span>(<span class=\"params\">prevMovie, nextMovie</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    prevMovie.title === nextMovie.title &amp;&amp;</span><br><span class=\"line\">    prevMovie.releaseDate === nextMovie.releaseDate</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> MemoizedMovie2 = React.memo(Movie, moviePropsAreEqual);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://blog.shancw.net/2021/10/29/react-UseCallback%20%E5%92%8C%20React.memo()%20%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/\">blog ref</a><br>useCallback 和 React.memo 都是用空间换时间的缓存优化方式。这篇文章介绍了 useCallback 和 React.memo 的使用场景和简单入门介绍</p>","more":"<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><h3 id=\"理解函数相等检查\"><a href=\"#理解函数相等检查\" class=\"headerlink\" title=\"理解函数相等检查\"></a>理解函数相等检查</h3><p>在深入了解 useCallback 的使用之前，让我们一起深入了解 useCallback 解决的问题 - 函数相等性检测</p>\n<p>函数在 Javascript 中作为 一等公民存在，这意味着函数就是一个普通对象。函数对象可以被其他的函数返回，比较。</p>\n<p>对于如下函数 <code>factory</code>，返回了一个累加函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factory</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum1 = factory();</span><br><span class=\"line\"><span class=\"keyword\">const</span> sum2 = factory();</span><br><span class=\"line\">sum1(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\">sum2(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\">sum1 === sum2; <span class=\"comment\">// =&gt; false</span></span><br><span class=\"line\">sum1 === sum1; <span class=\"comment\">// =&gt; true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>函数和其他的对象一样，当比较的时候，通过判断指针是否指向同一个内存地址来决定是否相等。</strong></p>\n<p>换句话说，函数只等于他自身，因此上述代码 <code>sum1 === sum2</code>输出 false</p>\n<h3 id=\"为什么要使用-useCallback\"><a href=\"#为什么要使用-useCallback\" class=\"headerlink\" title=\"为什么要使用 useCallback\"></a>为什么要使用 useCallback</h3><p>对于如下 MyComponent 组件，handleClick 函数在每次 MyComponent 组件渲染的时候，都会重新创建。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// handleClick 函数在每次MyComponent 重新render的时候都会重新创建</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Clicked!\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>inline-function 的创建，对性能消耗是很小的。因此在 MyComponent 重新渲染的时候，handleClick 方法重新创建并没有什么大的影响。</p>\n<p><em>A few inline functions per component are acceptable.</em></p>\n<p>但是有些情况，则需要保证 inline- function 在不同的 render 阶段始终是同一个，比如：</p>\n<ul>\n<li>使用 React.memo()组件包裹的组件，接受了此 inline-function 作为参数</li>\n<li><strong>当使用 此 inline-function 作为其他 hook 的依赖，比如 <code>useEffect(..., [callback])</code></strong></li>\n<li>当使用 debounce 或者 throttle 的时候</li>\n</ul>\n<p>对于这些情况，当我们传入相同的依赖，在组件重新 render 后，返回的函数是之前的那个（记忆化）</p>\n<h3 id=\"正确的使用案例\"><a href=\"#正确的使用案例\" class=\"headerlink\" title=\"正确的使用案例\"></a>正确的使用案例</h3><p>假设你有个组件，渲染了长列表,因为 MyBigList 的 list 列表可能上万，因此需要使用 React.memo 对 MyBigList 进行优化处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> useSearch <span class=\"keyword\">from</span> <span class=\"string\">\"./fetch-items\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyBigList</span>(<span class=\"params\">&#123; term, onItemClick &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> items = useSearch(term);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onItemClick&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;items.map(map)&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.memo(MyBigList);</span><br></pre></td></tr></table></figure>\n\n<p>现在 MyBigList 的父组件 MyParent 提供了一个点击监听事件，用于处理 MyBigList 的点击</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyParent</span>(<span class=\"params\">&#123; term &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onItemClick = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"You clicked \"</span>, event.currentTarget);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyBigList</span> <span class=\"attr\">term</span>=<span class=\"string\">&#123;term&#125;</span> <span class=\"attr\">onItemClick</span>=<span class=\"string\">&#123;onItemClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是我们没有使用 useCallback 时候的状态，现在分析下存在的问题：</p>\n<p>MyParent 每次 render，都会生成新的 onItemClick，这个 onItemClick 作为 prop 传入了 React.memo(MyBigList)。React.memo 因为 onItemClick 每次都是全新的，因此会重新渲染，并进行缓存。这会导致严重的性能问题及内存消耗</p>\n<p>这时候 useCallback 就出场了 onItemClick 使用 useCallback 进行记忆化，只有 term 改变才会生成新的 onItemClick</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyParent</span>(<span class=\"params\">&#123; term &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onItemClick = useCallback(</span><br><span class=\"line\">    (event) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"You clicked \"</span>, event.currentTarget);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [term]</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyBigList</span> <span class=\"attr\">term</span>=<span class=\"string\">&#123;term&#125;</span> <span class=\"attr\">onItemClick</span>=<span class=\"string\">&#123;onItemClick&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"React-memo\"><a href=\"#React-memo\" class=\"headerlink\" title=\"React.memo\"></a>React.memo</h2><p>当决定更新 DOM，React 首先会 render 你的组件，然后对前后对比 render 结果差异，如果不同，那么 React 就会更新 DOM</p>\n<p>render 结果的比较是很快的。但是你在某些情况下，还可以优化这个过程。</p>\n<p>当组件被 React.memo()包裹，react render 并缓存解决。在下次 render 前，如果传入的 props 相同，那么 React 则会复用缓存的结果，并直接跳过下次 render。</p>\n<p>如下组件 Movie 被<code>React.memo()</code>包裹</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Movie</span>(<span class=\"params\">&#123; title, releaseDate &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;div&gt;Movie title: &#123;title&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;Release date: &#123;releaseDate&#125;&lt;/</span>div&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">export const MemoizedMovie = React.memo(Movie);</span></span><br></pre></td></tr></table></figure>\n\n<p>React.memo(Movie) 返回一个新的记忆化组件 MemoizedMovie</p>\n<p>这个组件输出和 Movie 组件相同，但是它的 render 结果会被缓存。当传入的 title 和 releaseDate 参数相同，那么 React 就会复用已有的 render 结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// First render - MemoizedMovie IS INVOKED.</span></span><br><span class=\"line\">&lt;MemoizedMovie</span><br><span class=\"line\">  title=<span class=\"string\">\"Heat\"</span></span><br><span class=\"line\">  releaseDate=<span class=\"string\">\"December 15, 1995\"</span></span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"><span class=\"comment\">// Second render - MemoizedMovie IS NOT INVOKED.</span></span><br><span class=\"line\">&lt;MemoizedMovie</span><br><span class=\"line\">  title=<span class=\"string\">\"Heat\"</span></span><br><span class=\"line\">  releaseDate=<span class=\"string\">\"December 15, 1995\"</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://codesandbox.io/s/react-memo-demo-c9dx1\" target=\"_blank\" rel=\"noopener\">在线 Demo 演示</a></p>\n<h3 id=\"自定义-props-相等性检查\"><a href=\"#自定义-props-相等性检查\" class=\"headerlink\" title=\"自定义 props 相等性检查\"></a>自定义 props 相等性检查</h3><p>默认情况下，React.memo 对 props 进行浅比较，如果 props 是 object，那么会对 object 的第一层 key 进行相等性检查。</p>\n<p><a href=\"https://github.com/facebook/react/blob/v16.8.6/packages/shared/shallowEqual.js\" target=\"_blank\" rel=\"noopener\">React props 比较的默认方式代码</a></p>\n<p>如果我们想自定义它的监测方式，可以对 memo 传入第二个参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.memo(Component, [areEqual(prevProps, nextProps)]);</span><br></pre></td></tr></table></figure>\n\n<p><code>areEqual(prevProps, nextProps)</code>返回一个 boolean</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moviePropsAreEqual</span>(<span class=\"params\">prevMovie, nextMovie</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    prevMovie.title === nextMovie.title &amp;&amp;</span><br><span class=\"line\">    prevMovie.releaseDate === nextMovie.releaseDate</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> MemoizedMovie2 = React.memo(Movie, moviePropsAreEqual);</span><br></pre></td></tr></table></figure>"},{"title":"Redux-toolkit cheat-sheet","toc":true,"date":"2021-10-18T16:00:00.000Z","_content":"\nredux toolkit 简化了 配置 Redux Store 的步骤，配置方法如下\n\n`features/counter/counterSlice.js`\n\n```js\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // redux toolkit 允许我们 直接在state上做修改逻辑。它没有真正的去修改state，因为toolkit 的内部使用Immer Library冻结了state，我们所做的操作，其实是对state的depp clone 进行的操作，最后帮我们 return\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n```\n\n<!-- more -->\n\n# Add Slice Reducers to Store(模块化)\n\nfeatures/counter/counterSlice.js\n\n```js\nexport const counterSlice = createSlice({\n  name: \"xxx\",\n  initialState: { xxx },\n  reducer: { xxx },\n});\n```\n\napp/store.js\n\n```js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n```\n\n# React 组件中使用 Redux state\n\n1. useSelector 读数据\n2. useDispatch 写数据（通过 dispatch action）\n\n操作流程（以 counterSlice 为例）：\n\n1. 导入 counterSlice 下的 action\n\n```js\nimport { decrement, increment } from \"./counterSlice\";\n```\n\n2. 读数据\n\n```js\n// 此处state.counter 的counter 在App/store.js中的configureStore中配置\nconst count = useSelector((state: RootState) => state.counter.value);\n```\n\n3. 写数据\n\n```jsx\nconst dispatch = useDispatch()\n// ...\n<button onClick={() => dispatch(increment())}>\n  Increment\n</button>\n<button onClick={() => dispatch(decrement())}>\n  Decrement\n</button>\n```\n\n# RTK Query\n\n`RTKQuery` is a powerful data fetching and caching tool. So we using it for **asynchronous api calls**.\n\n`Redux-Toolkit` is intended to be the standard way to write Redux logic. So we using it for **synchronous operations.**\n\n## APIs\n\n- createApi：全局配置，定义如何获取和转换数据，以及如果失败，该怎么解决\n- fetchBaseQuery: 对 fetch API 进行了封装，以便于简化操作。一般和 createApi 搭配使用\n- ApiProvider: 如果想要独立于 Redux store 使用，可以使用 ApiProvider\n- setupListeners: 一个工具函数，使用后可以支持 refetchOnMount, refetchOnReconnect 功能\n\n## 基本使用\n\nsrc/Service/api.js：定义全局配置\n\n```js\nimport { Config } from \"@/Config\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst baseQuery = fetchBaseQuery({ baseUrl: Config.API_URL });\n\n// 拦截器\nconst baseQueryWithInterceptor = async (args, api, extraOptions) => {\n  let result = await baseQuery(args, api, extraOptions);\n  if (result.error && result.error.status === 401) {\n    // here you can deal with 401 error\n  }\n  return result;\n};\n\nexport const api = createApi({\n  baseQuery: baseQueryWithInterceptor,\n  endpoints: () => ({}),\n});\n```\n\n然后再对应的模块下，进行具体配置，并且 注入到 全局 api 的 endpoints 中\nsrc/Service/modules/users/index.js\n\n```js\nimport { api } from \"../../api\";\nimport fetchOne from \"./fetchOne\";\n\nexport const userApi = api.injectEndpoints({\n  endpoints: (build) => ({\n    fetchOne: fetchOne(build), // Code split of the service api call\n    // You can add endpoints here\n  }),\n  overrideExisting: false,\n});\n\nexport const { useLazyFetchOneQuery } = userApi; // generated query which will be used in Containers\n```\n","source":"_posts/redux-toolkit-cheat-sheet.md","raw":"---\ntitle: Redux-toolkit cheat-sheet\ncategories: [前端]\ntags: [redux]\ntoc: true\ndate: 2021/10/19\n---\n\nredux toolkit 简化了 配置 Redux Store 的步骤，配置方法如下\n\n`features/counter/counterSlice.js`\n\n```js\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // redux toolkit 允许我们 直接在state上做修改逻辑。它没有真正的去修改state，因为toolkit 的内部使用Immer Library冻结了state，我们所做的操作，其实是对state的depp clone 进行的操作，最后帮我们 return\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n```\n\n<!-- more -->\n\n# Add Slice Reducers to Store(模块化)\n\nfeatures/counter/counterSlice.js\n\n```js\nexport const counterSlice = createSlice({\n  name: \"xxx\",\n  initialState: { xxx },\n  reducer: { xxx },\n});\n```\n\napp/store.js\n\n```js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n```\n\n# React 组件中使用 Redux state\n\n1. useSelector 读数据\n2. useDispatch 写数据（通过 dispatch action）\n\n操作流程（以 counterSlice 为例）：\n\n1. 导入 counterSlice 下的 action\n\n```js\nimport { decrement, increment } from \"./counterSlice\";\n```\n\n2. 读数据\n\n```js\n// 此处state.counter 的counter 在App/store.js中的configureStore中配置\nconst count = useSelector((state: RootState) => state.counter.value);\n```\n\n3. 写数据\n\n```jsx\nconst dispatch = useDispatch()\n// ...\n<button onClick={() => dispatch(increment())}>\n  Increment\n</button>\n<button onClick={() => dispatch(decrement())}>\n  Decrement\n</button>\n```\n\n# RTK Query\n\n`RTKQuery` is a powerful data fetching and caching tool. So we using it for **asynchronous api calls**.\n\n`Redux-Toolkit` is intended to be the standard way to write Redux logic. So we using it for **synchronous operations.**\n\n## APIs\n\n- createApi：全局配置，定义如何获取和转换数据，以及如果失败，该怎么解决\n- fetchBaseQuery: 对 fetch API 进行了封装，以便于简化操作。一般和 createApi 搭配使用\n- ApiProvider: 如果想要独立于 Redux store 使用，可以使用 ApiProvider\n- setupListeners: 一个工具函数，使用后可以支持 refetchOnMount, refetchOnReconnect 功能\n\n## 基本使用\n\nsrc/Service/api.js：定义全局配置\n\n```js\nimport { Config } from \"@/Config\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst baseQuery = fetchBaseQuery({ baseUrl: Config.API_URL });\n\n// 拦截器\nconst baseQueryWithInterceptor = async (args, api, extraOptions) => {\n  let result = await baseQuery(args, api, extraOptions);\n  if (result.error && result.error.status === 401) {\n    // here you can deal with 401 error\n  }\n  return result;\n};\n\nexport const api = createApi({\n  baseQuery: baseQueryWithInterceptor,\n  endpoints: () => ({}),\n});\n```\n\n然后再对应的模块下，进行具体配置，并且 注入到 全局 api 的 endpoints 中\nsrc/Service/modules/users/index.js\n\n```js\nimport { api } from \"../../api\";\nimport fetchOne from \"./fetchOne\";\n\nexport const userApi = api.injectEndpoints({\n  endpoints: (build) => ({\n    fetchOne: fetchOne(build), // Code split of the service api call\n    // You can add endpoints here\n  }),\n  overrideExisting: false,\n});\n\nexport const { useLazyFetchOneQuery } = userApi; // generated query which will be used in Containers\n```\n","slug":"redux-toolkit-cheat-sheet","published":1,"updated":"2021-10-22T09:56:47.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kj005fgosw9k4larb6","content":"<p>redux toolkit 简化了 配置 Redux Store 的步骤，配置方法如下</p>\n<p><code>features/counter/counterSlice.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice, PayloadAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface CounterState &#123;</span><br><span class=\"line\">  value: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState: CounterState = &#123;</span><br><span class=\"line\">  value: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> counterSlice = createSlice(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"counter\"</span>,</span><br><span class=\"line\">  initialState,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    increment: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// redux toolkit 允许我们 直接在state上做修改逻辑。它没有真正的去修改state，因为toolkit 的内部使用Immer Library冻结了state，我们所做的操作，其实是对state的depp clone 进行的操作，最后帮我们 return</span></span><br><span class=\"line\">      state.value += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrement: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      state.value -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    incrementByAmount: <span class=\"function\">(<span class=\"params\">state, action: PayloadAction&lt;number&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      state.value += action.payload;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Action creators are generated for each case reducer function</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.actions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> counterSlice.reducer;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"Add-Slice-Reducers-to-Store-模块化\"><a href=\"#Add-Slice-Reducers-to-Store-模块化\" class=\"headerlink\" title=\"Add Slice Reducers to Store(模块化)\"></a>Add Slice Reducers to Store(模块化)</h1><p>features/counter/counterSlice.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> counterSlice = createSlice(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  initialState: &#123; xxx &#125;,</span><br><span class=\"line\">  reducer: &#123; xxx &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>app/store.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> counterReducer <span class=\"keyword\">from</span> <span class=\"string\">\"../features/counter/counterSlice\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> configureStore(&#123;</span><br><span class=\"line\">  reducer: &#123;</span><br><span class=\"line\">    counter: counterReducer,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"React-组件中使用-Redux-state\"><a href=\"#React-组件中使用-Redux-state\" class=\"headerlink\" title=\"React 组件中使用 Redux state\"></a>React 组件中使用 Redux state</h1><ol>\n<li>useSelector 读数据</li>\n<li>useDispatch 写数据（通过 dispatch action）</li>\n</ol>\n<p>操作流程（以 counterSlice 为例）：</p>\n<ol>\n<li>导入 counterSlice 下的 action</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; decrement, increment &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./counterSlice\"</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>读数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处state.counter 的counter 在App/store.js中的configureStore中配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> count = useSelector(<span class=\"function\">(<span class=\"params\">state: RootState</span>) =&gt;</span> state.counter.value);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>写数据</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&lt;button onClick=&#123;() =&gt; dispatch(increment())&#125;&gt;</span><br><span class=\"line\">  Increment</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onClick=&#123;() =&gt; dispatch(decrement())&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  Decrement</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RTK-Query\"><a href=\"#RTK-Query\" class=\"headerlink\" title=\"RTK Query\"></a>RTK Query</h1><p><code>RTKQuery</code> is a powerful data fetching and caching tool. So we using it for <strong>asynchronous api calls</strong>.</p>\n<p><code>Redux-Toolkit</code> is intended to be the standard way to write Redux logic. So we using it for <strong>synchronous operations.</strong></p>\n<h2 id=\"APIs\"><a href=\"#APIs\" class=\"headerlink\" title=\"APIs\"></a>APIs</h2><ul>\n<li>createApi：全局配置，定义如何获取和转换数据，以及如果失败，该怎么解决</li>\n<li>fetchBaseQuery: 对 fetch API 进行了封装，以便于简化操作。一般和 createApi 搭配使用</li>\n<li>ApiProvider: 如果想要独立于 Redux store 使用，可以使用 ApiProvider</li>\n<li>setupListeners: 一个工具函数，使用后可以支持 refetchOnMount, refetchOnReconnect 功能</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>src/Service/api.js：定义全局配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Config &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@/Config\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApi, fetchBaseQuery &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit/query/react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseQuery = fetchBaseQuery(&#123; <span class=\"attr\">baseUrl</span>: Config.API_URL &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseQueryWithInterceptor = <span class=\"keyword\">async</span> (args, api, extraOptions) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> baseQuery(args, api, extraOptions);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result.error &amp;&amp; result.error.status === <span class=\"number\">401</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// here you can deal with 401 error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> api = createApi(&#123;</span><br><span class=\"line\">  baseQuery: baseQueryWithInterceptor,</span><br><span class=\"line\">  endpoints: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;&#125;),</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后再对应的模块下，进行具体配置，并且 注入到 全局 api 的 endpoints 中<br>src/Service/modules/users/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; api &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../../api\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> fetchOne <span class=\"keyword\">from</span> <span class=\"string\">\"./fetchOne\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> userApi = api.injectEndpoints(&#123;</span><br><span class=\"line\">  endpoints: <span class=\"function\">(<span class=\"params\">build</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    fetchOne: fetchOne(build), <span class=\"comment\">// Code split of the service api call</span></span><br><span class=\"line\">    <span class=\"comment\">// You can add endpoints here</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  overrideExisting: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; useLazyFetchOneQuery &#125; = userApi; <span class=\"comment\">// generated query which will be used in Containers</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>redux toolkit 简化了 配置 Redux Store 的步骤，配置方法如下</p>\n<p><code>features/counter/counterSlice.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSlice, PayloadAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface CounterState &#123;</span><br><span class=\"line\">  value: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState: CounterState = &#123;</span><br><span class=\"line\">  value: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> counterSlice = createSlice(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"counter\"</span>,</span><br><span class=\"line\">  initialState,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    increment: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// redux toolkit 允许我们 直接在state上做修改逻辑。它没有真正的去修改state，因为toolkit 的内部使用Immer Library冻结了state，我们所做的操作，其实是对state的depp clone 进行的操作，最后帮我们 return</span></span><br><span class=\"line\">      state.value += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrement: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      state.value -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    incrementByAmount: <span class=\"function\">(<span class=\"params\">state, action: PayloadAction&lt;number&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      state.value += action.payload;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Action creators are generated for each case reducer function</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.actions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> counterSlice.reducer;</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"Add-Slice-Reducers-to-Store-模块化\"><a href=\"#Add-Slice-Reducers-to-Store-模块化\" class=\"headerlink\" title=\"Add Slice Reducers to Store(模块化)\"></a>Add Slice Reducers to Store(模块化)</h1><p>features/counter/counterSlice.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> counterSlice = createSlice(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  initialState: &#123; xxx &#125;,</span><br><span class=\"line\">  reducer: &#123; xxx &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>app/store.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> counterReducer <span class=\"keyword\">from</span> <span class=\"string\">\"../features/counter/counterSlice\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> configureStore(&#123;</span><br><span class=\"line\">  reducer: &#123;</span><br><span class=\"line\">    counter: counterReducer,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"React-组件中使用-Redux-state\"><a href=\"#React-组件中使用-Redux-state\" class=\"headerlink\" title=\"React 组件中使用 Redux state\"></a>React 组件中使用 Redux state</h1><ol>\n<li>useSelector 读数据</li>\n<li>useDispatch 写数据（通过 dispatch action）</li>\n</ol>\n<p>操作流程（以 counterSlice 为例）：</p>\n<ol>\n<li>导入 counterSlice 下的 action</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; decrement, increment &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./counterSlice\"</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>读数据</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处state.counter 的counter 在App/store.js中的configureStore中配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> count = useSelector(<span class=\"function\">(<span class=\"params\">state: RootState</span>) =&gt;</span> state.counter.value);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>写数据</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dispatch = useDispatch()</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&lt;button onClick=&#123;() =&gt; dispatch(increment())&#125;&gt;</span><br><span class=\"line\">  Increment</span><br><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;button onClick=&#123;() =&gt; dispatch(decrement())&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  Decrement</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RTK-Query\"><a href=\"#RTK-Query\" class=\"headerlink\" title=\"RTK Query\"></a>RTK Query</h1><p><code>RTKQuery</code> is a powerful data fetching and caching tool. So we using it for <strong>asynchronous api calls</strong>.</p>\n<p><code>Redux-Toolkit</code> is intended to be the standard way to write Redux logic. So we using it for <strong>synchronous operations.</strong></p>\n<h2 id=\"APIs\"><a href=\"#APIs\" class=\"headerlink\" title=\"APIs\"></a>APIs</h2><ul>\n<li>createApi：全局配置，定义如何获取和转换数据，以及如果失败，该怎么解决</li>\n<li>fetchBaseQuery: 对 fetch API 进行了封装，以便于简化操作。一般和 createApi 搭配使用</li>\n<li>ApiProvider: 如果想要独立于 Redux store 使用，可以使用 ApiProvider</li>\n<li>setupListeners: 一个工具函数，使用后可以支持 refetchOnMount, refetchOnReconnect 功能</li>\n</ul>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><p>src/Service/api.js：定义全局配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Config &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@/Config\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApi, fetchBaseQuery &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"@reduxjs/toolkit/query/react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseQuery = fetchBaseQuery(&#123; <span class=\"attr\">baseUrl</span>: Config.API_URL &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseQueryWithInterceptor = <span class=\"keyword\">async</span> (args, api, extraOptions) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> baseQuery(args, api, extraOptions);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result.error &amp;&amp; result.error.status === <span class=\"number\">401</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// here you can deal with 401 error</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> api = createApi(&#123;</span><br><span class=\"line\">  baseQuery: baseQueryWithInterceptor,</span><br><span class=\"line\">  endpoints: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;&#125;),</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后再对应的模块下，进行具体配置，并且 注入到 全局 api 的 endpoints 中<br>src/Service/modules/users/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; api &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../../api\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> fetchOne <span class=\"keyword\">from</span> <span class=\"string\">\"./fetchOne\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> userApi = api.injectEndpoints(&#123;</span><br><span class=\"line\">  endpoints: <span class=\"function\">(<span class=\"params\">build</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    fetchOne: fetchOne(build), <span class=\"comment\">// Code split of the service api call</span></span><br><span class=\"line\">    <span class=\"comment\">// You can add endpoints here</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  overrideExisting: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> &#123; useLazyFetchOneQuery &#125; = userApi; <span class=\"comment\">// generated query which will be used in Containers</span></span><br></pre></td></tr></table></figure>"},{"title":"什么是DTO，使用场景是什么?","toc":true,"date":"2021-04-18T16:00:00.000Z","updated":"2021-04-21T16:00:00.000Z","_content":"\n# 什么是 DTO？\n\n页面展示 UI -> controller -> service -> DTO -> 页面展示\n\n数据传输对象,将 entity 实体组装转换成前端需要展示的类型\n\n<!-- more -->\n\nDTO 是面向界面 UI,是通过 UI 的需求来定义的.通过 DTO 我们实现了表现层 UI 与 entity 之间的解耦。\n\n> 这句话的意思是，后端不直接返回 Entity 实体给前端，而是封装一个前端需要的数据格式给他。这就是 DTO\n\n数据传输对象 DTO 是根据 UI 的需求进行设计的，而不是根据领域对象 Entity 进行设计的。\n比如，Customer 领域对象可能会包含一些诸如 FirstName, LastName, Email, Address 等信息。\n**但如果 UI 上不打算显示 Address 的信息，那么 CustomerDTO 中也无需包含这个 Address 的数据**.\n\nmodel 面向业务，我们通过业务来定义 Entity。而 DTO 面向 UI，通过 UI 的需求来定义。通过 DTO，我们实现了 UI 和 Entity 之间的解耦。如果开发过程中 Entity 发生改变，而 UI 不变，那么只需要改动 DTO 和 Entity 之间的映射关系而不需要去改变 UI。\n\n# 项目中的使用例子\n\nentity\n\n```java\n/**\n * 角色\n * @author Zheng Jie\n * @date 2018-11-22\n */\n@Getter\n@Setter\n@Entity\n@Table(name = \"sys_role\")\npublic class Role extends BaseEntity implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @JSONField(serialize = false)\n    @ManyToMany(mappedBy = \"roles\")\n    private Set<User> users;\n\n    @ManyToMany\n    private Set<Menu> menus;\n\n    @ManyToMany\n    private Set<Dept> depts;\n\n    @ApiModelProperty(value = \"名称\", hidden = true)\n    private String name;\n\n    private String dataScope = DataScopeEnum.THIS_LEVEL.getValue();\n\n    @Column(name = \"level\")\n    private Integer level = 3;\n\n    private String description;\n}\n\n```\n\nDTO\n\n```java\n@Getter\n@Setter\npublic class RoleDto extends BaseDTO implements Serializable {\n\n    private Long id;\n\n    private Set<MenuDto> menus;\n\n    private Set<DeptDto> depts;\n\n    private String name;\n\n    private String dataScope;\n\n    private Integer level;\n\n    private String description;\n}\n\n```\n\nService\n\n```Java\npublic class RoleServiceImpl implements RoleService {\n  @Override\n    public List<RoleDto> queryAll() {\n        Sort sort = Sort.by(Sort.Direction.ASC, \"level\");\n        return roleMapper.toDto(roleRepository.findAll(sort));\n    }\n}\n```\n\nBaseEntity & BaseDTO\nbaseEntity：存放通用 字段/逻辑 的地方\n\n```java\n@Getter\n@Setter\npublic class BaseDTO  implements Serializable {\n\n    private String createBy;\n\n    private String updatedBy;\n\n    private Timestamp createTime;\n\n    private Timestamp updateTime;\n\n    @Override\n    public String toString() {\n        ToStringBuilder builder = new ToStringBuilder(this);\n        Field[] fields = this.getClass().getDeclaredFields();\n        try {\n            for (Field f : fields) {\n                f.setAccessible(true);\n                builder.append(f.getName(), f.get(this)).append(\"\\n\");\n            }\n        } catch (Exception e) {\n            builder.append(\"toString builder encounter an error\");\n        }\n        return builder.toString();\n    }\n}\n\n@Getter\n@Setter\n@MappedSuperclass // 表明这个Entity 不直接持久化到mysql，会被其他的Entity继承。\npublic class BaseEntity implements Serializable {\n\n    @CreatedBy\n    @Column(name = \"create_by\", updatable = false)\n    private String createBy;\n\n    @LastModifiedBy\n    @Column(name = \"update_by\")\n    private String updateBy;\n\n    @CreationTimestamp\n    @Column(name = \"create_time\", updatable = false)\n    private Timestamp createTime;\n\n    @UpdateTimestamp\n    @Column(name = \"update_time\")\n    private Timestamp updateTime;\n\n    @Override\n    public String toString() {\n        ToStringBuilder builder = new ToStringBuilder(this);\n        Field[] fields = this.getClass().getDeclaredFields();\n        try {\n            for (Field f : fields) {\n                f.setAccessible(true);\n                builder.append(f.getName(), f.get(this)).append(\"\\n\");\n            }\n        } catch (Exception e) {\n            builder.append(\"toString builder encounter an error\");\n        }\n        return builder.toString();\n    }\n}\n\n```\n","source":"_posts/spring-DTO.md","raw":"---\ntitle: 什么是DTO，使用场景是什么?\ncategories: [后端]\ntags: [Spring, database, ORM]\ntoc: true\ndate: 2021/4/19\nupdated: 2021/4/22\n---\n\n# 什么是 DTO？\n\n页面展示 UI -> controller -> service -> DTO -> 页面展示\n\n数据传输对象,将 entity 实体组装转换成前端需要展示的类型\n\n<!-- more -->\n\nDTO 是面向界面 UI,是通过 UI 的需求来定义的.通过 DTO 我们实现了表现层 UI 与 entity 之间的解耦。\n\n> 这句话的意思是，后端不直接返回 Entity 实体给前端，而是封装一个前端需要的数据格式给他。这就是 DTO\n\n数据传输对象 DTO 是根据 UI 的需求进行设计的，而不是根据领域对象 Entity 进行设计的。\n比如，Customer 领域对象可能会包含一些诸如 FirstName, LastName, Email, Address 等信息。\n**但如果 UI 上不打算显示 Address 的信息，那么 CustomerDTO 中也无需包含这个 Address 的数据**.\n\nmodel 面向业务，我们通过业务来定义 Entity。而 DTO 面向 UI，通过 UI 的需求来定义。通过 DTO，我们实现了 UI 和 Entity 之间的解耦。如果开发过程中 Entity 发生改变，而 UI 不变，那么只需要改动 DTO 和 Entity 之间的映射关系而不需要去改变 UI。\n\n# 项目中的使用例子\n\nentity\n\n```java\n/**\n * 角色\n * @author Zheng Jie\n * @date 2018-11-22\n */\n@Getter\n@Setter\n@Entity\n@Table(name = \"sys_role\")\npublic class Role extends BaseEntity implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @JSONField(serialize = false)\n    @ManyToMany(mappedBy = \"roles\")\n    private Set<User> users;\n\n    @ManyToMany\n    private Set<Menu> menus;\n\n    @ManyToMany\n    private Set<Dept> depts;\n\n    @ApiModelProperty(value = \"名称\", hidden = true)\n    private String name;\n\n    private String dataScope = DataScopeEnum.THIS_LEVEL.getValue();\n\n    @Column(name = \"level\")\n    private Integer level = 3;\n\n    private String description;\n}\n\n```\n\nDTO\n\n```java\n@Getter\n@Setter\npublic class RoleDto extends BaseDTO implements Serializable {\n\n    private Long id;\n\n    private Set<MenuDto> menus;\n\n    private Set<DeptDto> depts;\n\n    private String name;\n\n    private String dataScope;\n\n    private Integer level;\n\n    private String description;\n}\n\n```\n\nService\n\n```Java\npublic class RoleServiceImpl implements RoleService {\n  @Override\n    public List<RoleDto> queryAll() {\n        Sort sort = Sort.by(Sort.Direction.ASC, \"level\");\n        return roleMapper.toDto(roleRepository.findAll(sort));\n    }\n}\n```\n\nBaseEntity & BaseDTO\nbaseEntity：存放通用 字段/逻辑 的地方\n\n```java\n@Getter\n@Setter\npublic class BaseDTO  implements Serializable {\n\n    private String createBy;\n\n    private String updatedBy;\n\n    private Timestamp createTime;\n\n    private Timestamp updateTime;\n\n    @Override\n    public String toString() {\n        ToStringBuilder builder = new ToStringBuilder(this);\n        Field[] fields = this.getClass().getDeclaredFields();\n        try {\n            for (Field f : fields) {\n                f.setAccessible(true);\n                builder.append(f.getName(), f.get(this)).append(\"\\n\");\n            }\n        } catch (Exception e) {\n            builder.append(\"toString builder encounter an error\");\n        }\n        return builder.toString();\n    }\n}\n\n@Getter\n@Setter\n@MappedSuperclass // 表明这个Entity 不直接持久化到mysql，会被其他的Entity继承。\npublic class BaseEntity implements Serializable {\n\n    @CreatedBy\n    @Column(name = \"create_by\", updatable = false)\n    private String createBy;\n\n    @LastModifiedBy\n    @Column(name = \"update_by\")\n    private String updateBy;\n\n    @CreationTimestamp\n    @Column(name = \"create_time\", updatable = false)\n    private Timestamp createTime;\n\n    @UpdateTimestamp\n    @Column(name = \"update_time\")\n    private Timestamp updateTime;\n\n    @Override\n    public String toString() {\n        ToStringBuilder builder = new ToStringBuilder(this);\n        Field[] fields = this.getClass().getDeclaredFields();\n        try {\n            for (Field f : fields) {\n                f.setAccessible(true);\n                builder.append(f.getName(), f.get(this)).append(\"\\n\");\n            }\n        } catch (Exception e) {\n            builder.append(\"toString builder encounter an error\");\n        }\n        return builder.toString();\n    }\n}\n\n```\n","slug":"spring-DTO","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kk005jgosw9qvrgaj2","content":"<h1 id=\"什么是-DTO？\"><a href=\"#什么是-DTO？\" class=\"headerlink\" title=\"什么是 DTO？\"></a>什么是 DTO？</h1><p>页面展示 UI -&gt; controller -&gt; service -&gt; DTO -&gt; 页面展示</p>\n<p>数据传输对象,将 entity 实体组装转换成前端需要展示的类型</p>\n<a id=\"more\"></a>\n\n<p>DTO 是面向界面 UI,是通过 UI 的需求来定义的.通过 DTO 我们实现了表现层 UI 与 entity 之间的解耦。</p>\n<blockquote>\n<p>这句话的意思是，后端不直接返回 Entity 实体给前端，而是封装一个前端需要的数据格式给他。这就是 DTO</p>\n</blockquote>\n<p>数据传输对象 DTO 是根据 UI 的需求进行设计的，而不是根据领域对象 Entity 进行设计的。<br>比如，Customer 领域对象可能会包含一些诸如 FirstName, LastName, Email, Address 等信息。<br><strong>但如果 UI 上不打算显示 Address 的信息，那么 CustomerDTO 中也无需包含这个 Address 的数据</strong>.</p>\n<p>model 面向业务，我们通过业务来定义 Entity。而 DTO 面向 UI，通过 UI 的需求来定义。通过 DTO，我们实现了 UI 和 Entity 之间的解耦。如果开发过程中 Entity 发生改变，而 UI 不变，那么只需要改动 DTO 和 Entity 之间的映射关系而不需要去改变 UI。</p>\n<h1 id=\"项目中的使用例子\"><a href=\"#项目中的使用例子\" class=\"headerlink\" title=\"项目中的使用例子\"></a>项目中的使用例子</h1><p>entity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 角色</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Zheng Jie</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018-11-22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"sys_role\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseEntity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(serialize = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span>(mappedBy = <span class=\"string\">\"roles\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;User&gt; users;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Menu&gt; menus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Dept&gt; depts;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"名称\"</span>, hidden = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataScope = DataScopeEnum.THIS_LEVEL.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"level\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer level = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DTO</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoleDto</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDTO</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;MenuDto&gt; menus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;DeptDto&gt; depts;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataScope;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer level;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoleServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">RoleService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;RoleDto&gt; <span class=\"title\">queryAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Sort sort = Sort.by(Sort.Direction.ASC, <span class=\"string\">\"level\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> roleMapper.toDto(roleRepository.findAll(sort));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BaseEntity &amp; BaseDTO<br>baseEntity：存放通用 字段/逻辑 的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDTO</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createBy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String updatedBy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timestamp createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timestamp updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ToStringBuilder builder = <span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Field[] fields = <span class=\"keyword\">this</span>.getClass().getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field f : fields) &#123;</span><br><span class=\"line\">                f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                builder.append(f.getName(), f.get(<span class=\"keyword\">this</span>)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            builder.append(<span class=\"string\">\"toString builder encounter an error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@MappedSuperclass</span> <span class=\"comment\">// 表明这个Entity 不直接持久化到mysql，会被其他的Entity继承。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseEntity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@CreatedBy</span></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"create_by\"</span>, updatable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createBy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@LastModifiedBy</span></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"update_by\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String updateBy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@CreationTimestamp</span></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"create_time\"</span>, updatable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timestamp createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@UpdateTimestamp</span></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"update_time\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timestamp updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ToStringBuilder builder = <span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Field[] fields = <span class=\"keyword\">this</span>.getClass().getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field f : fields) &#123;</span><br><span class=\"line\">                f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                builder.append(f.getName(), f.get(<span class=\"keyword\">this</span>)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            builder.append(<span class=\"string\">\"toString builder encounter an error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是-DTO？\"><a href=\"#什么是-DTO？\" class=\"headerlink\" title=\"什么是 DTO？\"></a>什么是 DTO？</h1><p>页面展示 UI -&gt; controller -&gt; service -&gt; DTO -&gt; 页面展示</p>\n<p>数据传输对象,将 entity 实体组装转换成前端需要展示的类型</p>","more":"<p>DTO 是面向界面 UI,是通过 UI 的需求来定义的.通过 DTO 我们实现了表现层 UI 与 entity 之间的解耦。</p>\n<blockquote>\n<p>这句话的意思是，后端不直接返回 Entity 实体给前端，而是封装一个前端需要的数据格式给他。这就是 DTO</p>\n</blockquote>\n<p>数据传输对象 DTO 是根据 UI 的需求进行设计的，而不是根据领域对象 Entity 进行设计的。<br>比如，Customer 领域对象可能会包含一些诸如 FirstName, LastName, Email, Address 等信息。<br><strong>但如果 UI 上不打算显示 Address 的信息，那么 CustomerDTO 中也无需包含这个 Address 的数据</strong>.</p>\n<p>model 面向业务，我们通过业务来定义 Entity。而 DTO 面向 UI，通过 UI 的需求来定义。通过 DTO，我们实现了 UI 和 Entity 之间的解耦。如果开发过程中 Entity 发生改变，而 UI 不变，那么只需要改动 DTO 和 Entity 之间的映射关系而不需要去改变 UI。</p>\n<h1 id=\"项目中的使用例子\"><a href=\"#项目中的使用例子\" class=\"headerlink\" title=\"项目中的使用例子\"></a>项目中的使用例子</h1><p>entity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 角色</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Zheng Jie</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018-11-22</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"sys_role\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Role</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseEntity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JSONField</span>(serialize = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span>(mappedBy = <span class=\"string\">\"roles\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;User&gt; users;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Menu&gt; menus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Dept&gt; depts;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty</span>(value = <span class=\"string\">\"名称\"</span>, hidden = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataScope = DataScopeEnum.THIS_LEVEL.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"level\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer level = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DTO</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoleDto</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDTO</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;MenuDto&gt; menus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;DeptDto&gt; depts;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dataScope;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer level;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String description;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Service</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoleServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">RoleService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;RoleDto&gt; <span class=\"title\">queryAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Sort sort = Sort.by(Sort.Direction.ASC, <span class=\"string\">\"level\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> roleMapper.toDto(roleRepository.findAll(sort));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>BaseEntity &amp; BaseDTO<br>baseEntity：存放通用 字段/逻辑 的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDTO</span>  <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createBy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String updatedBy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timestamp createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timestamp updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ToStringBuilder builder = <span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Field[] fields = <span class=\"keyword\">this</span>.getClass().getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field f : fields) &#123;</span><br><span class=\"line\">                f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                builder.append(f.getName(), f.get(<span class=\"keyword\">this</span>)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            builder.append(<span class=\"string\">\"toString builder encounter an error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@MappedSuperclass</span> <span class=\"comment\">// 表明这个Entity 不直接持久化到mysql，会被其他的Entity继承。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseEntity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@CreatedBy</span></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"create_by\"</span>, updatable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String createBy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@LastModifiedBy</span></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"update_by\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String updateBy;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@CreationTimestamp</span></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"create_time\"</span>, updatable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timestamp createTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@UpdateTimestamp</span></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"update_time\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timestamp updateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ToStringBuilder builder = <span class=\"keyword\">new</span> ToStringBuilder(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Field[] fields = <span class=\"keyword\">this</span>.getClass().getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Field f : fields) &#123;</span><br><span class=\"line\">                f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                builder.append(f.getName(), f.get(<span class=\"keyword\">this</span>)).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            builder.append(<span class=\"string\">\"toString builder encounter an error\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"跨域请求 与 前后端设置","toc":true,"date":"2021-03-28T16:00:00.000Z","_content":"\n跨域 与 同源属于 两个相对的概念。不满足同源的请求就是跨域请求。\n\n<!-- more -->\n\n## 同源\n\n同源策略：协议://域名:端口号 全部相同就是同源策略。\n\n最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页\"同源\"。目前，如果非同源，下面三种行为会收到限制\n\n1. Cookie,LocalStorage 和 IndexDB 无法获取\n2. DOM 无法获得\n3. AJAX 请求不能发送\n\n## 跨域请求的实现方法\n\n### CORS\n\nCORS 需要浏览器和服务器的同时支持，但是在整个通信过程中，都是浏览器自动完成的。\n浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求。\n对于开发者说，CORS 通信与同源 AJAX 通信没有区别。\n\n**因此，99%的跨域问题都是后端的问题**\n\n服务端设置的 跨域相关 Response Header\n\n#### 简单请求\n\n- 请求方法是以下三种方法之一：\n  - HEAD\n  - GET\n  - POST\n\n* HTTP 的头信息不超出以下几种字段：\n  - Accept\n  - Accept-Language\n  - Content-Language\n  - Last-Event-ID\n  - Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain\n\n**简单请求相关的 header**\n\n```http\n  Access-Control-Allow-Origin: http://api.bob.com\n  Access-Control-Allow-Credentials: true\n  Access-Control-Expose-Headers: FooBar\n  Content-Type: text/html; charset=utf-8\n```\n\nAccess-Control-Allow-Origin: 允许访问的白名单, 可设置为 \\* 或者 指定的域名\n\nAccess-Control-Allow-Credentials：服务器是否接受客户端的 cookie 此字段需要前端配置设置\n\n```js\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n```\n\n**如果要发送 Cookie，Access-Control-Allow-Origin 就不能设为星号，必须指定明确的、与请求网页一致的域名。**\n\n#### 非简单请求\n\n非简单请求比简单请求多了个 Option 请求\n\n**浏览器先询问服务器**，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。**只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求，否则就报错。**\n\n预检请求相关 header 设置\n\n- Access-Control-Allow-Methods: 服务器支持的方法\n- Access-Control-Allow-Credentials: cookie 设置，参考上面简单请求\n- Access-Control-Max-Age: 预检请求的有效期\n\n### 其他跨域实现方式\n\n#### WebSocket\n\nWebSocket 是一种通信协议，使用 ws://（非加密）和 wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。\n\nwebsocket 请求头：\n\n```js\nGET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nOrigin: http://example.com\n```\n\nwebsocket 的请求头中有一个 Origin 字段，表示该请求的请求源，服务器根据这个字段，判断是否允许通讯\n\n#### JSONP\n\n略\n\n## spring boot 对 cors 的设置\n\n方案一和方案二，本质是相同的方案，只是配置方式不同。\n\n### @CrossCors 独立配置每个 API\n\n@CrossCors 注解，添加在类或方法上，标记该类/方法对应接口的 Cors 信息。\n\n@CrossCors 注解的常用属性，如下：\n\n- origins 属性，设置允许的请求来源。[] 数组，可以填写多个请求来源。默认值为 \\* 。\n  value 属性，和 origins 属性相同，是它的别名。\n- allowCredentials 属性，是否允许客户端请求发送 Cookie 。默认为 false ，不允许请求发送 Cookie 。\n- maxAge 属性，本次预检请求的有效期，单位为秒。默认值为 1800 秒。\n\n### [使用 CorsRegistry 注册表，配置每个 API 接口](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-23/lab-springmvc-23-02/src/main/java/cn/iocoder/springboot/lab23/springmvc/config/SpringMVCConfiguration.java)\n\n```java\n// SpringMVCConfiguration.java\n\n@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    // 添加全局的 CORS 配置\n    registry.addMapping(\"/**\") // 匹配所有 URL ，相当于全局配置\n            .allowedOrigins(\"*\") // 允许所有请求来源\n            .allowCredentials(true) // 允许发送 Cookie\n            .allowedMethods(\"*\") // 允许所有请求 Method\n            .allowedHeaders(\"*\") // 允许所有请求 Header\n//                .exposedHeaders(\"*\") // 允许所有响应 Header\n            .maxAge(1800L); // 有效期 1800 秒，2 小时\n}\n```\n\n### 使用 COrsFilter 过滤器，处理跨域请求\n\n在 Spring Web 中，内置提供 CorsFilter 过滤器，实现对 CORS 的处理。\n\n```java\n// SpringMVCConfiguration.java\n\n@Bean\npublic FilterRegistrationBean<CorsFilter> corsFilter() {\n    // 创建 UrlBasedCorsConfigurationSource 配置源，类似 CorsRegistry 注册表\n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    // 创建 CorsConfiguration 配置，相当于 CorsRegistration 注册信息\n    CorsConfiguration config = new CorsConfiguration();\n    config.setAllowedOrigins(Collections.singletonList(\"*\")); // 允许所有请求来源\n    config.setAllowCredentials(true); // 允许发送 Cookie\n    config.addAllowedMethod(\"*\"); // 允许所有请求 Method\n    config.setAllowedHeaders(Collections.singletonList(\"*\")); // 允许所有请求 Header\n    // config.setExposedHeaders(Collections.singletonList(\"*\")); // 允许所有响应 Header\n    config.setMaxAge(1800L); // 有效期 1800 秒，2 小时\n    source.registerCorsConfiguration(\"/**\", config);\n    // 创建 FilterRegistrationBean 对象\n    FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean<>(\n            new CorsFilter(source)); // 创建 CorsFilter 过滤器\n    bean.setOrder(0); // 设置 order 排序。这个顺序很重要哦，为避免麻烦请设置在最前\n    return bean;\n}\n```\n\n## 参考\n\n- [芋道 Spring Boot SpringMVC 入门](https://www.iocoder.cn/Spring-Boot/SpringMVC/?self)\n","source":"_posts/spring-boot-cors.md","raw":"---\ntitle: 跨域请求 与 前后端设置\ncategories: [后端]\ntags: [Spring Boot, CORS]\ntoc: true\ndate: 2021/3/29\n---\n\n跨域 与 同源属于 两个相对的概念。不满足同源的请求就是跨域请求。\n\n<!-- more -->\n\n## 同源\n\n同源策略：协议://域名:端口号 全部相同就是同源策略。\n\n最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页\"同源\"。目前，如果非同源，下面三种行为会收到限制\n\n1. Cookie,LocalStorage 和 IndexDB 无法获取\n2. DOM 无法获得\n3. AJAX 请求不能发送\n\n## 跨域请求的实现方法\n\n### CORS\n\nCORS 需要浏览器和服务器的同时支持，但是在整个通信过程中，都是浏览器自动完成的。\n浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求。\n对于开发者说，CORS 通信与同源 AJAX 通信没有区别。\n\n**因此，99%的跨域问题都是后端的问题**\n\n服务端设置的 跨域相关 Response Header\n\n#### 简单请求\n\n- 请求方法是以下三种方法之一：\n  - HEAD\n  - GET\n  - POST\n\n* HTTP 的头信息不超出以下几种字段：\n  - Accept\n  - Accept-Language\n  - Content-Language\n  - Last-Event-ID\n  - Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain\n\n**简单请求相关的 header**\n\n```http\n  Access-Control-Allow-Origin: http://api.bob.com\n  Access-Control-Allow-Credentials: true\n  Access-Control-Expose-Headers: FooBar\n  Content-Type: text/html; charset=utf-8\n```\n\nAccess-Control-Allow-Origin: 允许访问的白名单, 可设置为 \\* 或者 指定的域名\n\nAccess-Control-Allow-Credentials：服务器是否接受客户端的 cookie 此字段需要前端配置设置\n\n```js\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n```\n\n**如果要发送 Cookie，Access-Control-Allow-Origin 就不能设为星号，必须指定明确的、与请求网页一致的域名。**\n\n#### 非简单请求\n\n非简单请求比简单请求多了个 Option 请求\n\n**浏览器先询问服务器**，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。**只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求，否则就报错。**\n\n预检请求相关 header 设置\n\n- Access-Control-Allow-Methods: 服务器支持的方法\n- Access-Control-Allow-Credentials: cookie 设置，参考上面简单请求\n- Access-Control-Max-Age: 预检请求的有效期\n\n### 其他跨域实现方式\n\n#### WebSocket\n\nWebSocket 是一种通信协议，使用 ws://（非加密）和 wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。\n\nwebsocket 请求头：\n\n```js\nGET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nOrigin: http://example.com\n```\n\nwebsocket 的请求头中有一个 Origin 字段，表示该请求的请求源，服务器根据这个字段，判断是否允许通讯\n\n#### JSONP\n\n略\n\n## spring boot 对 cors 的设置\n\n方案一和方案二，本质是相同的方案，只是配置方式不同。\n\n### @CrossCors 独立配置每个 API\n\n@CrossCors 注解，添加在类或方法上，标记该类/方法对应接口的 Cors 信息。\n\n@CrossCors 注解的常用属性，如下：\n\n- origins 属性，设置允许的请求来源。[] 数组，可以填写多个请求来源。默认值为 \\* 。\n  value 属性，和 origins 属性相同，是它的别名。\n- allowCredentials 属性，是否允许客户端请求发送 Cookie 。默认为 false ，不允许请求发送 Cookie 。\n- maxAge 属性，本次预检请求的有效期，单位为秒。默认值为 1800 秒。\n\n### [使用 CorsRegistry 注册表，配置每个 API 接口](https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-23/lab-springmvc-23-02/src/main/java/cn/iocoder/springboot/lab23/springmvc/config/SpringMVCConfiguration.java)\n\n```java\n// SpringMVCConfiguration.java\n\n@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    // 添加全局的 CORS 配置\n    registry.addMapping(\"/**\") // 匹配所有 URL ，相当于全局配置\n            .allowedOrigins(\"*\") // 允许所有请求来源\n            .allowCredentials(true) // 允许发送 Cookie\n            .allowedMethods(\"*\") // 允许所有请求 Method\n            .allowedHeaders(\"*\") // 允许所有请求 Header\n//                .exposedHeaders(\"*\") // 允许所有响应 Header\n            .maxAge(1800L); // 有效期 1800 秒，2 小时\n}\n```\n\n### 使用 COrsFilter 过滤器，处理跨域请求\n\n在 Spring Web 中，内置提供 CorsFilter 过滤器，实现对 CORS 的处理。\n\n```java\n// SpringMVCConfiguration.java\n\n@Bean\npublic FilterRegistrationBean<CorsFilter> corsFilter() {\n    // 创建 UrlBasedCorsConfigurationSource 配置源，类似 CorsRegistry 注册表\n    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n    // 创建 CorsConfiguration 配置，相当于 CorsRegistration 注册信息\n    CorsConfiguration config = new CorsConfiguration();\n    config.setAllowedOrigins(Collections.singletonList(\"*\")); // 允许所有请求来源\n    config.setAllowCredentials(true); // 允许发送 Cookie\n    config.addAllowedMethod(\"*\"); // 允许所有请求 Method\n    config.setAllowedHeaders(Collections.singletonList(\"*\")); // 允许所有请求 Header\n    // config.setExposedHeaders(Collections.singletonList(\"*\")); // 允许所有响应 Header\n    config.setMaxAge(1800L); // 有效期 1800 秒，2 小时\n    source.registerCorsConfiguration(\"/**\", config);\n    // 创建 FilterRegistrationBean 对象\n    FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean<>(\n            new CorsFilter(source)); // 创建 CorsFilter 过滤器\n    bean.setOrder(0); // 设置 order 排序。这个顺序很重要哦，为避免麻烦请设置在最前\n    return bean;\n}\n```\n\n## 参考\n\n- [芋道 Spring Boot SpringMVC 入门](https://www.iocoder.cn/Spring-Boot/SpringMVC/?self)\n","slug":"spring-boot-cors","published":1,"updated":"2021-04-22T08:32:50.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kk005lgoswbgxp0agt","content":"<p>跨域 与 同源属于 两个相对的概念。不满足同源的请求就是跨域请求。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"同源\"><a href=\"#同源\" class=\"headerlink\" title=\"同源\"></a>同源</h2><p>同源策略：协议://域名:端口号 全部相同就是同源策略。</p>\n<p>最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页”同源”。目前，如果非同源，下面三种行为会收到限制</p>\n<ol>\n<li>Cookie,LocalStorage 和 IndexDB 无法获取</li>\n<li>DOM 无法获得</li>\n<li>AJAX 请求不能发送</li>\n</ol>\n<h2 id=\"跨域请求的实现方法\"><a href=\"#跨域请求的实现方法\" class=\"headerlink\" title=\"跨域请求的实现方法\"></a>跨域请求的实现方法</h2><h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>CORS 需要浏览器和服务器的同时支持，但是在整个通信过程中，都是浏览器自动完成的。<br>浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求。<br>对于开发者说，CORS 通信与同源 AJAX 通信没有区别。</p>\n<p><strong>因此，99%的跨域问题都是后端的问题</strong></p>\n<p>服务端设置的 跨域相关 Response Header</p>\n<h4 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h4><ul>\n<li>请求方法是以下三种方法之一：<ul>\n<li>HEAD</li>\n<li>GET</li>\n<li>POST</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>HTTP 的头信息不超出以下几种字段：<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n</li>\n</ul>\n<p><strong>简单请求相关的 header</strong></p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span>: http://api.bob.com</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Credentials</span>: true</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Expose-Headers</span>: FooBar</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n\n<p>Access-Control-Allow-Origin: 允许访问的白名单, 可设置为 * 或者 指定的域名</p>\n<p>Access-Control-Allow-Credentials：服务器是否接受客户端的 cookie 此字段需要前端配置设置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果要发送 Cookie，Access-Control-Allow-Origin 就不能设为星号，必须指定明确的、与请求网页一致的域名。</strong></p>\n<h4 id=\"非简单请求\"><a href=\"#非简单请求\" class=\"headerlink\" title=\"非简单请求\"></a>非简单请求</h4><p>非简单请求比简单请求多了个 Option 请求</p>\n<p><strong>浏览器先询问服务器</strong>，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。<strong>只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求，否则就报错。</strong></p>\n<p>预检请求相关 header 设置</p>\n<ul>\n<li>Access-Control-Allow-Methods: 服务器支持的方法</li>\n<li>Access-Control-Allow-Credentials: cookie 设置，参考上面简单请求</li>\n<li>Access-Control-Max-Age: 预检请求的有效期</li>\n</ul>\n<h3 id=\"其他跨域实现方式\"><a href=\"#其他跨域实现方式\" class=\"headerlink\" title=\"其他跨域实现方式\"></a>其他跨域实现方式</h3><h4 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h4><p>WebSocket 是一种通信协议，使用 ws://（非加密）和 wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>\n<p>websocket 请求头：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /chat HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: server.example.com</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class=\"line\">Sec-WebSocket-Protocol: chat, superchat</span><br><span class=\"line\">Sec-WebSocket-Version: <span class=\"number\">13</span></span><br><span class=\"line\">Origin: http:<span class=\"comment\">//example.com</span></span><br></pre></td></tr></table></figure>\n\n<p>websocket 的请求头中有一个 Origin 字段，表示该请求的请求源，服务器根据这个字段，判断是否允许通讯</p>\n<h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>略</p>\n<h2 id=\"spring-boot-对-cors-的设置\"><a href=\"#spring-boot-对-cors-的设置\" class=\"headerlink\" title=\"spring boot 对 cors 的设置\"></a>spring boot 对 cors 的设置</h2><p>方案一和方案二，本质是相同的方案，只是配置方式不同。</p>\n<h3 id=\"CrossCors-独立配置每个-API\"><a href=\"#CrossCors-独立配置每个-API\" class=\"headerlink\" title=\"@CrossCors 独立配置每个 API\"></a>@CrossCors 独立配置每个 API</h3><p>@CrossCors 注解，添加在类或方法上，标记该类/方法对应接口的 Cors 信息。</p>\n<p>@CrossCors 注解的常用属性，如下：</p>\n<ul>\n<li>origins 属性，设置允许的请求来源。[] 数组，可以填写多个请求来源。默认值为 * 。<br>value 属性，和 origins 属性相同，是它的别名。</li>\n<li>allowCredentials 属性，是否允许客户端请求发送 Cookie 。默认为 false ，不允许请求发送 Cookie 。</li>\n<li>maxAge 属性，本次预检请求的有效期，单位为秒。默认值为 1800 秒。</li>\n</ul>\n<h3 id=\"使用-CorsRegistry-注册表，配置每个-API-接口\"><a href=\"#使用-CorsRegistry-注册表，配置每个-API-接口\" class=\"headerlink\" title=\"使用 CorsRegistry 注册表，配置每个 API 接口\"></a><a href=\"https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-23/lab-springmvc-23-02/src/main/java/cn/iocoder/springboot/lab23/springmvc/config/SpringMVCConfiguration.java\" target=\"_blank\" rel=\"noopener\">使用 CorsRegistry 注册表，配置每个 API 接口</a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SpringMVCConfiguration.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加全局的 CORS 配置</span></span><br><span class=\"line\">    registry.addMapping(<span class=\"string\">\"/**\"</span>) <span class=\"comment\">// 匹配所有 URL ，相当于全局配置</span></span><br><span class=\"line\">            .allowedOrigins(<span class=\"string\">\"*\"</span>) <span class=\"comment\">// 允许所有请求来源</span></span><br><span class=\"line\">            .allowCredentials(<span class=\"keyword\">true</span>) <span class=\"comment\">// 允许发送 Cookie</span></span><br><span class=\"line\">            .allowedMethods(<span class=\"string\">\"*\"</span>) <span class=\"comment\">// 允许所有请求 Method</span></span><br><span class=\"line\">            .allowedHeaders(<span class=\"string\">\"*\"</span>) <span class=\"comment\">// 允许所有请求 Header</span></span><br><span class=\"line\"><span class=\"comment\">//                .exposedHeaders(\"*\") // 允许所有响应 Header</span></span><br><span class=\"line\">            .maxAge(<span class=\"number\">1800L</span>); <span class=\"comment\">// 有效期 1800 秒，2 小时</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-COrsFilter-过滤器，处理跨域请求\"><a href=\"#使用-COrsFilter-过滤器，处理跨域请求\" class=\"headerlink\" title=\"使用 COrsFilter 过滤器，处理跨域请求\"></a>使用 COrsFilter 过滤器，处理跨域请求</h3><p>在 Spring Web 中，内置提供 CorsFilter 过滤器，实现对 CORS 的处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SpringMVCConfiguration.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean&lt;CorsFilter&gt; <span class=\"title\">corsFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 UrlBasedCorsConfigurationSource 配置源，类似 CorsRegistry 注册表</span></span><br><span class=\"line\">    UrlBasedCorsConfigurationSource source = <span class=\"keyword\">new</span> UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">    <span class=\"comment\">// 创建 CorsConfiguration 配置，相当于 CorsRegistration 注册信息</span></span><br><span class=\"line\">    CorsConfiguration config = <span class=\"keyword\">new</span> CorsConfiguration();</span><br><span class=\"line\">    config.setAllowedOrigins(Collections.singletonList(<span class=\"string\">\"*\"</span>)); <span class=\"comment\">// 允许所有请求来源</span></span><br><span class=\"line\">    config.setAllowCredentials(<span class=\"keyword\">true</span>); <span class=\"comment\">// 允许发送 Cookie</span></span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"*\"</span>); <span class=\"comment\">// 允许所有请求 Method</span></span><br><span class=\"line\">    config.setAllowedHeaders(Collections.singletonList(<span class=\"string\">\"*\"</span>)); <span class=\"comment\">// 允许所有请求 Header</span></span><br><span class=\"line\">    <span class=\"comment\">// config.setExposedHeaders(Collections.singletonList(\"*\")); // 允许所有响应 Header</span></span><br><span class=\"line\">    config.setMaxAge(<span class=\"number\">1800L</span>); <span class=\"comment\">// 有效期 1800 秒，2 小时</span></span><br><span class=\"line\">    source.registerCorsConfiguration(<span class=\"string\">\"/**\"</span>, config);</span><br><span class=\"line\">    <span class=\"comment\">// 创建 FilterRegistrationBean 对象</span></span><br><span class=\"line\">    FilterRegistrationBean&lt;CorsFilter&gt; bean = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> CorsFilter(source)); <span class=\"comment\">// 创建 CorsFilter 过滤器</span></span><br><span class=\"line\">    bean.setOrder(<span class=\"number\">0</span>); <span class=\"comment\">// 设置 order 排序。这个顺序很重要哦，为避免麻烦请设置在最前</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.iocoder.cn/Spring-Boot/SpringMVC/?self\" target=\"_blank\" rel=\"noopener\">芋道 Spring Boot SpringMVC 入门</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>跨域 与 同源属于 两个相对的概念。不满足同源的请求就是跨域请求。</p>","more":"<h2 id=\"同源\"><a href=\"#同源\" class=\"headerlink\" title=\"同源\"></a>同源</h2><p>同源策略：协议://域名:端口号 全部相同就是同源策略。</p>\n<p>最初，它的含义是指，A 网页设置的 Cookie，B 网页不能打开，除非这两个网页”同源”。目前，如果非同源，下面三种行为会收到限制</p>\n<ol>\n<li>Cookie,LocalStorage 和 IndexDB 无法获取</li>\n<li>DOM 无法获得</li>\n<li>AJAX 请求不能发送</li>\n</ol>\n<h2 id=\"跨域请求的实现方法\"><a href=\"#跨域请求的实现方法\" class=\"headerlink\" title=\"跨域请求的实现方法\"></a>跨域请求的实现方法</h2><h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>CORS 需要浏览器和服务器的同时支持，但是在整个通信过程中，都是浏览器自动完成的。<br>浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求。<br>对于开发者说，CORS 通信与同源 AJAX 通信没有区别。</p>\n<p><strong>因此，99%的跨域问题都是后端的问题</strong></p>\n<p>服务端设置的 跨域相关 Response Header</p>\n<h4 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h4><ul>\n<li>请求方法是以下三种方法之一：<ul>\n<li>HEAD</li>\n<li>GET</li>\n<li>POST</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>HTTP 的头信息不超出以下几种字段：<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n</li>\n</ul>\n<p><strong>简单请求相关的 header</strong></p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span>: http://api.bob.com</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Credentials</span>: true</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Expose-Headers</span>: FooBar</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n\n<p>Access-Control-Allow-Origin: 允许访问的白名单, 可设置为 * 或者 指定的域名</p>\n<p>Access-Control-Allow-Credentials：服务器是否接受客户端的 cookie 此字段需要前端配置设置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果要发送 Cookie，Access-Control-Allow-Origin 就不能设为星号，必须指定明确的、与请求网页一致的域名。</strong></p>\n<h4 id=\"非简单请求\"><a href=\"#非简单请求\" class=\"headerlink\" title=\"非简单请求\"></a>非简单请求</h4><p>非简单请求比简单请求多了个 Option 请求</p>\n<p><strong>浏览器先询问服务器</strong>，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。<strong>只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求，否则就报错。</strong></p>\n<p>预检请求相关 header 设置</p>\n<ul>\n<li>Access-Control-Allow-Methods: 服务器支持的方法</li>\n<li>Access-Control-Allow-Credentials: cookie 设置，参考上面简单请求</li>\n<li>Access-Control-Max-Age: 预检请求的有效期</li>\n</ul>\n<h3 id=\"其他跨域实现方式\"><a href=\"#其他跨域实现方式\" class=\"headerlink\" title=\"其他跨域实现方式\"></a>其他跨域实现方式</h3><h4 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h4><p>WebSocket 是一种通信协议，使用 ws://（非加密）和 wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>\n<p>websocket 请求头：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /chat HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: server.example.com</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==</span><br><span class=\"line\">Sec-WebSocket-Protocol: chat, superchat</span><br><span class=\"line\">Sec-WebSocket-Version: <span class=\"number\">13</span></span><br><span class=\"line\">Origin: http:<span class=\"comment\">//example.com</span></span><br></pre></td></tr></table></figure>\n\n<p>websocket 的请求头中有一个 Origin 字段，表示该请求的请求源，服务器根据这个字段，判断是否允许通讯</p>\n<h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>略</p>\n<h2 id=\"spring-boot-对-cors-的设置\"><a href=\"#spring-boot-对-cors-的设置\" class=\"headerlink\" title=\"spring boot 对 cors 的设置\"></a>spring boot 对 cors 的设置</h2><p>方案一和方案二，本质是相同的方案，只是配置方式不同。</p>\n<h3 id=\"CrossCors-独立配置每个-API\"><a href=\"#CrossCors-独立配置每个-API\" class=\"headerlink\" title=\"@CrossCors 独立配置每个 API\"></a>@CrossCors 独立配置每个 API</h3><p>@CrossCors 注解，添加在类或方法上，标记该类/方法对应接口的 Cors 信息。</p>\n<p>@CrossCors 注解的常用属性，如下：</p>\n<ul>\n<li>origins 属性，设置允许的请求来源。[] 数组，可以填写多个请求来源。默认值为 * 。<br>value 属性，和 origins 属性相同，是它的别名。</li>\n<li>allowCredentials 属性，是否允许客户端请求发送 Cookie 。默认为 false ，不允许请求发送 Cookie 。</li>\n<li>maxAge 属性，本次预检请求的有效期，单位为秒。默认值为 1800 秒。</li>\n</ul>\n<h3 id=\"使用-CorsRegistry-注册表，配置每个-API-接口\"><a href=\"#使用-CorsRegistry-注册表，配置每个-API-接口\" class=\"headerlink\" title=\"使用 CorsRegistry 注册表，配置每个 API 接口\"></a><a href=\"https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-23/lab-springmvc-23-02/src/main/java/cn/iocoder/springboot/lab23/springmvc/config/SpringMVCConfiguration.java\" target=\"_blank\" rel=\"noopener\">使用 CorsRegistry 注册表，配置每个 API 接口</a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SpringMVCConfiguration.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 添加全局的 CORS 配置</span></span><br><span class=\"line\">    registry.addMapping(<span class=\"string\">\"/**\"</span>) <span class=\"comment\">// 匹配所有 URL ，相当于全局配置</span></span><br><span class=\"line\">            .allowedOrigins(<span class=\"string\">\"*\"</span>) <span class=\"comment\">// 允许所有请求来源</span></span><br><span class=\"line\">            .allowCredentials(<span class=\"keyword\">true</span>) <span class=\"comment\">// 允许发送 Cookie</span></span><br><span class=\"line\">            .allowedMethods(<span class=\"string\">\"*\"</span>) <span class=\"comment\">// 允许所有请求 Method</span></span><br><span class=\"line\">            .allowedHeaders(<span class=\"string\">\"*\"</span>) <span class=\"comment\">// 允许所有请求 Header</span></span><br><span class=\"line\"><span class=\"comment\">//                .exposedHeaders(\"*\") // 允许所有响应 Header</span></span><br><span class=\"line\">            .maxAge(<span class=\"number\">1800L</span>); <span class=\"comment\">// 有效期 1800 秒，2 小时</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-COrsFilter-过滤器，处理跨域请求\"><a href=\"#使用-COrsFilter-过滤器，处理跨域请求\" class=\"headerlink\" title=\"使用 COrsFilter 过滤器，处理跨域请求\"></a>使用 COrsFilter 过滤器，处理跨域请求</h3><p>在 Spring Web 中，内置提供 CorsFilter 过滤器，实现对 CORS 的处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SpringMVCConfiguration.java</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean&lt;CorsFilter&gt; <span class=\"title\">corsFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建 UrlBasedCorsConfigurationSource 配置源，类似 CorsRegistry 注册表</span></span><br><span class=\"line\">    UrlBasedCorsConfigurationSource source = <span class=\"keyword\">new</span> UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">    <span class=\"comment\">// 创建 CorsConfiguration 配置，相当于 CorsRegistration 注册信息</span></span><br><span class=\"line\">    CorsConfiguration config = <span class=\"keyword\">new</span> CorsConfiguration();</span><br><span class=\"line\">    config.setAllowedOrigins(Collections.singletonList(<span class=\"string\">\"*\"</span>)); <span class=\"comment\">// 允许所有请求来源</span></span><br><span class=\"line\">    config.setAllowCredentials(<span class=\"keyword\">true</span>); <span class=\"comment\">// 允许发送 Cookie</span></span><br><span class=\"line\">    config.addAllowedMethod(<span class=\"string\">\"*\"</span>); <span class=\"comment\">// 允许所有请求 Method</span></span><br><span class=\"line\">    config.setAllowedHeaders(Collections.singletonList(<span class=\"string\">\"*\"</span>)); <span class=\"comment\">// 允许所有请求 Header</span></span><br><span class=\"line\">    <span class=\"comment\">// config.setExposedHeaders(Collections.singletonList(\"*\")); // 允许所有响应 Header</span></span><br><span class=\"line\">    config.setMaxAge(<span class=\"number\">1800L</span>); <span class=\"comment\">// 有效期 1800 秒，2 小时</span></span><br><span class=\"line\">    source.registerCorsConfiguration(<span class=\"string\">\"/**\"</span>, config);</span><br><span class=\"line\">    <span class=\"comment\">// 创建 FilterRegistrationBean 对象</span></span><br><span class=\"line\">    FilterRegistrationBean&lt;CorsFilter&gt; bean = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> CorsFilter(source)); <span class=\"comment\">// 创建 CorsFilter 过滤器</span></span><br><span class=\"line\">    bean.setOrder(<span class=\"number\">0</span>); <span class=\"comment\">// 设置 order 排序。这个顺序很重要哦，为避免麻烦请设置在最前</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.iocoder.cn/Spring-Boot/SpringMVC/?self\" target=\"_blank\" rel=\"noopener\">芋道 Spring Boot SpringMVC 入门</a></li>\n</ul>"},{"title":"「spring data jpa」实现tree 结构","toc":true,"date":"2021-04-30T16:00:00.000Z","_content":"\n这篇文章介绍了 JPA 实现树结构实体的方式。\n\n比如文章评论功能。一条评论可以有多条回复。这条回复可能会有其他的回复\n\n```java\n-- commentA\n  -- commentB: replay to commentA\n    -- commentC: replay to commentB\n```\n\n<!-- more -->\n\n# entity 设计\n\n子 comment 和 父 comment 之间属于一对多的关系, 多条子 comment 只能对应一条父 comment。而一条父 comment 可以对应多条子 Comment\n\n## 一对多关系设计\n\n```java\n@Entity\npublic class Comment extends Serializable{\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    // 内容\n    private String content;\n\n    // 父节点\n    @ManyToOne\n    private Comment parent;\n\n    // 子节点 This is the other side of the relationship defined by the parent field\n    @OneToMany(mappedBy = \"parent\")\n    private List<Comment> childComment;\n}\n```\n\n上述结构，生成的效果如下\n\n| id  | content | parent_id |\n| --- | ------- | --------- |\n| 1   | xxx     | null      |\n| 2   | xxx     | 1         |\n| 3   | xxx     | 1         |\n| 4   | xxx     | 3         |\n\n## 解决环引用\n\n虽然我们正确定义了实体结构，但是从一个对象的角度看待这个 Comment，它是存在环引用的，这会导致在序列化和反序列化的时候无限递归下去。\n\n对于这个 Comment 对象，parent 会包含 childComment,而 childComment 还会包含 parent，这就是一个环。那么我们只需要屏蔽 parent 内部的 childComment 和 comment 即可解决环引用\n\n**@JsonIgnoreProperties**: 在序列化和反序列化的时候，忽略掉对象内部的特定属性或者方法。\n\n**@JsonIgnore 的作用**: 在序列化和反序列化的时候，忽略掉当前被标注的属性或者方法。\n\n## 删除父节点，自动删除关联节点\n\norphanRemoval: 删除 parent 实体，导致 child 实体成了孤儿，将会被一起删除。\n\n## 最终 entity\n\n```java\n@Entity\npublic class Comment extends Serializable{\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    // 内容\n    private String content;\n\n    // 父节点\n    @ManyToOne\n    @JsonIgnoreProperties({\"childComment\", \"parent\"})\n    private Comment parent;\n\n    // 子节点\n    @OneToMany(mappedBy = \"parent\",  orphanRemoval = true)\n    private List<Comment> childComment;\n}\n```\n\n实体序列化后返回的 Comment 格式如下\n\n```json\n{\n  \"id\": 21,\n  \"content\": \"评论\",\n  \"parent\": null,\n  \"childComment\": [\n    {\n      \"id\": 22,\n      \"content\": \"评论\",\n      \"parent\": {\n        \"id\": 21,\n        \"content\": \"评论\"\n      },\n      \"childComment\": [\n        {\n          \"id\": 23,\n          \"content\": \"评论\",\n          \"parent\": {\n            \"id\": 22,\n            \"content\": \"评论\"\n          },\n          \"childComment\": [\n            {\n              \"id\": 24,\n              \"content\": \"评论\",\n              \"parent\": {\n                \"id\": 23,\n                \"content\": \"评论\"\n              },\n              \"childComment\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n# 组装数据\n\n如上的 Comment 格式，已经是合格的树节点，当 Comment 的 parent_id 为 null，那么它就是一颗完整的树。所以对于 comment 列表我们只需要将 parent_id 为 null 的全部查询出来即可\n\n```json\n[\n  {\n    \"id\": 21,\n    \"content\": \"评论\",\n    \"parent\": null,\n    \"childComment\": [...]\n  },\n  // ...\n  {\n    \"id\": 22,\n    \"content\": \"评论\",\n    \"parent\": null,\n    \"childComment\": [...]\n  }\n]\n```\n\n## queryDsl 查询\n\n```java\npublic List<Comment> findByArticleId(Long articleId) {\n    QComment commentModel = QComment.comment;\n    BooleanBuilder query = new BooleanBuilder();\n    query.and(commentModel.article.id.eq(articleId)).and(commentModel.parent.id.isNull());\n    return (List<Comment>)commentRepository.findAll(query);\n}\n```\n\n# 更多阅读\n\n- 手动组装扁平树结构：[数组转树](https://blog.shancw.net/2021/01/11/util-%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91/)\n\n- [stackOverflow: How does JPA orphanRemoval=true differ from the ON DELETE CASCADE DML clause](https://stackoverflow.com/questions/4329577/how-does-jpa-orphanremoval-true-differ-from-the-on-delete-cascade-dml-clause)\n\n- [Oracle: Orphan Removal in Relationships](https://docs.oracle.com/cd/E19798-01/821-1841/giqxy/)\n","source":"_posts/spring-data-jpa-tree-entity.md","raw":"---\ntitle: 「spring data jpa」实现tree 结构\ncategories: [后端]\ntags: [Spring Boot, jpa, ORM, database]\ntoc: true\ndate: 2021/05/01\n---\n\n这篇文章介绍了 JPA 实现树结构实体的方式。\n\n比如文章评论功能。一条评论可以有多条回复。这条回复可能会有其他的回复\n\n```java\n-- commentA\n  -- commentB: replay to commentA\n    -- commentC: replay to commentB\n```\n\n<!-- more -->\n\n# entity 设计\n\n子 comment 和 父 comment 之间属于一对多的关系, 多条子 comment 只能对应一条父 comment。而一条父 comment 可以对应多条子 Comment\n\n## 一对多关系设计\n\n```java\n@Entity\npublic class Comment extends Serializable{\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    // 内容\n    private String content;\n\n    // 父节点\n    @ManyToOne\n    private Comment parent;\n\n    // 子节点 This is the other side of the relationship defined by the parent field\n    @OneToMany(mappedBy = \"parent\")\n    private List<Comment> childComment;\n}\n```\n\n上述结构，生成的效果如下\n\n| id  | content | parent_id |\n| --- | ------- | --------- |\n| 1   | xxx     | null      |\n| 2   | xxx     | 1         |\n| 3   | xxx     | 1         |\n| 4   | xxx     | 3         |\n\n## 解决环引用\n\n虽然我们正确定义了实体结构，但是从一个对象的角度看待这个 Comment，它是存在环引用的，这会导致在序列化和反序列化的时候无限递归下去。\n\n对于这个 Comment 对象，parent 会包含 childComment,而 childComment 还会包含 parent，这就是一个环。那么我们只需要屏蔽 parent 内部的 childComment 和 comment 即可解决环引用\n\n**@JsonIgnoreProperties**: 在序列化和反序列化的时候，忽略掉对象内部的特定属性或者方法。\n\n**@JsonIgnore 的作用**: 在序列化和反序列化的时候，忽略掉当前被标注的属性或者方法。\n\n## 删除父节点，自动删除关联节点\n\norphanRemoval: 删除 parent 实体，导致 child 实体成了孤儿，将会被一起删除。\n\n## 最终 entity\n\n```java\n@Entity\npublic class Comment extends Serializable{\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    // 内容\n    private String content;\n\n    // 父节点\n    @ManyToOne\n    @JsonIgnoreProperties({\"childComment\", \"parent\"})\n    private Comment parent;\n\n    // 子节点\n    @OneToMany(mappedBy = \"parent\",  orphanRemoval = true)\n    private List<Comment> childComment;\n}\n```\n\n实体序列化后返回的 Comment 格式如下\n\n```json\n{\n  \"id\": 21,\n  \"content\": \"评论\",\n  \"parent\": null,\n  \"childComment\": [\n    {\n      \"id\": 22,\n      \"content\": \"评论\",\n      \"parent\": {\n        \"id\": 21,\n        \"content\": \"评论\"\n      },\n      \"childComment\": [\n        {\n          \"id\": 23,\n          \"content\": \"评论\",\n          \"parent\": {\n            \"id\": 22,\n            \"content\": \"评论\"\n          },\n          \"childComment\": [\n            {\n              \"id\": 24,\n              \"content\": \"评论\",\n              \"parent\": {\n                \"id\": 23,\n                \"content\": \"评论\"\n              },\n              \"childComment\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n# 组装数据\n\n如上的 Comment 格式，已经是合格的树节点，当 Comment 的 parent_id 为 null，那么它就是一颗完整的树。所以对于 comment 列表我们只需要将 parent_id 为 null 的全部查询出来即可\n\n```json\n[\n  {\n    \"id\": 21,\n    \"content\": \"评论\",\n    \"parent\": null,\n    \"childComment\": [...]\n  },\n  // ...\n  {\n    \"id\": 22,\n    \"content\": \"评论\",\n    \"parent\": null,\n    \"childComment\": [...]\n  }\n]\n```\n\n## queryDsl 查询\n\n```java\npublic List<Comment> findByArticleId(Long articleId) {\n    QComment commentModel = QComment.comment;\n    BooleanBuilder query = new BooleanBuilder();\n    query.and(commentModel.article.id.eq(articleId)).and(commentModel.parent.id.isNull());\n    return (List<Comment>)commentRepository.findAll(query);\n}\n```\n\n# 更多阅读\n\n- 手动组装扁平树结构：[数组转树](https://blog.shancw.net/2021/01/11/util-%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91/)\n\n- [stackOverflow: How does JPA orphanRemoval=true differ from the ON DELETE CASCADE DML clause](https://stackoverflow.com/questions/4329577/how-does-jpa-orphanremoval-true-differ-from-the-on-delete-cascade-dml-clause)\n\n- [Oracle: Orphan Removal in Relationships](https://docs.oracle.com/cd/E19798-01/821-1841/giqxy/)\n","slug":"spring-data-jpa-tree-entity","published":1,"updated":"2021-05-10T01:55:50.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kl005ogosw0i5x21z7","content":"<p>这篇文章介绍了 JPA 实现树结构实体的方式。</p>\n<p>比如文章评论功能。一条评论可以有多条回复。这条回复可能会有其他的回复</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- commentA</span><br><span class=\"line\">  -- commentB: replay to commentA</span><br><span class=\"line\">    -- commentC: replay to commentB</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"entity-设计\"><a href=\"#entity-设计\" class=\"headerlink\" title=\"entity 设计\"></a>entity 设计</h1><p>子 comment 和 父 comment 之间属于一对多的关系, 多条子 comment 只能对应一条父 comment。而一条父 comment 可以对应多条子 Comment</p>\n<h2 id=\"一对多关系设计\"><a href=\"#一对多关系设计\" class=\"headerlink\" title=\"一对多关系设计\"></a>一对多关系设计</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Comment parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 子节点 This is the other side of the relationship defined by the parent field</span></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span>(mappedBy = <span class=\"string\">\"parent\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Comment&gt; childComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述结构，生成的效果如下</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>content</th>\n<th>parent_id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>xxx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2</td>\n<td>xxx</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>xxx</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>xxx</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<h2 id=\"解决环引用\"><a href=\"#解决环引用\" class=\"headerlink\" title=\"解决环引用\"></a>解决环引用</h2><p>虽然我们正确定义了实体结构，但是从一个对象的角度看待这个 Comment，它是存在环引用的，这会导致在序列化和反序列化的时候无限递归下去。</p>\n<p>对于这个 Comment 对象，parent 会包含 childComment,而 childComment 还会包含 parent，这就是一个环。那么我们只需要屏蔽 parent 内部的 childComment 和 comment 即可解决环引用</p>\n<p><strong>@JsonIgnoreProperties</strong>: 在序列化和反序列化的时候，忽略掉对象内部的特定属性或者方法。</p>\n<p><strong>@JsonIgnore 的作用</strong>: 在序列化和反序列化的时候，忽略掉当前被标注的属性或者方法。</p>\n<h2 id=\"删除父节点，自动删除关联节点\"><a href=\"#删除父节点，自动删除关联节点\" class=\"headerlink\" title=\"删除父节点，自动删除关联节点\"></a>删除父节点，自动删除关联节点</h2><p>orphanRemoval: 删除 parent 实体，导致 child 实体成了孤儿，将会被一起删除。</p>\n<h2 id=\"最终-entity\"><a href=\"#最终-entity\" class=\"headerlink\" title=\"最终 entity\"></a>最终 entity</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"meta\">@JsonIgnoreProperties</span>(&#123;<span class=\"string\">\"childComment\"</span>, <span class=\"string\">\"parent\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Comment parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 子节点</span></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span>(mappedBy = <span class=\"string\">\"parent\"</span>,  orphanRemoval = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Comment&gt; childComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实体序列化后返回的 Comment 格式如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"parent\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"childComment\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"parent\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"childComment\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"parent\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"id\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">\"childComment\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"attr\">\"id\"</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">              <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">              <span class=\"attr\">\"parent\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"id\"</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span></span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              <span class=\"attr\">\"childComment\"</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"组装数据\"><a href=\"#组装数据\" class=\"headerlink\" title=\"组装数据\"></a>组装数据</h1><p>如上的 Comment 格式，已经是合格的树节点，当 Comment 的 parent_id 为 null，那么它就是一颗完整的树。所以对于 comment 列表我们只需要将 parent_id 为 null 的全部查询出来即可</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"parent\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"childComment\"</span>: [...]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"parent\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"childComment\"</span>: [...]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"queryDsl-查询\"><a href=\"#queryDsl-查询\" class=\"headerlink\" title=\"queryDsl 查询\"></a>queryDsl 查询</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Comment&gt; <span class=\"title\">findByArticleId</span><span class=\"params\">(Long articleId)</span> </span>&#123;</span><br><span class=\"line\">    QComment commentModel = QComment.comment;</span><br><span class=\"line\">    BooleanBuilder query = <span class=\"keyword\">new</span> BooleanBuilder();</span><br><span class=\"line\">    query.and(commentModel.article.id.eq(articleId)).and(commentModel.parent.id.isNull());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (List&lt;Comment&gt;)commentRepository.findAll(query);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更多阅读\"><a href=\"#更多阅读\" class=\"headerlink\" title=\"更多阅读\"></a>更多阅读</h1><ul>\n<li><p>手动组装扁平树结构：<a href=\"https://blog.shancw.net/2021/01/11/util-%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91/\">数组转树</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/4329577/how-does-jpa-orphanremoval-true-differ-from-the-on-delete-cascade-dml-clause\" target=\"_blank\" rel=\"noopener\">stackOverflow: How does JPA orphanRemoval=true differ from the ON DELETE CASCADE DML clause</a></p>\n</li>\n<li><p><a href=\"https://docs.oracle.com/cd/E19798-01/821-1841/giqxy/\" target=\"_blank\" rel=\"noopener\">Oracle: Orphan Removal in Relationships</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这篇文章介绍了 JPA 实现树结构实体的方式。</p>\n<p>比如文章评论功能。一条评论可以有多条回复。这条回复可能会有其他的回复</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- commentA</span><br><span class=\"line\">  -- commentB: replay to commentA</span><br><span class=\"line\">    -- commentC: replay to commentB</span><br></pre></td></tr></table></figure>","more":"<h1 id=\"entity-设计\"><a href=\"#entity-设计\" class=\"headerlink\" title=\"entity 设计\"></a>entity 设计</h1><p>子 comment 和 父 comment 之间属于一对多的关系, 多条子 comment 只能对应一条父 comment。而一条父 comment 可以对应多条子 Comment</p>\n<h2 id=\"一对多关系设计\"><a href=\"#一对多关系设计\" class=\"headerlink\" title=\"一对多关系设计\"></a>一对多关系设计</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Comment parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 子节点 This is the other side of the relationship defined by the parent field</span></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span>(mappedBy = <span class=\"string\">\"parent\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Comment&gt; childComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述结构，生成的效果如下</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>content</th>\n<th>parent_id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>xxx</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2</td>\n<td>xxx</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>xxx</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>xxx</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<h2 id=\"解决环引用\"><a href=\"#解决环引用\" class=\"headerlink\" title=\"解决环引用\"></a>解决环引用</h2><p>虽然我们正确定义了实体结构，但是从一个对象的角度看待这个 Comment，它是存在环引用的，这会导致在序列化和反序列化的时候无限递归下去。</p>\n<p>对于这个 Comment 对象，parent 会包含 childComment,而 childComment 还会包含 parent，这就是一个环。那么我们只需要屏蔽 parent 内部的 childComment 和 comment 即可解决环引用</p>\n<p><strong>@JsonIgnoreProperties</strong>: 在序列化和反序列化的时候，忽略掉对象内部的特定属性或者方法。</p>\n<p><strong>@JsonIgnore 的作用</strong>: 在序列化和反序列化的时候，忽略掉当前被标注的属性或者方法。</p>\n<h2 id=\"删除父节点，自动删除关联节点\"><a href=\"#删除父节点，自动删除关联节点\" class=\"headerlink\" title=\"删除父节点，自动删除关联节点\"></a>删除父节点，自动删除关联节点</h2><p>orphanRemoval: 删除 parent 实体，导致 child 实体成了孤儿，将会被一起删除。</p>\n<h2 id=\"最终-entity\"><a href=\"#最终-entity\" class=\"headerlink\" title=\"最终 entity\"></a>最终 entity</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Comment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"meta\">@JsonIgnoreProperties</span>(&#123;<span class=\"string\">\"childComment\"</span>, <span class=\"string\">\"parent\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Comment parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 子节点</span></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span>(mappedBy = <span class=\"string\">\"parent\"</span>,  orphanRemoval = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Comment&gt; childComment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实体序列化后返回的 Comment 格式如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"parent\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"childComment\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"parent\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"childComment\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"parent\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"id\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">\"childComment\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"attr\">\"id\"</span>: <span class=\"number\">24</span>,</span><br><span class=\"line\">              <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">              <span class=\"attr\">\"parent\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"id\"</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span></span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              <span class=\"attr\">\"childComment\"</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"组装数据\"><a href=\"#组装数据\" class=\"headerlink\" title=\"组装数据\"></a>组装数据</h1><p>如上的 Comment 格式，已经是合格的树节点，当 Comment 的 parent_id 为 null，那么它就是一颗完整的树。所以对于 comment 列表我们只需要将 parent_id 为 null 的全部查询出来即可</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">21</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"parent\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"childComment\"</span>: [...]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"content\"</span>: <span class=\"string\">\"评论\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"parent\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"childComment\"</span>: [...]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"queryDsl-查询\"><a href=\"#queryDsl-查询\" class=\"headerlink\" title=\"queryDsl 查询\"></a>queryDsl 查询</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Comment&gt; <span class=\"title\">findByArticleId</span><span class=\"params\">(Long articleId)</span> </span>&#123;</span><br><span class=\"line\">    QComment commentModel = QComment.comment;</span><br><span class=\"line\">    BooleanBuilder query = <span class=\"keyword\">new</span> BooleanBuilder();</span><br><span class=\"line\">    query.and(commentModel.article.id.eq(articleId)).and(commentModel.parent.id.isNull());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (List&lt;Comment&gt;)commentRepository.findAll(query);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"更多阅读\"><a href=\"#更多阅读\" class=\"headerlink\" title=\"更多阅读\"></a>更多阅读</h1><ul>\n<li><p>手动组装扁平树结构：<a href=\"https://blog.shancw.net/2021/01/11/util-%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91/\">数组转树</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/4329577/how-does-jpa-orphanremoval-true-differ-from-the-on-delete-cascade-dml-clause\" target=\"_blank\" rel=\"noopener\">stackOverflow: How does JPA orphanRemoval=true differ from the ON DELETE CASCADE DML clause</a></p>\n</li>\n<li><p><a href=\"https://docs.oracle.com/cd/E19798-01/821-1841/giqxy/\" target=\"_blank\" rel=\"noopener\">Oracle: Orphan Removal in Relationships</a></p>\n</li>\n</ul>"},{"title":"【TODO】Spring-boot 项目全局状态返回","toc":true,"date":"2020-04-18T16:00:00.000Z","_content":"\n正常请求使用@ResponseBody(RestController 注解自动设置) 或者 ResponseEntity 详细设置响应头和状态码\n\n错误请求，按照业务模块进行封装，开发经验不足，后面继续更新\n\n<!-- more -->\n\n# 全局状态封装\n\n## 正常返回使用 Spring 提供的 ResponseEntity\n\n常用的几种方式\n\n### 对不同的情况返回不同的 http 状态\n\n```java\n@GetMapping(\"/age\")\nResponseEntity<String> age(\n  @RequestParam(\"yearOfBirth\") int yearOfBirth) {\n\n    if (isInFuture(yearOfBirth)) {\n        return new ResponseEntity<>(\n          \"Year of birth cannot be in the future\",\n          HttpStatus.BAD_REQUEST);\n    }\n\n    return new ResponseEntity<>(\n      \"Your age is \" + calculateAge(yearOfBirth),\n      HttpStatus.OK);\n}\n\n```\n\n### 手动设置 Http Header\n\n```java\nResponseEntity<String> customHeader() {\n  HttpHeaders headers = new HttpHeaders();\n    headers.add(\"Custom-Header\", \"foo\");\n\n    return new ResponseEntity<>(\n      \"Custom header set\", headers, HttpStatus.OK);\n}\n\n```\n\n### ResponseEntity 提供了两个 builder 接口： HeadersBuilder 和它的子接口, BodyBuilder 我们可以通过 ResponseEntity 静态方法进行调用\n\n使用静态方法返回一个 状态码为 200 的响应\n\n```java\n@GetMapping(\"/hello\")\nResponseEntity<String> hello() {\n  return ResponseEntity.ok(\"Hello World\");\n}\n```\n\n除此之外，常用的静态方法（HTTP 状态码封装）如下\n\n```java\nBodyBuilder accepted();\nBodyBuilder badRequest();\nBodyBuilder created(java.net.URI location);\nHeadersBuilder<?> noContent();\nHeadersBuilder<?> notFound();\nBodyBuilder ok();\n```\n\n我们还可以使用`ResponseEntity<T> BodyBuilder.body(T Body)`来 返回 HTTP 响应\n\n```java\n@GetMapping(\"age\")\nResponseEntity<String> age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n  if(isInFuture(yearOfBirth)) {\n    return ResponseEntity.badRequest()\n      .body(\"Year of Birth cannot be in the future\")\n  }\n\n  return ResponseEntity.status(HttpStatus.ok)\n    .body(\"Your age is\"+ calculateAge(yearOfBirth))\n}\n\n```\n\n自定义 Header\n\n```java\n@GetMapping(\"/customerHeader\")\nResponseEntity<String> customerHeader() {\n  return ResponseEntity.ok()\n    .header(\"Custom-Header\", \"foo\")\n    .body(\"Custome Header set\")\n}\n```\n\n### @ResponseBody\n\nResponseBody 将方法的值作为 Http 响应的 Body，并进行返回\n\n### ResponseEntity 和 @ResponseBody 的区别\n\n1. ResponseEntity 的优先级高于@ResponseBody。在不是 ResponseEntity 的情况下才去检查有没有@ResponseBody 注解。如果响应类型是 ResponseEntity 可以不写@ResponseBody 注解，写了也没有关系。\n2. ResponseEntity 是在 org.springframework.http.HttpEntity 的基础上添加了 http status code(http 状态码)，用于 RestTemplate 以及@Controller 的 HandlerMethod。它在 Controoler 中或者用于服务端响应时，作用是和@ResponseStatus 与@ResponseBody 结合起来的功能一样的。用于 RestTemplate 时，它是接收服务端返回的 http status code 和 reason 的。\n\n总结： 简单粗暴的讲 @ResponseBody 可以直接返回 Json 结果， @ResponseEntity 不仅可以返回 json 结果，还可以定义返回的 HttpHeaders 和 HttpStatus\n\n# 错误状态处理\n\n错误处理需要根据业务去封装, 如果一个请求错误，需要后端返回信息给前端，那么就需要封装一个通用的类用来管理相关的业务错误类型，这个只能说遇到了之后再去做\n","source":"_posts/spring-boot-response.md","raw":"---\ntitle: 【TODO】Spring-boot 项目全局状态返回\ncategories: [后端]\ntags: [Spring Boot]\ntoc: true\ndate: 2020/4/19\n---\n\n正常请求使用@ResponseBody(RestController 注解自动设置) 或者 ResponseEntity 详细设置响应头和状态码\n\n错误请求，按照业务模块进行封装，开发经验不足，后面继续更新\n\n<!-- more -->\n\n# 全局状态封装\n\n## 正常返回使用 Spring 提供的 ResponseEntity\n\n常用的几种方式\n\n### 对不同的情况返回不同的 http 状态\n\n```java\n@GetMapping(\"/age\")\nResponseEntity<String> age(\n  @RequestParam(\"yearOfBirth\") int yearOfBirth) {\n\n    if (isInFuture(yearOfBirth)) {\n        return new ResponseEntity<>(\n          \"Year of birth cannot be in the future\",\n          HttpStatus.BAD_REQUEST);\n    }\n\n    return new ResponseEntity<>(\n      \"Your age is \" + calculateAge(yearOfBirth),\n      HttpStatus.OK);\n}\n\n```\n\n### 手动设置 Http Header\n\n```java\nResponseEntity<String> customHeader() {\n  HttpHeaders headers = new HttpHeaders();\n    headers.add(\"Custom-Header\", \"foo\");\n\n    return new ResponseEntity<>(\n      \"Custom header set\", headers, HttpStatus.OK);\n}\n\n```\n\n### ResponseEntity 提供了两个 builder 接口： HeadersBuilder 和它的子接口, BodyBuilder 我们可以通过 ResponseEntity 静态方法进行调用\n\n使用静态方法返回一个 状态码为 200 的响应\n\n```java\n@GetMapping(\"/hello\")\nResponseEntity<String> hello() {\n  return ResponseEntity.ok(\"Hello World\");\n}\n```\n\n除此之外，常用的静态方法（HTTP 状态码封装）如下\n\n```java\nBodyBuilder accepted();\nBodyBuilder badRequest();\nBodyBuilder created(java.net.URI location);\nHeadersBuilder<?> noContent();\nHeadersBuilder<?> notFound();\nBodyBuilder ok();\n```\n\n我们还可以使用`ResponseEntity<T> BodyBuilder.body(T Body)`来 返回 HTTP 响应\n\n```java\n@GetMapping(\"age\")\nResponseEntity<String> age(@RequestParam(\"yearOfBirth\") int yearOfBirth) {\n  if(isInFuture(yearOfBirth)) {\n    return ResponseEntity.badRequest()\n      .body(\"Year of Birth cannot be in the future\")\n  }\n\n  return ResponseEntity.status(HttpStatus.ok)\n    .body(\"Your age is\"+ calculateAge(yearOfBirth))\n}\n\n```\n\n自定义 Header\n\n```java\n@GetMapping(\"/customerHeader\")\nResponseEntity<String> customerHeader() {\n  return ResponseEntity.ok()\n    .header(\"Custom-Header\", \"foo\")\n    .body(\"Custome Header set\")\n}\n```\n\n### @ResponseBody\n\nResponseBody 将方法的值作为 Http 响应的 Body，并进行返回\n\n### ResponseEntity 和 @ResponseBody 的区别\n\n1. ResponseEntity 的优先级高于@ResponseBody。在不是 ResponseEntity 的情况下才去检查有没有@ResponseBody 注解。如果响应类型是 ResponseEntity 可以不写@ResponseBody 注解，写了也没有关系。\n2. ResponseEntity 是在 org.springframework.http.HttpEntity 的基础上添加了 http status code(http 状态码)，用于 RestTemplate 以及@Controller 的 HandlerMethod。它在 Controoler 中或者用于服务端响应时，作用是和@ResponseStatus 与@ResponseBody 结合起来的功能一样的。用于 RestTemplate 时，它是接收服务端返回的 http status code 和 reason 的。\n\n总结： 简单粗暴的讲 @ResponseBody 可以直接返回 Json 结果， @ResponseEntity 不仅可以返回 json 结果，还可以定义返回的 HttpHeaders 和 HttpStatus\n\n# 错误状态处理\n\n错误处理需要根据业务去封装, 如果一个请求错误，需要后端返回信息给前端，那么就需要封装一个通用的类用来管理相关的业务错误类型，这个只能说遇到了之后再去做\n","slug":"spring-boot-response","published":1,"updated":"2021-04-22T08:37:09.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7km005rgosw1gdehnum","content":"<p>正常请求使用@ResponseBody(RestController 注解自动设置) 或者 ResponseEntity 详细设置响应头和状态码</p>\n<p>错误请求，按照业务模块进行封装，开发经验不足，后面继续更新</p>\n<a id=\"more\"></a>\n\n<h1 id=\"全局状态封装\"><a href=\"#全局状态封装\" class=\"headerlink\" title=\"全局状态封装\"></a>全局状态封装</h1><h2 id=\"正常返回使用-Spring-提供的-ResponseEntity\"><a href=\"#正常返回使用-Spring-提供的-ResponseEntity\" class=\"headerlink\" title=\"正常返回使用 Spring 提供的 ResponseEntity\"></a>正常返回使用 Spring 提供的 ResponseEntity</h2><p>常用的几种方式</p>\n<h3 id=\"对不同的情况返回不同的-http-状态\"><a href=\"#对不同的情况返回不同的-http-状态\" class=\"headerlink\" title=\"对不同的情况返回不同的 http 状态\"></a>对不同的情况返回不同的 http 状态</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/age\"</span>)</span><br><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">age</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  @RequestParam(<span class=\"string\">\"yearOfBirth\"</span>)</span> <span class=\"keyword\">int</span> yearOfBirth) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(</span><br><span class=\"line\">          <span class=\"string\">\"Year of birth cannot be in the future\"</span>,</span><br><span class=\"line\">          HttpStatus.BAD_REQUEST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(</span><br><span class=\"line\">      <span class=\"string\">\"Your age is \"</span> + calculateAge(yearOfBirth),</span><br><span class=\"line\">      HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手动设置-Http-Header\"><a href=\"#手动设置-Http-Header\" class=\"headerlink\" title=\"手动设置 Http Header\"></a>手动设置 Http Header</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">customHeader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">    headers.add(<span class=\"string\">\"Custom-Header\"</span>, <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(</span><br><span class=\"line\">      <span class=\"string\">\"Custom header set\"</span>, headers, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ResponseEntity-提供了两个-builder-接口：-HeadersBuilder-和它的子接口-BodyBuilder-我们可以通过-ResponseEntity-静态方法进行调用\"><a href=\"#ResponseEntity-提供了两个-builder-接口：-HeadersBuilder-和它的子接口-BodyBuilder-我们可以通过-ResponseEntity-静态方法进行调用\" class=\"headerlink\" title=\"ResponseEntity 提供了两个 builder 接口： HeadersBuilder 和它的子接口, BodyBuilder 我们可以通过 ResponseEntity 静态方法进行调用\"></a>ResponseEntity 提供了两个 builder 接口： HeadersBuilder 和它的子接口, BodyBuilder 我们可以通过 ResponseEntity 静态方法进行调用</h3><p>使用静态方法返回一个 状态码为 200 的响应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ResponseEntity.ok(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除此之外，常用的静态方法（HTTP 状态码封装）如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BodyBuilder <span class=\"title\">accepted</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">BodyBuilder <span class=\"title\">badRequest</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">BodyBuilder <span class=\"title\">created</span><span class=\"params\">(java.net.URI location)</span></span>;</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; noContent();</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; notFound();</span><br><span class=\"line\"><span class=\"function\">BodyBuilder <span class=\"title\">ok</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们还可以使用<code>ResponseEntity&lt;T&gt; BodyBuilder.body(T Body)</code>来 返回 HTTP 响应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">age</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"yearOfBirth\"</span>)</span> <span class=\"keyword\">int</span> yearOfBirth) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ResponseEntity.badRequest()</span><br><span class=\"line\">      .body(<span class=\"string\">\"Year of Birth cannot be in the future\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ResponseEntity.status(HttpStatus.ok)</span><br><span class=\"line\">    .body(<span class=\"string\">\"Your age is\"</span>+ calculateAge(yearOfBirth))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义 Header</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/customerHeader\"</span>)</span><br><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">customerHeader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ResponseEntity.ok()</span><br><span class=\"line\">    .header(<span class=\"string\">\"Custom-Header\"</span>, <span class=\"string\">\"foo\"</span>)</span><br><span class=\"line\">    .body(<span class=\"string\">\"Custome Header set\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a>@ResponseBody</h3><p>ResponseBody 将方法的值作为 Http 响应的 Body，并进行返回</p>\n<h3 id=\"ResponseEntity-和-ResponseBody-的区别\"><a href=\"#ResponseEntity-和-ResponseBody-的区别\" class=\"headerlink\" title=\"ResponseEntity 和 @ResponseBody 的区别\"></a>ResponseEntity 和 @ResponseBody 的区别</h3><ol>\n<li>ResponseEntity 的优先级高于@ResponseBody。在不是 ResponseEntity 的情况下才去检查有没有@ResponseBody 注解。如果响应类型是 ResponseEntity 可以不写@ResponseBody 注解，写了也没有关系。</li>\n<li>ResponseEntity 是在 org.springframework.http.HttpEntity 的基础上添加了 http status code(http 状态码)，用于 RestTemplate 以及@Controller 的 HandlerMethod。它在 Controoler 中或者用于服务端响应时，作用是和@ResponseStatus 与@ResponseBody 结合起来的功能一样的。用于 RestTemplate 时，它是接收服务端返回的 http status code 和 reason 的。</li>\n</ol>\n<p>总结： 简单粗暴的讲 @ResponseBody 可以直接返回 Json 结果， @ResponseEntity 不仅可以返回 json 结果，还可以定义返回的 HttpHeaders 和 HttpStatus</p>\n<h1 id=\"错误状态处理\"><a href=\"#错误状态处理\" class=\"headerlink\" title=\"错误状态处理\"></a>错误状态处理</h1><p>错误处理需要根据业务去封装, 如果一个请求错误，需要后端返回信息给前端，那么就需要封装一个通用的类用来管理相关的业务错误类型，这个只能说遇到了之后再去做</p>\n","site":{"data":{}},"excerpt":"<p>正常请求使用@ResponseBody(RestController 注解自动设置) 或者 ResponseEntity 详细设置响应头和状态码</p>\n<p>错误请求，按照业务模块进行封装，开发经验不足，后面继续更新</p>","more":"<h1 id=\"全局状态封装\"><a href=\"#全局状态封装\" class=\"headerlink\" title=\"全局状态封装\"></a>全局状态封装</h1><h2 id=\"正常返回使用-Spring-提供的-ResponseEntity\"><a href=\"#正常返回使用-Spring-提供的-ResponseEntity\" class=\"headerlink\" title=\"正常返回使用 Spring 提供的 ResponseEntity\"></a>正常返回使用 Spring 提供的 ResponseEntity</h2><p>常用的几种方式</p>\n<h3 id=\"对不同的情况返回不同的-http-状态\"><a href=\"#对不同的情况返回不同的-http-状态\" class=\"headerlink\" title=\"对不同的情况返回不同的 http 状态\"></a>对不同的情况返回不同的 http 状态</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/age\"</span>)</span><br><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">age</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  @RequestParam(<span class=\"string\">\"yearOfBirth\"</span>)</span> <span class=\"keyword\">int</span> yearOfBirth) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(</span><br><span class=\"line\">          <span class=\"string\">\"Year of birth cannot be in the future\"</span>,</span><br><span class=\"line\">          HttpStatus.BAD_REQUEST);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(</span><br><span class=\"line\">      <span class=\"string\">\"Your age is \"</span> + calculateAge(yearOfBirth),</span><br><span class=\"line\">      HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手动设置-Http-Header\"><a href=\"#手动设置-Http-Header\" class=\"headerlink\" title=\"手动设置 Http Header\"></a>手动设置 Http Header</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">customHeader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  HttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">    headers.add(<span class=\"string\">\"Custom-Header\"</span>, <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(</span><br><span class=\"line\">      <span class=\"string\">\"Custom header set\"</span>, headers, HttpStatus.OK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ResponseEntity-提供了两个-builder-接口：-HeadersBuilder-和它的子接口-BodyBuilder-我们可以通过-ResponseEntity-静态方法进行调用\"><a href=\"#ResponseEntity-提供了两个-builder-接口：-HeadersBuilder-和它的子接口-BodyBuilder-我们可以通过-ResponseEntity-静态方法进行调用\" class=\"headerlink\" title=\"ResponseEntity 提供了两个 builder 接口： HeadersBuilder 和它的子接口, BodyBuilder 我们可以通过 ResponseEntity 静态方法进行调用\"></a>ResponseEntity 提供了两个 builder 接口： HeadersBuilder 和它的子接口, BodyBuilder 我们可以通过 ResponseEntity 静态方法进行调用</h3><p>使用静态方法返回一个 状态码为 200 的响应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ResponseEntity.ok(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除此之外，常用的静态方法（HTTP 状态码封装）如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BodyBuilder <span class=\"title\">accepted</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">BodyBuilder <span class=\"title\">badRequest</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">BodyBuilder <span class=\"title\">created</span><span class=\"params\">(java.net.URI location)</span></span>;</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; noContent();</span><br><span class=\"line\">HeadersBuilder&lt;?&gt; notFound();</span><br><span class=\"line\"><span class=\"function\">BodyBuilder <span class=\"title\">ok</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们还可以使用<code>ResponseEntity&lt;T&gt; BodyBuilder.body(T Body)</code>来 返回 HTTP 响应</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">age</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"yearOfBirth\"</span>)</span> <span class=\"keyword\">int</span> yearOfBirth) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(isInFuture(yearOfBirth)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ResponseEntity.badRequest()</span><br><span class=\"line\">      .body(<span class=\"string\">\"Year of Birth cannot be in the future\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ResponseEntity.status(HttpStatus.ok)</span><br><span class=\"line\">    .body(<span class=\"string\">\"Your age is\"</span>+ calculateAge(yearOfBirth))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义 Header</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/customerHeader\"</span>)</span><br><span class=\"line\"><span class=\"function\">ResponseEntity&lt;String&gt; <span class=\"title\">customerHeader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ResponseEntity.ok()</span><br><span class=\"line\">    .header(<span class=\"string\">\"Custom-Header\"</span>, <span class=\"string\">\"foo\"</span>)</span><br><span class=\"line\">    .body(<span class=\"string\">\"Custome Header set\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ResponseBody\"><a href=\"#ResponseBody\" class=\"headerlink\" title=\"@ResponseBody\"></a>@ResponseBody</h3><p>ResponseBody 将方法的值作为 Http 响应的 Body，并进行返回</p>\n<h3 id=\"ResponseEntity-和-ResponseBody-的区别\"><a href=\"#ResponseEntity-和-ResponseBody-的区别\" class=\"headerlink\" title=\"ResponseEntity 和 @ResponseBody 的区别\"></a>ResponseEntity 和 @ResponseBody 的区别</h3><ol>\n<li>ResponseEntity 的优先级高于@ResponseBody。在不是 ResponseEntity 的情况下才去检查有没有@ResponseBody 注解。如果响应类型是 ResponseEntity 可以不写@ResponseBody 注解，写了也没有关系。</li>\n<li>ResponseEntity 是在 org.springframework.http.HttpEntity 的基础上添加了 http status code(http 状态码)，用于 RestTemplate 以及@Controller 的 HandlerMethod。它在 Controoler 中或者用于服务端响应时，作用是和@ResponseStatus 与@ResponseBody 结合起来的功能一样的。用于 RestTemplate 时，它是接收服务端返回的 http status code 和 reason 的。</li>\n</ol>\n<p>总结： 简单粗暴的讲 @ResponseBody 可以直接返回 Json 结果， @ResponseEntity 不仅可以返回 json 结果，还可以定义返回的 HttpHeaders 和 HttpStatus</p>\n<h1 id=\"错误状态处理\"><a href=\"#错误状态处理\" class=\"headerlink\" title=\"错误状态处理\"></a>错误状态处理</h1><p>错误处理需要根据业务去封装, 如果一个请求错误，需要后端返回信息给前端，那么就需要封装一个通用的类用来管理相关的业务错误类型，这个只能说遇到了之后再去做</p>"},{"title":"JPA：从一个关系中删除child 或者 parent 的注意事项","toc":true,"date":"2021-07-04T16:00:00.000Z","_content":"\nJPA 如果有 cascade 关系存在，需要从维护方进行删除，如果从被维护方直接删除，删除命令会被忽略\n\n<!--  -->\n\n例子：\n\nRelationships :\n\n```js\n\nPanCard-->Employee (Ono To One)\n\nEmployee-->ProjectManger (bi-directional many-to-one association to Employee)\n\nProjects -->ProjectManager(bi-directional many-to-one association to Projects)\n```\n\n员工卡和员工一一对应，员工和经理属于多对一关系（员工维护关系），项目和项目经理属于多对一关系（项目维护关系）\n\n![](/images/hibernate/jpa-example-1.jpeg)\n\n对应实体如下\n\nPanCard\n\n```java\n@OneToOne(cascade=CascadeType.ALL,fetch=FetchType.EAGER)\n@JoinColumn(name=\"EId\")\nprivate Employee employee;\n```\n\nEmployee.java\n\n```java\n@ManyToOne(cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n@JoinColumn(name=\"pmId\")\nprivate ProjectManager projectManager;\n```\n\nProjectManager.java\n\n```java\n@OneToMany(mappedBy=\"projectManager\",cascade = CascadeType.ALL)\nprivate List<Employee> employee;\n\n@OneToMany(mappedBy=\"projectManager\",cascade = CascadeType.ALL)\nprivate List<Projects> projects;\n\n```\n\nProjects.java\n\n```java\n@ManyToOne(cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n@JoinColumn(name=\"pmId\")\nprivate ProjectManager projectManager;\n```\n\n复现问题：\n\n- 如果我想删除 PanCard，那么我首先得删除 ProjectManager，因为 Employee 有外键存在。\n- 如果我想删除 ProjectManager，它应该删除 Employee 和 Projects，但是 Employee 和 PanCard 存在一对一的关系，所以它无法删除。\n\n* 如果我想删除 project，他应该删除 ProjectManager，但是 ProjectManager 和 Employee 是多对一的关系，因此无法删除\n\n**我想要执行删除，要从哪开始删除？**\n\n解决：\n\n在 JPA 中，如果删除操作存在约束冲突，可以进行从维护关系的一方进行删除 （mappedBy xxx）\n\n比如上面的例子：\n\n- PanCard <---> Employee，PanCard 是关系的维护者\n- Employee <----> ProjectManager Employee 是关系的维护者\n\n* Project <----> ProjectManger，Project 是关系的维护者\n\n使用 cascade 的最佳实践：不要在 many 侧使用 cascade，因为这会导致约束冲突。\n\n如果删除 Employee，那么 ProjectManager 会被级联删除。因为一个 manager 可以有多个 employee，那么这么删除会产生外键冲突。因此，需要将 Employee 和 ProjectManager 的 CascadeType.REMOVE 给去掉。\n","source":"_posts/spring-data-jpa-delete-child-parent-from-relationship.md","raw":"---\ntitle: JPA：从一个关系中删除child 或者 parent 的注意事项\ncategories: [后端]\ntags: [JPA]\ntoc: true\ndate: 2021/7/5\n---\n\nJPA 如果有 cascade 关系存在，需要从维护方进行删除，如果从被维护方直接删除，删除命令会被忽略\n\n<!--  -->\n\n例子：\n\nRelationships :\n\n```js\n\nPanCard-->Employee (Ono To One)\n\nEmployee-->ProjectManger (bi-directional many-to-one association to Employee)\n\nProjects -->ProjectManager(bi-directional many-to-one association to Projects)\n```\n\n员工卡和员工一一对应，员工和经理属于多对一关系（员工维护关系），项目和项目经理属于多对一关系（项目维护关系）\n\n![](/images/hibernate/jpa-example-1.jpeg)\n\n对应实体如下\n\nPanCard\n\n```java\n@OneToOne(cascade=CascadeType.ALL,fetch=FetchType.EAGER)\n@JoinColumn(name=\"EId\")\nprivate Employee employee;\n```\n\nEmployee.java\n\n```java\n@ManyToOne(cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n@JoinColumn(name=\"pmId\")\nprivate ProjectManager projectManager;\n```\n\nProjectManager.java\n\n```java\n@OneToMany(mappedBy=\"projectManager\",cascade = CascadeType.ALL)\nprivate List<Employee> employee;\n\n@OneToMany(mappedBy=\"projectManager\",cascade = CascadeType.ALL)\nprivate List<Projects> projects;\n\n```\n\nProjects.java\n\n```java\n@ManyToOne(cascade=CascadeType.ALL, fetch=FetchType.EAGER)\n@JoinColumn(name=\"pmId\")\nprivate ProjectManager projectManager;\n```\n\n复现问题：\n\n- 如果我想删除 PanCard，那么我首先得删除 ProjectManager，因为 Employee 有外键存在。\n- 如果我想删除 ProjectManager，它应该删除 Employee 和 Projects，但是 Employee 和 PanCard 存在一对一的关系，所以它无法删除。\n\n* 如果我想删除 project，他应该删除 ProjectManager，但是 ProjectManager 和 Employee 是多对一的关系，因此无法删除\n\n**我想要执行删除，要从哪开始删除？**\n\n解决：\n\n在 JPA 中，如果删除操作存在约束冲突，可以进行从维护关系的一方进行删除 （mappedBy xxx）\n\n比如上面的例子：\n\n- PanCard <---> Employee，PanCard 是关系的维护者\n- Employee <----> ProjectManager Employee 是关系的维护者\n\n* Project <----> ProjectManger，Project 是关系的维护者\n\n使用 cascade 的最佳实践：不要在 many 侧使用 cascade，因为这会导致约束冲突。\n\n如果删除 Employee，那么 ProjectManager 会被级联删除。因为一个 manager 可以有多个 employee，那么这么删除会产生外键冲突。因此，需要将 Employee 和 ProjectManager 的 CascadeType.REMOVE 给去掉。\n","slug":"spring-data-jpa-delete-child-parent-from-relationship","published":1,"updated":"2021-08-03T01:48:27.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kn005vgosw7sf45hx3","content":"<p>JPA 如果有 cascade 关系存在，需要从维护方进行删除，如果从被维护方直接删除，删除命令会被忽略</p>\n<!--  -->\n\n<p>例子：</p>\n<p>Relationships :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">PanCard--&gt;Employee (Ono To One)</span><br><span class=\"line\"></span><br><span class=\"line\">Employee--&gt;ProjectManger (bi-directional many-to-one association to Employee)</span><br><span class=\"line\"></span><br><span class=\"line\">Projects --&gt;ProjectManager(bi-directional many-to-one association to Projects)</span><br></pre></td></tr></table></figure>\n\n<p>员工卡和员工一一对应，员工和经理属于多对一关系（员工维护关系），项目和项目经理属于多对一关系（项目维护关系）</p>\n<p><img src=\"/images/hibernate/jpa-example-1.jpeg\" alt=\"\"></p>\n<p>对应实体如下</p>\n<p>PanCard</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OneToOne</span>(cascade=CascadeType.ALL,fetch=FetchType.EAGER)</span><br><span class=\"line\"><span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"EId\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> Employee employee;</span><br></pre></td></tr></table></figure>\n\n<p>Employee.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ManyToOne</span>(cascade=CascadeType.ALL, fetch=FetchType.EAGER)</span><br><span class=\"line\"><span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"pmId\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> ProjectManager projectManager;</span><br></pre></td></tr></table></figure>\n\n<p>ProjectManager.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OneToMany</span>(mappedBy=<span class=\"string\">\"projectManager\"</span>,cascade = CascadeType.ALL)</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Employee&gt; employee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@OneToMany</span>(mappedBy=<span class=\"string\">\"projectManager\"</span>,cascade = CascadeType.ALL)</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Projects&gt; projects;</span><br></pre></td></tr></table></figure>\n\n<p>Projects.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ManyToOne</span>(cascade=CascadeType.ALL, fetch=FetchType.EAGER)</span><br><span class=\"line\"><span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"pmId\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> ProjectManager projectManager;</span><br></pre></td></tr></table></figure>\n\n<p>复现问题：</p>\n<ul>\n<li>如果我想删除 PanCard，那么我首先得删除 ProjectManager，因为 Employee 有外键存在。</li>\n<li>如果我想删除 ProjectManager，它应该删除 Employee 和 Projects，但是 Employee 和 PanCard 存在一对一的关系，所以它无法删除。</li>\n</ul>\n<ul>\n<li>如果我想删除 project，他应该删除 ProjectManager，但是 ProjectManager 和 Employee 是多对一的关系，因此无法删除</li>\n</ul>\n<p><strong>我想要执行删除，要从哪开始删除？</strong></p>\n<p>解决：</p>\n<p>在 JPA 中，如果删除操作存在约束冲突，可以进行从维护关系的一方进行删除 （mappedBy xxx）</p>\n<p>比如上面的例子：</p>\n<ul>\n<li>PanCard &lt;—&gt; Employee，PanCard 是关系的维护者</li>\n<li>Employee &lt;—-&gt; ProjectManager Employee 是关系的维护者</li>\n</ul>\n<ul>\n<li>Project &lt;—-&gt; ProjectManger，Project 是关系的维护者</li>\n</ul>\n<p>使用 cascade 的最佳实践：不要在 many 侧使用 cascade，因为这会导致约束冲突。</p>\n<p>如果删除 Employee，那么 ProjectManager 会被级联删除。因为一个 manager 可以有多个 employee，那么这么删除会产生外键冲突。因此，需要将 Employee 和 ProjectManager 的 CascadeType.REMOVE 给去掉。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JPA 如果有 cascade 关系存在，需要从维护方进行删除，如果从被维护方直接删除，删除命令会被忽略</p>\n<!--  -->\n\n<p>例子：</p>\n<p>Relationships :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">PanCard--&gt;Employee (Ono To One)</span><br><span class=\"line\"></span><br><span class=\"line\">Employee--&gt;ProjectManger (bi-directional many-to-one association to Employee)</span><br><span class=\"line\"></span><br><span class=\"line\">Projects --&gt;ProjectManager(bi-directional many-to-one association to Projects)</span><br></pre></td></tr></table></figure>\n\n<p>员工卡和员工一一对应，员工和经理属于多对一关系（员工维护关系），项目和项目经理属于多对一关系（项目维护关系）</p>\n<p><img src=\"/images/hibernate/jpa-example-1.jpeg\" alt=\"\"></p>\n<p>对应实体如下</p>\n<p>PanCard</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OneToOne</span>(cascade=CascadeType.ALL,fetch=FetchType.EAGER)</span><br><span class=\"line\"><span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"EId\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> Employee employee;</span><br></pre></td></tr></table></figure>\n\n<p>Employee.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ManyToOne</span>(cascade=CascadeType.ALL, fetch=FetchType.EAGER)</span><br><span class=\"line\"><span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"pmId\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> ProjectManager projectManager;</span><br></pre></td></tr></table></figure>\n\n<p>ProjectManager.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OneToMany</span>(mappedBy=<span class=\"string\">\"projectManager\"</span>,cascade = CascadeType.ALL)</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Employee&gt; employee;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@OneToMany</span>(mappedBy=<span class=\"string\">\"projectManager\"</span>,cascade = CascadeType.ALL)</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Projects&gt; projects;</span><br></pre></td></tr></table></figure>\n\n<p>Projects.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ManyToOne</span>(cascade=CascadeType.ALL, fetch=FetchType.EAGER)</span><br><span class=\"line\"><span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"pmId\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> ProjectManager projectManager;</span><br></pre></td></tr></table></figure>\n\n<p>复现问题：</p>\n<ul>\n<li>如果我想删除 PanCard，那么我首先得删除 ProjectManager，因为 Employee 有外键存在。</li>\n<li>如果我想删除 ProjectManager，它应该删除 Employee 和 Projects，但是 Employee 和 PanCard 存在一对一的关系，所以它无法删除。</li>\n</ul>\n<ul>\n<li>如果我想删除 project，他应该删除 ProjectManager，但是 ProjectManager 和 Employee 是多对一的关系，因此无法删除</li>\n</ul>\n<p><strong>我想要执行删除，要从哪开始删除？</strong></p>\n<p>解决：</p>\n<p>在 JPA 中，如果删除操作存在约束冲突，可以进行从维护关系的一方进行删除 （mappedBy xxx）</p>\n<p>比如上面的例子：</p>\n<ul>\n<li>PanCard &lt;—&gt; Employee，PanCard 是关系的维护者</li>\n<li>Employee &lt;—-&gt; ProjectManager Employee 是关系的维护者</li>\n</ul>\n<ul>\n<li>Project &lt;—-&gt; ProjectManger，Project 是关系的维护者</li>\n</ul>\n<p>使用 cascade 的最佳实践：不要在 many 侧使用 cascade，因为这会导致约束冲突。</p>\n<p>如果删除 Employee，那么 ProjectManager 会被级联删除。因为一个 manager 可以有多个 employee，那么这么删除会产生外键冲突。因此，需要将 Employee 和 ProjectManager 的 CascadeType.REMOVE 给去掉。</p>\n"},{"title":"type 与 interface","toc":true,"date":"2022-04-05T16:00:00.000Z","_content":"\n官方推荐用 `interface`，其他无法满足需求的情况下用 `type`。\n\n<!-- more -->\n\n## interface: 接口\n\n接口是命名数据结构（例如对象）的另一种方式；与`type` 不同，`interface`仅限于描述对象类型。\n\n### 描述 `Object`和`Function`\n\n```tsx\ninterface Point {\n  x: number;\n  y: number;\n}\n\ninterface SetPoint {\n  (x: number, y: number): void;\n}\n```\n\n## type: 类型别名\n\n类型别名用来给一个类型起个新名字，使用 `type` 创建类型别名，类型别名不仅可以用来表示基本类型，还可以用来表示对象类型、联合类型、元组和交集\n\n### 描述 `Object`和`Function`\n\n```tsx\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype SetPoint = (x: number, y: number) => void;\n```\n\n## 二者区别\n\n### 1. 定义基本类型别名\n\n`type`可以定义**基本类型别名**, 但是`interface`无法定义,如：\n\n```tsx\ntype userName = string\ntype stuNo = number\n...\n```\n\n### 2. 声明联合类型\n\n`type`可以声明**联合类型**, 例如：\n\n```tsx\ntype Student = { stuNo: number } | { classId: number };\n```\n\n### 3. 声明元组\n\n```tsx\ntype Data = [number, string];\n```\n\n### 4. 声明合并\n\n如果你多次声明一个同名的接口，TypeScript 会将它们合并到一个声明中，并将它们视为一个接口。这称为**声明合并**， 例如：\n\n```tsx\ninterface Person {\n  name: string;\n}\ninterface Person {\n  age: number;\n}\n\nlet user: Person = {\n  name: \"Tolu\",\n  age: 0,\n};\n```\n\n这种情况下，如果是`type`的话，重复使用`Person`是会报错的：\n\n```tsx\ntype Person { name: string };\n\n// Error: 标识符“Person”重复。ts(2300)\ntype Person { age: number }\n```\n","source":"_posts/type 与 interface.md","raw":"---\ntitle: type 与 interface\ncategories: [前端]\ntags: [ts]\ntoc: true\ndate: 2022/4/6\n---\n\n官方推荐用 `interface`，其他无法满足需求的情况下用 `type`。\n\n<!-- more -->\n\n## interface: 接口\n\n接口是命名数据结构（例如对象）的另一种方式；与`type` 不同，`interface`仅限于描述对象类型。\n\n### 描述 `Object`和`Function`\n\n```tsx\ninterface Point {\n  x: number;\n  y: number;\n}\n\ninterface SetPoint {\n  (x: number, y: number): void;\n}\n```\n\n## type: 类型别名\n\n类型别名用来给一个类型起个新名字，使用 `type` 创建类型别名，类型别名不仅可以用来表示基本类型，还可以用来表示对象类型、联合类型、元组和交集\n\n### 描述 `Object`和`Function`\n\n```tsx\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype SetPoint = (x: number, y: number) => void;\n```\n\n## 二者区别\n\n### 1. 定义基本类型别名\n\n`type`可以定义**基本类型别名**, 但是`interface`无法定义,如：\n\n```tsx\ntype userName = string\ntype stuNo = number\n...\n```\n\n### 2. 声明联合类型\n\n`type`可以声明**联合类型**, 例如：\n\n```tsx\ntype Student = { stuNo: number } | { classId: number };\n```\n\n### 3. 声明元组\n\n```tsx\ntype Data = [number, string];\n```\n\n### 4. 声明合并\n\n如果你多次声明一个同名的接口，TypeScript 会将它们合并到一个声明中，并将它们视为一个接口。这称为**声明合并**， 例如：\n\n```tsx\ninterface Person {\n  name: string;\n}\ninterface Person {\n  age: number;\n}\n\nlet user: Person = {\n  name: \"Tolu\",\n  age: 0,\n};\n```\n\n这种情况下，如果是`type`的话，重复使用`Person`是会报错的：\n\n```tsx\ntype Person { name: string };\n\n// Error: 标识符“Person”重复。ts(2300)\ntype Person { age: number }\n```\n","slug":"type 与 interface","published":1,"updated":"2022-04-06T15:24:09.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kn005ygosw6d6hf6ym","content":"<p>官方推荐用 <code>interface</code>，其他无法满足需求的情况下用 <code>type</code>。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"interface-接口\"><a href=\"#interface-接口\" class=\"headerlink\" title=\"interface: 接口\"></a>interface: 接口</h2><p>接口是命名数据结构（例如对象）的另一种方式；与<code>type</code> 不同，<code>interface</code>仅限于描述对象类型。</p>\n<h3 id=\"描述-Object和Function\"><a href=\"#描述-Object和Function\" class=\"headerlink\" title=\"描述 Object和Function\"></a>描述 <code>Object</code>和<code>Function</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Point &#123;</span><br><span class=\"line\">  x: number;</span><br><span class=\"line\">  y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface SetPoint &#123;</span><br><span class=\"line\">  (x: number, y: number): void;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"type-类型别名\"><a href=\"#type-类型别名\" class=\"headerlink\" title=\"type: 类型别名\"></a>type: 类型别名</h2><p>类型别名用来给一个类型起个新名字，使用 <code>type</code> 创建类型别名，类型别名不仅可以用来表示基本类型，还可以用来表示对象类型、联合类型、元组和交集</p>\n<h3 id=\"描述-Object和Function-1\"><a href=\"#描述-Object和Function-1\" class=\"headerlink\" title=\"描述 Object和Function\"></a>描述 <code>Object</code>和<code>Function</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Point &#x3D; &#123;</span><br><span class=\"line\">  x: number;</span><br><span class=\"line\">  y: number;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type SetPoint &#x3D; (x: number, y: number) &#x3D;&gt; void;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二者区别\"><a href=\"#二者区别\" class=\"headerlink\" title=\"二者区别\"></a>二者区别</h2><h3 id=\"1-定义基本类型别名\"><a href=\"#1-定义基本类型别名\" class=\"headerlink\" title=\"1. 定义基本类型别名\"></a>1. 定义基本类型别名</h3><p><code>type</code>可以定义<strong>基本类型别名</strong>, 但是<code>interface</code>无法定义,如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type userName &#x3D; string</span><br><span class=\"line\">type stuNo &#x3D; number</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-声明联合类型\"><a href=\"#2-声明联合类型\" class=\"headerlink\" title=\"2. 声明联合类型\"></a>2. 声明联合类型</h3><p><code>type</code>可以声明<strong>联合类型</strong>, 例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Student &#x3D; &#123; stuNo: number &#125; | &#123; classId: number &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-声明元组\"><a href=\"#3-声明元组\" class=\"headerlink\" title=\"3. 声明元组\"></a>3. 声明元组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Data &#x3D; [number, string];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-声明合并\"><a href=\"#4-声明合并\" class=\"headerlink\" title=\"4. 声明合并\"></a>4. 声明合并</h3><p>如果你多次声明一个同名的接口，TypeScript 会将它们合并到一个声明中，并将它们视为一个接口。这称为<strong>声明合并</strong>， 例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let user: Person &#x3D; &#123;</span><br><span class=\"line\">  name: &quot;Tolu&quot;,</span><br><span class=\"line\">  age: 0,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况下，如果是<code>type</code>的话，重复使用<code>Person</code>是会报错的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Person &#123; name: string &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Error: 标识符“Person”重复。ts(2300)</span><br><span class=\"line\">type Person &#123; age: number &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>官方推荐用 <code>interface</code>，其他无法满足需求的情况下用 <code>type</code>。</p>","more":"<h2 id=\"interface-接口\"><a href=\"#interface-接口\" class=\"headerlink\" title=\"interface: 接口\"></a>interface: 接口</h2><p>接口是命名数据结构（例如对象）的另一种方式；与<code>type</code> 不同，<code>interface</code>仅限于描述对象类型。</p>\n<h3 id=\"描述-Object和Function\"><a href=\"#描述-Object和Function\" class=\"headerlink\" title=\"描述 Object和Function\"></a>描述 <code>Object</code>和<code>Function</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Point &#123;</span><br><span class=\"line\">  x: number;</span><br><span class=\"line\">  y: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface SetPoint &#123;</span><br><span class=\"line\">  (x: number, y: number): void;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"type-类型别名\"><a href=\"#type-类型别名\" class=\"headerlink\" title=\"type: 类型别名\"></a>type: 类型别名</h2><p>类型别名用来给一个类型起个新名字，使用 <code>type</code> 创建类型别名，类型别名不仅可以用来表示基本类型，还可以用来表示对象类型、联合类型、元组和交集</p>\n<h3 id=\"描述-Object和Function-1\"><a href=\"#描述-Object和Function-1\" class=\"headerlink\" title=\"描述 Object和Function\"></a>描述 <code>Object</code>和<code>Function</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Point &#x3D; &#123;</span><br><span class=\"line\">  x: number;</span><br><span class=\"line\">  y: number;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type SetPoint &#x3D; (x: number, y: number) &#x3D;&gt; void;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二者区别\"><a href=\"#二者区别\" class=\"headerlink\" title=\"二者区别\"></a>二者区别</h2><h3 id=\"1-定义基本类型别名\"><a href=\"#1-定义基本类型别名\" class=\"headerlink\" title=\"1. 定义基本类型别名\"></a>1. 定义基本类型别名</h3><p><code>type</code>可以定义<strong>基本类型别名</strong>, 但是<code>interface</code>无法定义,如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type userName &#x3D; string</span><br><span class=\"line\">type stuNo &#x3D; number</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-声明联合类型\"><a href=\"#2-声明联合类型\" class=\"headerlink\" title=\"2. 声明联合类型\"></a>2. 声明联合类型</h3><p><code>type</code>可以声明<strong>联合类型</strong>, 例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Student &#x3D; &#123; stuNo: number &#125; | &#123; classId: number &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-声明元组\"><a href=\"#3-声明元组\" class=\"headerlink\" title=\"3. 声明元组\"></a>3. 声明元组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Data &#x3D; [number, string];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-声明合并\"><a href=\"#4-声明合并\" class=\"headerlink\" title=\"4. 声明合并\"></a>4. 声明合并</h3><p>如果你多次声明一个同名的接口，TypeScript 会将它们合并到一个声明中，并将它们视为一个接口。这称为<strong>声明合并</strong>， 例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let user: Person &#x3D; &#123;</span><br><span class=\"line\">  name: &quot;Tolu&quot;,</span><br><span class=\"line\">  age: 0,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况下，如果是<code>type</code>的话，重复使用<code>Person</code>是会报错的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Person &#123; name: string &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Error: 标识符“Person”重复。ts(2300)</span><br><span class=\"line\">type Person &#123; age: number &#125;</span><br></pre></td></tr></table></figure>"},{"title":"【长期更新】spring-data-jpa 使用","toc":true,"date":"2021-03-07T16:00:00.000Z","_content":"\nJPA 允许开发者直接和 java 对象交互，而不是通过 SQL 语句。\n\njava 对象与 数据库表的相互映射 叫做 对象关系映射(ORM - object relational mapping)。JPA 是 ORM 框架的一种规范。通过 JPA，开发者能够从数据库数据映射，存储，更新，恢复数据。\n\nJPA 是一种规范，它有几种实现方式: [Hibernate](https://hibernate.org/)，EclipseLink and Apache OpenJPA\n\n> 译者注: EclipseLink and Apache OpenJPA 现在已经处于淘汰状态\n\n<!-- more -->\n\n## QUICK GUIDE\n\n### Entity 实体\n\n一个应该被数据库保存的类，它必须通过 `javax.persistence.Entity`进行注解，一张表对应一个实体。\n\n所有的实体类必须定义一个主键，并且有一个<u>无参数的构造方法</u>或者不是 final 修饰的类。\n\n> [hibernate 为什么持久化类时必须提供一个不带参数的默认构造函数](https://www.cnblogs.com/langjunnan/p/6035188.html)\n> 因为 hibernate 框架会调用这个默认构造方法来构造实例对象。。\n> 即 Class 类的 newInstance 方法 这个方法就是通过调用默认构造方法来创建实例对象的 ，\n> 另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），\n> 但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里\n\n通过@GeneratedValue 能够在数据库中自动生成主键\n\n默认情况下，类名对应表名，通过`@Table(name=\"NEWTABLENAME\")`能够指定表名\n\n### 字段持久性\n\nEntity 实体的字段将会保存在数据库中，JPA 既可以使用你的实例变量也可以使用对应的 getters，setters 来访问字段。但是不能混合两种方式，如果要使用 setter 和 getter 方法，则 Java 类必须遵循 Java Bean 命名约定。JPA 默认会保留实体的所有字段，**如果想要某一个字段不被保存，那么需要通过`@Transient` 标记**\n\n| annotation      | description                         |\n| --------------- | ----------------------------------- |\n| @Id             | 实体的唯一标识                      |\n| @GeneratedValue | 与实体的 ID 一起使用，表示自动生成. |\n| @Transient      | Field will not be saved in database |\n\n### CrudRepository Interface\n\nCrudRepository 接口为 entity class 提供了最基础的 CRUD 功能。\n\n```java\npublic interface CrudRepository<T, ID> extends Repository<T, ID> {\n    // 保存单个\n    <S extends T> S save(S var1);\n    // 保存多个\n    <S extends T> Iterable<S> saveAll(Iterable<S> var1);\n    // 根据Id 查找\n    Optional<T> findById(ID var1);\n    // 判断是否存在\n    boolean existsById(ID var1);\n    // 获取所有\n    Iterable<T> findAll();\n    // id List 查找\n    Iterable<T> findAllById(Iterable<ID> var1);\n    // 获取保存的数量\n    long count();\n    // 根据ID 删除\n    void deleteById(ID var1);\n    // 根据实体删除\n    void delete(T var1);\n    // 根据实体集合删除\n    void deleteAll(Iterable<? extends T> var1);\n\n    void deleteAll();\n}\n```\n\n### JpaRepository Interface\n\nJpaRepository 和 CrudRepository 的关系:\n\n`JpaRepository extends PagingAndSortingRepository, QueryByExampleExecutor`\n\n`PagingAndSortingRepository extends CrudRepository`\n\nJpaRepository 继承了分页接口，而分页接口继承了 Crud 接口。因此 JpaRepository 功能更加强大, 一般项目首选。\n\n## 关系映射\n\nJPA 可以定义类与类之间的映射，对应的 annotation 如下\n\n- @OneToOne 一对一\n- @OneToMany 一对多\n- @ManyToOne 多对一\n- @ManyToMany 多对多\n\n### oneToMany\n\n学生和笔记本的关系:\n\n1. 一个学生可以有多个笔记本\n2. 一个笔记本只能对应一个学生\n\n```java\n@Entity\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long rollno;\n\n    private String name;\n\n    private int marks;\n\n    @OneToMany\n    private List<Laptop> laptop = new ArrayList<>();\n}\n\n@Entity\npublic class Laptop {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long lid;\n\n    private String lname;\n}\n```\n\n生成的 ER 图如下，此时会产生一个中间表 student_laptop，用于关联。\n![](/images/hibernate/oneToMany.png)\n\n如果不想生成中间表，将 student 的 id 交给 laptop 来维护，则可以使用 mappedBy 或者是 Join Column。\n\n#### mappedBy\n\n使用 mappedBy 将当前的 student 映射到每一台 laptop 上。\n\nmappedBy 用于指定具有双向关系的两个实体中，哪个负责管理双方管理。如下代码，由 laptop 管理 student<->laptop 之间的关系，laptop 表中将会多处 student_id 这个外键指向 Student 表 id\n\n```java\n@Entity\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long rollno;\n\n    private String name;\n\n    private int marks;\n\n    // laptop 这个实体被它的student属性所管理\n    @OneToMany(mappedBy=\"student\")\n    private List<Laptop> laptop = new ArrayList<>();\n}\n@Entity\npublic class Laptop {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long lid;\n\n    private String lname;\n    @ManyToOne\n    private Student student;\n}\n```\n\n![](/images/hibernate/oneToMany-mappedBy.png)\n\n#### JoinColumn\n\n[JoinColumn API Doc](https://docs.oracle.com/javaee/6/api/javax/persistence/JoinColumn.html)\n\n@JoinColumn\n\n> Specifies a column for joining an entity association or element collection\n\n用于定义外键，JoinColumn 可选的配置字段如下\n\n| type             | description                                                                                                   |\n| ---------------- | ------------------------------------------------------------------------------------------------------------- |\n| java.lang.String | _referencedColumnName_ 引用表对应的字段 [详细解释](https://blog.csdn.net/Xu_JL1997/article/details/103018249) |\n| java.lang.String | _name_ (Optional) 外键名称.                                                                                   |\n| java.lang.String | _columnDefinition_ (Optional) SQL 语句，用于定义某一个 Column 的属性                                          |\n| boolean          | _insertable_ (Optional) 是否可插入.                                                                           |\n| boolean          | _nullable_ (Optional) 外键是否可以为空.                                                                       |\n| java.lang.String | _table_ (Optional) 外键所属的表名                                                                             |\n| boolean          | _unique_ (Optional) 是否是唯一值                                                                              |\n| boolean          | _updatable_ (Optional) JPA 更新操作是否包含当前行.                                                            |\n\n使用 JoinColumn 将当前 Laptop 关联到 student\n\n```java\n@Entity\npublic class Laptop {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long lid;\n    private String lname;\n\n    @ManyToOne\n    @JoinColumn(name=\"rollno\")\n    private Student student;\n}\n```\n\n### ManyToMany\n\n多对多必须要借助中间表实现，如果不使用 mappedBy 会生成两个中间表`laptop_student`和 `student_laptop`\n![](/images/hibernate/manyToMany2.png)\n\n使用了 mappedBy 后，则只需要维护一个中间表,代码如下\n\n```java\n@Getter\n@Setter\n@Accessors\n@Entity\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long rollno;\n\n    private String name;\n\n    private int marks;\n\n    @ManyToMany(mappedBy = \"student\")\n    private List<Laptop> laptop = new ArrayList<>();\n}\n\n@Getter\n@Setter\n@Accessors\n@Entity\npublic class Laptop {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long lid;\n\n    private String lname;\n\n    @ManyToMany\n    private List<Student> student = new ArrayList<>();\n}\n\n```\n\n![](/images/hibernate/manyToMany.png)\n\n## fetchType\n\nFetchType.LAZY 和 FetchType.EAGER 有什么区别 ？\n\n有时候，你有两个实体，并且他们之间有关联。比如，你有一个实体 名称叫 大学，还有另外一个实体叫 学生。\n\n他们之间的关系如下：\n\n一个大学可能有很多个学生。但是一个学生只能属于一个大学\n\n![](/images/hibernate/fetchType.png)\n\n```java\npublic class University {\n   private String id;\n   private String name;\n   private String address;\n   private List<Student> students;\n\n   // setters and getters\n}\n```\n\n现在，当你从数据库中加载一个大学，JPA 加载了它的 id, name, address。但是对于 student 字段怎么加载 你有两种选择\n\n1. 和其他字段一起加载 FetchType.EAGER\n2. 按需加载，当调用 university's getStudents() 方法的时候加载 FetchType.Lazy\n\n## 为什么在 spring 项目中 Entity 需要实现 Serializable?\n\n> 参考文章: [Java 对象为啥要实现 Serializable 接口？](https://mp.weixin.qq.com/s/Zpb2OuZxJpWX2mow3qd-xg#cmid=307770)\n\nSerializable 是 java.io 包中定义的、用于实现 Java 类的序列化操作而提供的一个语义级别的接口。\n\n### 有什么用？\n\n实现了 Serializable 接口的类可以被 ObjectOutputStream 转换为字节流，同时也可以通过 ObjectInputStream 再将其解析为对象\n\n### 详细解释\n\n无论什么编程语言，其**底层涉及 IO 操作的部分还是由操作系统其帮其完成的，而底层 IO 操作都是以字节流的方式进行的**，所以写操作都涉及将编程语言数据类型转换为字节流，而读操作则又涉及将字节流转化为编程语言类型的特定数据类型。\n\n而 Java 作为一门面向对象的编程语言，为了完成对象数据的读写操作，通过 Serializable 接口来让 JVM 知道在进行 IO 操作时如何将对象数据转换为字节流，以及如何将字节流数据转换为特定的对。\n\n### 主要使用场景\n\n1. 需要把内存中的对象状态数据保存到一个文件或者数据库，例如 ORM 框架编写 entity 将其保存到数据库。\n2. 网络通信时需要用套接字在网络中传送对象时，JSON\n\n### 序列化与反序列化的唯一标识: serialVersionUID\n\n如果我们在序列化中没有显示地声明 serialVersionUID，则序列化运行时将会根据该类的各个方面计算该类默认的 serialVersionUID 值。但是，Java 官方强烈建议所有要序列化的类都显示地声明 serialVersionUID 字段。\n\n我们在实现 Serializable 接口的时候，要去尽量显示地定义义 serialVersionUID，如：\n\n```java\nprivate static final long serialVersionUID = 1L;\n```\n\n在反序列化的过程中，如果接收方为对象加载了一个类，如果该对象的 serialVersionUID 与对应持久化时的类不同，那么反序列化的过程中将会导致 InvalidClassException 异常。\n\n## [传送门:「spring data jpa」实现 tree 结构](https://blog.shancw.net/2021/05/01/spring-data-jpa-tree-entity/)\n","source":"_posts/spring-data-jpa.md","raw":"---\ntitle: 【长期更新】spring-data-jpa 使用\ncategories: [后端]\ntags: [database, ORM]\ntoc: true\ndate: 2021/3/8\n---\n\nJPA 允许开发者直接和 java 对象交互，而不是通过 SQL 语句。\n\njava 对象与 数据库表的相互映射 叫做 对象关系映射(ORM - object relational mapping)。JPA 是 ORM 框架的一种规范。通过 JPA，开发者能够从数据库数据映射，存储，更新，恢复数据。\n\nJPA 是一种规范，它有几种实现方式: [Hibernate](https://hibernate.org/)，EclipseLink and Apache OpenJPA\n\n> 译者注: EclipseLink and Apache OpenJPA 现在已经处于淘汰状态\n\n<!-- more -->\n\n## QUICK GUIDE\n\n### Entity 实体\n\n一个应该被数据库保存的类，它必须通过 `javax.persistence.Entity`进行注解，一张表对应一个实体。\n\n所有的实体类必须定义一个主键，并且有一个<u>无参数的构造方法</u>或者不是 final 修饰的类。\n\n> [hibernate 为什么持久化类时必须提供一个不带参数的默认构造函数](https://www.cnblogs.com/langjunnan/p/6035188.html)\n> 因为 hibernate 框架会调用这个默认构造方法来构造实例对象。。\n> 即 Class 类的 newInstance 方法 这个方法就是通过调用默认构造方法来创建实例对象的 ，\n> 另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），\n> 但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里\n\n通过@GeneratedValue 能够在数据库中自动生成主键\n\n默认情况下，类名对应表名，通过`@Table(name=\"NEWTABLENAME\")`能够指定表名\n\n### 字段持久性\n\nEntity 实体的字段将会保存在数据库中，JPA 既可以使用你的实例变量也可以使用对应的 getters，setters 来访问字段。但是不能混合两种方式，如果要使用 setter 和 getter 方法，则 Java 类必须遵循 Java Bean 命名约定。JPA 默认会保留实体的所有字段，**如果想要某一个字段不被保存，那么需要通过`@Transient` 标记**\n\n| annotation      | description                         |\n| --------------- | ----------------------------------- |\n| @Id             | 实体的唯一标识                      |\n| @GeneratedValue | 与实体的 ID 一起使用，表示自动生成. |\n| @Transient      | Field will not be saved in database |\n\n### CrudRepository Interface\n\nCrudRepository 接口为 entity class 提供了最基础的 CRUD 功能。\n\n```java\npublic interface CrudRepository<T, ID> extends Repository<T, ID> {\n    // 保存单个\n    <S extends T> S save(S var1);\n    // 保存多个\n    <S extends T> Iterable<S> saveAll(Iterable<S> var1);\n    // 根据Id 查找\n    Optional<T> findById(ID var1);\n    // 判断是否存在\n    boolean existsById(ID var1);\n    // 获取所有\n    Iterable<T> findAll();\n    // id List 查找\n    Iterable<T> findAllById(Iterable<ID> var1);\n    // 获取保存的数量\n    long count();\n    // 根据ID 删除\n    void deleteById(ID var1);\n    // 根据实体删除\n    void delete(T var1);\n    // 根据实体集合删除\n    void deleteAll(Iterable<? extends T> var1);\n\n    void deleteAll();\n}\n```\n\n### JpaRepository Interface\n\nJpaRepository 和 CrudRepository 的关系:\n\n`JpaRepository extends PagingAndSortingRepository, QueryByExampleExecutor`\n\n`PagingAndSortingRepository extends CrudRepository`\n\nJpaRepository 继承了分页接口，而分页接口继承了 Crud 接口。因此 JpaRepository 功能更加强大, 一般项目首选。\n\n## 关系映射\n\nJPA 可以定义类与类之间的映射，对应的 annotation 如下\n\n- @OneToOne 一对一\n- @OneToMany 一对多\n- @ManyToOne 多对一\n- @ManyToMany 多对多\n\n### oneToMany\n\n学生和笔记本的关系:\n\n1. 一个学生可以有多个笔记本\n2. 一个笔记本只能对应一个学生\n\n```java\n@Entity\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long rollno;\n\n    private String name;\n\n    private int marks;\n\n    @OneToMany\n    private List<Laptop> laptop = new ArrayList<>();\n}\n\n@Entity\npublic class Laptop {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long lid;\n\n    private String lname;\n}\n```\n\n生成的 ER 图如下，此时会产生一个中间表 student_laptop，用于关联。\n![](/images/hibernate/oneToMany.png)\n\n如果不想生成中间表，将 student 的 id 交给 laptop 来维护，则可以使用 mappedBy 或者是 Join Column。\n\n#### mappedBy\n\n使用 mappedBy 将当前的 student 映射到每一台 laptop 上。\n\nmappedBy 用于指定具有双向关系的两个实体中，哪个负责管理双方管理。如下代码，由 laptop 管理 student<->laptop 之间的关系，laptop 表中将会多处 student_id 这个外键指向 Student 表 id\n\n```java\n@Entity\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long rollno;\n\n    private String name;\n\n    private int marks;\n\n    // laptop 这个实体被它的student属性所管理\n    @OneToMany(mappedBy=\"student\")\n    private List<Laptop> laptop = new ArrayList<>();\n}\n@Entity\npublic class Laptop {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long lid;\n\n    private String lname;\n    @ManyToOne\n    private Student student;\n}\n```\n\n![](/images/hibernate/oneToMany-mappedBy.png)\n\n#### JoinColumn\n\n[JoinColumn API Doc](https://docs.oracle.com/javaee/6/api/javax/persistence/JoinColumn.html)\n\n@JoinColumn\n\n> Specifies a column for joining an entity association or element collection\n\n用于定义外键，JoinColumn 可选的配置字段如下\n\n| type             | description                                                                                                   |\n| ---------------- | ------------------------------------------------------------------------------------------------------------- |\n| java.lang.String | _referencedColumnName_ 引用表对应的字段 [详细解释](https://blog.csdn.net/Xu_JL1997/article/details/103018249) |\n| java.lang.String | _name_ (Optional) 外键名称.                                                                                   |\n| java.lang.String | _columnDefinition_ (Optional) SQL 语句，用于定义某一个 Column 的属性                                          |\n| boolean          | _insertable_ (Optional) 是否可插入.                                                                           |\n| boolean          | _nullable_ (Optional) 外键是否可以为空.                                                                       |\n| java.lang.String | _table_ (Optional) 外键所属的表名                                                                             |\n| boolean          | _unique_ (Optional) 是否是唯一值                                                                              |\n| boolean          | _updatable_ (Optional) JPA 更新操作是否包含当前行.                                                            |\n\n使用 JoinColumn 将当前 Laptop 关联到 student\n\n```java\n@Entity\npublic class Laptop {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long lid;\n    private String lname;\n\n    @ManyToOne\n    @JoinColumn(name=\"rollno\")\n    private Student student;\n}\n```\n\n### ManyToMany\n\n多对多必须要借助中间表实现，如果不使用 mappedBy 会生成两个中间表`laptop_student`和 `student_laptop`\n![](/images/hibernate/manyToMany2.png)\n\n使用了 mappedBy 后，则只需要维护一个中间表,代码如下\n\n```java\n@Getter\n@Setter\n@Accessors\n@Entity\npublic class Student {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long rollno;\n\n    private String name;\n\n    private int marks;\n\n    @ManyToMany(mappedBy = \"student\")\n    private List<Laptop> laptop = new ArrayList<>();\n}\n\n@Getter\n@Setter\n@Accessors\n@Entity\npublic class Laptop {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long lid;\n\n    private String lname;\n\n    @ManyToMany\n    private List<Student> student = new ArrayList<>();\n}\n\n```\n\n![](/images/hibernate/manyToMany.png)\n\n## fetchType\n\nFetchType.LAZY 和 FetchType.EAGER 有什么区别 ？\n\n有时候，你有两个实体，并且他们之间有关联。比如，你有一个实体 名称叫 大学，还有另外一个实体叫 学生。\n\n他们之间的关系如下：\n\n一个大学可能有很多个学生。但是一个学生只能属于一个大学\n\n![](/images/hibernate/fetchType.png)\n\n```java\npublic class University {\n   private String id;\n   private String name;\n   private String address;\n   private List<Student> students;\n\n   // setters and getters\n}\n```\n\n现在，当你从数据库中加载一个大学，JPA 加载了它的 id, name, address。但是对于 student 字段怎么加载 你有两种选择\n\n1. 和其他字段一起加载 FetchType.EAGER\n2. 按需加载，当调用 university's getStudents() 方法的时候加载 FetchType.Lazy\n\n## 为什么在 spring 项目中 Entity 需要实现 Serializable?\n\n> 参考文章: [Java 对象为啥要实现 Serializable 接口？](https://mp.weixin.qq.com/s/Zpb2OuZxJpWX2mow3qd-xg#cmid=307770)\n\nSerializable 是 java.io 包中定义的、用于实现 Java 类的序列化操作而提供的一个语义级别的接口。\n\n### 有什么用？\n\n实现了 Serializable 接口的类可以被 ObjectOutputStream 转换为字节流，同时也可以通过 ObjectInputStream 再将其解析为对象\n\n### 详细解释\n\n无论什么编程语言，其**底层涉及 IO 操作的部分还是由操作系统其帮其完成的，而底层 IO 操作都是以字节流的方式进行的**，所以写操作都涉及将编程语言数据类型转换为字节流，而读操作则又涉及将字节流转化为编程语言类型的特定数据类型。\n\n而 Java 作为一门面向对象的编程语言，为了完成对象数据的读写操作，通过 Serializable 接口来让 JVM 知道在进行 IO 操作时如何将对象数据转换为字节流，以及如何将字节流数据转换为特定的对。\n\n### 主要使用场景\n\n1. 需要把内存中的对象状态数据保存到一个文件或者数据库，例如 ORM 框架编写 entity 将其保存到数据库。\n2. 网络通信时需要用套接字在网络中传送对象时，JSON\n\n### 序列化与反序列化的唯一标识: serialVersionUID\n\n如果我们在序列化中没有显示地声明 serialVersionUID，则序列化运行时将会根据该类的各个方面计算该类默认的 serialVersionUID 值。但是，Java 官方强烈建议所有要序列化的类都显示地声明 serialVersionUID 字段。\n\n我们在实现 Serializable 接口的时候，要去尽量显示地定义义 serialVersionUID，如：\n\n```java\nprivate static final long serialVersionUID = 1L;\n```\n\n在反序列化的过程中，如果接收方为对象加载了一个类，如果该对象的 serialVersionUID 与对应持久化时的类不同，那么反序列化的过程中将会导致 InvalidClassException 异常。\n\n## [传送门:「spring data jpa」实现 tree 结构](https://blog.shancw.net/2021/05/01/spring-data-jpa-tree-entity/)\n","slug":"spring-data-jpa","published":1,"updated":"2022-02-08T06:26:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ko0061gosw8xa632b6","content":"<p>JPA 允许开发者直接和 java 对象交互，而不是通过 SQL 语句。</p>\n<p>java 对象与 数据库表的相互映射 叫做 对象关系映射(ORM - object relational mapping)。JPA 是 ORM 框架的一种规范。通过 JPA，开发者能够从数据库数据映射，存储，更新，恢复数据。</p>\n<p>JPA 是一种规范，它有几种实现方式: <a href=\"https://hibernate.org/\" target=\"_blank\" rel=\"noopener\">Hibernate</a>，EclipseLink and Apache OpenJPA</p>\n<blockquote>\n<p>译者注: EclipseLink and Apache OpenJPA 现在已经处于淘汰状态</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"QUICK-GUIDE\"><a href=\"#QUICK-GUIDE\" class=\"headerlink\" title=\"QUICK GUIDE\"></a>QUICK GUIDE</h2><h3 id=\"Entity-实体\"><a href=\"#Entity-实体\" class=\"headerlink\" title=\"Entity 实体\"></a>Entity 实体</h3><p>一个应该被数据库保存的类，它必须通过 <code>javax.persistence.Entity</code>进行注解，一张表对应一个实体。</p>\n<p>所有的实体类必须定义一个主键，并且有一个<u>无参数的构造方法</u>或者不是 final 修饰的类。</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/langjunnan/p/6035188.html\" target=\"_blank\" rel=\"noopener\">hibernate 为什么持久化类时必须提供一个不带参数的默认构造函数</a><br>因为 hibernate 框架会调用这个默认构造方法来构造实例对象。。<br>即 Class 类的 newInstance 方法 这个方法就是通过调用默认构造方法来创建实例对象的 ，<br>另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），<br>但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里</p>\n</blockquote>\n<p>通过@GeneratedValue 能够在数据库中自动生成主键</p>\n<p>默认情况下，类名对应表名，通过<code>@Table(name=&quot;NEWTABLENAME&quot;)</code>能够指定表名</p>\n<h3 id=\"字段持久性\"><a href=\"#字段持久性\" class=\"headerlink\" title=\"字段持久性\"></a>字段持久性</h3><p>Entity 实体的字段将会保存在数据库中，JPA 既可以使用你的实例变量也可以使用对应的 getters，setters 来访问字段。但是不能混合两种方式，如果要使用 setter 和 getter 方法，则 Java 类必须遵循 Java Bean 命名约定。JPA 默认会保留实体的所有字段，<strong>如果想要某一个字段不被保存，那么需要通过<code>@Transient</code> 标记</strong></p>\n<table>\n<thead>\n<tr>\n<th>annotation</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Id</td>\n<td>实体的唯一标识</td>\n</tr>\n<tr>\n<td>@GeneratedValue</td>\n<td>与实体的 ID 一起使用，表示自动生成.</td>\n</tr>\n<tr>\n<td>@Transient</td>\n<td>Field will not be saved in database</td>\n</tr>\n</tbody></table>\n<h3 id=\"CrudRepository-Interface\"><a href=\"#CrudRepository-Interface\" class=\"headerlink\" title=\"CrudRepository Interface\"></a>CrudRepository Interface</h3><p>CrudRepository 接口为 entity class 提供了最基础的 CRUD 功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Repository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存单个</span></span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">S <span class=\"title\">save</span><span class=\"params\">(S var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 保存多个</span></span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">Iterable&lt;S&gt; <span class=\"title\">saveAll</span><span class=\"params\">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据Id 查找</span></span><br><span class=\"line\">    <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">findById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否存在</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">existsById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取所有</span></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// id List 查找</span></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAllById</span><span class=\"params\">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取保存的数量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据ID 删除</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据实体删除</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(T var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据实体集合删除</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">(Iterable&lt;? extends T&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JpaRepository-Interface\"><a href=\"#JpaRepository-Interface\" class=\"headerlink\" title=\"JpaRepository Interface\"></a>JpaRepository Interface</h3><p>JpaRepository 和 CrudRepository 的关系:</p>\n<p><code>JpaRepository extends PagingAndSortingRepository, QueryByExampleExecutor</code></p>\n<p><code>PagingAndSortingRepository extends CrudRepository</code></p>\n<p>JpaRepository 继承了分页接口，而分页接口继承了 Crud 接口。因此 JpaRepository 功能更加强大, 一般项目首选。</p>\n<h2 id=\"关系映射\"><a href=\"#关系映射\" class=\"headerlink\" title=\"关系映射\"></a>关系映射</h2><p>JPA 可以定义类与类之间的映射，对应的 annotation 如下</p>\n<ul>\n<li>@OneToOne 一对一</li>\n<li>@OneToMany 一对多</li>\n<li>@ManyToOne 多对一</li>\n<li>@ManyToMany 多对多</li>\n</ul>\n<h3 id=\"oneToMany\"><a href=\"#oneToMany\" class=\"headerlink\" title=\"oneToMany\"></a>oneToMany</h3><p>学生和笔记本的关系:</p>\n<ol>\n<li>一个学生可以有多个笔记本</li>\n<li>一个笔记本只能对应一个学生</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long rollno;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> marks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Laptop&gt; laptop = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Laptop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long lid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lname;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的 ER 图如下，此时会产生一个中间表 student_laptop，用于关联。<br><img src=\"/images/hibernate/oneToMany.png\" alt=\"\"></p>\n<p>如果不想生成中间表，将 student 的 id 交给 laptop 来维护，则可以使用 mappedBy 或者是 Join Column。</p>\n<h4 id=\"mappedBy\"><a href=\"#mappedBy\" class=\"headerlink\" title=\"mappedBy\"></a>mappedBy</h4><p>使用 mappedBy 将当前的 student 映射到每一台 laptop 上。</p>\n<p>mappedBy 用于指定具有双向关系的两个实体中，哪个负责管理双方管理。如下代码，由 laptop 管理 student&lt;-&gt;laptop 之间的关系，laptop 表中将会多处 student_id 这个外键指向 Student 表 id</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long rollno;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> marks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// laptop 这个实体被它的student属性所管理</span></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span>(mappedBy=<span class=\"string\">\"student\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Laptop&gt; laptop = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Laptop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long lid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lname;</span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Student student;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/hibernate/oneToMany-mappedBy.png\" alt=\"\"></p>\n<h4 id=\"JoinColumn\"><a href=\"#JoinColumn\" class=\"headerlink\" title=\"JoinColumn\"></a>JoinColumn</h4><p><a href=\"https://docs.oracle.com/javaee/6/api/javax/persistence/JoinColumn.html\" target=\"_blank\" rel=\"noopener\">JoinColumn API Doc</a></p>\n<p>@JoinColumn</p>\n<blockquote>\n<p>Specifies a column for joining an entity association or element collection</p>\n</blockquote>\n<p>用于定义外键，JoinColumn 可选的配置字段如下</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java.lang.String</td>\n<td><em>referencedColumnName</em> 引用表对应的字段 <a href=\"https://blog.csdn.net/Xu_JL1997/article/details/103018249\" target=\"_blank\" rel=\"noopener\">详细解释</a></td>\n</tr>\n<tr>\n<td>java.lang.String</td>\n<td><em>name</em> (Optional) 外键名称.</td>\n</tr>\n<tr>\n<td>java.lang.String</td>\n<td><em>columnDefinition</em> (Optional) SQL 语句，用于定义某一个 Column 的属性</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><em>insertable</em> (Optional) 是否可插入.</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><em>nullable</em> (Optional) 外键是否可以为空.</td>\n</tr>\n<tr>\n<td>java.lang.String</td>\n<td><em>table</em> (Optional) 外键所属的表名</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><em>unique</em> (Optional) 是否是唯一值</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><em>updatable</em> (Optional) JPA 更新操作是否包含当前行.</td>\n</tr>\n</tbody></table>\n<p>使用 JoinColumn 将当前 Laptop 关联到 student</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Laptop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long lid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"rollno\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Student student;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ManyToMany\"><a href=\"#ManyToMany\" class=\"headerlink\" title=\"ManyToMany\"></a>ManyToMany</h3><p>多对多必须要借助中间表实现，如果不使用 mappedBy 会生成两个中间表<code>laptop_student</code>和 <code>student_laptop</code><br><img src=\"/images/hibernate/manyToMany2.png\" alt=\"\"></p>\n<p>使用了 mappedBy 后，则只需要维护一个中间表,代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long rollno;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> marks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span>(mappedBy = <span class=\"string\">\"student\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Laptop&gt; laptop = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Laptop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long lid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Student&gt; student = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/hibernate/manyToMany.png\" alt=\"\"></p>\n<h2 id=\"fetchType\"><a href=\"#fetchType\" class=\"headerlink\" title=\"fetchType\"></a>fetchType</h2><p>FetchType.LAZY 和 FetchType.EAGER 有什么区别 ？</p>\n<p>有时候，你有两个实体，并且他们之间有关联。比如，你有一个实体 名称叫 大学，还有另外一个实体叫 学生。</p>\n<p>他们之间的关系如下：</p>\n<p>一个大学可能有很多个学生。但是一个学生只能属于一个大学</p>\n<p><img src=\"/images/hibernate/fetchType.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">University</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> List&lt;Student&gt; students;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// setters and getters</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，当你从数据库中加载一个大学，JPA 加载了它的 id, name, address。但是对于 student 字段怎么加载 你有两种选择</p>\n<ol>\n<li>和其他字段一起加载 FetchType.EAGER</li>\n<li>按需加载，当调用 university’s getStudents() 方法的时候加载 FetchType.Lazy</li>\n</ol>\n<h2 id=\"为什么在-spring-项目中-Entity-需要实现-Serializable\"><a href=\"#为什么在-spring-项目中-Entity-需要实现-Serializable\" class=\"headerlink\" title=\"为什么在 spring 项目中 Entity 需要实现 Serializable?\"></a>为什么在 spring 项目中 Entity 需要实现 Serializable?</h2><blockquote>\n<p>参考文章: <a href=\"https://mp.weixin.qq.com/s/Zpb2OuZxJpWX2mow3qd-xg#cmid=307770\" target=\"_blank\" rel=\"noopener\">Java 对象为啥要实现 Serializable 接口？</a></p>\n</blockquote>\n<p>Serializable 是 java.io 包中定义的、用于实现 Java 类的序列化操作而提供的一个语义级别的接口。</p>\n<h3 id=\"有什么用？\"><a href=\"#有什么用？\" class=\"headerlink\" title=\"有什么用？\"></a>有什么用？</h3><p>实现了 Serializable 接口的类可以被 ObjectOutputStream 转换为字节流，同时也可以通过 ObjectInputStream 再将其解析为对象</p>\n<h3 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h3><p>无论什么编程语言，其<strong>底层涉及 IO 操作的部分还是由操作系统其帮其完成的，而底层 IO 操作都是以字节流的方式进行的</strong>，所以写操作都涉及将编程语言数据类型转换为字节流，而读操作则又涉及将字节流转化为编程语言类型的特定数据类型。</p>\n<p>而 Java 作为一门面向对象的编程语言，为了完成对象数据的读写操作，通过 Serializable 接口来让 JVM 知道在进行 IO 操作时如何将对象数据转换为字节流，以及如何将字节流数据转换为特定的对。</p>\n<h3 id=\"主要使用场景\"><a href=\"#主要使用场景\" class=\"headerlink\" title=\"主要使用场景\"></a>主要使用场景</h3><ol>\n<li>需要把内存中的对象状态数据保存到一个文件或者数据库，例如 ORM 框架编写 entity 将其保存到数据库。</li>\n<li>网络通信时需要用套接字在网络中传送对象时，JSON</li>\n</ol>\n<h3 id=\"序列化与反序列化的唯一标识-serialVersionUID\"><a href=\"#序列化与反序列化的唯一标识-serialVersionUID\" class=\"headerlink\" title=\"序列化与反序列化的唯一标识: serialVersionUID\"></a>序列化与反序列化的唯一标识: serialVersionUID</h3><p>如果我们在序列化中没有显示地声明 serialVersionUID，则序列化运行时将会根据该类的各个方面计算该类默认的 serialVersionUID 值。但是，Java 官方强烈建议所有要序列化的类都显示地声明 serialVersionUID 字段。</p>\n<p>我们在实现 Serializable 接口的时候，要去尽量显示地定义义 serialVersionUID，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在反序列化的过程中，如果接收方为对象加载了一个类，如果该对象的 serialVersionUID 与对应持久化时的类不同，那么反序列化的过程中将会导致 InvalidClassException 异常。</p>\n<h2 id=\"传送门-「spring-data-jpa」实现-tree-结构\"><a href=\"#传送门-「spring-data-jpa」实现-tree-结构\" class=\"headerlink\" title=\"传送门:「spring data jpa」实现 tree 结构\"></a><a href=\"https://blog.shancw.net/2021/05/01/spring-data-jpa-tree-entity/\">传送门:「spring data jpa」实现 tree 结构</a></h2>","site":{"data":{}},"excerpt":"<p>JPA 允许开发者直接和 java 对象交互，而不是通过 SQL 语句。</p>\n<p>java 对象与 数据库表的相互映射 叫做 对象关系映射(ORM - object relational mapping)。JPA 是 ORM 框架的一种规范。通过 JPA，开发者能够从数据库数据映射，存储，更新，恢复数据。</p>\n<p>JPA 是一种规范，它有几种实现方式: <a href=\"https://hibernate.org/\" target=\"_blank\" rel=\"noopener\">Hibernate</a>，EclipseLink and Apache OpenJPA</p>\n<blockquote>\n<p>译者注: EclipseLink and Apache OpenJPA 现在已经处于淘汰状态</p>\n</blockquote>","more":"<h2 id=\"QUICK-GUIDE\"><a href=\"#QUICK-GUIDE\" class=\"headerlink\" title=\"QUICK GUIDE\"></a>QUICK GUIDE</h2><h3 id=\"Entity-实体\"><a href=\"#Entity-实体\" class=\"headerlink\" title=\"Entity 实体\"></a>Entity 实体</h3><p>一个应该被数据库保存的类，它必须通过 <code>javax.persistence.Entity</code>进行注解，一张表对应一个实体。</p>\n<p>所有的实体类必须定义一个主键，并且有一个<u>无参数的构造方法</u>或者不是 final 修饰的类。</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/langjunnan/p/6035188.html\" target=\"_blank\" rel=\"noopener\">hibernate 为什么持久化类时必须提供一个不带参数的默认构造函数</a><br>因为 hibernate 框架会调用这个默认构造方法来构造实例对象。。<br>即 Class 类的 newInstance 方法 这个方法就是通过调用默认构造方法来创建实例对象的 ，<br>另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），<br>但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里</p>\n</blockquote>\n<p>通过@GeneratedValue 能够在数据库中自动生成主键</p>\n<p>默认情况下，类名对应表名，通过<code>@Table(name=&quot;NEWTABLENAME&quot;)</code>能够指定表名</p>\n<h3 id=\"字段持久性\"><a href=\"#字段持久性\" class=\"headerlink\" title=\"字段持久性\"></a>字段持久性</h3><p>Entity 实体的字段将会保存在数据库中，JPA 既可以使用你的实例变量也可以使用对应的 getters，setters 来访问字段。但是不能混合两种方式，如果要使用 setter 和 getter 方法，则 Java 类必须遵循 Java Bean 命名约定。JPA 默认会保留实体的所有字段，<strong>如果想要某一个字段不被保存，那么需要通过<code>@Transient</code> 标记</strong></p>\n<table>\n<thead>\n<tr>\n<th>annotation</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Id</td>\n<td>实体的唯一标识</td>\n</tr>\n<tr>\n<td>@GeneratedValue</td>\n<td>与实体的 ID 一起使用，表示自动生成.</td>\n</tr>\n<tr>\n<td>@Transient</td>\n<td>Field will not be saved in database</td>\n</tr>\n</tbody></table>\n<h3 id=\"CrudRepository-Interface\"><a href=\"#CrudRepository-Interface\" class=\"headerlink\" title=\"CrudRepository Interface\"></a>CrudRepository Interface</h3><p>CrudRepository 接口为 entity class 提供了最基础的 CRUD 功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Repository</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">ID</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存单个</span></span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">S <span class=\"title\">save</span><span class=\"params\">(S var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 保存多个</span></span><br><span class=\"line\">    &lt;S extends T&gt; <span class=\"function\">Iterable&lt;S&gt; <span class=\"title\">saveAll</span><span class=\"params\">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据Id 查找</span></span><br><span class=\"line\">    <span class=\"function\">Optional&lt;T&gt; <span class=\"title\">findById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否存在</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">existsById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取所有</span></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// id List 查找</span></span><br><span class=\"line\">    <span class=\"function\">Iterable&lt;T&gt; <span class=\"title\">findAllById</span><span class=\"params\">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取保存的数量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据ID 删除</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(ID var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据实体删除</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(T var1)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据实体集合删除</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">(Iterable&lt;? extends T&gt; var1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JpaRepository-Interface\"><a href=\"#JpaRepository-Interface\" class=\"headerlink\" title=\"JpaRepository Interface\"></a>JpaRepository Interface</h3><p>JpaRepository 和 CrudRepository 的关系:</p>\n<p><code>JpaRepository extends PagingAndSortingRepository, QueryByExampleExecutor</code></p>\n<p><code>PagingAndSortingRepository extends CrudRepository</code></p>\n<p>JpaRepository 继承了分页接口，而分页接口继承了 Crud 接口。因此 JpaRepository 功能更加强大, 一般项目首选。</p>\n<h2 id=\"关系映射\"><a href=\"#关系映射\" class=\"headerlink\" title=\"关系映射\"></a>关系映射</h2><p>JPA 可以定义类与类之间的映射，对应的 annotation 如下</p>\n<ul>\n<li>@OneToOne 一对一</li>\n<li>@OneToMany 一对多</li>\n<li>@ManyToOne 多对一</li>\n<li>@ManyToMany 多对多</li>\n</ul>\n<h3 id=\"oneToMany\"><a href=\"#oneToMany\" class=\"headerlink\" title=\"oneToMany\"></a>oneToMany</h3><p>学生和笔记本的关系:</p>\n<ol>\n<li>一个学生可以有多个笔记本</li>\n<li>一个笔记本只能对应一个学生</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long rollno;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> marks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Laptop&gt; laptop = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Laptop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long lid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lname;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的 ER 图如下，此时会产生一个中间表 student_laptop，用于关联。<br><img src=\"/images/hibernate/oneToMany.png\" alt=\"\"></p>\n<p>如果不想生成中间表，将 student 的 id 交给 laptop 来维护，则可以使用 mappedBy 或者是 Join Column。</p>\n<h4 id=\"mappedBy\"><a href=\"#mappedBy\" class=\"headerlink\" title=\"mappedBy\"></a>mappedBy</h4><p>使用 mappedBy 将当前的 student 映射到每一台 laptop 上。</p>\n<p>mappedBy 用于指定具有双向关系的两个实体中，哪个负责管理双方管理。如下代码，由 laptop 管理 student&lt;-&gt;laptop 之间的关系，laptop 表中将会多处 student_id 这个外键指向 Student 表 id</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long rollno;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> marks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// laptop 这个实体被它的student属性所管理</span></span><br><span class=\"line\">    <span class=\"meta\">@OneToMany</span>(mappedBy=<span class=\"string\">\"student\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Laptop&gt; laptop = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Laptop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long lid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lname;</span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Student student;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/hibernate/oneToMany-mappedBy.png\" alt=\"\"></p>\n<h4 id=\"JoinColumn\"><a href=\"#JoinColumn\" class=\"headerlink\" title=\"JoinColumn\"></a>JoinColumn</h4><p><a href=\"https://docs.oracle.com/javaee/6/api/javax/persistence/JoinColumn.html\" target=\"_blank\" rel=\"noopener\">JoinColumn API Doc</a></p>\n<p>@JoinColumn</p>\n<blockquote>\n<p>Specifies a column for joining an entity association or element collection</p>\n</blockquote>\n<p>用于定义外键，JoinColumn 可选的配置字段如下</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java.lang.String</td>\n<td><em>referencedColumnName</em> 引用表对应的字段 <a href=\"https://blog.csdn.net/Xu_JL1997/article/details/103018249\" target=\"_blank\" rel=\"noopener\">详细解释</a></td>\n</tr>\n<tr>\n<td>java.lang.String</td>\n<td><em>name</em> (Optional) 外键名称.</td>\n</tr>\n<tr>\n<td>java.lang.String</td>\n<td><em>columnDefinition</em> (Optional) SQL 语句，用于定义某一个 Column 的属性</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><em>insertable</em> (Optional) 是否可插入.</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><em>nullable</em> (Optional) 外键是否可以为空.</td>\n</tr>\n<tr>\n<td>java.lang.String</td>\n<td><em>table</em> (Optional) 外键所属的表名</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><em>unique</em> (Optional) 是否是唯一值</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><em>updatable</em> (Optional) JPA 更新操作是否包含当前行.</td>\n</tr>\n</tbody></table>\n<p>使用 JoinColumn 将当前 Laptop 关联到 student</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Laptop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long lid;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToOne</span></span><br><span class=\"line\">    <span class=\"meta\">@JoinColumn</span>(name=<span class=\"string\">\"rollno\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Student student;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ManyToMany\"><a href=\"#ManyToMany\" class=\"headerlink\" title=\"ManyToMany\"></a>ManyToMany</h3><p>多对多必须要借助中间表实现，如果不使用 mappedBy 会生成两个中间表<code>laptop_student</code>和 <code>student_laptop</code><br><img src=\"/images/hibernate/manyToMany2.png\" alt=\"\"></p>\n<p>使用了 mappedBy 后，则只需要维护一个中间表,代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long rollno;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> marks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span>(mappedBy = <span class=\"string\">\"student\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Laptop&gt; laptop = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Laptop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long lid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lname;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ManyToMany</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Student&gt; student = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/hibernate/manyToMany.png\" alt=\"\"></p>\n<h2 id=\"fetchType\"><a href=\"#fetchType\" class=\"headerlink\" title=\"fetchType\"></a>fetchType</h2><p>FetchType.LAZY 和 FetchType.EAGER 有什么区别 ？</p>\n<p>有时候，你有两个实体，并且他们之间有关联。比如，你有一个实体 名称叫 大学，还有另外一个实体叫 学生。</p>\n<p>他们之间的关系如下：</p>\n<p>一个大学可能有很多个学生。但是一个学生只能属于一个大学</p>\n<p><img src=\"/images/hibernate/fetchType.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">University</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> List&lt;Student&gt; students;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// setters and getters</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，当你从数据库中加载一个大学，JPA 加载了它的 id, name, address。但是对于 student 字段怎么加载 你有两种选择</p>\n<ol>\n<li>和其他字段一起加载 FetchType.EAGER</li>\n<li>按需加载，当调用 university’s getStudents() 方法的时候加载 FetchType.Lazy</li>\n</ol>\n<h2 id=\"为什么在-spring-项目中-Entity-需要实现-Serializable\"><a href=\"#为什么在-spring-项目中-Entity-需要实现-Serializable\" class=\"headerlink\" title=\"为什么在 spring 项目中 Entity 需要实现 Serializable?\"></a>为什么在 spring 项目中 Entity 需要实现 Serializable?</h2><blockquote>\n<p>参考文章: <a href=\"https://mp.weixin.qq.com/s/Zpb2OuZxJpWX2mow3qd-xg#cmid=307770\" target=\"_blank\" rel=\"noopener\">Java 对象为啥要实现 Serializable 接口？</a></p>\n</blockquote>\n<p>Serializable 是 java.io 包中定义的、用于实现 Java 类的序列化操作而提供的一个语义级别的接口。</p>\n<h3 id=\"有什么用？\"><a href=\"#有什么用？\" class=\"headerlink\" title=\"有什么用？\"></a>有什么用？</h3><p>实现了 Serializable 接口的类可以被 ObjectOutputStream 转换为字节流，同时也可以通过 ObjectInputStream 再将其解析为对象</p>\n<h3 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h3><p>无论什么编程语言，其<strong>底层涉及 IO 操作的部分还是由操作系统其帮其完成的，而底层 IO 操作都是以字节流的方式进行的</strong>，所以写操作都涉及将编程语言数据类型转换为字节流，而读操作则又涉及将字节流转化为编程语言类型的特定数据类型。</p>\n<p>而 Java 作为一门面向对象的编程语言，为了完成对象数据的读写操作，通过 Serializable 接口来让 JVM 知道在进行 IO 操作时如何将对象数据转换为字节流，以及如何将字节流数据转换为特定的对。</p>\n<h3 id=\"主要使用场景\"><a href=\"#主要使用场景\" class=\"headerlink\" title=\"主要使用场景\"></a>主要使用场景</h3><ol>\n<li>需要把内存中的对象状态数据保存到一个文件或者数据库，例如 ORM 框架编写 entity 将其保存到数据库。</li>\n<li>网络通信时需要用套接字在网络中传送对象时，JSON</li>\n</ol>\n<h3 id=\"序列化与反序列化的唯一标识-serialVersionUID\"><a href=\"#序列化与反序列化的唯一标识-serialVersionUID\" class=\"headerlink\" title=\"序列化与反序列化的唯一标识: serialVersionUID\"></a>序列化与反序列化的唯一标识: serialVersionUID</h3><p>如果我们在序列化中没有显示地声明 serialVersionUID，则序列化运行时将会根据该类的各个方面计算该类默认的 serialVersionUID 值。但是，Java 官方强烈建议所有要序列化的类都显示地声明 serialVersionUID 字段。</p>\n<p>我们在实现 Serializable 接口的时候，要去尽量显示地定义义 serialVersionUID，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在反序列化的过程中，如果接收方为对象加载了一个类，如果该对象的 serialVersionUID 与对应持久化时的类不同，那么反序列化的过程中将会导致 InvalidClassException 异常。</p>\n<h2 id=\"传送门-「spring-data-jpa」实现-tree-结构\"><a href=\"#传送门-「spring-data-jpa」实现-tree-结构\" class=\"headerlink\" title=\"传送门:「spring data jpa」实现 tree 结构\"></a><a href=\"https://blog.shancw.net/2021/05/01/spring-data-jpa-tree-entity/\">传送门:「spring data jpa」实现 tree 结构</a></h2>"},{"title":"JPA with QueryDsl","toc":true,"date":"2021-04-24T16:00:00.000Z","_content":"\n这篇文章包括了 queryDsl - JPA 的常用功能。\n\n<!-- more -->\n\n使用 queryDsl 在 JPA 中查询的通用模版\n\n```java\nQCustomer customer = =QCustomer.customer;\nqueryFactory.selectFrom(customer)\n  .where(...)\n  .fetch();\n```\n\n- QCustomer: 配置 querydsl 后，自动生成的查询实体\n- queryFactory: JPAQueryFactory 实例。一般通过@Bean 全局配置\n  ```java\n    @Configuration\n    public class JpaQueryConfig {\n        @Bean\n        public JPAQueryFactory jpaQuery(EntityManager entityManager) {\n            return new JPAQueryFactory(entityManager);\n        }\n    }\n  ```\n\n# 使用\n\n## 基础使用例子\n\n- 查询 firstName 是 Bob 的顾客\n  ```java\n    QCustomer customer = QCustomer.customer;\n    Customer bob = queryFactory.selectFrom(customer)\n      .where(customer.name.eq(\"Bob\"))\n      .fetchOne();\n  ```\n- 多表查询\n  ```java\n    QCustomer customer = QCustomer.customer;\n    QCompany company = QCompany.company;\n    query.from(customer, company);\n  ```\n- 多条件过滤\n  ```java\n    // ***************and***************\n    // version1\n    queryFactory.selectFrom(customer)\n      .where(customer.firstName.eq(\"Bob\"), customer.lastName.eq(\"Wilson\"));\n    // version2 use and\n    queryFactory.selectFrom(customer)\n      .where(customer.firstName.eq(\"Bob\").and(customer.lastName.eq(\"Wilson\")))\n    // **************or ****************\n    queryFactory.selectFrom(customer)\n      .where(customer.firstName.eq(\"Bob\").or(customer.lastName.eq(\"Wilson\")))\n  ```\n- Join: 不是太理解\n  http://www.querydsl.com/static/querydsl/4.4.0/reference/html_single/#d0e307\n\n  ```java\n  QCat cat = QCat.cat;\n  QCat mate = new QCat(\"mate\");\n  QCate kitten = new QCat(\"kitten\");\n  query.from(cat)\n      .innerJoin(cat.mate, mate)\n      .leftJoin(cat.kitten, kitten)\n      .list(cat);\n  // ... jpql\n  from Cat as cat\n  inner join cat.mate as mate\n  left outer join cat.kitten as kitten\n\n  query.from(cat)\n    .leftJoin(cat.kittens, kitten)\n    .on(kitten.bodyWeight.gt(10.0))\n    .list(cat);\n  from Cat as cat\n    left join cat.kittens as kitten\n    on kitten.bodyWeight > 10.0\n  ```\n\n* Ordering 排序\n  ```java\n    QCustomer customer = QCustomer.customer;\n    queryFactory.selectFrom(customer)\n      .orderBy(customer.lastName.asc(), customer.firstName.desc)\n      .fetch()\n  ```\n* grouping 分组\n  ```java\n    queryFactory.select(customer.lastName).from(customer)\n      .groupBy(customer.lastName)\n      .fetch();\n  ```\n\n- 删除 delete-where-execute\n  ```java\n    queryFactory\n      .delete(customer)\n      .where(customer.name.eq(\"Bob\"))\n      .execute();\n  ```\n- 更新 update-set/where-execute\n  ```java\n    queryFactory.update(customer)\n      .where(customer.name.eq(\"Bob\"))\n      .set(customer.name, \"Bobby\")\n      .execute();\n  ```\n- subQuery 嵌套查询: JPAExpression\n\n  ```java\n    QDepartment department = QDepartment.department\n    QDepartment d = new QDepartment(\"d\")\n      .where(department.size.eq(\n        JPAExpression.select(d.size.max().find(d))\n      ))\n      .fetch();\n  ```\n\n- 自定义组合查询 (tune)\n  ```java\n    Query jpaQuery = queryFactory.selectFrom(employee).createQuery();\n    // ... custom query\n    List results = jpaQuery.getResultList();\n  ```\n\n* 复杂断言操作\n\n  为了实现复杂的条件判断，可以使用 BooleanBuilder 类，它拓展自 Predicate 接口\n\n  ```java\n    public List<Customer> getCustomer(String... names) {\n      QCustomer customer = QCustomer.customer;\n      JAPQuery<Customer> query = queryFactory.selectFrom(Customer);\n      BooleanBuilder builder = new BooleanBuilder();\n      for(String name: names) {\n        builder.or(customer.name.eq(name));\n      }\n      query.where(builder);// customer.name eq name1 Or customer.name eq name2 Or ...\n      return query.fetch();\n    }\n  ```\n\n## queryDsl 实现分页\n\n### 为 repository 增加 QuerydslPredicateExecutor 实现\n\n```java\npublic interface ArticleRepository extends\n  CrudRepository<Comment, Long>,\n  QuerydslPredicateExecutor<Article>,\n  {}\n```\n\n### controller\n\n```java\n @GetMapping(\"/query\")\n  public Page<Article> queryAllArtilce(Pageable page, @RequestParam(required = false) String query) {\n    return articleService.findAll(page, query);\n  }\n```\n\n### service\n\n```java\n// 文章列表模糊查询 + 分页\npublic Page<Article> findAll(Pageable pageable, String query) {\n    QArticle articleModel = QArticle.article;\n    BooleanBuilder booleanBuilder = new BooleanBuilder();\n    if (StringUtils.isNotEmpty(query)) {\n        booleanBuilder.and(articleModel.content.likeIgnoreCase(\"%\" + query + \"%\"));\n    };\n    // Page<T> findAll(Predicate predicate, Pageable pageable);\n    return articleRepository.findAll(booleanBuilder, pageable);\n}\n```\n\n## BooleanBuilder 是什么？\n\nBooleanBuilder 用于构建 Predicate 表达式。和 StringBuilder 类似，StringBuilder 生成 String 类型，BooleanBuilder 生成 Predicate 类型数据\n\n```java\npublic final class BooleanBuilder extends Object implements Predicate, Cloneable {}\n```\n\n常用的方法:\nand，or，not\n\n剩余可选方法:\norNot, orAllOf,andNot, andAnyOf\n","source":"_posts/spring-data-querydsl.md","raw":"---\ntitle: JPA with QueryDsl\ncategories: [后端]\ntags: [database, ORM, JPA]\ntoc: true\ndate: 2021/4/25\n---\n\n这篇文章包括了 queryDsl - JPA 的常用功能。\n\n<!-- more -->\n\n使用 queryDsl 在 JPA 中查询的通用模版\n\n```java\nQCustomer customer = =QCustomer.customer;\nqueryFactory.selectFrom(customer)\n  .where(...)\n  .fetch();\n```\n\n- QCustomer: 配置 querydsl 后，自动生成的查询实体\n- queryFactory: JPAQueryFactory 实例。一般通过@Bean 全局配置\n  ```java\n    @Configuration\n    public class JpaQueryConfig {\n        @Bean\n        public JPAQueryFactory jpaQuery(EntityManager entityManager) {\n            return new JPAQueryFactory(entityManager);\n        }\n    }\n  ```\n\n# 使用\n\n## 基础使用例子\n\n- 查询 firstName 是 Bob 的顾客\n  ```java\n    QCustomer customer = QCustomer.customer;\n    Customer bob = queryFactory.selectFrom(customer)\n      .where(customer.name.eq(\"Bob\"))\n      .fetchOne();\n  ```\n- 多表查询\n  ```java\n    QCustomer customer = QCustomer.customer;\n    QCompany company = QCompany.company;\n    query.from(customer, company);\n  ```\n- 多条件过滤\n  ```java\n    // ***************and***************\n    // version1\n    queryFactory.selectFrom(customer)\n      .where(customer.firstName.eq(\"Bob\"), customer.lastName.eq(\"Wilson\"));\n    // version2 use and\n    queryFactory.selectFrom(customer)\n      .where(customer.firstName.eq(\"Bob\").and(customer.lastName.eq(\"Wilson\")))\n    // **************or ****************\n    queryFactory.selectFrom(customer)\n      .where(customer.firstName.eq(\"Bob\").or(customer.lastName.eq(\"Wilson\")))\n  ```\n- Join: 不是太理解\n  http://www.querydsl.com/static/querydsl/4.4.0/reference/html_single/#d0e307\n\n  ```java\n  QCat cat = QCat.cat;\n  QCat mate = new QCat(\"mate\");\n  QCate kitten = new QCat(\"kitten\");\n  query.from(cat)\n      .innerJoin(cat.mate, mate)\n      .leftJoin(cat.kitten, kitten)\n      .list(cat);\n  // ... jpql\n  from Cat as cat\n  inner join cat.mate as mate\n  left outer join cat.kitten as kitten\n\n  query.from(cat)\n    .leftJoin(cat.kittens, kitten)\n    .on(kitten.bodyWeight.gt(10.0))\n    .list(cat);\n  from Cat as cat\n    left join cat.kittens as kitten\n    on kitten.bodyWeight > 10.0\n  ```\n\n* Ordering 排序\n  ```java\n    QCustomer customer = QCustomer.customer;\n    queryFactory.selectFrom(customer)\n      .orderBy(customer.lastName.asc(), customer.firstName.desc)\n      .fetch()\n  ```\n* grouping 分组\n  ```java\n    queryFactory.select(customer.lastName).from(customer)\n      .groupBy(customer.lastName)\n      .fetch();\n  ```\n\n- 删除 delete-where-execute\n  ```java\n    queryFactory\n      .delete(customer)\n      .where(customer.name.eq(\"Bob\"))\n      .execute();\n  ```\n- 更新 update-set/where-execute\n  ```java\n    queryFactory.update(customer)\n      .where(customer.name.eq(\"Bob\"))\n      .set(customer.name, \"Bobby\")\n      .execute();\n  ```\n- subQuery 嵌套查询: JPAExpression\n\n  ```java\n    QDepartment department = QDepartment.department\n    QDepartment d = new QDepartment(\"d\")\n      .where(department.size.eq(\n        JPAExpression.select(d.size.max().find(d))\n      ))\n      .fetch();\n  ```\n\n- 自定义组合查询 (tune)\n  ```java\n    Query jpaQuery = queryFactory.selectFrom(employee).createQuery();\n    // ... custom query\n    List results = jpaQuery.getResultList();\n  ```\n\n* 复杂断言操作\n\n  为了实现复杂的条件判断，可以使用 BooleanBuilder 类，它拓展自 Predicate 接口\n\n  ```java\n    public List<Customer> getCustomer(String... names) {\n      QCustomer customer = QCustomer.customer;\n      JAPQuery<Customer> query = queryFactory.selectFrom(Customer);\n      BooleanBuilder builder = new BooleanBuilder();\n      for(String name: names) {\n        builder.or(customer.name.eq(name));\n      }\n      query.where(builder);// customer.name eq name1 Or customer.name eq name2 Or ...\n      return query.fetch();\n    }\n  ```\n\n## queryDsl 实现分页\n\n### 为 repository 增加 QuerydslPredicateExecutor 实现\n\n```java\npublic interface ArticleRepository extends\n  CrudRepository<Comment, Long>,\n  QuerydslPredicateExecutor<Article>,\n  {}\n```\n\n### controller\n\n```java\n @GetMapping(\"/query\")\n  public Page<Article> queryAllArtilce(Pageable page, @RequestParam(required = false) String query) {\n    return articleService.findAll(page, query);\n  }\n```\n\n### service\n\n```java\n// 文章列表模糊查询 + 分页\npublic Page<Article> findAll(Pageable pageable, String query) {\n    QArticle articleModel = QArticle.article;\n    BooleanBuilder booleanBuilder = new BooleanBuilder();\n    if (StringUtils.isNotEmpty(query)) {\n        booleanBuilder.and(articleModel.content.likeIgnoreCase(\"%\" + query + \"%\"));\n    };\n    // Page<T> findAll(Predicate predicate, Pageable pageable);\n    return articleRepository.findAll(booleanBuilder, pageable);\n}\n```\n\n## BooleanBuilder 是什么？\n\nBooleanBuilder 用于构建 Predicate 表达式。和 StringBuilder 类似，StringBuilder 生成 String 类型，BooleanBuilder 生成 Predicate 类型数据\n\n```java\npublic final class BooleanBuilder extends Object implements Predicate, Cloneable {}\n```\n\n常用的方法:\nand，or，not\n\n剩余可选方法:\norNot, orAllOf,andNot, andAnyOf\n","slug":"spring-data-querydsl","published":1,"updated":"2022-02-08T06:25:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kp0064goswanpl7dd8","content":"<p>这篇文章包括了 queryDsl - JPA 的常用功能。</p>\n<a id=\"more\"></a>\n\n<p>使用 queryDsl 在 JPA 中查询的通用模版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCustomer customer = =QCustomer.customer;</span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(...)</span><br><span class=\"line\">  .fetch();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>QCustomer: 配置 querydsl 后，自动生成的查询实体</li>\n<li>queryFactory: JPAQueryFactory 实例。一般通过@Bean 全局配置<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JpaQueryConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JPAQueryFactory <span class=\"title\">jpaQuery</span><span class=\"params\">(EntityManager entityManager)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JPAQueryFactory(entityManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"基础使用例子\"><a href=\"#基础使用例子\" class=\"headerlink\" title=\"基础使用例子\"></a>基础使用例子</h2><ul>\n<li><p>查询 firstName 是 Bob 的顾客</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCustomer customer = QCustomer.customer;</span><br><span class=\"line\">Customer bob = queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(customer.name.eq(<span class=\"string\">\"Bob\"</span>))</span><br><span class=\"line\">  .fetchOne();</span><br></pre></td></tr></table></figure></li>\n<li><p>多表查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCustomer customer = QCustomer.customer;</span><br><span class=\"line\">QCompany company = QCompany.company;</span><br><span class=\"line\">query.from(customer, company);</span><br></pre></td></tr></table></figure></li>\n<li><p>多条件过滤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ***************and***************</span></span><br><span class=\"line\"><span class=\"comment\">// version1</span></span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(customer.firstName.eq(<span class=\"string\">\"Bob\"</span>), customer.lastName.eq(<span class=\"string\">\"Wilson\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// version2 use and</span></span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(customer.firstName.eq(<span class=\"string\">\"Bob\"</span>).and(customer.lastName.eq(<span class=\"string\">\"Wilson\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">// **************or ****************</span></span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(customer.firstName.eq(<span class=\"string\">\"Bob\"</span>).or(customer.lastName.eq(<span class=\"string\">\"Wilson\"</span>)))</span><br></pre></td></tr></table></figure></li>\n<li><p>Join: 不是太理解<br><a href=\"http://www.querydsl.com/static/querydsl/4.4.0/reference/html_single/#d0e307\" target=\"_blank\" rel=\"noopener\">http://www.querydsl.com/static/querydsl/4.4.0/reference/html_single/#d0e307</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCat cat = QCat.cat;</span><br><span class=\"line\">QCat mate = <span class=\"keyword\">new</span> QCat(<span class=\"string\">\"mate\"</span>);</span><br><span class=\"line\">QCate kitten = <span class=\"keyword\">new</span> QCat(<span class=\"string\">\"kitten\"</span>);</span><br><span class=\"line\">query.from(cat)</span><br><span class=\"line\">    .innerJoin(cat.mate, mate)</span><br><span class=\"line\">    .leftJoin(cat.kitten, kitten)</span><br><span class=\"line\">    .list(cat);</span><br><span class=\"line\"><span class=\"comment\">// ... jpql</span></span><br><span class=\"line\">from Cat as cat</span><br><span class=\"line\">inner join cat.mate as mate</span><br><span class=\"line\">left outer join cat.kitten as kitten</span><br><span class=\"line\"></span><br><span class=\"line\">query.from(cat)</span><br><span class=\"line\">  .leftJoin(cat.kittens, kitten)</span><br><span class=\"line\">  .on(kitten.bodyWeight.gt(<span class=\"number\">10.0</span>))</span><br><span class=\"line\">  .list(cat);</span><br><span class=\"line\">from Cat as cat</span><br><span class=\"line\">  left join cat.kittens as kitten</span><br><span class=\"line\">  on kitten.bodyWeight &gt; <span class=\"number\">10.0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Ordering 排序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCustomer customer = QCustomer.customer;</span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .orderBy(customer.lastName.asc(), customer.firstName.desc)</span><br><span class=\"line\">  .fetch()</span><br></pre></td></tr></table></figure></li>\n<li>grouping 分组<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryFactory.select(customer.lastName).from(customer)</span><br><span class=\"line\">  .groupBy(customer.lastName)</span><br><span class=\"line\">  .fetch();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>删除 delete-where-execute</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryFactory</span><br><span class=\"line\">  .delete(customer)</span><br><span class=\"line\">  .where(customer.name.eq(<span class=\"string\">\"Bob\"</span>))</span><br><span class=\"line\">  .execute();</span><br></pre></td></tr></table></figure></li>\n<li><p>更新 update-set/where-execute</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryFactory.update(customer)</span><br><span class=\"line\">  .where(customer.name.eq(<span class=\"string\">\"Bob\"</span>))</span><br><span class=\"line\">  .set(customer.name, <span class=\"string\">\"Bobby\"</span>)</span><br><span class=\"line\">  .execute();</span><br></pre></td></tr></table></figure></li>\n<li><p>subQuery 嵌套查询: JPAExpression</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QDepartment department = QDepartment.department</span><br><span class=\"line\">QDepartment d = <span class=\"keyword\">new</span> QDepartment(<span class=\"string\">\"d\"</span>)</span><br><span class=\"line\">  .where(department.size.eq(</span><br><span class=\"line\">    JPAExpression.select(d.size.max().find(d))</span><br><span class=\"line\">  ))</span><br><span class=\"line\">  .fetch();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义组合查询 (tune)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Query jpaQuery = queryFactory.selectFrom(employee).createQuery();</span><br><span class=\"line\"><span class=\"comment\">// ... custom query</span></span><br><span class=\"line\">List results = jpaQuery.getResultList();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>复杂断言操作</p>\n<p>为了实现复杂的条件判断，可以使用 BooleanBuilder 类，它拓展自 Predicate 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">getCustomer</span><span class=\"params\">(String... names)</span> </span>&#123;</span><br><span class=\"line\">  QCustomer customer = QCustomer.customer;</span><br><span class=\"line\">  JAPQuery&lt;Customer&gt; query = queryFactory.selectFrom(Customer);</span><br><span class=\"line\">  BooleanBuilder builder = <span class=\"keyword\">new</span> BooleanBuilder();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(String name: names) &#123;</span><br><span class=\"line\">    builder.or(customer.name.eq(name));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  query.where(builder);<span class=\"comment\">// customer.name eq name1 Or customer.name eq name2 Or ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query.fetch();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"queryDsl-实现分页\"><a href=\"#queryDsl-实现分页\" class=\"headerlink\" title=\"queryDsl 实现分页\"></a>queryDsl 实现分页</h2><h3 id=\"为-repository-增加-QuerydslPredicateExecutor-实现\"><a href=\"#为-repository-增加-QuerydslPredicateExecutor-实现\" class=\"headerlink\" title=\"为 repository 增加 QuerydslPredicateExecutor 实现\"></a>为 repository 增加 QuerydslPredicateExecutor 实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ArticleRepository</span> <span class=\"keyword\">extends</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">Comment</span>, <span class=\"title\">Long</span>&gt;,</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">QuerydslPredicateExecutor</span>&lt;<span class=\"title\">Article</span>&gt;,</span></span><br><span class=\"line\"><span class=\"class\">  </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/query\"</span>)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Article&gt; <span class=\"title\">queryAllArtilce</span><span class=\"params\">(Pageable page, @RequestParam(required = <span class=\"keyword\">false</span>)</span> String query) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> articleService.findAll(page, query);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文章列表模糊查询 + 分页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Article&gt; <span class=\"title\">findAll</span><span class=\"params\">(Pageable pageable, String query)</span> </span>&#123;</span><br><span class=\"line\">    QArticle articleModel = QArticle.article;</span><br><span class=\"line\">    BooleanBuilder booleanBuilder = <span class=\"keyword\">new</span> BooleanBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(query)) &#123;</span><br><span class=\"line\">        booleanBuilder.and(articleModel.content.likeIgnoreCase(<span class=\"string\">\"%\"</span> + query + <span class=\"string\">\"%\"</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// Page&lt;T&gt; findAll(Predicate predicate, Pageable pageable);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> articleRepository.findAll(booleanBuilder, pageable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BooleanBuilder-是什么？\"><a href=\"#BooleanBuilder-是什么？\" class=\"headerlink\" title=\"BooleanBuilder 是什么？\"></a>BooleanBuilder 是什么？</h2><p>BooleanBuilder 用于构建 Predicate 表达式。和 StringBuilder 类似，StringBuilder 生成 String 类型，BooleanBuilder 生成 Predicate 类型数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BooleanBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span> <span class=\"keyword\">implements</span> <span class=\"title\">Predicate</span>, <span class=\"title\">Cloneable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常用的方法:<br>and，or，not</p>\n<p>剩余可选方法:<br>orNot, orAllOf,andNot, andAnyOf</p>\n","site":{"data":{}},"excerpt":"<p>这篇文章包括了 queryDsl - JPA 的常用功能。</p>","more":"<p>使用 queryDsl 在 JPA 中查询的通用模版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCustomer customer = =QCustomer.customer;</span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(...)</span><br><span class=\"line\">  .fetch();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>QCustomer: 配置 querydsl 后，自动生成的查询实体</li>\n<li>queryFactory: JPAQueryFactory 实例。一般通过@Bean 全局配置<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JpaQueryConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JPAQueryFactory <span class=\"title\">jpaQuery</span><span class=\"params\">(EntityManager entityManager)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JPAQueryFactory(entityManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"基础使用例子\"><a href=\"#基础使用例子\" class=\"headerlink\" title=\"基础使用例子\"></a>基础使用例子</h2><ul>\n<li><p>查询 firstName 是 Bob 的顾客</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCustomer customer = QCustomer.customer;</span><br><span class=\"line\">Customer bob = queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(customer.name.eq(<span class=\"string\">\"Bob\"</span>))</span><br><span class=\"line\">  .fetchOne();</span><br></pre></td></tr></table></figure></li>\n<li><p>多表查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCustomer customer = QCustomer.customer;</span><br><span class=\"line\">QCompany company = QCompany.company;</span><br><span class=\"line\">query.from(customer, company);</span><br></pre></td></tr></table></figure></li>\n<li><p>多条件过滤</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ***************and***************</span></span><br><span class=\"line\"><span class=\"comment\">// version1</span></span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(customer.firstName.eq(<span class=\"string\">\"Bob\"</span>), customer.lastName.eq(<span class=\"string\">\"Wilson\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// version2 use and</span></span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(customer.firstName.eq(<span class=\"string\">\"Bob\"</span>).and(customer.lastName.eq(<span class=\"string\">\"Wilson\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">// **************or ****************</span></span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .where(customer.firstName.eq(<span class=\"string\">\"Bob\"</span>).or(customer.lastName.eq(<span class=\"string\">\"Wilson\"</span>)))</span><br></pre></td></tr></table></figure></li>\n<li><p>Join: 不是太理解<br><a href=\"http://www.querydsl.com/static/querydsl/4.4.0/reference/html_single/#d0e307\" target=\"_blank\" rel=\"noopener\">http://www.querydsl.com/static/querydsl/4.4.0/reference/html_single/#d0e307</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCat cat = QCat.cat;</span><br><span class=\"line\">QCat mate = <span class=\"keyword\">new</span> QCat(<span class=\"string\">\"mate\"</span>);</span><br><span class=\"line\">QCate kitten = <span class=\"keyword\">new</span> QCat(<span class=\"string\">\"kitten\"</span>);</span><br><span class=\"line\">query.from(cat)</span><br><span class=\"line\">    .innerJoin(cat.mate, mate)</span><br><span class=\"line\">    .leftJoin(cat.kitten, kitten)</span><br><span class=\"line\">    .list(cat);</span><br><span class=\"line\"><span class=\"comment\">// ... jpql</span></span><br><span class=\"line\">from Cat as cat</span><br><span class=\"line\">inner join cat.mate as mate</span><br><span class=\"line\">left outer join cat.kitten as kitten</span><br><span class=\"line\"></span><br><span class=\"line\">query.from(cat)</span><br><span class=\"line\">  .leftJoin(cat.kittens, kitten)</span><br><span class=\"line\">  .on(kitten.bodyWeight.gt(<span class=\"number\">10.0</span>))</span><br><span class=\"line\">  .list(cat);</span><br><span class=\"line\">from Cat as cat</span><br><span class=\"line\">  left join cat.kittens as kitten</span><br><span class=\"line\">  on kitten.bodyWeight &gt; <span class=\"number\">10.0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>Ordering 排序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QCustomer customer = QCustomer.customer;</span><br><span class=\"line\">queryFactory.selectFrom(customer)</span><br><span class=\"line\">  .orderBy(customer.lastName.asc(), customer.firstName.desc)</span><br><span class=\"line\">  .fetch()</span><br></pre></td></tr></table></figure></li>\n<li>grouping 分组<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryFactory.select(customer.lastName).from(customer)</span><br><span class=\"line\">  .groupBy(customer.lastName)</span><br><span class=\"line\">  .fetch();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>删除 delete-where-execute</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryFactory</span><br><span class=\"line\">  .delete(customer)</span><br><span class=\"line\">  .where(customer.name.eq(<span class=\"string\">\"Bob\"</span>))</span><br><span class=\"line\">  .execute();</span><br></pre></td></tr></table></figure></li>\n<li><p>更新 update-set/where-execute</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queryFactory.update(customer)</span><br><span class=\"line\">  .where(customer.name.eq(<span class=\"string\">\"Bob\"</span>))</span><br><span class=\"line\">  .set(customer.name, <span class=\"string\">\"Bobby\"</span>)</span><br><span class=\"line\">  .execute();</span><br></pre></td></tr></table></figure></li>\n<li><p>subQuery 嵌套查询: JPAExpression</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QDepartment department = QDepartment.department</span><br><span class=\"line\">QDepartment d = <span class=\"keyword\">new</span> QDepartment(<span class=\"string\">\"d\"</span>)</span><br><span class=\"line\">  .where(department.size.eq(</span><br><span class=\"line\">    JPAExpression.select(d.size.max().find(d))</span><br><span class=\"line\">  ))</span><br><span class=\"line\">  .fetch();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义组合查询 (tune)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Query jpaQuery = queryFactory.selectFrom(employee).createQuery();</span><br><span class=\"line\"><span class=\"comment\">// ... custom query</span></span><br><span class=\"line\">List results = jpaQuery.getResultList();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>复杂断言操作</p>\n<p>为了实现复杂的条件判断，可以使用 BooleanBuilder 类，它拓展自 Predicate 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Customer&gt; <span class=\"title\">getCustomer</span><span class=\"params\">(String... names)</span> </span>&#123;</span><br><span class=\"line\">  QCustomer customer = QCustomer.customer;</span><br><span class=\"line\">  JAPQuery&lt;Customer&gt; query = queryFactory.selectFrom(Customer);</span><br><span class=\"line\">  BooleanBuilder builder = <span class=\"keyword\">new</span> BooleanBuilder();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(String name: names) &#123;</span><br><span class=\"line\">    builder.or(customer.name.eq(name));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  query.where(builder);<span class=\"comment\">// customer.name eq name1 Or customer.name eq name2 Or ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> query.fetch();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"queryDsl-实现分页\"><a href=\"#queryDsl-实现分页\" class=\"headerlink\" title=\"queryDsl 实现分页\"></a>queryDsl 实现分页</h2><h3 id=\"为-repository-增加-QuerydslPredicateExecutor-实现\"><a href=\"#为-repository-增加-QuerydslPredicateExecutor-实现\" class=\"headerlink\" title=\"为 repository 增加 QuerydslPredicateExecutor 实现\"></a>为 repository 增加 QuerydslPredicateExecutor 实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ArticleRepository</span> <span class=\"keyword\">extends</span></span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">CrudRepository</span>&lt;<span class=\"title\">Comment</span>, <span class=\"title\">Long</span>&gt;,</span></span><br><span class=\"line\"><span class=\"class\">  <span class=\"title\">QuerydslPredicateExecutor</span>&lt;<span class=\"title\">Article</span>&gt;,</span></span><br><span class=\"line\"><span class=\"class\">  </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/query\"</span>)</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Article&gt; <span class=\"title\">queryAllArtilce</span><span class=\"params\">(Pageable page, @RequestParam(required = <span class=\"keyword\">false</span>)</span> String query) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> articleService.findAll(page, query);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文章列表模糊查询 + 分页</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Page&lt;Article&gt; <span class=\"title\">findAll</span><span class=\"params\">(Pageable pageable, String query)</span> </span>&#123;</span><br><span class=\"line\">    QArticle articleModel = QArticle.article;</span><br><span class=\"line\">    BooleanBuilder booleanBuilder = <span class=\"keyword\">new</span> BooleanBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(query)) &#123;</span><br><span class=\"line\">        booleanBuilder.and(articleModel.content.likeIgnoreCase(<span class=\"string\">\"%\"</span> + query + <span class=\"string\">\"%\"</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// Page&lt;T&gt; findAll(Predicate predicate, Pageable pageable);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> articleRepository.findAll(booleanBuilder, pageable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BooleanBuilder-是什么？\"><a href=\"#BooleanBuilder-是什么？\" class=\"headerlink\" title=\"BooleanBuilder 是什么？\"></a>BooleanBuilder 是什么？</h2><p>BooleanBuilder 用于构建 Predicate 表达式。和 StringBuilder 类似，StringBuilder 生成 String 类型，BooleanBuilder 生成 Predicate 类型数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BooleanBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Object</span> <span class=\"keyword\">implements</span> <span class=\"title\">Predicate</span>, <span class=\"title\">Cloneable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常用的方法:<br>and，or，not</p>\n<p>剩余可选方法:<br>orNot, orAllOf,andNot, andAnyOf</p>"},{"title":"vue组件-拖拽，放大缩小，旋转 图片","toc":true,"date":"2021-01-04T16:00:00.000Z","_content":"\n[codepen link](https://codesandbox.io/s/tupianfangdasuoxiaotuozhuaixuanzhuanzujian-8rymy)\n\n## 介绍\n\n设置图片容器的宽高，在这个范围内，可自由**拖拽**，**旋转**，**放大缩小**\n\n### 拖拽：\n\n#### 实现原理\n\n根据三个鼠标事件（mousemove, mouseup, mouvedown）实现对拖拽动作的监听。\n拖拽偏移量获取：通过 requestAnimationFrame + (pageX, pageY)获取毎帧的移动距离，实时的更改偏移数据。\n更新被拖拽的元素的位置：将偏移量设置给 margin-left, margin-top。\n\n#### 代码实现:\n\n```js\n// 通过pageX, paegY 差值来获取鼠标移动偏移量\n// 帧同步 拖拽动画\nfunction rafThrottle(fn) {\n  let locked = false;\n  return function (...args) {\n    if (locked) return;\n    locked = true;\n    window.requestAnimationFrame((_) => {\n      fn.apply(this, args);\n      locked = false;\n    });\n  };\n}\nhandleMouseDown(e) {\n  if (e.button !== 0) return;\n  e.preventDefault();\n  const { offsetX, offsetY } = this.transform;\n  const startX = e.pageX;\n  const startY = e.pageY;\n  this._dragHandler = rafThrottle((ev) => {\n    this.transform.offsetX = offsetX + ev.pageX - startX;\n    this.transform.offsetY = offsetY + ev.pageY - startY;\n  });\n  document.addEventListener(\"mousemove\", this._dragHandler);\n  document.addEventListener(\"mouseup\", (ev) => {\n    document.removeEventListener(\"mousemove\", this._dragHandler);\n  });\n},\n```\n\n## 参考\n\n- element-ui 2.x.x\n","source":"_posts/util-img-container.md","raw":"---\ntitle: vue组件-拖拽，放大缩小，旋转 图片\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/1/5\n---\n\n[codepen link](https://codesandbox.io/s/tupianfangdasuoxiaotuozhuaixuanzhuanzujian-8rymy)\n\n## 介绍\n\n设置图片容器的宽高，在这个范围内，可自由**拖拽**，**旋转**，**放大缩小**\n\n### 拖拽：\n\n#### 实现原理\n\n根据三个鼠标事件（mousemove, mouseup, mouvedown）实现对拖拽动作的监听。\n拖拽偏移量获取：通过 requestAnimationFrame + (pageX, pageY)获取毎帧的移动距离，实时的更改偏移数据。\n更新被拖拽的元素的位置：将偏移量设置给 margin-left, margin-top。\n\n#### 代码实现:\n\n```js\n// 通过pageX, paegY 差值来获取鼠标移动偏移量\n// 帧同步 拖拽动画\nfunction rafThrottle(fn) {\n  let locked = false;\n  return function (...args) {\n    if (locked) return;\n    locked = true;\n    window.requestAnimationFrame((_) => {\n      fn.apply(this, args);\n      locked = false;\n    });\n  };\n}\nhandleMouseDown(e) {\n  if (e.button !== 0) return;\n  e.preventDefault();\n  const { offsetX, offsetY } = this.transform;\n  const startX = e.pageX;\n  const startY = e.pageY;\n  this._dragHandler = rafThrottle((ev) => {\n    this.transform.offsetX = offsetX + ev.pageX - startX;\n    this.transform.offsetY = offsetY + ev.pageY - startY;\n  });\n  document.addEventListener(\"mousemove\", this._dragHandler);\n  document.addEventListener(\"mouseup\", (ev) => {\n    document.removeEventListener(\"mousemove\", this._dragHandler);\n  });\n},\n```\n\n## 参考\n\n- element-ui 2.x.x\n","slug":"util-img-container","published":1,"updated":"2021-04-22T08:21:52.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kp0068gosw7g7u012e","content":"<p><a href=\"https://codesandbox.io/s/tupianfangdasuoxiaotuozhuaixuanzhuanzujian-8rymy\" target=\"_blank\" rel=\"noopener\">codepen link</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>设置图片容器的宽高，在这个范围内，可自由<strong>拖拽</strong>，<strong>旋转</strong>，<strong>放大缩小</strong></p>\n<h3 id=\"拖拽：\"><a href=\"#拖拽：\" class=\"headerlink\" title=\"拖拽：\"></a>拖拽：</h3><h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>根据三个鼠标事件（mousemove, mouseup, mouvedown）实现对拖拽动作的监听。<br>拖拽偏移量获取：通过 requestAnimationFrame + (pageX, pageY)获取毎帧的移动距离，实时的更改偏移数据。<br>更新被拖拽的元素的位置：将偏移量设置给 margin-left, margin-top。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现:\"></a>代码实现:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过pageX, paegY 差值来获取鼠标移动偏移量</span></span><br><span class=\"line\"><span class=\"comment\">// 帧同步 拖拽动画</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rafThrottle</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (locked) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    locked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.requestAnimationFrame(<span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handleMouseDown(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.button !== <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; offsetX, offsetY &#125; = <span class=\"keyword\">this</span>.transform;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startX = e.pageX;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startY = e.pageY;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._dragHandler = rafThrottle(<span class=\"function\">(<span class=\"params\">ev</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transform.offsetX = offsetX + ev.pageX - startX;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transform.offsetY = offsetY + ev.pageY - startY;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, <span class=\"keyword\">this</span>._dragHandler);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, (ev) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"mousemove\"</span>, <span class=\"keyword\">this</span>._dragHandler);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>element-ui 2.x.x</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://codesandbox.io/s/tupianfangdasuoxiaotuozhuaixuanzhuanzujian-8rymy\" target=\"_blank\" rel=\"noopener\">codepen link</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>设置图片容器的宽高，在这个范围内，可自由<strong>拖拽</strong>，<strong>旋转</strong>，<strong>放大缩小</strong></p>\n<h3 id=\"拖拽：\"><a href=\"#拖拽：\" class=\"headerlink\" title=\"拖拽：\"></a>拖拽：</h3><h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>根据三个鼠标事件（mousemove, mouseup, mouvedown）实现对拖拽动作的监听。<br>拖拽偏移量获取：通过 requestAnimationFrame + (pageX, pageY)获取毎帧的移动距离，实时的更改偏移数据。<br>更新被拖拽的元素的位置：将偏移量设置给 margin-left, margin-top。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现:\"></a>代码实现:</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过pageX, paegY 差值来获取鼠标移动偏移量</span></span><br><span class=\"line\"><span class=\"comment\">// 帧同步 拖拽动画</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rafThrottle</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (locked) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    locked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.requestAnimationFrame(<span class=\"function\">(<span class=\"params\">_</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handleMouseDown(e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.button !== <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; offsetX, offsetY &#125; = <span class=\"keyword\">this</span>.transform;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startX = e.pageX;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> startY = e.pageY;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._dragHandler = rafThrottle(<span class=\"function\">(<span class=\"params\">ev</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transform.offsetX = offsetX + ev.pageX - startX;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transform.offsetY = offsetY + ev.pageY - startY;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mousemove\"</span>, <span class=\"keyword\">this</span>._dragHandler);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"mouseup\"</span>, (ev) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.removeEventListener(<span class=\"string\">\"mousemove\"</span>, <span class=\"keyword\">this</span>._dragHandler);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>element-ui 2.x.x</li>\n</ul>\n"},{"title":"多叉树路径查找","toc":true,"date":"2021-04-24T16:00:00.000Z","_content":"\n使用方式\n\n```js\nconst mockTree = [\n  {\n    label: \"一级 1\",\n    id: \"一级 1\",\n    children: [\n      {\n        label: \"二级 1-1\",\n        id: \"二级 1-1\",\n        children: [\n          {\n            label: \"三级 1-1-1三级\",\n            id: \"三级 1-1-1\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: \"一级 2\",\n    id: \"一级 2\",\n    children: [\n      {\n        label: \"二级 2-1\",\n        id: \"二级 2-1\",\n        children: [\n          {\n            label: \"三级 2-1-1\",\n            id: \"三级 2-1-1\",\n          },\n        ],\n      },\n      {\n        label: \"二级 2-2\",\n        id: \"二级 2-2\",\n        children: [\n          {\n            label: \"三级 2-2-1\",\n            id: \"三级 2-2-1\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: \"一级 3\",\n    id: \"一级 3\",\n    children: [\n      {\n        label: \"二级 3-1\",\n        id: \"二级 3-1\",\n        children: [\n          {\n            label: \"三级 3-1-1\",\n            id: \"三级 3-1-1\",\n          },\n        ],\n      },\n      {\n        label: \"二级 3-2\",\n        id: \"二级 3-2\",\n        children: [\n          {\n            label: \"三级 3-2-1\",\n            id: \"三级 3-2-1\",\n          },\n        ],\n      },\n    ],\n  },\n];\nconst defaultProps = { key: \"id\", children: \"children\" };\nconst matchFn = (matchFn = (a, target) => a[defaultProps.key] === target);\nfindPath(mockTree, \"二级 3-2\", matchFn, defaultProps);\n\n// --------- 结果\n[\n  {\n    label: \"一级 3\",\n    id: \"一级 3\",\n    children: [...],\n  },\n  {\n    label: \"二级 3-2\",\n    id: \"二级 3-2\",\n    children: [...],\n  },\n]\n\n\n```\n\n<!-- more -->\n\n```js\nconst mockTree = [\n  {\n    label: \"一级 1\",\n    id: \"一级 1\",\n    children: [\n      {\n        label: \"二级 1-1\",\n        id: \"二级 1-1\",\n        children: [\n          {\n            label: \"三级 1-1-1三级\",\n            id: \"三级 1-1-1\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: \"一级 2\",\n    id: \"一级 2\",\n    children: [\n      {\n        label: \"二级 2-1\",\n        id: \"二级 2-1\",\n        children: [\n          {\n            label: \"三级 2-1-1\",\n            id: \"三级 2-1-1\",\n          },\n        ],\n      },\n      {\n        label: \"二级 2-2\",\n        id: \"二级 2-2\",\n        children: [\n          {\n            label: \"三级 2-2-1\",\n            id: \"三级 2-2-1\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: \"一级 3\",\n    id: \"一级 3\",\n    children: [\n      {\n        label: \"二级 3-1\",\n        id: \"二级 3-1\",\n        children: [\n          {\n            label: \"三级 3-1-1\",\n            id: \"三级 3-1-1\",\n          },\n        ],\n      },\n      {\n        label: \"二级 3-2\",\n        id: \"二级 3-2\",\n        children: [\n          {\n            label: \"三级 3-2-1\",\n            id: \"三级 3-2-1\",\n          },\n        ],\n      },\n    ],\n  },\n];\n/**\n *\n * @description 树节点路径查找\n * @param {Array} treeList [{id, children: [tree, ..., tree]}, tree]\n * @param {*} target 目标匹配对象\n * @param {*} compareFn 比较函数\n * @return {Array<tree>} 路径树节点列表\n */\nexport function findPath(\n  treeList,\n  target,\n  compareFn,\n  defaultProps = { key: \"id\", children: \"children\" }\n) {\n  if (!isFn(compareFn)) {\n    throw new TypeError(\"比较函数不能为空\");\n  }\n  if (!Array.isArray(treeList) || !treeList.length) {\n    throw new TypeError(\"请输入正确的树结构[ [], [], ..., []]\", treeList);\n  }\n\n  return findCore({\n    [defaultProps.key]: null,\n    [defaultProps.children]: treeList,\n  });\n\n  // 核心路径查找\n  function findCore(tree, accPayload = []) {\n    if (compareFn(tree, target)) return accPayload;\n    if (isEmpty(tree[defaultProps.children])) return false; // 中断查找\n    for (const childTree of tree.children) {\n      const childValidPath = findCore(childTree, joinFn(accPayload, childTree));\n      if (childValidPath) return childValidPath;\n    }\n  }\n  // util：判断是否为函数\n  function isFn(compareFn) {\n    return Object.prototype.toString.call(compareFn) === \"[object Function]\";\n  }\n  // util：累加方法\n  function joinFn(acc, cur) {\n    return [...acc, cur];\n  }\n  // util：只对array做了判断，偷懒，为了可迁移写作这种格式\n  function isEmpty(payload) {\n    const type = Object.prototype.toString\n      .call(payload)\n      .replace(/(\\[\\w*)(\\s)(\\w*)\\]/, \"$3\");\n    return /undefined|null/i.test(type)\n      ? true\n      : type === \"Array\"\n      ? !payload.length\n      : true;\n  }\n}\n```\n","source":"_posts/util-tree-path.md","raw":"---\ntitle: 多叉树路径查找\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/4/25\n---\n\n使用方式\n\n```js\nconst mockTree = [\n  {\n    label: \"一级 1\",\n    id: \"一级 1\",\n    children: [\n      {\n        label: \"二级 1-1\",\n        id: \"二级 1-1\",\n        children: [\n          {\n            label: \"三级 1-1-1三级\",\n            id: \"三级 1-1-1\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: \"一级 2\",\n    id: \"一级 2\",\n    children: [\n      {\n        label: \"二级 2-1\",\n        id: \"二级 2-1\",\n        children: [\n          {\n            label: \"三级 2-1-1\",\n            id: \"三级 2-1-1\",\n          },\n        ],\n      },\n      {\n        label: \"二级 2-2\",\n        id: \"二级 2-2\",\n        children: [\n          {\n            label: \"三级 2-2-1\",\n            id: \"三级 2-2-1\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: \"一级 3\",\n    id: \"一级 3\",\n    children: [\n      {\n        label: \"二级 3-1\",\n        id: \"二级 3-1\",\n        children: [\n          {\n            label: \"三级 3-1-1\",\n            id: \"三级 3-1-1\",\n          },\n        ],\n      },\n      {\n        label: \"二级 3-2\",\n        id: \"二级 3-2\",\n        children: [\n          {\n            label: \"三级 3-2-1\",\n            id: \"三级 3-2-1\",\n          },\n        ],\n      },\n    ],\n  },\n];\nconst defaultProps = { key: \"id\", children: \"children\" };\nconst matchFn = (matchFn = (a, target) => a[defaultProps.key] === target);\nfindPath(mockTree, \"二级 3-2\", matchFn, defaultProps);\n\n// --------- 结果\n[\n  {\n    label: \"一级 3\",\n    id: \"一级 3\",\n    children: [...],\n  },\n  {\n    label: \"二级 3-2\",\n    id: \"二级 3-2\",\n    children: [...],\n  },\n]\n\n\n```\n\n<!-- more -->\n\n```js\nconst mockTree = [\n  {\n    label: \"一级 1\",\n    id: \"一级 1\",\n    children: [\n      {\n        label: \"二级 1-1\",\n        id: \"二级 1-1\",\n        children: [\n          {\n            label: \"三级 1-1-1三级\",\n            id: \"三级 1-1-1\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: \"一级 2\",\n    id: \"一级 2\",\n    children: [\n      {\n        label: \"二级 2-1\",\n        id: \"二级 2-1\",\n        children: [\n          {\n            label: \"三级 2-1-1\",\n            id: \"三级 2-1-1\",\n          },\n        ],\n      },\n      {\n        label: \"二级 2-2\",\n        id: \"二级 2-2\",\n        children: [\n          {\n            label: \"三级 2-2-1\",\n            id: \"三级 2-2-1\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    label: \"一级 3\",\n    id: \"一级 3\",\n    children: [\n      {\n        label: \"二级 3-1\",\n        id: \"二级 3-1\",\n        children: [\n          {\n            label: \"三级 3-1-1\",\n            id: \"三级 3-1-1\",\n          },\n        ],\n      },\n      {\n        label: \"二级 3-2\",\n        id: \"二级 3-2\",\n        children: [\n          {\n            label: \"三级 3-2-1\",\n            id: \"三级 3-2-1\",\n          },\n        ],\n      },\n    ],\n  },\n];\n/**\n *\n * @description 树节点路径查找\n * @param {Array} treeList [{id, children: [tree, ..., tree]}, tree]\n * @param {*} target 目标匹配对象\n * @param {*} compareFn 比较函数\n * @return {Array<tree>} 路径树节点列表\n */\nexport function findPath(\n  treeList,\n  target,\n  compareFn,\n  defaultProps = { key: \"id\", children: \"children\" }\n) {\n  if (!isFn(compareFn)) {\n    throw new TypeError(\"比较函数不能为空\");\n  }\n  if (!Array.isArray(treeList) || !treeList.length) {\n    throw new TypeError(\"请输入正确的树结构[ [], [], ..., []]\", treeList);\n  }\n\n  return findCore({\n    [defaultProps.key]: null,\n    [defaultProps.children]: treeList,\n  });\n\n  // 核心路径查找\n  function findCore(tree, accPayload = []) {\n    if (compareFn(tree, target)) return accPayload;\n    if (isEmpty(tree[defaultProps.children])) return false; // 中断查找\n    for (const childTree of tree.children) {\n      const childValidPath = findCore(childTree, joinFn(accPayload, childTree));\n      if (childValidPath) return childValidPath;\n    }\n  }\n  // util：判断是否为函数\n  function isFn(compareFn) {\n    return Object.prototype.toString.call(compareFn) === \"[object Function]\";\n  }\n  // util：累加方法\n  function joinFn(acc, cur) {\n    return [...acc, cur];\n  }\n  // util：只对array做了判断，偷懒，为了可迁移写作这种格式\n  function isEmpty(payload) {\n    const type = Object.prototype.toString\n      .call(payload)\n      .replace(/(\\[\\w*)(\\s)(\\w*)\\]/, \"$3\");\n    return /undefined|null/i.test(type)\n      ? true\n      : type === \"Array\"\n      ? !payload.length\n      : true;\n  }\n}\n```\n","slug":"util-tree-path","published":1,"updated":"2021-04-29T09:50:42.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kq006bgoswdku0f0ox","content":"<p>使用方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mockTree = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 1\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 1\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 1-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 1-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 1-1-1三级\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 1-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 2\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 2\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 2-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 2-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 2-1-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 2-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 2-2\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 2-2\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 2-2-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 2-2-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 3-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 3-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 3-1-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 3-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 3-2-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 3-2-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultProps = &#123; <span class=\"attr\">key</span>: <span class=\"string\">\"id\"</span>, <span class=\"attr\">children</span>: <span class=\"string\">\"children\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> matchFn = <span class=\"function\">(<span class=\"params\">matchFn = (a, target</span>) =&gt;</span> a[defaultProps.key] === target);</span><br><span class=\"line\">findPath(mockTree, <span class=\"string\">\"二级 3-2\"</span>, matchFn, defaultProps);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --------- 结果</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    children: [...],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">    children: [...],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mockTree = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 1\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 1\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 1-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 1-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 1-1-1三级\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 1-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 2\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 2\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 2-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 2-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 2-1-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 2-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 2-2\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 2-2\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 2-2-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 2-2-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 3-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 3-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 3-1-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 3-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 3-2-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 3-2-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>树节点路径查找</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span> </span>treeList [&#123;id, children: [tree, ..., tree]&#125;, tree]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>target 目标匹配对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>compareFn 比较函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;Array&lt;tree&gt;&#125;</span> </span>路径树节点列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findPath</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  treeList,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  target,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  compareFn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  defaultProps = &#123; key: <span class=\"string\">\"id\"</span>, children: <span class=\"string\">\"children\"</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isFn(compareFn)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"比较函数不能为空\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(treeList) || !treeList.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"请输入正确的树结构[ [], [], ..., []]\"</span>, treeList);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> findCore(&#123;</span><br><span class=\"line\">    [defaultProps.key]: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    [defaultProps.children]: treeList,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 核心路径查找</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCore</span>(<span class=\"params\">tree, accPayload = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compareFn(tree, target)) <span class=\"keyword\">return</span> accPayload;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEmpty(tree[defaultProps.children])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 中断查找</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> childTree <span class=\"keyword\">of</span> tree.children) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> childValidPath = findCore(childTree, joinFn(accPayload, childTree));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (childValidPath) <span class=\"keyword\">return</span> childValidPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// util：判断是否为函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFn</span>(<span class=\"params\">compareFn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(compareFn) === <span class=\"string\">\"[object Function]\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// util：累加方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">joinFn</span>(<span class=\"params\">acc, cur</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...acc, cur];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// util：只对array做了判断，偷懒，为了可迁移写作这种格式</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span>(<span class=\"params\">payload</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">      .call(payload)</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/(\\[\\w*)(\\s)(\\w*)\\]/</span>, <span class=\"string\">\"$3\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/undefined|null/i</span>.test(type)</span><br><span class=\"line\">      ? <span class=\"literal\">true</span></span><br><span class=\"line\">      : type === <span class=\"string\">\"Array\"</span></span><br><span class=\"line\">      ? !payload.length</span><br><span class=\"line\">      : <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>使用方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mockTree = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 1\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 1\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 1-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 1-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 1-1-1三级\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 1-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 2\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 2\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 2-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 2-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 2-1-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 2-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 2-2\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 2-2\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 2-2-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 2-2-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 3-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 3-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 3-1-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 3-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 3-2-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 3-2-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultProps = &#123; <span class=\"attr\">key</span>: <span class=\"string\">\"id\"</span>, <span class=\"attr\">children</span>: <span class=\"string\">\"children\"</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> matchFn = <span class=\"function\">(<span class=\"params\">matchFn = (a, target</span>) =&gt;</span> a[defaultProps.key] === target);</span><br><span class=\"line\">findPath(mockTree, <span class=\"string\">\"二级 3-2\"</span>, matchFn, defaultProps);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --------- 结果</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    children: [...],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">    children: [...],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mockTree = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 1\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 1\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 1-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 1-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 1-1-1三级\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 1-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 2\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 2\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 2-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 2-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 2-1-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 2-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 2-2\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 2-2\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 2-2-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 2-2-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    label: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    id: <span class=\"string\">\"一级 3\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 3-1\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 3-1\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 3-1-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 3-1-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        label: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">        id: <span class=\"string\">\"二级 3-2\"</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            label: <span class=\"string\">\"三级 3-2-1\"</span>,</span><br><span class=\"line\">            id: <span class=\"string\">\"三级 3-2-1\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>树节点路径查找</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Array&#125;</span> </span>treeList [&#123;id, children: [tree, ..., tree]&#125;, tree]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>target 目标匹配对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> </span>compareFn 比较函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;Array&lt;tree&gt;&#125;</span> </span>路径树节点列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findPath</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  treeList,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  target,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  compareFn,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  defaultProps = &#123; key: <span class=\"string\">\"id\"</span>, children: <span class=\"string\">\"children\"</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isFn(compareFn)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"比较函数不能为空\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(treeList) || !treeList.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"请输入正确的树结构[ [], [], ..., []]\"</span>, treeList);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> findCore(&#123;</span><br><span class=\"line\">    [defaultProps.key]: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    [defaultProps.children]: treeList,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 核心路径查找</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCore</span>(<span class=\"params\">tree, accPayload = []</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compareFn(tree, target)) <span class=\"keyword\">return</span> accPayload;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEmpty(tree[defaultProps.children])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 中断查找</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> childTree <span class=\"keyword\">of</span> tree.children) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> childValidPath = findCore(childTree, joinFn(accPayload, childTree));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (childValidPath) <span class=\"keyword\">return</span> childValidPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// util：判断是否为函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFn</span>(<span class=\"params\">compareFn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(compareFn) === <span class=\"string\">\"[object Function]\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// util：累加方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">joinFn</span>(<span class=\"params\">acc, cur</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...acc, cur];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// util：只对array做了判断，偷懒，为了可迁移写作这种格式</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span>(<span class=\"params\">payload</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = <span class=\"built_in\">Object</span>.prototype.toString</span><br><span class=\"line\">      .call(payload)</span><br><span class=\"line\">      .replace(<span class=\"regexp\">/(\\[\\w*)(\\s)(\\w*)\\]/</span>, <span class=\"string\">\"$3\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"regexp\">/undefined|null/i</span>.test(type)</span><br><span class=\"line\">      ? <span class=\"literal\">true</span></span><br><span class=\"line\">      : type === <span class=\"string\">\"Array\"</span></span><br><span class=\"line\">      ? !payload.length</span><br><span class=\"line\">      : <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"树结构节点过滤","toc":true,"date":"2021-10-14T16:00:00.000Z","_content":"\n树节点过滤，将不符合条件的过滤掉。使用场景：导航栏隐藏部分内容。\n`treeFilter(tree, node => {/*how to hide the tree node*/})`\n\n<!-- more -->\n\n```js\nconst treeFilter = (root, hideFn) => {\n  if (!root || !root.children) return null;\n  if (hideFn(root)) return null;\n\n  const children = root.children\n    .filter((child) => !hideFn(child))\n    .map((item) => treeFilter(item, hideFn));\n  return {\n    ...root,\n    children,\n  };\n};\nconst mockData = [\n  {\n    name: \"1\",\n    show: true,\n    children: [\n      {\n        name: \"2\",\n        show: true,\n        children: [\n          {\n            show: false,\n            name: \"3\",\n          },\n        ],\n      },\n      {\n        name: \"1-2\",\n        show: true,\n        children: [\n          {\n            show: true,\n            name: \"1-3\",\n          },\n          {\n            show: false,\n            name: \"1-4\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"a\",\n    show: true,\n    children: [\n      {\n        name: \"b\",\n        show: false,\n        children: [\n          {\n            show: true,\n            name: \"c\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"i\",\n    show: false,\n  },\n];\n\nconst travelFn = (node, operation) => {\n  if (!node) return;\n  operation(node);\n  node.children.forEach((child) => travelFn(child, operation));\n};\n\nconst dummyTree = {\n  show: true,\n  children: mockData,\n};\n\ntravelFn(\n  treeFilter(dummyTree, (node) => !node.show),\n  (item) => console.log(item)\n);\n```\n","source":"_posts/util-tree-filter.md","raw":"---\ntitle: 树结构节点过滤\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/10/15\n---\n\n树节点过滤，将不符合条件的过滤掉。使用场景：导航栏隐藏部分内容。\n`treeFilter(tree, node => {/*how to hide the tree node*/})`\n\n<!-- more -->\n\n```js\nconst treeFilter = (root, hideFn) => {\n  if (!root || !root.children) return null;\n  if (hideFn(root)) return null;\n\n  const children = root.children\n    .filter((child) => !hideFn(child))\n    .map((item) => treeFilter(item, hideFn));\n  return {\n    ...root,\n    children,\n  };\n};\nconst mockData = [\n  {\n    name: \"1\",\n    show: true,\n    children: [\n      {\n        name: \"2\",\n        show: true,\n        children: [\n          {\n            show: false,\n            name: \"3\",\n          },\n        ],\n      },\n      {\n        name: \"1-2\",\n        show: true,\n        children: [\n          {\n            show: true,\n            name: \"1-3\",\n          },\n          {\n            show: false,\n            name: \"1-4\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"a\",\n    show: true,\n    children: [\n      {\n        name: \"b\",\n        show: false,\n        children: [\n          {\n            show: true,\n            name: \"c\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: \"i\",\n    show: false,\n  },\n];\n\nconst travelFn = (node, operation) => {\n  if (!node) return;\n  operation(node);\n  node.children.forEach((child) => travelFn(child, operation));\n};\n\nconst dummyTree = {\n  show: true,\n  children: mockData,\n};\n\ntravelFn(\n  treeFilter(dummyTree, (node) => !node.show),\n  (item) => console.log(item)\n);\n```\n","slug":"util-tree-filter","published":1,"updated":"2021-10-15T06:29:55.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kr006fgoswf502hz29","content":"<p>树节点过滤，将不符合条件的过滤掉。使用场景：导航栏隐藏部分内容。<br><code>treeFilter(tree, node =&gt; {/*how to hide the tree node*/})</code></p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeFilter = <span class=\"function\">(<span class=\"params\">root, hideFn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root || !root.children) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hideFn(root)) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> children = root.children</span><br><span class=\"line\">    .filter(<span class=\"function\">(<span class=\"params\">child</span>) =&gt;</span> !hideFn(child))</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> treeFilter(item, hideFn));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...root,</span><br><span class=\"line\">    children,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mockData = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">        show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"3\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"1-2\"</span>,</span><br><span class=\"line\">        show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"1-3\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"1-4\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"a\"</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"b\"</span>,</span><br><span class=\"line\">        show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"c\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"i\"</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> travelFn = <span class=\"function\">(<span class=\"params\">node, operation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  operation(node);</span><br><span class=\"line\">  node.children.forEach(<span class=\"function\">(<span class=\"params\">child</span>) =&gt;</span> travelFn(child, operation));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dummyTree = &#123;</span><br><span class=\"line\">  show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  children: mockData,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">travelFn(</span><br><span class=\"line\">  treeFilter(dummyTree, (node) =&gt; !node.show),</span><br><span class=\"line\">  (item) =&gt; <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>树节点过滤，将不符合条件的过滤掉。使用场景：导航栏隐藏部分内容。<br><code>treeFilter(tree, node =&gt; {/*how to hide the tree node*/})</code></p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeFilter = <span class=\"function\">(<span class=\"params\">root, hideFn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root || !root.children) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hideFn(root)) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> children = root.children</span><br><span class=\"line\">    .filter(<span class=\"function\">(<span class=\"params\">child</span>) =&gt;</span> !hideFn(child))</span><br><span class=\"line\">    .map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> treeFilter(item, hideFn));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...root,</span><br><span class=\"line\">    children,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mockData = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">        show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"3\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"1-2\"</span>,</span><br><span class=\"line\">        show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"1-3\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"1-4\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"a\"</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"b\"</span>,</span><br><span class=\"line\">        show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"c\"</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"i\"</span>,</span><br><span class=\"line\">    show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> travelFn = <span class=\"function\">(<span class=\"params\">node, operation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  operation(node);</span><br><span class=\"line\">  node.children.forEach(<span class=\"function\">(<span class=\"params\">child</span>) =&gt;</span> travelFn(child, operation));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dummyTree = &#123;</span><br><span class=\"line\">  show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  children: mockData,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">travelFn(</span><br><span class=\"line\">  treeFilter(dummyTree, (node) =&gt; !node.show),</span><br><span class=\"line\">  (item) =&gt; <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>"},{"title":"string通过ascii 生成指定范围的number","toc":true,"date":"2021-01-10T16:00:00.000Z","_content":"\n## 使用场景\n\n设计一个组件，根据传入的文件后缀，设置不同主题颜色，如 word 为蓝色，pdf 为黄色，png 为红色。\n思路：\n\n1. 维护一个色域数组\n2. 将文件后缀字符串，转换成 ascii 数字，再通过取余的方式获取 0 - 色域数组最大长度之间的数字\n\n```js\n/**\n *\n * @description string -> number string通过ascii 生成指定范围的number\n * @param {string} str 要被计算的值\n * @param {number} 最终返回的数值的范围区间\n */\n\nexport function getAsciiRangedNum(str: string, range: number) {\n  return reduceByRange(getAsciiSum(str), range);\n  // 获取string 对应的ascii 和\n  function getAsciiSum(str: string): number {\n    return str\n      .split(\"\")\n      .map((char: string) => char.charCodeAt(0))\n      .reduce((acc, curAsciiNum) => acc + curAsciiNum, 0);\n  }\n  // 根据传入的range 取余\n  function reduceByRange(sum: number, range: number): number {\n    return sum <= range ? sum : reduceByRange(sum % range, range);\n  }\n}\n```\n","source":"_posts/util-字符串转换成指定范围数字.md","raw":"---\ntitle: string通过ascii 生成指定范围的number\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/1/11\n---\n\n## 使用场景\n\n设计一个组件，根据传入的文件后缀，设置不同主题颜色，如 word 为蓝色，pdf 为黄色，png 为红色。\n思路：\n\n1. 维护一个色域数组\n2. 将文件后缀字符串，转换成 ascii 数字，再通过取余的方式获取 0 - 色域数组最大长度之间的数字\n\n```js\n/**\n *\n * @description string -> number string通过ascii 生成指定范围的number\n * @param {string} str 要被计算的值\n * @param {number} 最终返回的数值的范围区间\n */\n\nexport function getAsciiRangedNum(str: string, range: number) {\n  return reduceByRange(getAsciiSum(str), range);\n  // 获取string 对应的ascii 和\n  function getAsciiSum(str: string): number {\n    return str\n      .split(\"\")\n      .map((char: string) => char.charCodeAt(0))\n      .reduce((acc, curAsciiNum) => acc + curAsciiNum, 0);\n  }\n  // 根据传入的range 取余\n  function reduceByRange(sum: number, range: number): number {\n    return sum <= range ? sum : reduceByRange(sum % range, range);\n  }\n}\n```\n","slug":"util-字符串转换成指定范围数字","published":1,"updated":"2021-04-22T08:21:39.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ks006igosw2m1qhi8q","content":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>设计一个组件，根据传入的文件后缀，设置不同主题颜色，如 word 为蓝色，pdf 为黄色，png 为红色。<br>思路：</p>\n<ol>\n<li>维护一个色域数组</li>\n<li>将文件后缀字符串，转换成 ascii 数字，再通过取余的方式获取 0 - 色域数组最大长度之间的数字</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description <span class=\"variable\">string</span></span> -&gt; number string通过ascii 生成指定范围的number</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>str 要被计算的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> </span>最终返回的数值的范围区间</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAsciiRangedNum</span>(<span class=\"params\">str: string, range: number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reduceByRange(getAsciiSum(str), range);</span><br><span class=\"line\">  <span class=\"comment\">// 获取string 对应的ascii 和</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAsciiSum</span>(<span class=\"params\">str: string</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">      .split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">      .map(<span class=\"function\">(<span class=\"params\">char: string</span>) =&gt;</span> char.charCodeAt(<span class=\"number\">0</span>))</span><br><span class=\"line\">      .reduce(<span class=\"function\">(<span class=\"params\">acc, curAsciiNum</span>) =&gt;</span> acc + curAsciiNum, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 根据传入的range 取余</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduceByRange</span>(<span class=\"params\">sum: number, range: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum &lt;= range ? sum : reduceByRange(sum % range, range);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>设计一个组件，根据传入的文件后缀，设置不同主题颜色，如 word 为蓝色，pdf 为黄色，png 为红色。<br>思路：</p>\n<ol>\n<li>维护一个色域数组</li>\n<li>将文件后缀字符串，转换成 ascii 数字，再通过取余的方式获取 0 - 色域数组最大长度之间的数字</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description <span class=\"variable\">string</span></span> -&gt; number string通过ascii 生成指定范围的number</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>str 要被计算的值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> </span>最终返回的数值的范围区间</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAsciiRangedNum</span>(<span class=\"params\">str: string, range: number</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reduceByRange(getAsciiSum(str), range);</span><br><span class=\"line\">  <span class=\"comment\">// 获取string 对应的ascii 和</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAsciiSum</span>(<span class=\"params\">str: string</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">      .split(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">      .map(<span class=\"function\">(<span class=\"params\">char: string</span>) =&gt;</span> char.charCodeAt(<span class=\"number\">0</span>))</span><br><span class=\"line\">      .reduce(<span class=\"function\">(<span class=\"params\">acc, curAsciiNum</span>) =&gt;</span> acc + curAsciiNum, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 根据传入的range 取余</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduceByRange</span>(<span class=\"params\">sum: number, range: number</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum &lt;= range ? sum : reduceByRange(sum % range, range);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"数组随机排序","toc":true,"date":"2021-01-30T16:00:00.000Z","_content":"\n数组重排借助 Math.random 函数\n\n- Math.random - 0.5 可以 1:1 概率生成大于 0 和 小于 0 两种情况的值\n- Math.floor(Math.random \\* arr.length-1) 可以生成指定范围的随机数值\n  实现：\n\n1. 借助 Array.prototype.sort 方法\n\n```js\nfunction disorder(arr) {\n  // 浅复制\n  return [...arr].sort(() => !!(Math.random - 0.5));\n}\n```\n\n2. 生成指定范围随机数\n\n```js\nfunction shuffle(arr) {\n  let i = arr.length;\n  const cpyArr = [...arr];\n  while (i > 0) {\n    // 获取指定范围内的随机数\n    const j = (Math.floor(Math.random() * i--)[(cpyArr[i], cpyArr[j])] = [\n      cpyArr[j],\n      cpyArr[i],\n    ]);\n  }\n  return cpyArr;\n}\n```\n","source":"_posts/util-数组shuffle.md","raw":"---\ntitle: 数组随机排序\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/1/31\n---\n\n数组重排借助 Math.random 函数\n\n- Math.random - 0.5 可以 1:1 概率生成大于 0 和 小于 0 两种情况的值\n- Math.floor(Math.random \\* arr.length-1) 可以生成指定范围的随机数值\n  实现：\n\n1. 借助 Array.prototype.sort 方法\n\n```js\nfunction disorder(arr) {\n  // 浅复制\n  return [...arr].sort(() => !!(Math.random - 0.5));\n}\n```\n\n2. 生成指定范围随机数\n\n```js\nfunction shuffle(arr) {\n  let i = arr.length;\n  const cpyArr = [...arr];\n  while (i > 0) {\n    // 获取指定范围内的随机数\n    const j = (Math.floor(Math.random() * i--)[(cpyArr[i], cpyArr[j])] = [\n      cpyArr[j],\n      cpyArr[i],\n    ]);\n  }\n  return cpyArr;\n}\n```\n","slug":"util-数组shuffle","published":1,"updated":"2021-04-22T08:21:31.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ks006lgosw3yicdixm","content":"<p>数组重排借助 Math.random 函数</p>\n<ul>\n<li>Math.random - 0.5 可以 1:1 概率生成大于 0 和 小于 0 两种情况的值</li>\n<li>Math.floor(Math.random * arr.length-1) 可以生成指定范围的随机数值<br>实现：</li>\n</ul>\n<ol>\n<li>借助 Array.prototype.sort 方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">disorder</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 浅复制</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...arr].sort(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> !!(<span class=\"built_in\">Math</span>.random - <span class=\"number\">0.5</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>生成指定范围随机数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffle</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cpyArr = [...arr];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取指定范围内的随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> j = (<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * i--)[(cpyArr[i], cpyArr[j])] = [</span><br><span class=\"line\">      cpyArr[j],</span><br><span class=\"line\">      cpyArr[i],</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cpyArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>数组重排借助 Math.random 函数</p>\n<ul>\n<li>Math.random - 0.5 可以 1:1 概率生成大于 0 和 小于 0 两种情况的值</li>\n<li>Math.floor(Math.random * arr.length-1) 可以生成指定范围的随机数值<br>实现：</li>\n</ul>\n<ol>\n<li>借助 Array.prototype.sort 方法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">disorder</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 浅复制</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...arr].sort(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> !!(<span class=\"built_in\">Math</span>.random - <span class=\"number\">0.5</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>生成指定范围随机数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffle</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = arr.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cpyArr = [...arr];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取指定范围内的随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> j = (<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * i--)[(cpyArr[i], cpyArr[j])] = [</span><br><span class=\"line\">      cpyArr[j],</span><br><span class=\"line\">      cpyArr[i],</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cpyArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"数组转树","toc":true,"date":"2021-01-10T16:00:00.000Z","_content":"\n```js\nlet input = [\n  {id: 1, value: '学校', parentId: null},\n  {id: 2, value: '班级1', parentId: 1},\n  {id: 3, value: '班级2', parentId: 1},\n  {id: 4, value: '学生1', parentId: 2},\n  {id: 5, value: '学生2', parentId: 3},\n  {id: 6, value: '学生3', parentId: 3},\n]\n\nlet output = {\n  {\n    id: 1,\n    value: '学校',\n    parentId: null,\n    children: [\n      {\n        id: 2,\n        value: '班级1',\n        parentId: 1,\n        children: [\n            {id: 4, value: '学生1', parentId: 2, children: []},\n        ]\n      },\n      {\n        id: 3,\n        value: '班级2',\n        parentId: 1,\n        children: [\n          {id: 5, value: '学生2', parentId: 3},\n          {id: 6, value: '学生3', parentId: 3}\n        ]\n      },\n    ]\n  },\n}\n```\n\nTOPIC:\n\n1. 找到 parentId 为 null 设置为 root\n2. 分离数组，id === parentId, 得到两个数组 A, B\n3. 将 A 整合到 root\n4. 将 B 遍历并递归执行 2.3 两步操作\n\n```js\nfunction transformTree(input = []) {\n  if (input.length === 0) return {};\n  const root = input.find((item) => !Number(item.parentId));\n  transformCore(root, input);\n  function transformCore(root, newInput = input) {\n    if (!newInput.length) return;\n    const [matchedItems, restItems] = newInput.reduce(\n      (acc, cur) => {\n        const index = cur.parentId === root.id ? 0 : 1;\n        acc[index].push(cur);\n        return acc;\n      },\n      [[], []]\n    );\n    root.children = matchedItems.map((item) => ({ ...item, children: [] }));\n    root.children.forEach((child) => transformCore(child, restItems));\n  }\n  return root;\n}\n```\n","source":"_posts/util-数组转树.md","raw":"---\ntitle: 数组转树\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/1/11\n---\n\n```js\nlet input = [\n  {id: 1, value: '学校', parentId: null},\n  {id: 2, value: '班级1', parentId: 1},\n  {id: 3, value: '班级2', parentId: 1},\n  {id: 4, value: '学生1', parentId: 2},\n  {id: 5, value: '学生2', parentId: 3},\n  {id: 6, value: '学生3', parentId: 3},\n]\n\nlet output = {\n  {\n    id: 1,\n    value: '学校',\n    parentId: null,\n    children: [\n      {\n        id: 2,\n        value: '班级1',\n        parentId: 1,\n        children: [\n            {id: 4, value: '学生1', parentId: 2, children: []},\n        ]\n      },\n      {\n        id: 3,\n        value: '班级2',\n        parentId: 1,\n        children: [\n          {id: 5, value: '学生2', parentId: 3},\n          {id: 6, value: '学生3', parentId: 3}\n        ]\n      },\n    ]\n  },\n}\n```\n\nTOPIC:\n\n1. 找到 parentId 为 null 设置为 root\n2. 分离数组，id === parentId, 得到两个数组 A, B\n3. 将 A 整合到 root\n4. 将 B 遍历并递归执行 2.3 两步操作\n\n```js\nfunction transformTree(input = []) {\n  if (input.length === 0) return {};\n  const root = input.find((item) => !Number(item.parentId));\n  transformCore(root, input);\n  function transformCore(root, newInput = input) {\n    if (!newInput.length) return;\n    const [matchedItems, restItems] = newInput.reduce(\n      (acc, cur) => {\n        const index = cur.parentId === root.id ? 0 : 1;\n        acc[index].push(cur);\n        return acc;\n      },\n      [[], []]\n    );\n    root.children = matchedItems.map((item) => ({ ...item, children: [] }));\n    root.children.forEach((child) => transformCore(child, restItems));\n  }\n  return root;\n}\n```\n","slug":"util-数组转树","published":1,"updated":"2021-04-22T08:21:20.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kt006pgosw0juv1gsv","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学校'</span>, <span class=\"attr\">parentId</span>: <span class=\"literal\">null</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"string\">'班级1'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"string\">'班级2'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生1'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生2'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生3'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> output = &#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    value: <span class=\"string\">'学校'</span>,</span><br><span class=\"line\">    parentId: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        value: <span class=\"string\">'班级1'</span>,</span><br><span class=\"line\">        parentId: <span class=\"number\">1</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生1'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">2</span>, <span class=\"attr\">children</span>: []&#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">3</span>,</span><br><span class=\"line\">        value: <span class=\"string\">'班级2'</span>,</span><br><span class=\"line\">        parentId: <span class=\"number\">1</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;<span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生2'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生3'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TOPIC:</p>\n<ol>\n<li>找到 parentId 为 null 设置为 root</li>\n<li>分离数组，id === parentId, 得到两个数组 A, B</li>\n<li>将 A 整合到 root</li>\n<li>将 B 遍历并递归执行 2.3 两步操作</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformTree</span>(<span class=\"params\">input = []</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> root = input.find(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> !<span class=\"built_in\">Number</span>(item.parentId));</span><br><span class=\"line\">  transformCore(root, input);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformCore</span>(<span class=\"params\">root, newInput = input</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newInput.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [matchedItems, restItems] = newInput.reduce(</span><br><span class=\"line\">      (acc, cur) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> index = cur.parentId === root.id ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">        acc[index].push(cur);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      [[], []]</span><br><span class=\"line\">    );</span><br><span class=\"line\">    root.children = matchedItems.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> (&#123; ...item, <span class=\"attr\">children</span>: [] &#125;));</span><br><span class=\"line\">    root.children.forEach(<span class=\"function\">(<span class=\"params\">child</span>) =&gt;</span> transformCore(child, restItems));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学校'</span>, <span class=\"attr\">parentId</span>: <span class=\"literal\">null</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">value</span>: <span class=\"string\">'班级1'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">value</span>: <span class=\"string\">'班级2'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生1'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生2'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生3'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> output = &#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    id: <span class=\"number\">1</span>,</span><br><span class=\"line\">    value: <span class=\"string\">'学校'</span>,</span><br><span class=\"line\">    parentId: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">2</span>,</span><br><span class=\"line\">        value: <span class=\"string\">'班级1'</span>,</span><br><span class=\"line\">        parentId: <span class=\"number\">1</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生1'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">2</span>, <span class=\"attr\">children</span>: []&#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        id: <span class=\"number\">3</span>,</span><br><span class=\"line\">        value: <span class=\"string\">'班级2'</span>,</span><br><span class=\"line\">        parentId: <span class=\"number\">1</span>,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;<span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生2'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">id</span>: <span class=\"number\">6</span>, <span class=\"attr\">value</span>: <span class=\"string\">'学生3'</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TOPIC:</p>\n<ol>\n<li>找到 parentId 为 null 设置为 root</li>\n<li>分离数组，id === parentId, 得到两个数组 A, B</li>\n<li>将 A 整合到 root</li>\n<li>将 B 遍历并递归执行 2.3 两步操作</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformTree</span>(<span class=\"params\">input = []</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input.length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> root = input.find(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> !<span class=\"built_in\">Number</span>(item.parentId));</span><br><span class=\"line\">  transformCore(root, input);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformCore</span>(<span class=\"params\">root, newInput = input</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newInput.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [matchedItems, restItems] = newInput.reduce(</span><br><span class=\"line\">      (acc, cur) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> index = cur.parentId === root.id ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">        acc[index].push(cur);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      [[], []]</span><br><span class=\"line\">    );</span><br><span class=\"line\">    root.children = matchedItems.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> (&#123; ...item, <span class=\"attr\">children</span>: [] &#125;));</span><br><span class=\"line\">    root.children.forEach(<span class=\"function\">(<span class=\"params\">child</span>) =&gt;</span> transformCore(child, restItems));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"js 随机数工具","toc":true,"date":"2021-12-06T16:00:00.000Z","_content":"\n```js\nexport const UUID = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n```\n","source":"_posts/util-js-uuid.md","raw":"---\ntitle: js 随机数工具\ncategories: [前端]\ntags: []\ntoc: true\ndate: 2021/12/7\n---\n\n```js\nexport const UUID = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n```\n","slug":"util-js-uuid","published":1,"updated":"2021-12-07T05:43:23.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ku006sgosw6huwba2t","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> UUID = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"</span>.replace(<span class=\"regexp\">/[xy]/g</span>, (c) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r = (<span class=\"built_in\">Math</span>.random() * <span class=\"number\">16</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v = c === <span class=\"string\">\"x\"</span> ? r : (r &amp; <span class=\"number\">0x3</span>) | <span class=\"number\">0x8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> UUID = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\"</span>.replace(<span class=\"regexp\">/[xy]/g</span>, (c) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> r = (<span class=\"built_in\">Math</span>.random() * <span class=\"number\">16</span>) | <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v = c === <span class=\"string\">\"x\"</span> ? r : (r &amp; <span class=\"number\">0x3</span>) | <span class=\"number\">0x8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"正则表达式","toc":true,"date":"2020-12-14T16:00:00.000Z","_content":"\n## 写一个方法将下划线命名替换为大驼峰命名\n\n```ts\nfunction toCamel(str: string): string {\n  return str.replace(/(_)(\\w)/g, (match, $1, $2) => $2.toUpperCase());\n}\n```\n\nexplain:\n\n`str.replace(regexp|substr, newSubStr|function)`\n\nreplace 参数：\n\n- regexp（pattern）正则\n- substr(pattern) 字符串\n- newSubStr 匹配部分将要被匹配的值\n- function(replacement) 一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果\n  - match：匹配的子串。（对应于上述的$&。）\n  - p1,p2, ...：假如 replace()方法的第一个参数是一个 RegExp 对象，则代表第 n 个括号匹配的字符串。（对应于上述的$1，$2 等。）例如，如果是用 /(\\a+)(\\b+)/ 这个来匹配，p1 就是匹配的 \\a+，p2 就是匹配的 \\b+。\n\nreplace 可以使用字符串作为参数:\n$$: 插入一个\"$\",\n$&: 插入匹配的字符串\n$`:插入当前匹配的子串左侧的内容 `$: 插入当前匹配的子串的右侧的内容\n`$<Name>`: 分组名称\n\n⚠️：为什么不用 str.replace(/(_)(\\w)/g, ‘$2’.toUpperCase())?\neager evaluation， $2.toUpperCase() 优先于 str.replace 之前执行，相当于 str.replace(/(_)(\\w)/g, ‘$2’)\n","source":"_posts/utils-RegExp.md","raw":"---\ntitle: 正则表达式\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2020/12/15\n---\n\n## 写一个方法将下划线命名替换为大驼峰命名\n\n```ts\nfunction toCamel(str: string): string {\n  return str.replace(/(_)(\\w)/g, (match, $1, $2) => $2.toUpperCase());\n}\n```\n\nexplain:\n\n`str.replace(regexp|substr, newSubStr|function)`\n\nreplace 参数：\n\n- regexp（pattern）正则\n- substr(pattern) 字符串\n- newSubStr 匹配部分将要被匹配的值\n- function(replacement) 一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果\n  - match：匹配的子串。（对应于上述的$&。）\n  - p1,p2, ...：假如 replace()方法的第一个参数是一个 RegExp 对象，则代表第 n 个括号匹配的字符串。（对应于上述的$1，$2 等。）例如，如果是用 /(\\a+)(\\b+)/ 这个来匹配，p1 就是匹配的 \\a+，p2 就是匹配的 \\b+。\n\nreplace 可以使用字符串作为参数:\n$$: 插入一个\"$\",\n$&: 插入匹配的字符串\n$`:插入当前匹配的子串左侧的内容 `$: 插入当前匹配的子串的右侧的内容\n`$<Name>`: 分组名称\n\n⚠️：为什么不用 str.replace(/(_)(\\w)/g, ‘$2’.toUpperCase())?\neager evaluation， $2.toUpperCase() 优先于 str.replace 之前执行，相当于 str.replace(/(_)(\\w)/g, ‘$2’)\n","slug":"utils-RegExp","published":1,"updated":"2021-04-22T08:22:31.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ku006wgoswesom5bdb","content":"<h2 id=\"写一个方法将下划线命名替换为大驼峰命名\"><a href=\"#写一个方法将下划线命名替换为大驼峰命名\" class=\"headerlink\" title=\"写一个方法将下划线命名替换为大驼峰命名\"></a>写一个方法将下划线命名替换为大驼峰命名</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toCamel</span>(<span class=\"params\">str: <span class=\"built_in\">string</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/(_)(\\w)/g</span>, <span class=\"function\">(<span class=\"params\">match, $1, $2</span>) =&gt;</span> $<span class=\"number\">2.</span>toUpperCase());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>explain:</p>\n<p><code>str.replace(regexp|substr, newSubStr|function)</code></p>\n<p>replace 参数：</p>\n<ul>\n<li>regexp（pattern）正则</li>\n<li>substr(pattern) 字符串</li>\n<li>newSubStr 匹配部分将要被匹配的值</li>\n<li>function(replacement) 一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果<ul>\n<li>match：匹配的子串。（对应于上述的$&amp;。）</li>\n<li>p1,p2, …：假如 replace()方法的第一个参数是一个 RegExp 对象，则代表第 n 个括号匹配的字符串。（对应于上述的$1，$2 等。）例如，如果是用 /(\\a+)(\\b+)/ 这个来匹配，p1 就是匹配的 \\a+，p2 就是匹配的 \\b+。</li>\n</ul>\n</li>\n</ul>\n<p>replace 可以使用字符串作为参数:<br>$$: 插入一个”$”,<br>$&amp;: 插入匹配的字符串<br>$<code>:插入当前匹配的子串左侧的内容</code>$: 插入当前匹配的子串的右侧的内容<br><code>$&lt;Name&gt;</code>: 分组名称</p>\n<p>⚠️：为什么不用 str.replace(/(<em>)(\\w)/g, ‘$2’.toUpperCase())?<br>eager evaluation， $2.toUpperCase() 优先于 str.replace 之前执行，相当于 str.replace(/(</em>)(\\w)/g, ‘$2’)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"写一个方法将下划线命名替换为大驼峰命名\"><a href=\"#写一个方法将下划线命名替换为大驼峰命名\" class=\"headerlink\" title=\"写一个方法将下划线命名替换为大驼峰命名\"></a>写一个方法将下划线命名替换为大驼峰命名</h2><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toCamel</span>(<span class=\"params\">str: <span class=\"built_in\">string</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/(_)(\\w)/g</span>, <span class=\"function\">(<span class=\"params\">match, $1, $2</span>) =&gt;</span> $<span class=\"number\">2.</span>toUpperCase());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>explain:</p>\n<p><code>str.replace(regexp|substr, newSubStr|function)</code></p>\n<p>replace 参数：</p>\n<ul>\n<li>regexp（pattern）正则</li>\n<li>substr(pattern) 字符串</li>\n<li>newSubStr 匹配部分将要被匹配的值</li>\n<li>function(replacement) 一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果<ul>\n<li>match：匹配的子串。（对应于上述的$&amp;。）</li>\n<li>p1,p2, …：假如 replace()方法的第一个参数是一个 RegExp 对象，则代表第 n 个括号匹配的字符串。（对应于上述的$1，$2 等。）例如，如果是用 /(\\a+)(\\b+)/ 这个来匹配，p1 就是匹配的 \\a+，p2 就是匹配的 \\b+。</li>\n</ul>\n</li>\n</ul>\n<p>replace 可以使用字符串作为参数:<br>$$: 插入一个”$”,<br>$&amp;: 插入匹配的字符串<br>$<code>:插入当前匹配的子串左侧的内容</code>$: 插入当前匹配的子串的右侧的内容<br><code>$&lt;Name&gt;</code>: 分组名称</p>\n<p>⚠️：为什么不用 str.replace(/(<em>)(\\w)/g, ‘$2’.toUpperCase())?<br>eager evaluation， $2.toUpperCase() 优先于 str.replace 之前执行，相当于 str.replace(/(</em>)(\\w)/g, ‘$2’)</p>\n"},{"title":"Vue2 reactivity 解析","toc":true,"date":"2021-02-18T16:00:00.000Z","_content":"\n## Vue2 响应式流程\n\n1. Observer 初始化响应式逻辑(Object.defineProperty)，对 get 和 set 操作进行代理\n2. 字符串模版 compile 阶段，触发代理后的对应属性的 get 操作，进行依赖收集，将对应属性值的 Dep 和 Watcher 相互关联\n3. 当模版中的属性值发生变化，触发代理 set 操作，执行 dep.notify 触发 watcher 的视图更新操作\n\n## 代码实现：无 compiler,手动设置 Watcher 的核心双向绑定（发布订阅）\n\n1. Observer 为 data 的每一个属性生成 Dep（发布订阅 - 事件名）\n2. 手动设置 Watcher 进行订阅操作，订阅指定的 Dep（Dep 添加 Watcher 到他的订阅者队列中）\n3. Dep 更新，触发 Watcher 的通知操作(Dep.notify -> Watcher.run)\n\n### Dep 与 Watcher 之间的关系 数据结构\n\n```js\ndata: {\n  msg: {\n    test: \"xxx\";\n  }\n}\n```\n\n<img src=\"data-structure.png\" />\n\n### [code](https://github.com/shancw96/tech-basis/blob/master/sourceCode_implement/Vue2/reactivity.ts)\n\n```js\nclass Vue {\n  $options: any\n  _data: any;\n  constructor(options: any) {\n    this.$options = options;\n    this._data = this.$options.data\n    this.proxyData()\n    observe(this._data)\n  }\n  private proxyData() {\n    const proxyCore = (key: string) => {\n      Object.defineProperty(this, key, {// 代理this，vue实例,将data[key]映射到实例上\n        get() {\n          return this._data[key]\n        },\n        set(newVal) {\n          this._data[key] = newVal\n        }\n      })\n    }\n    Object.keys(this._data).forEach(proxyCore)\n  }\n\n  $watch(exp: string, cb: Function) {\n    new Watcher(this, exp, cb)\n  }\n}\n\nclass Watcher {\n  depsId: {[s: string]: Dep} = {}\n  getters: Function\n  value: any\n  cb: Function\n  vm: Vue\n  constructor(vm: Vue, exp: string, cb: Function) {\n    this.cb = cb\n    this.vm = vm\n    this.getters = this.createGetter(exp)\n    this.value = this.get()\n  }\n\n  createGetter(exp: string) {\n    if (/[^\\w.$]/.test(exp)) return (_: any) => _;\n\n    var exps = exp.split('.');\n\n    return function(obj: any) {\n        for (var i = 0, len = exps.length; i < len; i++) {\n            if (!obj) return;\n            obj = obj[exps[i]];\n        }\n        return obj;\n    }\n  }\n\n  get() {\n    Dep.target = this\n    const value = this.getters.call(this.vm, this.vm);\n    Dep.target = null\n    return value\n  }\n\n  run() {\n    const oldVal = this.value\n    const newVal = this.get()\n    if(oldVal !== newVal) {\n      this.cb(newVal, oldVal, this.vm)\n    }\n  }\n\n  addDep(dep: Dep) {\n    if(!this.depsId.hasOwnProperty(dep.id)) {\n      this.depsId[dep.id] = dep\n      dep.addSub(this)\n    }\n  }\n}\n\n\nclass Observer {\n  dep: Dep = new Dep()\n  constructor(obj: any) {\n    this.walk(obj)\n  }\n  // 为每一个key，初始化响应式\n  walk(obj: any) {\n    const defineReactive = (key: string, value: any) => {\n      const dep = new Dep()\n      let child = observe(value);\n      Object.defineProperty(obj, key, {\n        get() {\n          if(Dep.target) {\n            dep.depend()\n            if(child) {\n              child.dep.depend()\n            }\n          }\n          return value // 不使用obj[key], 因为会重复触发get操作\n        },\n        set(newVal) {\n          if(newVal === value) return;\n          value = observe(newVal)\n          dep.notify()\n        }\n      })\n    }\n    Object.keys(obj).forEach(key => defineReactive(key, obj[key]))\n  }\n}\n\nclass Dep {\n  static target: Watcher | null\n  id: string\n  subs: Array<Watcher> = []\n  constructor() {\n    this.id = Math.random() + ''\n  }\n  addSub(sub: Watcher) {\n    this.subs.push(sub)\n  }\n  depend() {\n    Dep.target && Dep.target.addDep(this)\n  }\n  notify() {\n    this.subs.forEach(sub => sub.run())\n  }\n}\n\nfunction observe(obj: any) {\n  if(!obj || typeof obj !== 'object') {\n    return obj\n  }\n  return new Observer(obj)\n}\n\nconst app2 = new Vue({\n  data: {\n    msg: {\n      test: '111'\n    }\n  }\n})\napp2.$watch('msg.test', (newVal: any, oldVal: any) => {\n  console.log(newVal, oldVal)\n})\n\napp2.$options.data.msg.test = '222'\n```\n","source":"_posts/vue-2-reactivity-implement.md","raw":"---\ntitle: Vue2 reactivity 解析\ncategories: [前端]\ntags: [implement, vue]\ntoc: true\ndate: 2021/2/19\n---\n\n## Vue2 响应式流程\n\n1. Observer 初始化响应式逻辑(Object.defineProperty)，对 get 和 set 操作进行代理\n2. 字符串模版 compile 阶段，触发代理后的对应属性的 get 操作，进行依赖收集，将对应属性值的 Dep 和 Watcher 相互关联\n3. 当模版中的属性值发生变化，触发代理 set 操作，执行 dep.notify 触发 watcher 的视图更新操作\n\n## 代码实现：无 compiler,手动设置 Watcher 的核心双向绑定（发布订阅）\n\n1. Observer 为 data 的每一个属性生成 Dep（发布订阅 - 事件名）\n2. 手动设置 Watcher 进行订阅操作，订阅指定的 Dep（Dep 添加 Watcher 到他的订阅者队列中）\n3. Dep 更新，触发 Watcher 的通知操作(Dep.notify -> Watcher.run)\n\n### Dep 与 Watcher 之间的关系 数据结构\n\n```js\ndata: {\n  msg: {\n    test: \"xxx\";\n  }\n}\n```\n\n<img src=\"data-structure.png\" />\n\n### [code](https://github.com/shancw96/tech-basis/blob/master/sourceCode_implement/Vue2/reactivity.ts)\n\n```js\nclass Vue {\n  $options: any\n  _data: any;\n  constructor(options: any) {\n    this.$options = options;\n    this._data = this.$options.data\n    this.proxyData()\n    observe(this._data)\n  }\n  private proxyData() {\n    const proxyCore = (key: string) => {\n      Object.defineProperty(this, key, {// 代理this，vue实例,将data[key]映射到实例上\n        get() {\n          return this._data[key]\n        },\n        set(newVal) {\n          this._data[key] = newVal\n        }\n      })\n    }\n    Object.keys(this._data).forEach(proxyCore)\n  }\n\n  $watch(exp: string, cb: Function) {\n    new Watcher(this, exp, cb)\n  }\n}\n\nclass Watcher {\n  depsId: {[s: string]: Dep} = {}\n  getters: Function\n  value: any\n  cb: Function\n  vm: Vue\n  constructor(vm: Vue, exp: string, cb: Function) {\n    this.cb = cb\n    this.vm = vm\n    this.getters = this.createGetter(exp)\n    this.value = this.get()\n  }\n\n  createGetter(exp: string) {\n    if (/[^\\w.$]/.test(exp)) return (_: any) => _;\n\n    var exps = exp.split('.');\n\n    return function(obj: any) {\n        for (var i = 0, len = exps.length; i < len; i++) {\n            if (!obj) return;\n            obj = obj[exps[i]];\n        }\n        return obj;\n    }\n  }\n\n  get() {\n    Dep.target = this\n    const value = this.getters.call(this.vm, this.vm);\n    Dep.target = null\n    return value\n  }\n\n  run() {\n    const oldVal = this.value\n    const newVal = this.get()\n    if(oldVal !== newVal) {\n      this.cb(newVal, oldVal, this.vm)\n    }\n  }\n\n  addDep(dep: Dep) {\n    if(!this.depsId.hasOwnProperty(dep.id)) {\n      this.depsId[dep.id] = dep\n      dep.addSub(this)\n    }\n  }\n}\n\n\nclass Observer {\n  dep: Dep = new Dep()\n  constructor(obj: any) {\n    this.walk(obj)\n  }\n  // 为每一个key，初始化响应式\n  walk(obj: any) {\n    const defineReactive = (key: string, value: any) => {\n      const dep = new Dep()\n      let child = observe(value);\n      Object.defineProperty(obj, key, {\n        get() {\n          if(Dep.target) {\n            dep.depend()\n            if(child) {\n              child.dep.depend()\n            }\n          }\n          return value // 不使用obj[key], 因为会重复触发get操作\n        },\n        set(newVal) {\n          if(newVal === value) return;\n          value = observe(newVal)\n          dep.notify()\n        }\n      })\n    }\n    Object.keys(obj).forEach(key => defineReactive(key, obj[key]))\n  }\n}\n\nclass Dep {\n  static target: Watcher | null\n  id: string\n  subs: Array<Watcher> = []\n  constructor() {\n    this.id = Math.random() + ''\n  }\n  addSub(sub: Watcher) {\n    this.subs.push(sub)\n  }\n  depend() {\n    Dep.target && Dep.target.addDep(this)\n  }\n  notify() {\n    this.subs.forEach(sub => sub.run())\n  }\n}\n\nfunction observe(obj: any) {\n  if(!obj || typeof obj !== 'object') {\n    return obj\n  }\n  return new Observer(obj)\n}\n\nconst app2 = new Vue({\n  data: {\n    msg: {\n      test: '111'\n    }\n  }\n})\napp2.$watch('msg.test', (newVal: any, oldVal: any) => {\n  console.log(newVal, oldVal)\n})\n\napp2.$options.data.msg.test = '222'\n```\n","slug":"vue-2-reactivity-implement","published":1,"updated":"2022-05-30T05:35:20.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kv006zgosw40565xtu","content":"<h2 id=\"Vue2-响应式流程\"><a href=\"#Vue2-响应式流程\" class=\"headerlink\" title=\"Vue2 响应式流程\"></a>Vue2 响应式流程</h2><ol>\n<li>Observer 初始化响应式逻辑(Object.defineProperty)，对 get 和 set 操作进行代理</li>\n<li>字符串模版 compile 阶段，触发代理后的对应属性的 get 操作，进行依赖收集，将对应属性值的 Dep 和 Watcher 相互关联</li>\n<li>当模版中的属性值发生变化，触发代理 set 操作，执行 dep.notify 触发 watcher 的视图更新操作</li>\n</ol>\n<h2 id=\"代码实现：无-compiler-手动设置-Watcher-的核心双向绑定（发布订阅）\"><a href=\"#代码实现：无-compiler-手动设置-Watcher-的核心双向绑定（发布订阅）\" class=\"headerlink\" title=\"代码实现：无 compiler,手动设置 Watcher 的核心双向绑定（发布订阅）\"></a>代码实现：无 compiler,手动设置 Watcher 的核心双向绑定（发布订阅）</h2><ol>\n<li>Observer 为 data 的每一个属性生成 Dep（发布订阅 - 事件名）</li>\n<li>手动设置 Watcher 进行订阅操作，订阅指定的 Dep（Dep 添加 Watcher 到他的订阅者队列中）</li>\n<li>Dep 更新，触发 Watcher 的通知操作(Dep.notify -&gt; Watcher.run)</li>\n</ol>\n<h3 id=\"Dep-与-Watcher-之间的关系-数据结构\"><a href=\"#Dep-与-Watcher-之间的关系-数据结构\" class=\"headerlink\" title=\"Dep 与 Watcher 之间的关系 数据结构\"></a>Dep 与 Watcher 之间的关系 数据结构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  msg: &#123;</span><br><span class=\"line\">    test: <span class=\"string\">\"xxx\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"data-structure.png\" />\n\n<h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a><a href=\"https://github.com/shancw96/tech-basis/blob/master/sourceCode_implement/Vue2/reactivity.ts\" target=\"_blank\" rel=\"noopener\">code</a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span> </span>&#123;</span><br><span class=\"line\">  $options: any</span><br><span class=\"line\">  _data: any;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$options = options;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._data = <span class=\"keyword\">this</span>.$options.data</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.proxyData()</span><br><span class=\"line\">    observe(<span class=\"keyword\">this</span>._data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  private proxyData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> proxyCore = <span class=\"function\">(<span class=\"params\">key: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, key, &#123;<span class=\"comment\">// 代理this，vue实例,将data[key]映射到实例上</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._data[key]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._data[key] = newVal</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>._data).forEach(proxyCore)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $watch(exp: string, <span class=\"attr\">cb</span>: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(<span class=\"keyword\">this</span>, exp, cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">  depsId: &#123;[s: string]: Dep&#125; = &#123;&#125;</span><br><span class=\"line\">  getters: <span class=\"built_in\">Function</span></span><br><span class=\"line\">  value: any</span><br><span class=\"line\">  cb: <span class=\"built_in\">Function</span></span><br><span class=\"line\">  vm: Vue</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(vm: Vue, exp: string, cb: Function) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getters = <span class=\"keyword\">this</span>.createGetter(exp)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  createGetter(exp: string) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/[^\\w.$]/</span>.test(exp)) <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">_: any</span>) =&gt;</span> _;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> exps = exp.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj: any</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = exps.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            obj = obj[exps[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    Dep.target = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.getters.call(<span class=\"keyword\">this</span>.vm, <span class=\"keyword\">this</span>.vm);</span><br><span class=\"line\">    Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldVal = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newVal = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(oldVal !== newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cb(newVal, oldVal, <span class=\"keyword\">this</span>.vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  addDep(dep: Dep) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.depsId.hasOwnProperty(dep.id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.depsId[dep.id] = dep</span><br><span class=\"line\">      dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  dep: Dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(obj: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.walk(obj)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 为每一个key，初始化响应式</span></span><br><span class=\"line\">  walk(obj: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> defineReactive = <span class=\"function\">(<span class=\"params\">key: string, value: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> child = observe(value);</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(Dep.target) &#123;</span><br><span class=\"line\">            dep.depend()</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(child) &#123;</span><br><span class=\"line\">              child.dep.depend()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value <span class=\"comment\">// 不使用obj[key], 因为会重复触发get操作</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(newVal === value) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          value = observe(newVal)</span><br><span class=\"line\">          dep.notify()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> defineReactive(key, obj[key]))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> target: Watcher | <span class=\"literal\">null</span></span><br><span class=\"line\">  id: string</span><br><span class=\"line\">  subs: <span class=\"built_in\">Array</span>&lt;Watcher&gt; = []</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = <span class=\"built_in\">Math</span>.random() + <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addSub(sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  depend() &#123;</span><br><span class=\"line\">    Dep.target &amp;&amp; Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.run())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj: any</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observer(obj)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    msg: &#123;</span><br><span class=\"line\">      test: <span class=\"string\">'111'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app2.$watch(<span class=\"string\">'msg.test'</span>, (newVal: any, <span class=\"attr\">oldVal</span>: any) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(newVal, oldVal)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app2.$options.data.msg.test = <span class=\"string\">'222'</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue2-响应式流程\"><a href=\"#Vue2-响应式流程\" class=\"headerlink\" title=\"Vue2 响应式流程\"></a>Vue2 响应式流程</h2><ol>\n<li>Observer 初始化响应式逻辑(Object.defineProperty)，对 get 和 set 操作进行代理</li>\n<li>字符串模版 compile 阶段，触发代理后的对应属性的 get 操作，进行依赖收集，将对应属性值的 Dep 和 Watcher 相互关联</li>\n<li>当模版中的属性值发生变化，触发代理 set 操作，执行 dep.notify 触发 watcher 的视图更新操作</li>\n</ol>\n<h2 id=\"代码实现：无-compiler-手动设置-Watcher-的核心双向绑定（发布订阅）\"><a href=\"#代码实现：无-compiler-手动设置-Watcher-的核心双向绑定（发布订阅）\" class=\"headerlink\" title=\"代码实现：无 compiler,手动设置 Watcher 的核心双向绑定（发布订阅）\"></a>代码实现：无 compiler,手动设置 Watcher 的核心双向绑定（发布订阅）</h2><ol>\n<li>Observer 为 data 的每一个属性生成 Dep（发布订阅 - 事件名）</li>\n<li>手动设置 Watcher 进行订阅操作，订阅指定的 Dep（Dep 添加 Watcher 到他的订阅者队列中）</li>\n<li>Dep 更新，触发 Watcher 的通知操作(Dep.notify -&gt; Watcher.run)</li>\n</ol>\n<h3 id=\"Dep-与-Watcher-之间的关系-数据结构\"><a href=\"#Dep-与-Watcher-之间的关系-数据结构\" class=\"headerlink\" title=\"Dep 与 Watcher 之间的关系 数据结构\"></a>Dep 与 Watcher 之间的关系 数据结构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  msg: &#123;</span><br><span class=\"line\">    test: <span class=\"string\">\"xxx\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"data-structure.png\" />\n\n<h3 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a><a href=\"https://github.com/shancw96/tech-basis/blob/master/sourceCode_implement/Vue2/reactivity.ts\" target=\"_blank\" rel=\"noopener\">code</a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vue</span> </span>&#123;</span><br><span class=\"line\">  $options: any</span><br><span class=\"line\">  _data: any;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(options: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$options = options;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._data = <span class=\"keyword\">this</span>.$options.data</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.proxyData()</span><br><span class=\"line\">    observe(<span class=\"keyword\">this</span>._data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  private proxyData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> proxyCore = <span class=\"function\">(<span class=\"params\">key: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, key, &#123;<span class=\"comment\">// 代理this，vue实例,将data[key]映射到实例上</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._data[key]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>._data[key] = newVal</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>._data).forEach(proxyCore)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $watch(exp: string, <span class=\"attr\">cb</span>: <span class=\"built_in\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(<span class=\"keyword\">this</span>, exp, cb)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</span><br><span class=\"line\">  depsId: &#123;[s: string]: Dep&#125; = &#123;&#125;</span><br><span class=\"line\">  getters: <span class=\"built_in\">Function</span></span><br><span class=\"line\">  value: any</span><br><span class=\"line\">  cb: <span class=\"built_in\">Function</span></span><br><span class=\"line\">  vm: Vue</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(vm: Vue, exp: string, cb: Function) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getters = <span class=\"keyword\">this</span>.createGetter(exp)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  createGetter(exp: string) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"regexp\">/[^\\w.$]/</span>.test(exp)) <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">_: any</span>) =&gt;</span> _;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> exps = exp.split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj: any</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = exps.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            obj = obj[exps[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">    Dep.target = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.getters.call(<span class=\"keyword\">this</span>.vm, <span class=\"keyword\">this</span>.vm);</span><br><span class=\"line\">    Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldVal = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newVal = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(oldVal !== newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.cb(newVal, oldVal, <span class=\"keyword\">this</span>.vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  addDep(dep: Dep) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.depsId.hasOwnProperty(dep.id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.depsId[dep.id] = dep</span><br><span class=\"line\">      dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  dep: Dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(obj: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.walk(obj)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 为每一个key，初始化响应式</span></span><br><span class=\"line\">  walk(obj: any) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> defineReactive = <span class=\"function\">(<span class=\"params\">key: string, value: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> child = observe(value);</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(Dep.target) &#123;</span><br><span class=\"line\">            dep.depend()</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(child) &#123;</span><br><span class=\"line\">              child.dep.depend()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value <span class=\"comment\">// 不使用obj[key], 因为会重复触发get操作</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(newVal) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(newVal === value) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          value = observe(newVal)</span><br><span class=\"line\">          dep.notify()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(obj).forEach(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> defineReactive(key, obj[key]))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> target: Watcher | <span class=\"literal\">null</span></span><br><span class=\"line\">  id: string</span><br><span class=\"line\">  subs: <span class=\"built_in\">Array</span>&lt;Watcher&gt; = []</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = <span class=\"built_in\">Math</span>.random() + <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addSub(sub: Watcher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  depend() &#123;</span><br><span class=\"line\">    Dep.target &amp;&amp; Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  notify() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.forEach(<span class=\"function\"><span class=\"params\">sub</span> =&gt;</span> sub.run())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">obj: any</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observer(obj)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app2 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    msg: &#123;</span><br><span class=\"line\">      test: <span class=\"string\">'111'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app2.$watch(<span class=\"string\">'msg.test'</span>, (newVal: any, <span class=\"attr\">oldVal</span>: any) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(newVal, oldVal)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app2.$options.data.msg.test = <span class=\"string\">'222'</span></span><br></pre></td></tr></table></figure>\n"},{"title":"图片批量压缩下载","toc":true,"date":"2020-09-07T16:00:00.000Z","_content":"\n## source code\n\n```js\nfunction downloadImgList(urlList, fileName) {\n  const getFile = (url) =>\n    new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      // unique sign 解决 read from disk\n      url = url + `?r=${Math.random()}`;\n      xhr.open(\"GET\", url, true);\n      xhr.responseType = \"blob\";\n      xhr.onload = () =>\n        xhr.status === 200 ? resolve(xhr.response) : resolve();\n      xhr.send();\n    });\n  const zipFile = (urlList) => (fileDataList) => {\n    const getFileName = (url) => {\n      const arrName = url.split(\"/\");\n      return arrName[arrName.length - 1];\n    };\n    const decodeName = (fileName) => {\n      const endIndex = fileName.lastIndexOf(\".\");\n      // 转码文件名, 上传的文件用decodeURIComponent转汉字\n      return (\n        decodeURIComponent(fileName.slice(0, endIndex)) +\n        fileName.slice(endIndex)\n      );\n    };\n    return fileDataList.reduce((zipHandler, file, index) => {\n      zipHandler.file(decodeName(getFileName(urlList[index])), file, {\n        binary: true,\n      }); // 逐个添加文件\n      return zipHandler;\n    }, new JSZip());\n  };\n  const downloadCore = async (imgList, zipName) => {\n    Promise.all(imgList.map(getFile))\n      .then(zipFile(imgList))\n      .then((zip) =>\n        zip\n          .generateAsync({ type: \"blob\" })\n          .then(async (content) => FileSaver.saveAs(content, zipName))\n      );\n  };\n  return downloadCore(urlList, fileName);\n}\n```\n\n## 细节\n\n### 流程\n\nimgList -> 并发请求 -> fileList -> zip all File[JSZip] -> download file[`File saver`]\n\n### 原理\n\n- 依赖的 npm package: `JSZip, FileSaver`\n- getFile：封装 xhr 请求为 Promise，设置返回值类型为`blob`\n- zipFile：使用`JSZip：zip.file()` 挨个添加图片到 zip 实例\n- 调用`JSZip: generateAsync`生成 blob 类型数据，并使用 FileSaver 进行保存\n","source":"_posts/utils-imgList2zip.md","raw":"---\ntitle: 图片批量压缩下载\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2020/9/8\n---\n\n## source code\n\n```js\nfunction downloadImgList(urlList, fileName) {\n  const getFile = (url) =>\n    new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      // unique sign 解决 read from disk\n      url = url + `?r=${Math.random()}`;\n      xhr.open(\"GET\", url, true);\n      xhr.responseType = \"blob\";\n      xhr.onload = () =>\n        xhr.status === 200 ? resolve(xhr.response) : resolve();\n      xhr.send();\n    });\n  const zipFile = (urlList) => (fileDataList) => {\n    const getFileName = (url) => {\n      const arrName = url.split(\"/\");\n      return arrName[arrName.length - 1];\n    };\n    const decodeName = (fileName) => {\n      const endIndex = fileName.lastIndexOf(\".\");\n      // 转码文件名, 上传的文件用decodeURIComponent转汉字\n      return (\n        decodeURIComponent(fileName.slice(0, endIndex)) +\n        fileName.slice(endIndex)\n      );\n    };\n    return fileDataList.reduce((zipHandler, file, index) => {\n      zipHandler.file(decodeName(getFileName(urlList[index])), file, {\n        binary: true,\n      }); // 逐个添加文件\n      return zipHandler;\n    }, new JSZip());\n  };\n  const downloadCore = async (imgList, zipName) => {\n    Promise.all(imgList.map(getFile))\n      .then(zipFile(imgList))\n      .then((zip) =>\n        zip\n          .generateAsync({ type: \"blob\" })\n          .then(async (content) => FileSaver.saveAs(content, zipName))\n      );\n  };\n  return downloadCore(urlList, fileName);\n}\n```\n\n## 细节\n\n### 流程\n\nimgList -> 并发请求 -> fileList -> zip all File[JSZip] -> download file[`File saver`]\n\n### 原理\n\n- 依赖的 npm package: `JSZip, FileSaver`\n- getFile：封装 xhr 请求为 Promise，设置返回值类型为`blob`\n- zipFile：使用`JSZip：zip.file()` 挨个添加图片到 zip 实例\n- 调用`JSZip: generateAsync`生成 blob 类型数据，并使用 FileSaver 进行保存\n","slug":"utils-imgList2zip","published":1,"updated":"2021-04-22T08:22:00.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kw0073gosw2lye4drv","content":"<h2 id=\"source-code\"><a href=\"#source-code\" class=\"headerlink\" title=\"source code\"></a>source code</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadImgList</span>(<span class=\"params\">urlList, fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> getFile = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">      <span class=\"comment\">// unique sign 解决 read from disk</span></span><br><span class=\"line\">      url = url + <span class=\"string\">`?r=<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>;</span><br><span class=\"line\">      xhr.open(<span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">      xhr.responseType = <span class=\"string\">\"blob\"</span>;</span><br><span class=\"line\">      xhr.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        xhr.status === <span class=\"number\">200</span> ? resolve(xhr.response) : resolve();</span><br><span class=\"line\">      xhr.send();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> zipFile = <span class=\"function\">(<span class=\"params\">urlList</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">fileDataList</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getFileName = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> arrName = url.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arrName[arrName.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decodeName = <span class=\"function\">(<span class=\"params\">fileName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> endIndex = fileName.lastIndexOf(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 转码文件名, 上传的文件用decodeURIComponent转汉字</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"built_in\">decodeURIComponent</span>(fileName.slice(<span class=\"number\">0</span>, endIndex)) +</span><br><span class=\"line\">        fileName.slice(endIndex)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fileDataList.reduce(<span class=\"function\">(<span class=\"params\">zipHandler, file, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      zipHandler.file(decodeName(getFileName(urlList[index])), file, &#123;</span><br><span class=\"line\">        binary: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;); <span class=\"comment\">// 逐个添加文件</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> zipHandler;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">new</span> JSZip());</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> downloadCore = <span class=\"keyword\">async</span> (imgList, zipName) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all(imgList.map(getFile))</span><br><span class=\"line\">      .then(zipFile(imgList))</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">zip</span>) =&gt;</span></span><br><span class=\"line\">        zip</span><br><span class=\"line\">          .generateAsync(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"blob\"</span> &#125;)</span><br><span class=\"line\">          .then(<span class=\"keyword\">async</span> (content) =&gt; FileSaver.saveAs(content, zipName))</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> downloadCore(urlList, fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h2><h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>imgList -&gt; 并发请求 -&gt; fileList -&gt; zip all File[JSZip] -&gt; download file[<code>File saver</code>]</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><ul>\n<li>依赖的 npm package: <code>JSZip, FileSaver</code></li>\n<li>getFile：封装 xhr 请求为 Promise，设置返回值类型为<code>blob</code></li>\n<li>zipFile：使用<code>JSZip：zip.file()</code> 挨个添加图片到 zip 实例</li>\n<li>调用<code>JSZip: generateAsync</code>生成 blob 类型数据，并使用 FileSaver 进行保存</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"source-code\"><a href=\"#source-code\" class=\"headerlink\" title=\"source code\"></a>source code</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadImgList</span>(<span class=\"params\">urlList, fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> getFile = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">      <span class=\"comment\">// unique sign 解决 read from disk</span></span><br><span class=\"line\">      url = url + <span class=\"string\">`?r=<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span>`</span>;</span><br><span class=\"line\">      xhr.open(<span class=\"string\">\"GET\"</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">      xhr.responseType = <span class=\"string\">\"blob\"</span>;</span><br><span class=\"line\">      xhr.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span></span><br><span class=\"line\">        xhr.status === <span class=\"number\">200</span> ? resolve(xhr.response) : resolve();</span><br><span class=\"line\">      xhr.send();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> zipFile = <span class=\"function\">(<span class=\"params\">urlList</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">fileDataList</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> getFileName = <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> arrName = url.split(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arrName[arrName.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> decodeName = <span class=\"function\">(<span class=\"params\">fileName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> endIndex = fileName.lastIndexOf(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 转码文件名, 上传的文件用decodeURIComponent转汉字</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"built_in\">decodeURIComponent</span>(fileName.slice(<span class=\"number\">0</span>, endIndex)) +</span><br><span class=\"line\">        fileName.slice(endIndex)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fileDataList.reduce(<span class=\"function\">(<span class=\"params\">zipHandler, file, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      zipHandler.file(decodeName(getFileName(urlList[index])), file, &#123;</span><br><span class=\"line\">        binary: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;); <span class=\"comment\">// 逐个添加文件</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> zipHandler;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">new</span> JSZip());</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> downloadCore = <span class=\"keyword\">async</span> (imgList, zipName) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.all(imgList.map(getFile))</span><br><span class=\"line\">      .then(zipFile(imgList))</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">zip</span>) =&gt;</span></span><br><span class=\"line\">        zip</span><br><span class=\"line\">          .generateAsync(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"blob\"</span> &#125;)</span><br><span class=\"line\">          .then(<span class=\"keyword\">async</span> (content) =&gt; FileSaver.saveAs(content, zipName))</span><br><span class=\"line\">      );</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> downloadCore(urlList, fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h2><h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><p>imgList -&gt; 并发请求 -&gt; fileList -&gt; zip all File[JSZip] -&gt; download file[<code>File saver</code>]</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><ul>\n<li>依赖的 npm package: <code>JSZip, FileSaver</code></li>\n<li>getFile：封装 xhr 请求为 Promise，设置返回值类型为<code>blob</code></li>\n<li>zipFile：使用<code>JSZip：zip.file()</code> 挨个添加图片到 zip 实例</li>\n<li>调用<code>JSZip: generateAsync</code>生成 blob 类型数据，并使用 FileSaver 进行保存</li>\n</ul>\n"},{"title":"树结构 字段映射与丰富","toc":true,"date":"2021-12-16T16:00:00.000Z","_content":"\n前端目录树非常通用，一般结构为\n\n```ts\ntype TreeNode = {\n  id: string;\n  label: string;\n  children?: TreeNode[];\n  [key: string]: any;\n};\ntype TreeList = TreeNode<unknown>[];\n```\n\n这篇文章提供了两个 util 处理 TreeNode 特定 key 的映射与额外 key 丰富，从而实现前端展现树与后端存储树的桥接。\n\n<!-- more -->\n\n### dfs\n\ntree 的遍历，需要使用基本的深度优先遍历，基本结构如下:\n\n```ts\nconst treeLoop = (treeNode: TreeNode) => {\n  const { children } = treeNode;\n  // do something here\n  if (children) {\n    children.forEach(treeLoop);\n  }\n};\n```\n\n### key 映射\n\n```ts\nconst treeDataMock = [\n  {\n    title: \"parent 0\",\n    key: \"0-0\",\n    children: [\n      { title: \"leaf 0-0\", key: \"0-0-0\", isLeaf: true },\n      { title: \"leaf 0-1\", key: \"0-0-1\", isLeaf: true },\n    ],\n  },\n  {\n    title: \"parent 1\",\n    key: \"0-1\",\n    children: [\n      { title: \"leaf 1-0\", key: \"0-1-0\", isLeaf: true },\n      { title: \"leaf 1-1\", key: \"0-1-1\", isLeaf: true },\n    ],\n  },\n];\n\ntype TreeNodeProps = {\n  title: string;\n  key: string;\n  children: any;\n  [key: string]: any;\n};\n// 替换 原有树结构的key 和 value 为特定 key value\nconst treeDataMapping = (\n  originDef: TreeNodeProps,\n  mappedDef: TreeNodeProps,\n  treeData: TreeNodeProps[]\n) => {\n  const {\n    title: originTitle,\n    key: originKey,\n    children: originChildren,\n  } = originDef;\n  const {\n    title: mappedTitle,\n    key: mappedKey,\n    children: mappedChildren,\n  } = mappedDef;\n  return treeData?.map(mapCore);\n\n  function mapCore(item: TreeNodeProps) {\n    const newNode = {\n      [mappedTitle]: item[originTitle],\n      [mappedKey]: item[originKey],\n    };\n    return item?.[originChildren] instanceof Array\n      ? {\n          ...newNode,\n          [mappedChildren]: item[originChildren].map(mapCore),\n        }\n      : { ...newNode, [mappedChildren]: [] };\n  }\n};\n\nconsole.log(\n  treeDataMapping(\n    { title: \"title\", key: \"key\", children: \"children\" },\n    { title: \"areaName\", key: \"id\", children: \"children\" },\n    treeDataMock\n  )\n);\n```\n\n### TreeNode key 丰富\n\n```ts\n/**\n * 将特定的key value 添加到树结构中\n */\nexport const decorateTreeData = curry(\n  (\n    childrenKey: string,\n    decoratorFn: (item: TreeNodeProps) => object,\n    treeData: TreeNodeProps[]\n  ) => {\n    return treeData?.map(decorateCore);\n    function decorateCore(item: TreeNodeProps) {\n      return {\n        ...item,\n        ...decoratorFn(item),\n        [childrenKey]:\n          item?.[childrenKey] instanceof Array\n            ? item?.[childrenKey].map(decorateCore)\n            : [],\n      };\n    }\n  }\n);\n```\n\n### wrap up !\n\n借助 ramda 提供的 pipe 方法，可以实现以上两个函数的组合，实现树结构的映射与丰富。\n\n> 此处的 pipe 是 ramda 的函数组合，可以查看 [ramda 文档](https://ramdajs.com/docs/#pipe)\n> 此处的 curry 是 ramda 的函数柯里化，可以查看 [ramda 文档](https://ramdajs.com/docs/#curry)\n> 此处算法的复杂度可以认为是 O(n)，因为每个节点都会被遍历一次，但是每个节点的子节点只会被遍历一次，因为是递归，所以复杂度是 O(n),\n> mapTreeProps O(n), decorateTreeData O(n) -> 2O(n) -> O(n)\n> 此处的 mapTreeProps 和 decorateTreeData 可以放在一起做，但如果对性能要求不是很高，拆开更方便作为 util 使用。\n\n```ts\nconst markNodeAsLeaf = (node) =>\n  /*some judgement*/ validator(node) ? { isLeaf: true } : {};\nconst constructTree = pipe(\n  mapTreeProps(\n    { title: \"areaName\", key: \"id\", children: \"children\" },\n    { title: \"title\", key: \"key\", children: \"children\" }\n  ),\n  decorateTreeData(\"children\", markNodeAsLeaf)\n);\n```\n\n```js\nconst originTree = {\n  areaName: \"1\",\n  id: \"1-id\",\n  children: [\n    {\n      areaName: \"1-1\",\n      id: \"1-1-id\",\n    },\n  ],\n};\n// ------- transfer to -------\nconst originTree = {\n  title: \"1\",\n  key: \"1-id\",\n  isLeaf: false,\n  children: [\n    {\n      title: \"1-1\",\n      key: \"1-1-id\",\n      isLeaf: true,\n    },\n  ],\n};\n```\n","source":"_posts/utils-tree-map.md","raw":"---\ntitle: 树结构 字段映射与丰富\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2021/12/17\n---\n\n前端目录树非常通用，一般结构为\n\n```ts\ntype TreeNode = {\n  id: string;\n  label: string;\n  children?: TreeNode[];\n  [key: string]: any;\n};\ntype TreeList = TreeNode<unknown>[];\n```\n\n这篇文章提供了两个 util 处理 TreeNode 特定 key 的映射与额外 key 丰富，从而实现前端展现树与后端存储树的桥接。\n\n<!-- more -->\n\n### dfs\n\ntree 的遍历，需要使用基本的深度优先遍历，基本结构如下:\n\n```ts\nconst treeLoop = (treeNode: TreeNode) => {\n  const { children } = treeNode;\n  // do something here\n  if (children) {\n    children.forEach(treeLoop);\n  }\n};\n```\n\n### key 映射\n\n```ts\nconst treeDataMock = [\n  {\n    title: \"parent 0\",\n    key: \"0-0\",\n    children: [\n      { title: \"leaf 0-0\", key: \"0-0-0\", isLeaf: true },\n      { title: \"leaf 0-1\", key: \"0-0-1\", isLeaf: true },\n    ],\n  },\n  {\n    title: \"parent 1\",\n    key: \"0-1\",\n    children: [\n      { title: \"leaf 1-0\", key: \"0-1-0\", isLeaf: true },\n      { title: \"leaf 1-1\", key: \"0-1-1\", isLeaf: true },\n    ],\n  },\n];\n\ntype TreeNodeProps = {\n  title: string;\n  key: string;\n  children: any;\n  [key: string]: any;\n};\n// 替换 原有树结构的key 和 value 为特定 key value\nconst treeDataMapping = (\n  originDef: TreeNodeProps,\n  mappedDef: TreeNodeProps,\n  treeData: TreeNodeProps[]\n) => {\n  const {\n    title: originTitle,\n    key: originKey,\n    children: originChildren,\n  } = originDef;\n  const {\n    title: mappedTitle,\n    key: mappedKey,\n    children: mappedChildren,\n  } = mappedDef;\n  return treeData?.map(mapCore);\n\n  function mapCore(item: TreeNodeProps) {\n    const newNode = {\n      [mappedTitle]: item[originTitle],\n      [mappedKey]: item[originKey],\n    };\n    return item?.[originChildren] instanceof Array\n      ? {\n          ...newNode,\n          [mappedChildren]: item[originChildren].map(mapCore),\n        }\n      : { ...newNode, [mappedChildren]: [] };\n  }\n};\n\nconsole.log(\n  treeDataMapping(\n    { title: \"title\", key: \"key\", children: \"children\" },\n    { title: \"areaName\", key: \"id\", children: \"children\" },\n    treeDataMock\n  )\n);\n```\n\n### TreeNode key 丰富\n\n```ts\n/**\n * 将特定的key value 添加到树结构中\n */\nexport const decorateTreeData = curry(\n  (\n    childrenKey: string,\n    decoratorFn: (item: TreeNodeProps) => object,\n    treeData: TreeNodeProps[]\n  ) => {\n    return treeData?.map(decorateCore);\n    function decorateCore(item: TreeNodeProps) {\n      return {\n        ...item,\n        ...decoratorFn(item),\n        [childrenKey]:\n          item?.[childrenKey] instanceof Array\n            ? item?.[childrenKey].map(decorateCore)\n            : [],\n      };\n    }\n  }\n);\n```\n\n### wrap up !\n\n借助 ramda 提供的 pipe 方法，可以实现以上两个函数的组合，实现树结构的映射与丰富。\n\n> 此处的 pipe 是 ramda 的函数组合，可以查看 [ramda 文档](https://ramdajs.com/docs/#pipe)\n> 此处的 curry 是 ramda 的函数柯里化，可以查看 [ramda 文档](https://ramdajs.com/docs/#curry)\n> 此处算法的复杂度可以认为是 O(n)，因为每个节点都会被遍历一次，但是每个节点的子节点只会被遍历一次，因为是递归，所以复杂度是 O(n),\n> mapTreeProps O(n), decorateTreeData O(n) -> 2O(n) -> O(n)\n> 此处的 mapTreeProps 和 decorateTreeData 可以放在一起做，但如果对性能要求不是很高，拆开更方便作为 util 使用。\n\n```ts\nconst markNodeAsLeaf = (node) =>\n  /*some judgement*/ validator(node) ? { isLeaf: true } : {};\nconst constructTree = pipe(\n  mapTreeProps(\n    { title: \"areaName\", key: \"id\", children: \"children\" },\n    { title: \"title\", key: \"key\", children: \"children\" }\n  ),\n  decorateTreeData(\"children\", markNodeAsLeaf)\n);\n```\n\n```js\nconst originTree = {\n  areaName: \"1\",\n  id: \"1-id\",\n  children: [\n    {\n      areaName: \"1-1\",\n      id: \"1-1-id\",\n    },\n  ],\n};\n// ------- transfer to -------\nconst originTree = {\n  title: \"1\",\n  key: \"1-id\",\n  isLeaf: false,\n  children: [\n    {\n      title: \"1-1\",\n      key: \"1-1-id\",\n      isLeaf: true,\n    },\n  ],\n};\n```\n","slug":"utils-tree-map","published":1,"updated":"2021-12-20T01:23:50.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kw0076goswhylj5xcm","content":"<p>前端目录树非常通用，一般结构为</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TreeNode = &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  label: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  children?: TreeNode[];</span><br><span class=\"line\">  [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> TreeList = TreeNode&lt;unknown&gt;[];</span><br></pre></td></tr></table></figure>\n\n<p>这篇文章提供了两个 util 处理 TreeNode 特定 key 的映射与额外 key 丰富，从而实现前端展现树与后端存储树的桥接。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"dfs\"><a href=\"#dfs\" class=\"headerlink\" title=\"dfs\"></a>dfs</h3><p>tree 的遍历，需要使用基本的深度优先遍历，基本结构如下:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeLoop = <span class=\"function\">(<span class=\"params\">treeNode: TreeNode</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; children &#125; = treeNode;</span><br><span class=\"line\">  <span class=\"comment\">// do something here</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (children) &#123;</span><br><span class=\"line\">    children.forEach(treeLoop);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"key-映射\"><a href=\"#key-映射\" class=\"headerlink\" title=\"key 映射\"></a>key 映射</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeDataMock = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"parent 0\"</span>,</span><br><span class=\"line\">    key: <span class=\"string\">\"0-0\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123; title: <span class=\"string\">\"leaf 0-0\"</span>, key: <span class=\"string\">\"0-0-0\"</span>, isLeaf: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; title: <span class=\"string\">\"leaf 0-1\"</span>, key: <span class=\"string\">\"0-0-1\"</span>, isLeaf: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"parent 1\"</span>,</span><br><span class=\"line\">    key: <span class=\"string\">\"0-1\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123; title: <span class=\"string\">\"leaf 1-0\"</span>, key: <span class=\"string\">\"0-1-0\"</span>, isLeaf: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; title: <span class=\"string\">\"leaf 1-1\"</span>, key: <span class=\"string\">\"0-1-1\"</span>, isLeaf: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TreeNodeProps = &#123;</span><br><span class=\"line\">  title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  key: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  children: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 替换 原有树结构的key 和 value 为特定 key value</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> treeDataMapping = (</span><br><span class=\"line\">  originDef: TreeNodeProps,</span><br><span class=\"line\">  mappedDef: TreeNodeProps,</span><br><span class=\"line\">  treeData: TreeNodeProps[]</span><br><span class=\"line\">) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    title: originTitle,</span><br><span class=\"line\">    key: originKey,</span><br><span class=\"line\">    children: originChildren,</span><br><span class=\"line\">  &#125; = originDef;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    title: mappedTitle,</span><br><span class=\"line\">    key: mappedKey,</span><br><span class=\"line\">    children: mappedChildren,</span><br><span class=\"line\">  &#125; = mappedDef;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> treeData?.map(mapCore);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapCore</span>(<span class=\"params\">item: TreeNodeProps</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newNode = &#123;</span><br><span class=\"line\">      [mappedTitle]: item[originTitle],</span><br><span class=\"line\">      [mappedKey]: item[originKey],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item?.[originChildren] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\">      ? &#123;</span><br><span class=\"line\">          ...newNode,</span><br><span class=\"line\">          [mappedChildren]: item[originChildren].map(mapCore),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      : &#123; ...newNode, [mappedChildren]: [] &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  treeDataMapping(</span><br><span class=\"line\">    &#123; title: <span class=\"string\">\"title\"</span>, key: <span class=\"string\">\"key\"</span>, children: <span class=\"string\">\"children\"</span> &#125;,</span><br><span class=\"line\">    &#123; title: <span class=\"string\">\"areaName\"</span>, key: <span class=\"string\">\"id\"</span>, children: <span class=\"string\">\"children\"</span> &#125;,</span><br><span class=\"line\">    treeDataMock</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TreeNode-key-丰富\"><a href=\"#TreeNode-key-丰富\" class=\"headerlink\" title=\"TreeNode key 丰富\"></a>TreeNode key 丰富</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将特定的key value 添加到树结构中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> decorateTreeData = curry(</span><br><span class=\"line\">  (</span><br><span class=\"line\">    childrenKey: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    decoratorFn: <span class=\"function\">(<span class=\"params\">item: TreeNodeProps</span>) =&gt;</span> object,</span><br><span class=\"line\">    treeData: TreeNodeProps[]</span><br><span class=\"line\">  ) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> treeData?.map(decorateCore);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorateCore</span>(<span class=\"params\">item: TreeNodeProps</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...item,</span><br><span class=\"line\">        ...decoratorFn(item),</span><br><span class=\"line\">        [childrenKey]:</span><br><span class=\"line\">          item?.[childrenKey] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\">            ? item?.[childrenKey].map(decorateCore)</span><br><span class=\"line\">            : [],</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wrap-up\"><a href=\"#wrap-up\" class=\"headerlink\" title=\"wrap up !\"></a>wrap up !</h3><p>借助 ramda 提供的 pipe 方法，可以实现以上两个函数的组合，实现树结构的映射与丰富。</p>\n<blockquote>\n<p>此处的 pipe 是 ramda 的函数组合，可以查看 <a href=\"https://ramdajs.com/docs/#pipe\" target=\"_blank\" rel=\"noopener\">ramda 文档</a><br>此处的 curry 是 ramda 的函数柯里化，可以查看 <a href=\"https://ramdajs.com/docs/#curry\" target=\"_blank\" rel=\"noopener\">ramda 文档</a><br>此处算法的复杂度可以认为是 O(n)，因为每个节点都会被遍历一次，但是每个节点的子节点只会被遍历一次，因为是递归，所以复杂度是 O(n),<br>mapTreeProps O(n), decorateTreeData O(n) -&gt; 2O(n) -&gt; O(n)<br>此处的 mapTreeProps 和 decorateTreeData 可以放在一起做，但如果对性能要求不是很高，拆开更方便作为 util 使用。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> markNodeAsLeaf = <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">/*some judgement*/</span> validator(node) ? &#123; isLeaf: <span class=\"literal\">true</span> &#125; : &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> constructTree = pipe(</span><br><span class=\"line\">  mapTreeProps(</span><br><span class=\"line\">    &#123; title: <span class=\"string\">\"areaName\"</span>, key: <span class=\"string\">\"id\"</span>, children: <span class=\"string\">\"children\"</span> &#125;,</span><br><span class=\"line\">    &#123; title: <span class=\"string\">\"title\"</span>, key: <span class=\"string\">\"key\"</span>, children: <span class=\"string\">\"children\"</span> &#125;</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  decorateTreeData(<span class=\"string\">\"children\"</span>, markNodeAsLeaf)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originTree = &#123;</span><br><span class=\"line\">  areaName: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">  id: <span class=\"string\">\"1-id\"</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      areaName: <span class=\"string\">\"1-1\"</span>,</span><br><span class=\"line\">      id: <span class=\"string\">\"1-1-id\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ------- transfer to -------</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> originTree = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">  key: <span class=\"string\">\"1-id\"</span>,</span><br><span class=\"line\">  isLeaf: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"1-1\"</span>,</span><br><span class=\"line\">      key: <span class=\"string\">\"1-1-id\"</span>,</span><br><span class=\"line\">      isLeaf: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>前端目录树非常通用，一般结构为</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TreeNode = &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  label: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  children?: TreeNode[];</span><br><span class=\"line\">  [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> TreeList = TreeNode&lt;unknown&gt;[];</span><br></pre></td></tr></table></figure>\n\n<p>这篇文章提供了两个 util 处理 TreeNode 特定 key 的映射与额外 key 丰富，从而实现前端展现树与后端存储树的桥接。</p>","more":"<h3 id=\"dfs\"><a href=\"#dfs\" class=\"headerlink\" title=\"dfs\"></a>dfs</h3><p>tree 的遍历，需要使用基本的深度优先遍历，基本结构如下:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeLoop = <span class=\"function\">(<span class=\"params\">treeNode: TreeNode</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; children &#125; = treeNode;</span><br><span class=\"line\">  <span class=\"comment\">// do something here</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (children) &#123;</span><br><span class=\"line\">    children.forEach(treeLoop);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"key-映射\"><a href=\"#key-映射\" class=\"headerlink\" title=\"key 映射\"></a>key 映射</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> treeDataMock = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"parent 0\"</span>,</span><br><span class=\"line\">    key: <span class=\"string\">\"0-0\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123; title: <span class=\"string\">\"leaf 0-0\"</span>, key: <span class=\"string\">\"0-0-0\"</span>, isLeaf: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; title: <span class=\"string\">\"leaf 0-1\"</span>, key: <span class=\"string\">\"0-0-1\"</span>, isLeaf: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"parent 1\"</span>,</span><br><span class=\"line\">    key: <span class=\"string\">\"0-1\"</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123; title: <span class=\"string\">\"leaf 1-0\"</span>, key: <span class=\"string\">\"0-1-0\"</span>, isLeaf: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; title: <span class=\"string\">\"leaf 1-1\"</span>, key: <span class=\"string\">\"0-1-1\"</span>, isLeaf: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TreeNodeProps = &#123;</span><br><span class=\"line\">  title: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  key: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  children: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">  [key: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 替换 原有树结构的key 和 value 为特定 key value</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> treeDataMapping = (</span><br><span class=\"line\">  originDef: TreeNodeProps,</span><br><span class=\"line\">  mappedDef: TreeNodeProps,</span><br><span class=\"line\">  treeData: TreeNodeProps[]</span><br><span class=\"line\">) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    title: originTitle,</span><br><span class=\"line\">    key: originKey,</span><br><span class=\"line\">    children: originChildren,</span><br><span class=\"line\">  &#125; = originDef;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    title: mappedTitle,</span><br><span class=\"line\">    key: mappedKey,</span><br><span class=\"line\">    children: mappedChildren,</span><br><span class=\"line\">  &#125; = mappedDef;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> treeData?.map(mapCore);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapCore</span>(<span class=\"params\">item: TreeNodeProps</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newNode = &#123;</span><br><span class=\"line\">      [mappedTitle]: item[originTitle],</span><br><span class=\"line\">      [mappedKey]: item[originKey],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item?.[originChildren] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\">      ? &#123;</span><br><span class=\"line\">          ...newNode,</span><br><span class=\"line\">          [mappedChildren]: item[originChildren].map(mapCore),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      : &#123; ...newNode, [mappedChildren]: [] &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  treeDataMapping(</span><br><span class=\"line\">    &#123; title: <span class=\"string\">\"title\"</span>, key: <span class=\"string\">\"key\"</span>, children: <span class=\"string\">\"children\"</span> &#125;,</span><br><span class=\"line\">    &#123; title: <span class=\"string\">\"areaName\"</span>, key: <span class=\"string\">\"id\"</span>, children: <span class=\"string\">\"children\"</span> &#125;,</span><br><span class=\"line\">    treeDataMock</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TreeNode-key-丰富\"><a href=\"#TreeNode-key-丰富\" class=\"headerlink\" title=\"TreeNode key 丰富\"></a>TreeNode key 丰富</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将特定的key value 添加到树结构中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> decorateTreeData = curry(</span><br><span class=\"line\">  (</span><br><span class=\"line\">    childrenKey: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    decoratorFn: <span class=\"function\">(<span class=\"params\">item: TreeNodeProps</span>) =&gt;</span> object,</span><br><span class=\"line\">    treeData: TreeNodeProps[]</span><br><span class=\"line\">  ) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> treeData?.map(decorateCore);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorateCore</span>(<span class=\"params\">item: TreeNodeProps</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...item,</span><br><span class=\"line\">        ...decoratorFn(item),</span><br><span class=\"line\">        [childrenKey]:</span><br><span class=\"line\">          item?.[childrenKey] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span></span><br><span class=\"line\">            ? item?.[childrenKey].map(decorateCore)</span><br><span class=\"line\">            : [],</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wrap-up\"><a href=\"#wrap-up\" class=\"headerlink\" title=\"wrap up !\"></a>wrap up !</h3><p>借助 ramda 提供的 pipe 方法，可以实现以上两个函数的组合，实现树结构的映射与丰富。</p>\n<blockquote>\n<p>此处的 pipe 是 ramda 的函数组合，可以查看 <a href=\"https://ramdajs.com/docs/#pipe\" target=\"_blank\" rel=\"noopener\">ramda 文档</a><br>此处的 curry 是 ramda 的函数柯里化，可以查看 <a href=\"https://ramdajs.com/docs/#curry\" target=\"_blank\" rel=\"noopener\">ramda 文档</a><br>此处算法的复杂度可以认为是 O(n)，因为每个节点都会被遍历一次，但是每个节点的子节点只会被遍历一次，因为是递归，所以复杂度是 O(n),<br>mapTreeProps O(n), decorateTreeData O(n) -&gt; 2O(n) -&gt; O(n)<br>此处的 mapTreeProps 和 decorateTreeData 可以放在一起做，但如果对性能要求不是很高，拆开更方便作为 util 使用。</p>\n</blockquote>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> markNodeAsLeaf = <span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">/*some judgement*/</span> validator(node) ? &#123; isLeaf: <span class=\"literal\">true</span> &#125; : &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> constructTree = pipe(</span><br><span class=\"line\">  mapTreeProps(</span><br><span class=\"line\">    &#123; title: <span class=\"string\">\"areaName\"</span>, key: <span class=\"string\">\"id\"</span>, children: <span class=\"string\">\"children\"</span> &#125;,</span><br><span class=\"line\">    &#123; title: <span class=\"string\">\"title\"</span>, key: <span class=\"string\">\"key\"</span>, children: <span class=\"string\">\"children\"</span> &#125;</span><br><span class=\"line\">  ),</span><br><span class=\"line\">  decorateTreeData(<span class=\"string\">\"children\"</span>, markNodeAsLeaf)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> originTree = &#123;</span><br><span class=\"line\">  areaName: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">  id: <span class=\"string\">\"1-id\"</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      areaName: <span class=\"string\">\"1-1\"</span>,</span><br><span class=\"line\">      id: <span class=\"string\">\"1-1-id\"</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ------- transfer to -------</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> originTree = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">  key: <span class=\"string\">\"1-id\"</span>,</span><br><span class=\"line\">  isLeaf: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      title: <span class=\"string\">\"1-1\"</span>,</span><br><span class=\"line\">      key: <span class=\"string\">\"1-1-id\"</span>,</span><br><span class=\"line\">      isLeaf: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"svgStr To Image (based on konva)","toc":true,"date":"2020-06-18T16:00:00.000Z","_content":"\n## 需求：\n\n将 svg 字符串 作为 konva-image 插入 konva 中\n流程如下 svgString -> svgEl -> base64 -> image -> konva Image\n\n## svgStr-> svgEl -> base64\n\nsvgStr -> svgEl 思路： 创建一个 div，在其内部使用 innerHTML 的方式插入 svgStr 来生成 svgEl\n\n```js\n/**\n * @description svg 生成 base64\n * @param {Element} svgEl\n */\nconst svg2Base64 = (svgEl) => {\n  const svgEl = document.createElement(\"div\");\n  svgEl.innerHTML = svgStr;\n  const s = new XMLSerializer().serializeToString(svgEl.firstElementChild);\n  return `data:image/svg+xml;base64,${window.btoa(\n    unescape(encodeURIComponent(s))\n  )}`;\n};\n```\n\n1. btoa() 从 String 对象中创建一个 base-64 编码的 ASCII 字符串，其中字符串中的每个字符都被视为一个二进制数据字节\n2. encodeURIComponent 能够转译特殊字符，如`%$/中文等`\n3. unescape() 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换.\n   > [Encoding / decoding UTF8 in javascript](http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html)\n4. unescape + encodeURIComponent 组合能够生成 utf-8 格式的字符串\n5. [在多数浏览器中，使用 btoa() 对 Unicode 字符串进行编码都会触发 InvalidCharacterError 异常。 ](https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/btoa)\n6. `window.btoa(unescape(encodeURIComponent(s)))` string -> utf-8 编码的 string -> base-64 编码的 ASCII 字符串\n\n## base64 -> image\n\n```js\nconst base64ToImageEl = (base64Str) => {\n  const image = new window.Image();\n  image.src = base64Str;\n  image.onload = () => {\n    // image -> konva Image\n  };\n};\n```\n\n## Image download(基于 konva(vue canvas 框架))\n\n```js\nfunction handleImageDownload() {\n  const stage = _getNodeRef(\"stage\");\n  const dataURL = stage.toDataURL({ pixelRatio: 3 });\n  downloadURI(dataURL, \"stage.png\");\n}\nfunction downloadURI(uri, name) {\n  var link = document.createElement(\"a\");\n  link.download = name;\n  link.href = uri;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n```\n","source":"_posts/utils-svgToImage.md","raw":"---\ntitle: svgStr To Image (based on konva)\ncategories: [前端]\ntags: [implement]\ntoc: true\ndate: 2020/6/19\n---\n\n## 需求：\n\n将 svg 字符串 作为 konva-image 插入 konva 中\n流程如下 svgString -> svgEl -> base64 -> image -> konva Image\n\n## svgStr-> svgEl -> base64\n\nsvgStr -> svgEl 思路： 创建一个 div，在其内部使用 innerHTML 的方式插入 svgStr 来生成 svgEl\n\n```js\n/**\n * @description svg 生成 base64\n * @param {Element} svgEl\n */\nconst svg2Base64 = (svgEl) => {\n  const svgEl = document.createElement(\"div\");\n  svgEl.innerHTML = svgStr;\n  const s = new XMLSerializer().serializeToString(svgEl.firstElementChild);\n  return `data:image/svg+xml;base64,${window.btoa(\n    unescape(encodeURIComponent(s))\n  )}`;\n};\n```\n\n1. btoa() 从 String 对象中创建一个 base-64 编码的 ASCII 字符串，其中字符串中的每个字符都被视为一个二进制数据字节\n2. encodeURIComponent 能够转译特殊字符，如`%$/中文等`\n3. unescape() 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换.\n   > [Encoding / decoding UTF8 in javascript](http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html)\n4. unescape + encodeURIComponent 组合能够生成 utf-8 格式的字符串\n5. [在多数浏览器中，使用 btoa() 对 Unicode 字符串进行编码都会触发 InvalidCharacterError 异常。 ](https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/btoa)\n6. `window.btoa(unescape(encodeURIComponent(s)))` string -> utf-8 编码的 string -> base-64 编码的 ASCII 字符串\n\n## base64 -> image\n\n```js\nconst base64ToImageEl = (base64Str) => {\n  const image = new window.Image();\n  image.src = base64Str;\n  image.onload = () => {\n    // image -> konva Image\n  };\n};\n```\n\n## Image download(基于 konva(vue canvas 框架))\n\n```js\nfunction handleImageDownload() {\n  const stage = _getNodeRef(\"stage\");\n  const dataURL = stage.toDataURL({ pixelRatio: 3 });\n  downloadURI(dataURL, \"stage.png\");\n}\nfunction downloadURI(uri, name) {\n  var link = document.createElement(\"a\");\n  link.download = name;\n  link.href = uri;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n```\n","slug":"utils-svgToImage","published":1,"updated":"2021-04-22T08:22:44.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kx007agosw3vw18ypy","content":"<h2 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h2><p>将 svg 字符串 作为 konva-image 插入 konva 中<br>流程如下 svgString -&gt; svgEl -&gt; base64 -&gt; image -&gt; konva Image</p>\n<h2 id=\"svgStr-gt-svgEl-gt-base64\"><a href=\"#svgStr-gt-svgEl-gt-base64\" class=\"headerlink\" title=\"svgStr-&gt; svgEl -&gt; base64\"></a>svgStr-&gt; svgEl -&gt; base64</h2><p>svgStr -&gt; svgEl 思路： 创建一个 div，在其内部使用 innerHTML 的方式插入 svgStr 来生成 svgEl</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>svg 生成 base64</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Element&#125;</span> <span class=\"variable\">svgEl</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> svg2Base64 = <span class=\"function\">(<span class=\"params\">svgEl</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> svgEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">  svgEl.innerHTML = svgStr;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> XMLSerializer().serializeToString(svgEl.firstElementChild);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`data:image/svg+xml;base64,<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.btoa(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    <span class=\"built_in\">unescape</span>(<span class=\"built_in\">encodeURIComponent</span>(s))</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  )&#125;</span>`</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>btoa() 从 String 对象中创建一个 base-64 编码的 ASCII 字符串，其中字符串中的每个字符都被视为一个二进制数据字节</li>\n<li>encodeURIComponent 能够转译特殊字符，如<code>%$/中文等</code></li>\n<li>unescape() 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换.<blockquote>\n<p><a href=\"http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\" target=\"_blank\" rel=\"noopener\">Encoding / decoding UTF8 in javascript</a></p>\n</blockquote>\n</li>\n<li>unescape + encodeURIComponent 组合能够生成 utf-8 格式的字符串</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/btoa\" target=\"_blank\" rel=\"noopener\">在多数浏览器中，使用 btoa() 对 Unicode 字符串进行编码都会触发 InvalidCharacterError 异常。 </a></li>\n<li><code>window.btoa(unescape(encodeURIComponent(s)))</code> string -&gt; utf-8 编码的 string -&gt; base-64 编码的 ASCII 字符串</li>\n</ol>\n<h2 id=\"base64-gt-image\"><a href=\"#base64-gt-image\" class=\"headerlink\" title=\"base64 -&gt; image\"></a>base64 -&gt; image</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> base64ToImageEl = <span class=\"function\">(<span class=\"params\">base64Str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.Image();</span><br><span class=\"line\">  image.src = base64Str;</span><br><span class=\"line\">  image.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// image -&gt; konva Image</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Image-download-基于-konva-vue-canvas-框架\"><a href=\"#Image-download-基于-konva-vue-canvas-框架\" class=\"headerlink\" title=\"Image download(基于 konva(vue canvas 框架))\"></a>Image download(基于 konva(vue canvas 框架))</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleImageDownload</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stage = _getNodeRef(<span class=\"string\">\"stage\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dataURL = stage.toDataURL(&#123; <span class=\"attr\">pixelRatio</span>: <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">  downloadURI(dataURL, <span class=\"string\">\"stage.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadURI</span>(<span class=\"params\">uri, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">  link.download = name;</span><br><span class=\"line\">  link.href = uri;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(link);</span><br><span class=\"line\">  link.click();</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(link);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"需求：\"><a href=\"#需求：\" class=\"headerlink\" title=\"需求：\"></a>需求：</h2><p>将 svg 字符串 作为 konva-image 插入 konva 中<br>流程如下 svgString -&gt; svgEl -&gt; base64 -&gt; image -&gt; konva Image</p>\n<h2 id=\"svgStr-gt-svgEl-gt-base64\"><a href=\"#svgStr-gt-svgEl-gt-base64\" class=\"headerlink\" title=\"svgStr-&gt; svgEl -&gt; base64\"></a>svgStr-&gt; svgEl -&gt; base64</h2><p>svgStr -&gt; svgEl 思路： 创建一个 div，在其内部使用 innerHTML 的方式插入 svgStr 来生成 svgEl</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description </span>svg 生成 base64</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;Element&#125;</span> <span class=\"variable\">svgEl</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> svg2Base64 = <span class=\"function\">(<span class=\"params\">svgEl</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> svgEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">  svgEl.innerHTML = svgStr;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> XMLSerializer().serializeToString(svgEl.firstElementChild);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`data:image/svg+xml;base64,<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.btoa(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    <span class=\"built_in\">unescape</span>(<span class=\"built_in\">encodeURIComponent</span>(s))</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">  )&#125;</span>`</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>btoa() 从 String 对象中创建一个 base-64 编码的 ASCII 字符串，其中字符串中的每个字符都被视为一个二进制数据字节</li>\n<li>encodeURIComponent 能够转译特殊字符，如<code>%$/中文等</code></li>\n<li>unescape() 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换.<blockquote>\n<p><a href=\"http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\" target=\"_blank\" rel=\"noopener\">Encoding / decoding UTF8 in javascript</a></p>\n</blockquote>\n</li>\n<li>unescape + encodeURIComponent 组合能够生成 utf-8 格式的字符串</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/btoa\" target=\"_blank\" rel=\"noopener\">在多数浏览器中，使用 btoa() 对 Unicode 字符串进行编码都会触发 InvalidCharacterError 异常。 </a></li>\n<li><code>window.btoa(unescape(encodeURIComponent(s)))</code> string -&gt; utf-8 编码的 string -&gt; base-64 编码的 ASCII 字符串</li>\n</ol>\n<h2 id=\"base64-gt-image\"><a href=\"#base64-gt-image\" class=\"headerlink\" title=\"base64 -&gt; image\"></a>base64 -&gt; image</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> base64ToImageEl = <span class=\"function\">(<span class=\"params\">base64Str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.Image();</span><br><span class=\"line\">  image.src = base64Str;</span><br><span class=\"line\">  image.onload = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// image -&gt; konva Image</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Image-download-基于-konva-vue-canvas-框架\"><a href=\"#Image-download-基于-konva-vue-canvas-框架\" class=\"headerlink\" title=\"Image download(基于 konva(vue canvas 框架))\"></a>Image download(基于 konva(vue canvas 框架))</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleImageDownload</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stage = _getNodeRef(<span class=\"string\">\"stage\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dataURL = stage.toDataURL(&#123; <span class=\"attr\">pixelRatio</span>: <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">  downloadURI(dataURL, <span class=\"string\">\"stage.png\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadURI</span>(<span class=\"params\">uri, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">  link.download = name;</span><br><span class=\"line\">  link.href = uri;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(link);</span><br><span class=\"line\">  link.click();</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(link);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"nextTick深入理解","toc":true,"date":"2021-02-21T16:00:00.000Z","_content":"\n## nextTick 在项目中的使用？\n\n将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它\n\n```jsx\n...\n'<div>{{ message }}</div>'\n...\nimport { createApp, nextTick } from \"vue\";\nconst app = createApp({\n  setup() {\n    const message = ref(\"Hello!\");\n    const changeMessage = async (newMessage) => {\n      message.value = newMessage;\n      await nextTick();\n      console.log(\"Now DOM is updated\");\n    };\n    return {\n      message,\n    };\n  },\n});\n```\n\n## nextTick 的原理\n\n**浏览器只会在一个 task 结束的最后进行一次渲染**, 浏览器的 eventloop 如下图所示:\n<img src=\"eventloop.jpeg\">\n\n图中可知，执行顺序为：`microTask` > `UI render` > `macroTask`\n\nnextTick 获取到的是 更新后的 DOM, **使用 setTimeout(function) 能实现 nextTick 的效果**。但是 setTimeout 实现 nextTick 有个问题，**两个 setTimeout 的最小间隔约为 4ms**，这就强行限制了两次渲染之间的最小时间差。\n\n**Vue 的 nextTick 通过 Promise(microTask)实现**: 因为有虚拟 DOM，所以即使在 UI 渲染前，也能够实现同样的效果，且不会限制两次渲染时间\n\n在 Vue2.5 以后的源码中, **Vue nextTick 的降级策略为: microTask(Promise) > macroTask(setImmediate) > macroTask(MessageChannel) > macroTask(setTimeout)**\n\n## 模拟实现 nextTick\n\n`setTimeout(f)`\n\n### setTimeout(f) 还有个更加广泛的用途：切分 cpu 密集型任务.\n\n假设有个任务，从 1 数到 100000000，JS 如果直接执行一个 for loop 或者 while loop 那么很大可能会直接显示：当前页面未响应。\n\n```js\nlet i = 0;\n\nlet start = Date.now();\n\nfunction count() {\n  // do a piece of the heavy job (*)\n  do {\n    i++;\n  } while (i % 1e6 != 0);\n\n  if (i == 1e9) {\n    alert(\"Done in \" + (Date.now() - start) + \"ms\");\n  } else {\n    setTimeout(count); // schedule the new call (**)\n  }\n}\n\ncount();\n```\n\n## 参考：\n\n- [Event loop: microtasks and macrotasks](https://javascript.info/event-loop)\n- [全面解析 Vue.nextTick 实现原理](https://juejin.cn/post/6844903590293684231#heading-3)\n","source":"_posts/vue-next-nextTick.md","raw":"---\ntitle: nextTick深入理解\ncategories: [前端]\ntags: [vue, implement]\ntoc: true\ndate: 2021/2/22\n---\n\n## nextTick 在项目中的使用？\n\n将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它\n\n```jsx\n...\n'<div>{{ message }}</div>'\n...\nimport { createApp, nextTick } from \"vue\";\nconst app = createApp({\n  setup() {\n    const message = ref(\"Hello!\");\n    const changeMessage = async (newMessage) => {\n      message.value = newMessage;\n      await nextTick();\n      console.log(\"Now DOM is updated\");\n    };\n    return {\n      message,\n    };\n  },\n});\n```\n\n## nextTick 的原理\n\n**浏览器只会在一个 task 结束的最后进行一次渲染**, 浏览器的 eventloop 如下图所示:\n<img src=\"eventloop.jpeg\">\n\n图中可知，执行顺序为：`microTask` > `UI render` > `macroTask`\n\nnextTick 获取到的是 更新后的 DOM, **使用 setTimeout(function) 能实现 nextTick 的效果**。但是 setTimeout 实现 nextTick 有个问题，**两个 setTimeout 的最小间隔约为 4ms**，这就强行限制了两次渲染之间的最小时间差。\n\n**Vue 的 nextTick 通过 Promise(microTask)实现**: 因为有虚拟 DOM，所以即使在 UI 渲染前，也能够实现同样的效果，且不会限制两次渲染时间\n\n在 Vue2.5 以后的源码中, **Vue nextTick 的降级策略为: microTask(Promise) > macroTask(setImmediate) > macroTask(MessageChannel) > macroTask(setTimeout)**\n\n## 模拟实现 nextTick\n\n`setTimeout(f)`\n\n### setTimeout(f) 还有个更加广泛的用途：切分 cpu 密集型任务.\n\n假设有个任务，从 1 数到 100000000，JS 如果直接执行一个 for loop 或者 while loop 那么很大可能会直接显示：当前页面未响应。\n\n```js\nlet i = 0;\n\nlet start = Date.now();\n\nfunction count() {\n  // do a piece of the heavy job (*)\n  do {\n    i++;\n  } while (i % 1e6 != 0);\n\n  if (i == 1e9) {\n    alert(\"Done in \" + (Date.now() - start) + \"ms\");\n  } else {\n    setTimeout(count); // schedule the new call (**)\n  }\n}\n\ncount();\n```\n\n## 参考：\n\n- [Event loop: microtasks and macrotasks](https://javascript.info/event-loop)\n- [全面解析 Vue.nextTick 实现原理](https://juejin.cn/post/6844903590293684231#heading-3)\n","slug":"vue-next-nextTick","published":1,"updated":"2021-04-22T08:23:24.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ky007dgoswcxzge5pb","content":"<h2 id=\"nextTick-在项目中的使用？\"><a href=\"#nextTick-在项目中的使用？\" class=\"headerlink\" title=\"nextTick 在项目中的使用？\"></a>nextTick 在项目中的使用？</h2><p>将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp, nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(&#123;</span><br><span class=\"line\">  setup() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = ref(<span class=\"string\">\"Hello!\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeMessage = <span class=\"keyword\">async</span> (newMessage) =&gt; &#123;</span><br><span class=\"line\">      message.value = newMessage;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> nextTick();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Now DOM is updated\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nextTick-的原理\"><a href=\"#nextTick-的原理\" class=\"headerlink\" title=\"nextTick 的原理\"></a>nextTick 的原理</h2><p><strong>浏览器只会在一个 task 结束的最后进行一次渲染</strong>, 浏览器的 eventloop 如下图所示:<br><img src=\"eventloop.jpeg\"></p>\n<p>图中可知，执行顺序为：<code>microTask</code> &gt; <code>UI render</code> &gt; <code>macroTask</code></p>\n<p>nextTick 获取到的是 更新后的 DOM, <strong>使用 setTimeout(function) 能实现 nextTick 的效果</strong>。但是 setTimeout 实现 nextTick 有个问题，<strong>两个 setTimeout 的最小间隔约为 4ms</strong>，这就强行限制了两次渲染之间的最小时间差。</p>\n<p><strong>Vue 的 nextTick 通过 Promise(microTask)实现</strong>: 因为有虚拟 DOM，所以即使在 UI 渲染前，也能够实现同样的效果，且不会限制两次渲染时间</p>\n<p>在 Vue2.5 以后的源码中, <strong>Vue nextTick 的降级策略为: microTask(Promise) &gt; macroTask(setImmediate) &gt; macroTask(MessageChannel) &gt; macroTask(setTimeout)</strong></p>\n<h2 id=\"模拟实现-nextTick\"><a href=\"#模拟实现-nextTick\" class=\"headerlink\" title=\"模拟实现 nextTick\"></a>模拟实现 nextTick</h2><p><code>setTimeout(f)</code></p>\n<h3 id=\"setTimeout-f-还有个更加广泛的用途：切分-cpu-密集型任务\"><a href=\"#setTimeout-f-还有个更加广泛的用途：切分-cpu-密集型任务\" class=\"headerlink\" title=\"setTimeout(f) 还有个更加广泛的用途：切分 cpu 密集型任务.\"></a>setTimeout(f) 还有个更加广泛的用途：切分 cpu 密集型任务.</h3><p>假设有个任务，从 1 数到 100000000，JS 如果直接执行一个 for loop 或者 while loop 那么很大可能会直接显示：当前页面未响应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do a piece of the heavy job (*)</span></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (i % <span class=\"number\">1e6</span> != <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done in \"</span> + (<span class=\"built_in\">Date</span>.now() - start) + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    setTimeout(count); <span class=\"comment\">// schedule the new call (**)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">count();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://javascript.info/event-loop\" target=\"_blank\" rel=\"noopener\">Event loop: microtasks and macrotasks</a></li>\n<li><a href=\"https://juejin.cn/post/6844903590293684231#heading-3\" target=\"_blank\" rel=\"noopener\">全面解析 Vue.nextTick 实现原理</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"nextTick-在项目中的使用？\"><a href=\"#nextTick-在项目中的使用？\" class=\"headerlink\" title=\"nextTick 在项目中的使用？\"></a>nextTick 在项目中的使用？</h2><p>将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">'&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;'</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp, nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = createApp(&#123;</span><br><span class=\"line\">  setup() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> message = ref(<span class=\"string\">\"Hello!\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> changeMessage = <span class=\"keyword\">async</span> (newMessage) =&gt; &#123;</span><br><span class=\"line\">      message.value = newMessage;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> nextTick();</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Now DOM is updated\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      message,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nextTick-的原理\"><a href=\"#nextTick-的原理\" class=\"headerlink\" title=\"nextTick 的原理\"></a>nextTick 的原理</h2><p><strong>浏览器只会在一个 task 结束的最后进行一次渲染</strong>, 浏览器的 eventloop 如下图所示:<br><img src=\"eventloop.jpeg\"></p>\n<p>图中可知，执行顺序为：<code>microTask</code> &gt; <code>UI render</code> &gt; <code>macroTask</code></p>\n<p>nextTick 获取到的是 更新后的 DOM, <strong>使用 setTimeout(function) 能实现 nextTick 的效果</strong>。但是 setTimeout 实现 nextTick 有个问题，<strong>两个 setTimeout 的最小间隔约为 4ms</strong>，这就强行限制了两次渲染之间的最小时间差。</p>\n<p><strong>Vue 的 nextTick 通过 Promise(microTask)实现</strong>: 因为有虚拟 DOM，所以即使在 UI 渲染前，也能够实现同样的效果，且不会限制两次渲染时间</p>\n<p>在 Vue2.5 以后的源码中, <strong>Vue nextTick 的降级策略为: microTask(Promise) &gt; macroTask(setImmediate) &gt; macroTask(MessageChannel) &gt; macroTask(setTimeout)</strong></p>\n<h2 id=\"模拟实现-nextTick\"><a href=\"#模拟实现-nextTick\" class=\"headerlink\" title=\"模拟实现 nextTick\"></a>模拟实现 nextTick</h2><p><code>setTimeout(f)</code></p>\n<h3 id=\"setTimeout-f-还有个更加广泛的用途：切分-cpu-密集型任务\"><a href=\"#setTimeout-f-还有个更加广泛的用途：切分-cpu-密集型任务\" class=\"headerlink\" title=\"setTimeout(f) 还有个更加广泛的用途：切分 cpu 密集型任务.\"></a>setTimeout(f) 还有个更加广泛的用途：切分 cpu 密集型任务.</h3><p>假设有个任务，从 1 数到 100000000，JS 如果直接执行一个 for loop 或者 while loop 那么很大可能会直接显示：当前页面未响应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// do a piece of the heavy job (*)</span></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (i % <span class=\"number\">1e6</span> != <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"Done in \"</span> + (<span class=\"built_in\">Date</span>.now() - start) + <span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    setTimeout(count); <span class=\"comment\">// schedule the new call (**)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">count();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://javascript.info/event-loop\" target=\"_blank\" rel=\"noopener\">Event loop: microtasks and macrotasks</a></li>\n<li><a href=\"https://juejin.cn/post/6844903590293684231#heading-3\" target=\"_blank\" rel=\"noopener\">全面解析 Vue.nextTick 实现原理</a></li>\n</ul>\n"},{"title":"Vue3 reactivity 解析","toc":true,"date":"2021-02-19T16:00:00.000Z","_content":"\n## Vue3 响应式流程\n\n1. 将待响应式的对象传入 reactive 函数，进行 proxy 代理，主要为 get 和 set\n2. 为 effect 函数传入对应的回调方法，effect 函数会在初始化的时候执行一次，触发 proxy 的 get 操作，触发 track 操作，对当前依赖进行收集\n\n3. 对响应式数据进行 set 操作触发 trigger 操作，执行对应的 effect 列表\n\n数据结构：\n<img src=\"data-structure.jpeg\" />\n\n## 代码实现\n\n### reactive 功能\n\n> reactive 主要是代理对象，实现响应式\n> reactive: 使用 proxy 代理传入的对象\n\n```js\nfunction reactive(target) {\n  // 1. 判断是否为对象，proxy 只能代理对象\n  if (!isObject(target)) return target;\n  const proxy = new Proxy(target, {\n    get,\n    set,\n  });\n  return proxy;\n}\n```\n\nget 操作：主要为依赖收集，触发 track 功能\n\n```js\nlet targetMap = new WeakMap();\nfunction get(target, key, receiver) {\n  const res = Reflect.get(target, key, receiver);\n  // 依赖收集\n  track(target, key);\n  // proxy 只代理了当前层的key，如果key 对应的value 是嵌套的，那么需要进行对应的依赖收集\n  if (isObject(res)) {\n    reactive(res);\n  }\n  return res;\n}\nfunction track(object, key) {\n  // 如果没有d副作用函数，则不进行依赖收集\n  if (!activeEffect) {\n    return;\n  }\n  // 有副作用函数需要将副作用函数和当前对象的具体key相互关联\n  // 1.按照对象初始化分组\n  let depsMap = targetMap.get(object);\n  if (!depsMap) {\n    targetMap.set(object, (depsMap = new Map()));\n  }\n  let dep = depsMap.get(key);\n  if (!dep) {\n    depsMap.set(key, (dep = new Set()));\n  }\n  //2. key <-> Array<Effect>\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n    activeEffect.deps.push(dep);\n  }\n}\n```\n\nset 操作：触发副作用函数列表\n\n```js\nfunction set(target, key, value, receiver) {\n  const result = Reflect.set(target, key, value, receiver);\n  trigger(target, key);\n  return result;\n}\n\nfunction trigger(target, key) {\n  const depsMap = targetMap.get(target);\n  if (!depsMap.get(key)) {\n    // 从没有被track\n    return;\n  }\n  const effects = new Set();\n  // 将所有的非 activeEffect 加入到等待执行队列中\n  const add = (effectsToAdd) => {\n    if (!effectsToAdd) return;\n    effectsToAdd.forEach((effect) => {\n      if (effect !== activeEffect) {\n        // question 为什么不能是activeEffect. ans: 参考例1情况，如果不排除activeEffect，就会循环执行trigger\n        effects.add(effect);\n      }\n    });\n  };\n\n  // 将depsMap中 key 对应的effect 复制一份，放到等待执行队列中\n  if (key !== void 0) {\n    add(depsMap.get(key));\n  }\n  //执行队列\n  effects.forEach((effect) => effect());\n}\n```\n\n## effect 功能\n\n> effect 是副作用函数，与 vue2 的 Watcher 功能相同，主要为双向绑定触发后执行的函数\n\n```js\nactiveEffect = undefined;\nfunction effect(fn) {\n  const effect = createReactiveEffect(fn);\n  effect();\n  return effect;\n  function createReactiveEffect(fn) {\n    const effect = function reactiveEffect() {\n      try {\n        activeEffect = effect;\n        return fn();\n      } finally {\n        activeEffect = undefined;\n      }\n    };\n    effect.deps = [];\n    return effect;\n  }\n}\n```\n\n完整代码:[✈️ 传送门](https://github.com/shancw96/tech-basis/blob/master/sourceCode_implement/Vue3/reactivity/index.js)\n","source":"_posts/vue-next-reactivity.md","raw":"---\ntitle: Vue3 reactivity 解析\ncategories: [前端]\ntags: [implement, vue]\ntoc: true\ndate: 2021/2/20\n---\n\n## Vue3 响应式流程\n\n1. 将待响应式的对象传入 reactive 函数，进行 proxy 代理，主要为 get 和 set\n2. 为 effect 函数传入对应的回调方法，effect 函数会在初始化的时候执行一次，触发 proxy 的 get 操作，触发 track 操作，对当前依赖进行收集\n\n3. 对响应式数据进行 set 操作触发 trigger 操作，执行对应的 effect 列表\n\n数据结构：\n<img src=\"data-structure.jpeg\" />\n\n## 代码实现\n\n### reactive 功能\n\n> reactive 主要是代理对象，实现响应式\n> reactive: 使用 proxy 代理传入的对象\n\n```js\nfunction reactive(target) {\n  // 1. 判断是否为对象，proxy 只能代理对象\n  if (!isObject(target)) return target;\n  const proxy = new Proxy(target, {\n    get,\n    set,\n  });\n  return proxy;\n}\n```\n\nget 操作：主要为依赖收集，触发 track 功能\n\n```js\nlet targetMap = new WeakMap();\nfunction get(target, key, receiver) {\n  const res = Reflect.get(target, key, receiver);\n  // 依赖收集\n  track(target, key);\n  // proxy 只代理了当前层的key，如果key 对应的value 是嵌套的，那么需要进行对应的依赖收集\n  if (isObject(res)) {\n    reactive(res);\n  }\n  return res;\n}\nfunction track(object, key) {\n  // 如果没有d副作用函数，则不进行依赖收集\n  if (!activeEffect) {\n    return;\n  }\n  // 有副作用函数需要将副作用函数和当前对象的具体key相互关联\n  // 1.按照对象初始化分组\n  let depsMap = targetMap.get(object);\n  if (!depsMap) {\n    targetMap.set(object, (depsMap = new Map()));\n  }\n  let dep = depsMap.get(key);\n  if (!dep) {\n    depsMap.set(key, (dep = new Set()));\n  }\n  //2. key <-> Array<Effect>\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n    activeEffect.deps.push(dep);\n  }\n}\n```\n\nset 操作：触发副作用函数列表\n\n```js\nfunction set(target, key, value, receiver) {\n  const result = Reflect.set(target, key, value, receiver);\n  trigger(target, key);\n  return result;\n}\n\nfunction trigger(target, key) {\n  const depsMap = targetMap.get(target);\n  if (!depsMap.get(key)) {\n    // 从没有被track\n    return;\n  }\n  const effects = new Set();\n  // 将所有的非 activeEffect 加入到等待执行队列中\n  const add = (effectsToAdd) => {\n    if (!effectsToAdd) return;\n    effectsToAdd.forEach((effect) => {\n      if (effect !== activeEffect) {\n        // question 为什么不能是activeEffect. ans: 参考例1情况，如果不排除activeEffect，就会循环执行trigger\n        effects.add(effect);\n      }\n    });\n  };\n\n  // 将depsMap中 key 对应的effect 复制一份，放到等待执行队列中\n  if (key !== void 0) {\n    add(depsMap.get(key));\n  }\n  //执行队列\n  effects.forEach((effect) => effect());\n}\n```\n\n## effect 功能\n\n> effect 是副作用函数，与 vue2 的 Watcher 功能相同，主要为双向绑定触发后执行的函数\n\n```js\nactiveEffect = undefined;\nfunction effect(fn) {\n  const effect = createReactiveEffect(fn);\n  effect();\n  return effect;\n  function createReactiveEffect(fn) {\n    const effect = function reactiveEffect() {\n      try {\n        activeEffect = effect;\n        return fn();\n      } finally {\n        activeEffect = undefined;\n      }\n    };\n    effect.deps = [];\n    return effect;\n  }\n}\n```\n\n完整代码:[✈️ 传送门](https://github.com/shancw96/tech-basis/blob/master/sourceCode_implement/Vue3/reactivity/index.js)\n","slug":"vue-next-reactivity","published":1,"updated":"2021-04-22T08:23:34.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7ky007hgosw3ivu1cc2","content":"<h2 id=\"Vue3-响应式流程\"><a href=\"#Vue3-响应式流程\" class=\"headerlink\" title=\"Vue3 响应式流程\"></a>Vue3 响应式流程</h2><ol>\n<li><p>将待响应式的对象传入 reactive 函数，进行 proxy 代理，主要为 get 和 set</p>\n</li>\n<li><p>为 effect 函数传入对应的回调方法，effect 函数会在初始化的时候执行一次，触发 proxy 的 get 操作，触发 track 操作，对当前依赖进行收集</p>\n</li>\n<li><p>对响应式数据进行 set 操作触发 trigger 操作，执行对应的 effect 列表</p>\n</li>\n</ol>\n<p>数据结构：<br><img src=\"data-structure.jpeg\" /></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"reactive-功能\"><a href=\"#reactive-功能\" class=\"headerlink\" title=\"reactive 功能\"></a>reactive 功能</h3><blockquote>\n<p>reactive 主要是代理对象，实现响应式<br>reactive: 使用 proxy 代理传入的对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactive</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 判断是否为对象，proxy 只能代理对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObject(target)) <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return proxy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>get 操作：主要为依赖收集，触发 track 功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> targetMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">  <span class=\"comment\">// 依赖收集</span></span><br><span class=\"line\">  track(target, key);</span><br><span class=\"line\">  <span class=\"comment\">// proxy 只代理了当前层的key，如果key 对应的value 是嵌套的，那么需要进行对应的依赖收集</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isObject(res)) &#123;</span><br><span class=\"line\">    reactive(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span>(<span class=\"params\">object, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有d副作用函数，则不进行依赖收集</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!activeEffect) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 有副作用函数需要将副作用函数和当前对象的具体key相互关联</span></span><br><span class=\"line\">  <span class=\"comment\">// 1.按照对象初始化分组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> depsMap = targetMap.get(object);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!depsMap) &#123;</span><br><span class=\"line\">    targetMap.set(object, (depsMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dep = depsMap.get(key);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dep) &#123;</span><br><span class=\"line\">    depsMap.set(key, (dep = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//2. key &lt;-&gt; Array&lt;Effect&gt;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dep.has(activeEffect)) &#123;</span><br><span class=\"line\">    dep.add(activeEffect);</span><br><span class=\"line\">    activeEffect.deps.push(dep);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>set 操作：触发副作用函数列表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\">target, key, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver);</span><br><span class=\"line\">  trigger(target, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> depsMap = targetMap.get(target);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!depsMap.get(key)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从没有被track</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> effects = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 将所有的非 activeEffect 加入到等待执行队列中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">effectsToAdd</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!effectsToAdd) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    effectsToAdd.forEach(<span class=\"function\">(<span class=\"params\">effect</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (effect !== activeEffect) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// question 为什么不能是activeEffect. ans: 参考例1情况，如果不排除activeEffect，就会循环执行trigger</span></span><br><span class=\"line\">        effects.add(effect);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将depsMap中 key 对应的effect 复制一份，放到等待执行队列中</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key !== <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    add(depsMap.get(key));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//执行队列</span></span><br><span class=\"line\">  effects.forEach(<span class=\"function\">(<span class=\"params\">effect</span>) =&gt;</span> effect());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"effect-功能\"><a href=\"#effect-功能\" class=\"headerlink\" title=\"effect 功能\"></a>effect 功能</h2><blockquote>\n<p>effect 是副作用函数，与 vue2 的 Watcher 功能相同，主要为双向绑定触发后执行的函数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activeEffect = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">effect</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> effect = createReactiveEffect(fn);</span><br><span class=\"line\">  effect();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createReactiveEffect</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> effect = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveEffect</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        activeEffect = effect;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        activeEffect = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    effect.deps = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整代码:<a href=\"https://github.com/shancw96/tech-basis/blob/master/sourceCode_implement/Vue3/reactivity/index.js\" target=\"_blank\" rel=\"noopener\">✈️ 传送门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue3-响应式流程\"><a href=\"#Vue3-响应式流程\" class=\"headerlink\" title=\"Vue3 响应式流程\"></a>Vue3 响应式流程</h2><ol>\n<li><p>将待响应式的对象传入 reactive 函数，进行 proxy 代理，主要为 get 和 set</p>\n</li>\n<li><p>为 effect 函数传入对应的回调方法，effect 函数会在初始化的时候执行一次，触发 proxy 的 get 操作，触发 track 操作，对当前依赖进行收集</p>\n</li>\n<li><p>对响应式数据进行 set 操作触发 trigger 操作，执行对应的 effect 列表</p>\n</li>\n</ol>\n<p>数据结构：<br><img src=\"data-structure.jpeg\" /></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><h3 id=\"reactive-功能\"><a href=\"#reactive-功能\" class=\"headerlink\" title=\"reactive 功能\"></a>reactive 功能</h3><blockquote>\n<p>reactive 主要是代理对象，实现响应式<br>reactive: 使用 proxy 代理传入的对象</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactive</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1. 判断是否为对象，proxy 只能代理对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObject(target)) <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  return proxy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>get 操作：主要为依赖收集，触发 track 功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> targetMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">target, key, receiver</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"built_in\">Reflect</span>.get(target, key, receiver);</span><br><span class=\"line\">  <span class=\"comment\">// 依赖收集</span></span><br><span class=\"line\">  track(target, key);</span><br><span class=\"line\">  <span class=\"comment\">// proxy 只代理了当前层的key，如果key 对应的value 是嵌套的，那么需要进行对应的依赖收集</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isObject(res)) &#123;</span><br><span class=\"line\">    reactive(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span>(<span class=\"params\">object, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有d副作用函数，则不进行依赖收集</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!activeEffect) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 有副作用函数需要将副作用函数和当前对象的具体key相互关联</span></span><br><span class=\"line\">  <span class=\"comment\">// 1.按照对象初始化分组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> depsMap = targetMap.get(object);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!depsMap) &#123;</span><br><span class=\"line\">    targetMap.set(object, (depsMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dep = depsMap.get(key);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dep) &#123;</span><br><span class=\"line\">    depsMap.set(key, (dep = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//2. key &lt;-&gt; Array&lt;Effect&gt;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!dep.has(activeEffect)) &#123;</span><br><span class=\"line\">    dep.add(activeEffect);</span><br><span class=\"line\">    activeEffect.deps.push(dep);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>set 操作：触发副作用函数列表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\">target, key, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"built_in\">Reflect</span>.set(target, key, value, receiver);</span><br><span class=\"line\">  trigger(target, key);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> depsMap = targetMap.get(target);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!depsMap.get(key)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从没有被track</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> effects = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 将所有的非 activeEffect 加入到等待执行队列中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">effectsToAdd</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!effectsToAdd) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    effectsToAdd.forEach(<span class=\"function\">(<span class=\"params\">effect</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (effect !== activeEffect) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// question 为什么不能是activeEffect. ans: 参考例1情况，如果不排除activeEffect，就会循环执行trigger</span></span><br><span class=\"line\">        effects.add(effect);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将depsMap中 key 对应的effect 复制一份，放到等待执行队列中</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key !== <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    add(depsMap.get(key));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//执行队列</span></span><br><span class=\"line\">  effects.forEach(<span class=\"function\">(<span class=\"params\">effect</span>) =&gt;</span> effect());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"effect-功能\"><a href=\"#effect-功能\" class=\"headerlink\" title=\"effect 功能\"></a>effect 功能</h2><blockquote>\n<p>effect 是副作用函数，与 vue2 的 Watcher 功能相同，主要为双向绑定触发后执行的函数</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">activeEffect = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">effect</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> effect = createReactiveEffect(fn);</span><br><span class=\"line\">  effect();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createReactiveEffect</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> effect = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveEffect</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        activeEffect = effect;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        activeEffect = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    effect.deps = [];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整代码:<a href=\"https://github.com/shancw96/tech-basis/blob/master/sourceCode_implement/Vue3/reactivity/index.js\" target=\"_blank\" rel=\"noopener\">✈️ 传送门</a></p>\n"},{"title":"nuxt client debug","toc":true,"date":"2021-05-18T16:00:00.000Z","_content":"\nnuxt 项目 debug 的简单方式。client 端 debug 的方式，对原项目的侵入性最小，只需要开启 source-map 即可\n\n<!-- more -->\n\n## Step1 开启 webpack 的 sourcemap\n\nnuxt.config.js\n\n```js\n\nextend(config, ctx) {\n      // Added Line\n      config.devtool = ctx.isClient ? 'eval-source-map' : 'inline-source-map'\n      // ...\n}\n```\n\n## Step2\n\n点击 \"Add Configuration\" ，并进行如下配置\n![](/images/nuxt/debug.png)\n\n## Step3 选择配置项目，并运行\n\n第一步：npm run dev 正常运行项目 (此项目的地址为 http://localhost)\n第二步：选择前一步的配置项，并以 debug 模式运行\n![](/images/nuxt/run-debug.jpg)\n\n## 验证\n\n因为此方法还是借助 chrome://inspect，因此如果成功浏览器会自动开启一个独立的 http://localhost(配置的项目地址)页面。\n\nwebstorm 的 debugger 控制台显示如下\n![](/images/nuxt/result.jpg)\n\n## 使用\n\n![](/images/nuxt/log.png)\n\n在期望的某一行，设置如下断点，即可实现 debugger 语句的效果。\n","source":"_posts/vue-nuxt-debug.md","raw":"---\ntitle: nuxt client debug\ncategories: [前端]\ntags: [debug, nuxt, vue]\ntoc: true\ndate: 2021/5/19\n---\n\nnuxt 项目 debug 的简单方式。client 端 debug 的方式，对原项目的侵入性最小，只需要开启 source-map 即可\n\n<!-- more -->\n\n## Step1 开启 webpack 的 sourcemap\n\nnuxt.config.js\n\n```js\n\nextend(config, ctx) {\n      // Added Line\n      config.devtool = ctx.isClient ? 'eval-source-map' : 'inline-source-map'\n      // ...\n}\n```\n\n## Step2\n\n点击 \"Add Configuration\" ，并进行如下配置\n![](/images/nuxt/debug.png)\n\n## Step3 选择配置项目，并运行\n\n第一步：npm run dev 正常运行项目 (此项目的地址为 http://localhost)\n第二步：选择前一步的配置项，并以 debug 模式运行\n![](/images/nuxt/run-debug.jpg)\n\n## 验证\n\n因为此方法还是借助 chrome://inspect，因此如果成功浏览器会自动开启一个独立的 http://localhost(配置的项目地址)页面。\n\nwebstorm 的 debugger 控制台显示如下\n![](/images/nuxt/result.jpg)\n\n## 使用\n\n![](/images/nuxt/log.png)\n\n在期望的某一行，设置如下断点，即可实现 debugger 语句的效果。\n","slug":"vue-nuxt-debug","published":1,"updated":"2021-05-19T09:32:52.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7kz007kgosw9c1k5mpy","content":"<p>nuxt 项目 debug 的简单方式。client 端 debug 的方式，对原项目的侵入性最小，只需要开启 source-map 即可</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Step1-开启-webpack-的-sourcemap\"><a href=\"#Step1-开启-webpack-的-sourcemap\" class=\"headerlink\" title=\"Step1 开启 webpack 的 sourcemap\"></a>Step1 开启 webpack 的 sourcemap</h2><p>nuxt.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">extend(config, ctx) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Added Line</span></span><br><span class=\"line\">      config.devtool = ctx.isClient ? <span class=\"string\">'eval-source-map'</span> : <span class=\"string\">'inline-source-map'</span></span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step2\"><a href=\"#Step2\" class=\"headerlink\" title=\"Step2\"></a>Step2</h2><p>点击 “Add Configuration” ，并进行如下配置<br><img src=\"/images/nuxt/debug.png\" alt=\"\"></p>\n<h2 id=\"Step3-选择配置项目，并运行\"><a href=\"#Step3-选择配置项目，并运行\" class=\"headerlink\" title=\"Step3 选择配置项目，并运行\"></a>Step3 选择配置项目，并运行</h2><p>第一步：npm run dev 正常运行项目 (此项目的地址为 <a href=\"http://localhost\" target=\"_blank\" rel=\"noopener\">http://localhost</a>)<br>第二步：选择前一步的配置项，并以 debug 模式运行<br><img src=\"/images/nuxt/run-debug.jpg\" alt=\"\"></p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>因为此方法还是借助 chrome://inspect，因此如果成功浏览器会自动开启一个独立的 <a href=\"http://localhost(配置的项目地址)页面。\" target=\"_blank\" rel=\"noopener\">http://localhost(配置的项目地址)页面。</a></p>\n<p>webstorm 的 debugger 控制台显示如下<br><img src=\"/images/nuxt/result.jpg\" alt=\"\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"/images/nuxt/log.png\" alt=\"\"></p>\n<p>在期望的某一行，设置如下断点，即可实现 debugger 语句的效果。</p>\n","site":{"data":{}},"excerpt":"<p>nuxt 项目 debug 的简单方式。client 端 debug 的方式，对原项目的侵入性最小，只需要开启 source-map 即可</p>","more":"<h2 id=\"Step1-开启-webpack-的-sourcemap\"><a href=\"#Step1-开启-webpack-的-sourcemap\" class=\"headerlink\" title=\"Step1 开启 webpack 的 sourcemap\"></a>Step1 开启 webpack 的 sourcemap</h2><p>nuxt.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">extend(config, ctx) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Added Line</span></span><br><span class=\"line\">      config.devtool = ctx.isClient ? <span class=\"string\">'eval-source-map'</span> : <span class=\"string\">'inline-source-map'</span></span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Step2\"><a href=\"#Step2\" class=\"headerlink\" title=\"Step2\"></a>Step2</h2><p>点击 “Add Configuration” ，并进行如下配置<br><img src=\"/images/nuxt/debug.png\" alt=\"\"></p>\n<h2 id=\"Step3-选择配置项目，并运行\"><a href=\"#Step3-选择配置项目，并运行\" class=\"headerlink\" title=\"Step3 选择配置项目，并运行\"></a>Step3 选择配置项目，并运行</h2><p>第一步：npm run dev 正常运行项目 (此项目的地址为 <a href=\"http://localhost\" target=\"_blank\" rel=\"noopener\">http://localhost</a>)<br>第二步：选择前一步的配置项，并以 debug 模式运行<br><img src=\"/images/nuxt/run-debug.jpg\" alt=\"\"></p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>因为此方法还是借助 chrome://inspect，因此如果成功浏览器会自动开启一个独立的 <a href=\"http://localhost(配置的项目地址)页面。\" target=\"_blank\" rel=\"noopener\">http://localhost(配置的项目地址)页面。</a></p>\n<p>webstorm 的 debugger 控制台显示如下<br><img src=\"/images/nuxt/result.jpg\" alt=\"\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"/images/nuxt/log.png\" alt=\"\"></p>\n<p>在期望的某一行，设置如下断点，即可实现 debugger 语句的效果。</p>"},{"title":"webpack - 文件---指纹，压缩","toc":true,"date":"2020-10-04T16:00:00.000Z","_content":"\n## 文件指纹\n\n- Hash: 和整个项目的构建有关，只要项目文件有修改，整个项目构建的 hash 值就会更改\n- ChunkHash: 和 webpack 打包的 chunk 有关，不同的 entry 会生成不同 chunk\n- ContentHash：根据文件内容来定义 hash，内容不变，则 contenthash 不变\n\n### js 指纹设置\n\n```js\nmodule.exports = {\n  entry: {\n    app: \"./src/app.js\",\n    search: \"./src/search.js\",\n  },\n  output: {\n    // chunkhash:8 表示开启并使用生成的hash的前8位，hash一共32位\n    filename: \"[name]_[chunkhash:8]\",\n    path: __dirname + \"/dist\",\n  },\n};\n```\n\n### css 指纹设置\n\ncss 文件指纹需要先把 css 代码生成独立的文件，然后在对其设置 hash。\n\n需要用到的包：\n\n- MiniCssExtractPlugin: 把 css 代码生成独立的文件\n\n**注意**\ncss 指纹设置 和 style-loader 冲突，不能同时使用。原因：style-loader 是将转换后的 css 直接插入 header。而 css 指纹则需要生成独立的文件\n\n### webpack.config.js\n\n```js\nconst path = require(\"path\");\nmodule.exports = {\n  entry: \"entry.js\",\n  output: {\n    filename: \"bundle.js\",\n    path: path.join(__dirname, \"dist\"),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        // use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n        use: [MiniCssExtractPlugin.loader, \"css-loader\"],\n      },\n      // less 解析\n      {\n        test: /\\.css$/,\n        // use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n        use: [MiniCssExtractPlugin.loader, \"css-loader\", \"less-loader\"],\n      },\n      // sass 解析\n      {\n        test: /\\.scss$/,\n        // use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"style-loader\",\n          \"css-loader\",\n          \"sass-loader\",\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: `[name][contenthash:8].css`,\n    }),\n  ],\n};\n```\n\n### 字体，图片文件指纹\n\n```js\nmodule.exports = {\n  entry: \"entry.js\",\n  output: {\n    filename: \"bundle.js\",\n    path: path.join(__dirname, \"dist\"),\n  },\n  module: {\n    rules: [\n      // url-loader： 大于10240的图片不做base64 转换，此时和file-loader base64转换\n      {\n        test: /\\.(png|jpg|gif|jpeg)/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: \"[name]_[hash:8].[ext]\",\n            },\n          },\n        ],\n      },\n      // file-loader：处理字体文件\n      {\n        test: /\\.(woff|woff2|eot|ttf)/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: \"[name]_[hash:8].[ext]\",\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## 压缩\n\n### JS 文件压缩\n\n内置了 uglifyjs-webpack-plugin，默认开启\n\n### CSS 压缩\n\n- cssnano css 预处理器\n- optimize-css-assets-webpack-plugin 压缩插件（基于 cssnano 预处理器）\n\n```js\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nmodule.exports = {\n  ...\n  plugins: [\n    ...,\n    new OptimizeCssAssetsPlugin({\n      assetNameRegExp: /\\.css$/g,\n      cssProcessor: require('cssnano')\n    })\n  ],\n  ...\n}\n```\n\n### HTML 压缩\n\n- html-webpack-plugin\n\n```js\nmodule.exports = {\n  ...\n  plugins: [\n    ...,\n    new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'src/index.html'),//使用的模版\n        filename: 'index.html',//生成的文件名称\n        chunks: ['index'],// 多页应用会用到？对应index chunk\n        inject: true, // 将所有的assets 注入到当前模版中\n        // 压缩配置\n        minify: {\n            html5: true,\n            collapseWhitespace: true,\n            preserveLineBreaks: false,\n            minifyCSS: true,\n            minifyJS: true,\n            removeComments: false\n        }\n    })\n  ],\n  ...\n}\n```\n","source":"_posts/webpack-learn05.md","raw":"---\ntitle: webpack - 文件---指纹，压缩\ncategories: [前端]\ntags: [webpack]\ntoc: true\ndate: 2020/10/5\n---\n\n## 文件指纹\n\n- Hash: 和整个项目的构建有关，只要项目文件有修改，整个项目构建的 hash 值就会更改\n- ChunkHash: 和 webpack 打包的 chunk 有关，不同的 entry 会生成不同 chunk\n- ContentHash：根据文件内容来定义 hash，内容不变，则 contenthash 不变\n\n### js 指纹设置\n\n```js\nmodule.exports = {\n  entry: {\n    app: \"./src/app.js\",\n    search: \"./src/search.js\",\n  },\n  output: {\n    // chunkhash:8 表示开启并使用生成的hash的前8位，hash一共32位\n    filename: \"[name]_[chunkhash:8]\",\n    path: __dirname + \"/dist\",\n  },\n};\n```\n\n### css 指纹设置\n\ncss 文件指纹需要先把 css 代码生成独立的文件，然后在对其设置 hash。\n\n需要用到的包：\n\n- MiniCssExtractPlugin: 把 css 代码生成独立的文件\n\n**注意**\ncss 指纹设置 和 style-loader 冲突，不能同时使用。原因：style-loader 是将转换后的 css 直接插入 header。而 css 指纹则需要生成独立的文件\n\n### webpack.config.js\n\n```js\nconst path = require(\"path\");\nmodule.exports = {\n  entry: \"entry.js\",\n  output: {\n    filename: \"bundle.js\",\n    path: path.join(__dirname, \"dist\"),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        // use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n        use: [MiniCssExtractPlugin.loader, \"css-loader\"],\n      },\n      // less 解析\n      {\n        test: /\\.css$/,\n        // use: [\"style-loader\", \"css-loader\", \"less-loader\"],\n        use: [MiniCssExtractPlugin.loader, \"css-loader\", \"less-loader\"],\n      },\n      // sass 解析\n      {\n        test: /\\.scss$/,\n        // use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n        use: [\n          MiniCssExtractPlugin.loader,\n          \"style-loader\",\n          \"css-loader\",\n          \"sass-loader\",\n        ],\n      },\n    ],\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: `[name][contenthash:8].css`,\n    }),\n  ],\n};\n```\n\n### 字体，图片文件指纹\n\n```js\nmodule.exports = {\n  entry: \"entry.js\",\n  output: {\n    filename: \"bundle.js\",\n    path: path.join(__dirname, \"dist\"),\n  },\n  module: {\n    rules: [\n      // url-loader： 大于10240的图片不做base64 转换，此时和file-loader base64转换\n      {\n        test: /\\.(png|jpg|gif|jpeg)/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: \"[name]_[hash:8].[ext]\",\n            },\n          },\n        ],\n      },\n      // file-loader：处理字体文件\n      {\n        test: /\\.(woff|woff2|eot|ttf)/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: \"[name]_[hash:8].[ext]\",\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## 压缩\n\n### JS 文件压缩\n\n内置了 uglifyjs-webpack-plugin，默认开启\n\n### CSS 压缩\n\n- cssnano css 预处理器\n- optimize-css-assets-webpack-plugin 压缩插件（基于 cssnano 预处理器）\n\n```js\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nmodule.exports = {\n  ...\n  plugins: [\n    ...,\n    new OptimizeCssAssetsPlugin({\n      assetNameRegExp: /\\.css$/g,\n      cssProcessor: require('cssnano')\n    })\n  ],\n  ...\n}\n```\n\n### HTML 压缩\n\n- html-webpack-plugin\n\n```js\nmodule.exports = {\n  ...\n  plugins: [\n    ...,\n    new HtmlWebpackPlugin({\n        template: path.join(__dirname, 'src/index.html'),//使用的模版\n        filename: 'index.html',//生成的文件名称\n        chunks: ['index'],// 多页应用会用到？对应index chunk\n        inject: true, // 将所有的assets 注入到当前模版中\n        // 压缩配置\n        minify: {\n            html5: true,\n            collapseWhitespace: true,\n            preserveLineBreaks: false,\n            minifyCSS: true,\n            minifyJS: true,\n            removeComments: false\n        }\n    })\n  ],\n  ...\n}\n```\n","slug":"webpack-learn05","published":1,"updated":"2022-05-30T05:32:40.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7l0007ogoswh8kfdjpm","content":"<h2 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h2><ul>\n<li>Hash: 和整个项目的构建有关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li>\n<li>ChunkHash: 和 webpack 打包的 chunk 有关，不同的 entry 会生成不同 chunk</li>\n<li>ContentHash：根据文件内容来定义 hash，内容不变，则 contenthash 不变</li>\n</ul>\n<h3 id=\"js-指纹设置\"><a href=\"#js-指纹设置\" class=\"headerlink\" title=\"js 指纹设置\"></a>js 指纹设置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">\"./src/app.js\"</span>,</span><br><span class=\"line\">    search: <span class=\"string\">\"./src/search.js\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// chunkhash:8 表示开启并使用生成的hash的前8位，hash一共32位</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"[name]_[chunkhash:8]\"</span>,</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">\"/dist\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-指纹设置\"><a href=\"#css-指纹设置\" class=\"headerlink\" title=\"css 指纹设置\"></a>css 指纹设置</h3><p>css 文件指纹需要先把 css 代码生成独立的文件，然后在对其设置 hash。</p>\n<p>需要用到的包：</p>\n<ul>\n<li>MiniCssExtractPlugin: 把 css 代码生成独立的文件</li>\n</ul>\n<p><strong>注意</strong><br>css 指纹设置 和 style-loader 冲突，不能同时使用。原因：style-loader 是将转换后的 css 直接插入 header。而 css 指纹则需要生成独立的文件</p>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">\"entry.js\"</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>,</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use: [\"style-loader\", \"css-loader\", \"less-loader\"],</span></span><br><span class=\"line\">        use: [MiniCssExtractPlugin.loader, <span class=\"string\">\"css-loader\"</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// less 解析</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use: [\"style-loader\", \"css-loader\", \"less-loader\"],</span></span><br><span class=\"line\">        use: [MiniCssExtractPlugin.loader, <span class=\"string\">\"css-loader\"</span>, <span class=\"string\">\"less-loader\"</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// sass 解析</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use: [\"style-loader\", \"css-loader\", \"sass-loader\"],</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"sass-loader\"</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">`[name][contenthash:8].css`</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字体，图片文件指纹\"><a href=\"#字体，图片文件指纹\" class=\"headerlink\" title=\"字体，图片文件指纹\"></a>字体，图片文件指纹</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">\"entry.js\"</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>,</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">// url-loader： 大于10240的图片不做base64 转换，此时和file-loader base64转换</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">\"[name]_[hash:8].[ext]\"</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// file-loader：处理字体文件</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf)/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">\"[name]_[hash:8].[ext]\"</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h2><h3 id=\"JS-文件压缩\"><a href=\"#JS-文件压缩\" class=\"headerlink\" title=\"JS 文件压缩\"></a>JS 文件压缩</h3><p>内置了 uglifyjs-webpack-plugin，默认开启</p>\n<h3 id=\"CSS-压缩\"><a href=\"#CSS-压缩\" class=\"headerlink\" title=\"CSS 压缩\"></a>CSS 压缩</h3><ul>\n<li>cssnano css 预处理器</li>\n<li>optimize-css-assets-webpack-plugin 压缩插件（基于 cssnano 预处理器）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">      assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">      cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTML-压缩\"><a href=\"#HTML-压缩\" class=\"headerlink\" title=\"HTML 压缩\"></a>HTML 压缩</h3><ul>\n<li>html-webpack-plugin</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),<span class=\"comment\">//使用的模版</span></span><br><span class=\"line\">        filename: <span class=\"string\">'index.html'</span>,<span class=\"comment\">//生成的文件名称</span></span><br><span class=\"line\">        chunks: [<span class=\"string\">'index'</span>],<span class=\"comment\">// 多页应用会用到？对应index chunk</span></span><br><span class=\"line\">        inject: <span class=\"literal\">true</span>, <span class=\"comment\">// 将所有的assets 注入到当前模版中</span></span><br><span class=\"line\">        <span class=\"comment\">// 压缩配置</span></span><br><span class=\"line\">        minify: &#123;</span><br><span class=\"line\">            html5: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            preserveLineBreaks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            removeComments: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h2><ul>\n<li>Hash: 和整个项目的构建有关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li>\n<li>ChunkHash: 和 webpack 打包的 chunk 有关，不同的 entry 会生成不同 chunk</li>\n<li>ContentHash：根据文件内容来定义 hash，内容不变，则 contenthash 不变</li>\n</ul>\n<h3 id=\"js-指纹设置\"><a href=\"#js-指纹设置\" class=\"headerlink\" title=\"js 指纹设置\"></a>js 指纹设置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">\"./src/app.js\"</span>,</span><br><span class=\"line\">    search: <span class=\"string\">\"./src/search.js\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// chunkhash:8 表示开启并使用生成的hash的前8位，hash一共32位</span></span><br><span class=\"line\">    filename: <span class=\"string\">\"[name]_[chunkhash:8]\"</span>,</span><br><span class=\"line\">    path: __dirname + <span class=\"string\">\"/dist\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-指纹设置\"><a href=\"#css-指纹设置\" class=\"headerlink\" title=\"css 指纹设置\"></a>css 指纹设置</h3><p>css 文件指纹需要先把 css 代码生成独立的文件，然后在对其设置 hash。</p>\n<p>需要用到的包：</p>\n<ul>\n<li>MiniCssExtractPlugin: 把 css 代码生成独立的文件</li>\n</ul>\n<p><strong>注意</strong><br>css 指纹设置 和 style-loader 冲突，不能同时使用。原因：style-loader 是将转换后的 css 直接插入 header。而 css 指纹则需要生成独立的文件</p>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">\"entry.js\"</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>,</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use: [\"style-loader\", \"css-loader\", \"less-loader\"],</span></span><br><span class=\"line\">        use: [MiniCssExtractPlugin.loader, <span class=\"string\">\"css-loader\"</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// less 解析</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use: [\"style-loader\", \"css-loader\", \"less-loader\"],</span></span><br><span class=\"line\">        use: [MiniCssExtractPlugin.loader, <span class=\"string\">\"css-loader\"</span>, <span class=\"string\">\"less-loader\"</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// sass 解析</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use: [\"style-loader\", \"css-loader\", \"sass-loader\"],</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          <span class=\"string\">\"style-loader\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"css-loader\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"sass-loader\"</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: <span class=\"string\">`[name][contenthash:8].css`</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字体，图片文件指纹\"><a href=\"#字体，图片文件指纹\" class=\"headerlink\" title=\"字体，图片文件指纹\"></a>字体，图片文件指纹</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">\"entry.js\"</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span>,</span><br><span class=\"line\">    path: path.join(__dirname, <span class=\"string\">\"dist\"</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      <span class=\"comment\">// url-loader： 大于10240的图片不做base64 转换，此时和file-loader base64转换</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|jpeg)/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">\"[name]_[hash:8].[ext]\"</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// file-loader：处理字体文件</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf)/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">\"[name]_[hash:8].[ext]\"</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h2><h3 id=\"JS-文件压缩\"><a href=\"#JS-文件压缩\" class=\"headerlink\" title=\"JS 文件压缩\"></a>JS 文件压缩</h3><p>内置了 uglifyjs-webpack-plugin，默认开启</p>\n<h3 id=\"CSS-压缩\"><a href=\"#CSS-压缩\" class=\"headerlink\" title=\"CSS 压缩\"></a>CSS 压缩</h3><ul>\n<li>cssnano css 预处理器</li>\n<li>optimize-css-assets-webpack-plugin 压缩插件（基于 cssnano 预处理器）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">      assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">      cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTML-压缩\"><a href=\"#HTML-压缩\" class=\"headerlink\" title=\"HTML 压缩\"></a>HTML 压缩</h3><ul>\n<li>html-webpack-plugin</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">        template: path.join(__dirname, <span class=\"string\">'src/index.html'</span>),<span class=\"comment\">//使用的模版</span></span><br><span class=\"line\">        filename: <span class=\"string\">'index.html'</span>,<span class=\"comment\">//生成的文件名称</span></span><br><span class=\"line\">        chunks: [<span class=\"string\">'index'</span>],<span class=\"comment\">// 多页应用会用到？对应index chunk</span></span><br><span class=\"line\">        inject: <span class=\"literal\">true</span>, <span class=\"comment\">// 将所有的assets 注入到当前模版中</span></span><br><span class=\"line\">        <span class=\"comment\">// 压缩配置</span></span><br><span class=\"line\">        minify: &#123;</span><br><span class=\"line\">            html5: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            preserveLineBreaks: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            minifyCSS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            minifyJS: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            removeComments: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vue 渲染器","toc":true,"date":"2021-07-23T16:00:00.000Z","_content":"\n这篇文章介绍了 vue VNode 相关的事项方式。\n\n<!--  more -->\n\n# 概览\n\nvnode\n\n普通 VNode\n\n```js\nconst elementVnode = {\n  tag: \"div\",\n};\n```\n\n组件 VNode\n\n```js\nclass MyComponent {\n  render() {\n    // render 函数产出 VNode\n    return {\n      tag: \"div\",\n    };\n  }\n}\n\nconst componentVNode = {\n  tag: MyComponent,\n};\n```\n\nrender\n\n```js\nrender(elementVnode, document.getElementById(\"app\"));\nfunction render(vnode, container) {\n  mountElement(vnode, container);\n\n  function mountElement(vnode, container) {\n    const el = document.createElement(vnode.tag);\n    container.appendChild(el);\n  }\n\n  function mountComponent(vnode, container) {\n    const instance = new vnode.tag();\n\n    instance.$vnode = instance.render();\n\n    mountElement(instance.$vnode, container);\n  }\n}\n```\n\n# VNode\n\n```js\nexport interface VNode {\n  // _isVNode 属性在上文中没有提到，它是一个始终为 true 的值，有了它，我们就可以判断一个对象是否是 VNode 对象\n  _isVNode: true\n  // el 属性在上文中也没有提到，当一个 VNode 被渲染为真实 DOM 之后，el 属性的值会引用该真实DOM\n  el: Element | null\n  flags: VNodeFlags\n  tag: string | FunctionalComponent | ComponentClass | null\n  data: VNodeData | null\n  children: VNodeChildren\n  childFlags: ChildrenFlags\n}\n```\n\n## VNode 描述 DOM\n\n### elementVNode\n\n```js\nconst elementVNode = {\n  tag: 'div',\n  data: {\n    style: {\n      width: '100px',\n      height: '100px',\n      backgroundColor: 'red'\n    }\n  },\n  children: [\n    {\n      tag: 'h1',\n      ...\n    }\n  ]\n}\n```\n\n- tag：存储标签名称\n- data：存储标签的附加信息\n  - style\n  - class\n  - 事件\n    ...\n- children: 当前标签的子节点\n\n### textVNode\n\n```js\nconst textVNode = {\n  tag: null,\n  data: null,\n  children: \"文本内容\",\n};\n```\n\n## 使用 VNode 来描述抽象内容\n\n抽象内容：组件，Fragment,Portal\n\n### 组件\n\n对于如下代码，我们并不想渲染 MyComponent 标签，而是想渲染出 MyComponent 组件\n\n```html\n<div>\n  <MyComponent />\n</div>\n```\n\n我们使用 VNode 来对其进行描述\n\n```js\nconst elementVNode = {\n  tag: \"div\",\n  data: null,\n  children: {\n    tag: MyComponent,\n    data: null,\n  },\n};\n```\n\n### Fragment 无父节点 元素 集合\n\n```html\n<template>\n  <table>\n    <tr>\n      <Columns />\n    </tr>\n  </table>\n</template>\n\n转换成\n\n<template>\n  <td></td>\n  <td></td>\n  <td></td>\n</template>\n```\n\n我们使用 VNode 对其进行描述\n\n```js\nconst Fragment = Symbol();\n\nconst fragmentVNode = {\n  tag: Fragment, // 过 Symbol 创建的唯一标识，但实际上我们更倾向于给 VNode 对象添加一个 flags 属性，用来代表该 VNode 的类型\n  data: null,\n  children: [\n    {\n      tag: \"td\",\n      data: null,\n    },\n    {\n      tag: \"td\",\n      data: null,\n    },\n    {\n      tag: \"td\",\n      data: null,\n    },\n  ],\n};\n```\n\n如上，我们把所有 td 标签都作为 fragmentVNode 的子节点，根元素并不是一个实实在在的真实 DOM，而是一个抽象的标识，即 Fragment。\n\n当渲染器在渲染 VNode 时，如果发现该 VNode 的类型是 Fragment，就只需要把该 VNode 的子节点渲染到页面。\n\n### Portal 允许将内容渲染在任何地方\n\n其应用场景是，假设你要实现一个蒙层组件 <Overlay/>，要求是该组件的 z-index 的层级最高，这样无论在哪里使用都希望它能够遮住全部内容，你可能会将其用在任何你需要蒙层的地方\n\n```html\n<template>\n  <Portal target=\"#app-root\">\n    <div class=\"overlay\"></div>\n  </Portal>\n</template>\n```\n\n```js\nconst Portal = Symbol();\nconst portalVNode = {\n  tag: Portal,\n  data: {\n    target: \"#app-root\",\n  },\n  children: {\n    tag: \"div\",\n    data: {\n      class: \"overlay\",\n    },\n  },\n};\n```\n\n## 使用 flags 作为 VNode 标识\n\n我们可以把 VNode 分成五类，分别是：html/svg 元素、组件、纯文本、Fragment 以及 Portal：\n\n```js\nconst VNodeFlags = {\n  // html 标签\n  ELEMENT_HTML: \"ELEMENT_HTML\",\n  // SVG 标签\n  ELEMENT_SVG: \"ELEMENT_SVG\",\n\n  // 普通有状态组件\n  COMPONENT_STATEFUL_NORMAL: \"COMPONENT_STATEFUL_NORMAL\",\n  // 需要被keepAlive的有状态组件\n  COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE: \"COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE\",\n  // 已经被keepAlive的有状态组件\n  COMPONENT_STATEFUL_KEPT_ALIVE: \"COMPONENT_STATEFUL_KEPT_ALIVE\",\n  // 函数式组件\n  COMPONENT_FUNCTIONAL: \"COMPONENT_FUNCTIONAL\",\n\n  // 纯文本\n  TEXT: \"TEXT\",\n  // Fragment\n  FRAGMENT: \"FRAGMENT\",\n  // Portal\n  PORTAL: \"PORTAL\",\n};\n\n// html 元素节点\nconst htmlVnode = {\n  flags: VNodeFlags.ELEMENT_HTML,\n  tag: \"div\",\n  data: null,\n};\n\n// svg 元素节点\nconst svgVnode = {\n  flags: VNodeFlags.ELEMENT_SVG,\n  tag: \"svg\",\n  data: null,\n};\n\n// 函数式组件\nconst functionalComponentVnode = {\n  flags: VNodeFlags.COMPONENT_FUNCTIONAL,\n  tag: MyFunctionalComponent,\n};\n\n// 普通的有状态组件\nconst normalComponentVnode = {\n  flags: VNodeFlags.COMPONENT_STATEFUL_NORMAL,\n  tag: MyStatefulComponent,\n};\n\n// Fragment\nconst fragmentVnode = {\n  flags: VNodeFlags.FRAGMENT,\n  // 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识\n  tag: null,\n};\n\n// Portal\nconst portalVnode = {\n  flags: VNodeFlags.PORTAL,\n  // 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识，tag 属性用来存储 Portal 的 target\n  tag: target,\n};\n```\n\n## childrenFlags\n\nchildren 的几种情况\n\n- 没有子节点\n- 只有一个子节点\n- 多个子节点\n  - 有 key\n  - 无 key\n- 不知道子节点的情况\n\n> TIP\n> 为什么 children 也需要标识呢？原因只有一个：为了优化。在后面讲解 diff 算法的章节中你将会意识到，这些信息是至关重要的。\n\n```js\nconst ChildrenFlags = {\n  // 未知的 children 类型\n  UNKNOWN_CHILDREN: 0,\n  // 没有 children\n  NO_CHILDREN: 1,\n  // children 是单个 VNode\n  SINGLE_VNODE: 1 << 1,\n\n  // children 是多个拥有 key 的 VNode\n  KEYED_VNODES: 1 << 2,\n  // children 是多个没有 key 的 VNode\n  NONE_KEYED_VNODES: 1 << 3,\n};\n// 没有子节点的 div 标签\nconst elementVNode = {\n  flags: VNodeFlags.ELEMENT_HTML,\n  tag: \"div\",\n  data: null,\n  children: null,\n  childFlags: ChildrenFlags.NO_CHILDREN,\n};\n```\n\n## h 函数：生成 VNode 对象\n\n#### 定义 flags\n\n```js\nfunction h(tag, data = null, children = null) {\n  return {\n    flags: defineFlags(tag),\n    children: defineChildren(children)\n  }\n\n\n  function defineFlags(tag) {\n    let flags = null;\n      if (typeof tag === 'string') {\n      flags = tag === 'svg' ? VNodeFlags.ELEMENT_SVG : VNodeFlags.ELEMENT_HTML;\n    } else if (tag === Fragment) {\n      flags = VNodeFlags.Fragment\n    } else if (tag === PORTAL) {\n      flags = VNodeFlags.PORTAL\n      tag = data && data.target\n    } else {\n      // 兼容 Vue2 的对象式组件\n      if (tag !== null && typeof tag === 'object') {\n        flags = tag.functional\n          ? VNodeFlags.COMPONENT_FUNCTIONAL       // 函数式组件\n          : VNodeFlags.COMPONENT_STATEFUL_NORMAL  // 有状态组件\n      } else if (typeof tag === 'function') {\n        // Vue3 的类组件\n        flags = tag.prototype && tag.prototype.render\n          ? VNodeFlags.COMPONENT_STATEFUL_NORMAL  // 有状态组件\n          : VNodeFlags.COMPONENT_FUNCTIONAL       // 函数式组件\n      }\n      return flags;\n  }\n}\n```\n\n### 确定 children 类型\n\n- children 是一个数组\n  ```js\n  h('ul', null, [\n    h('li'),\n    h('li'),\n    ...\n  ])\n  ```\n- children 是一个 VNode 对象\n\n  ```js\n  h(\"ul\", null, h(\"li\"));\n  ```\n\n- 没有 children\n\n  ```js\n  h(\"ul\", null, null);\n  ```\n\n- children 是一个普通文本\n  ```js\n  h(\"ul\", null, \"text\");\n  ```\n\n```js\nfunction defineChildren(children) {\n  let childFlags = null;\n  if (Array.isArray(children)) {\n    const { length } = children;\n    if (length === 0) {\n      // 没有 children\n      childFlags = ChildrenFlags.NO_CHILDREN;\n    } else if (length === 1) {\n      // 单个子节点\n      childFlags = ChildrenFlags.SINGLE_VNODE;\n      children = children[0];\n    } else {\n      // 多个子节点，且子节点使用key\n      childFlags = ChildrenFlags.KEYED_VNODES;\n      children = normalizeVNodes(children);\n    }\n  } else if (children == null) {\n    // 没有子节点\n    childFlags = ChildrenFlags.NO_CHILDREN;\n  } else if (children._isVNode) {\n    // 单个子节点\n    childFlags = ChildrenFlags.SINGLE_VNODE;\n  } else {\n    // 其他情况都作为文本节点处理，即单个子节点，会调用 createTextVNode 创建纯文本类型的 VNode\n    childFlags = ChildrenFlags.SINGLE_VNODE;\n    children = createTextVNode(children + \"\");\n  }\n  return childFlags;\n}\n```\n","source":"_posts/vue-render.md","raw":"---\ntitle: vue 渲染器\ncategories: []\ntags: []\ntoc: true\ndate: 2021/7/24\n---\n\n这篇文章介绍了 vue VNode 相关的事项方式。\n\n<!--  more -->\n\n# 概览\n\nvnode\n\n普通 VNode\n\n```js\nconst elementVnode = {\n  tag: \"div\",\n};\n```\n\n组件 VNode\n\n```js\nclass MyComponent {\n  render() {\n    // render 函数产出 VNode\n    return {\n      tag: \"div\",\n    };\n  }\n}\n\nconst componentVNode = {\n  tag: MyComponent,\n};\n```\n\nrender\n\n```js\nrender(elementVnode, document.getElementById(\"app\"));\nfunction render(vnode, container) {\n  mountElement(vnode, container);\n\n  function mountElement(vnode, container) {\n    const el = document.createElement(vnode.tag);\n    container.appendChild(el);\n  }\n\n  function mountComponent(vnode, container) {\n    const instance = new vnode.tag();\n\n    instance.$vnode = instance.render();\n\n    mountElement(instance.$vnode, container);\n  }\n}\n```\n\n# VNode\n\n```js\nexport interface VNode {\n  // _isVNode 属性在上文中没有提到，它是一个始终为 true 的值，有了它，我们就可以判断一个对象是否是 VNode 对象\n  _isVNode: true\n  // el 属性在上文中也没有提到，当一个 VNode 被渲染为真实 DOM 之后，el 属性的值会引用该真实DOM\n  el: Element | null\n  flags: VNodeFlags\n  tag: string | FunctionalComponent | ComponentClass | null\n  data: VNodeData | null\n  children: VNodeChildren\n  childFlags: ChildrenFlags\n}\n```\n\n## VNode 描述 DOM\n\n### elementVNode\n\n```js\nconst elementVNode = {\n  tag: 'div',\n  data: {\n    style: {\n      width: '100px',\n      height: '100px',\n      backgroundColor: 'red'\n    }\n  },\n  children: [\n    {\n      tag: 'h1',\n      ...\n    }\n  ]\n}\n```\n\n- tag：存储标签名称\n- data：存储标签的附加信息\n  - style\n  - class\n  - 事件\n    ...\n- children: 当前标签的子节点\n\n### textVNode\n\n```js\nconst textVNode = {\n  tag: null,\n  data: null,\n  children: \"文本内容\",\n};\n```\n\n## 使用 VNode 来描述抽象内容\n\n抽象内容：组件，Fragment,Portal\n\n### 组件\n\n对于如下代码，我们并不想渲染 MyComponent 标签，而是想渲染出 MyComponent 组件\n\n```html\n<div>\n  <MyComponent />\n</div>\n```\n\n我们使用 VNode 来对其进行描述\n\n```js\nconst elementVNode = {\n  tag: \"div\",\n  data: null,\n  children: {\n    tag: MyComponent,\n    data: null,\n  },\n};\n```\n\n### Fragment 无父节点 元素 集合\n\n```html\n<template>\n  <table>\n    <tr>\n      <Columns />\n    </tr>\n  </table>\n</template>\n\n转换成\n\n<template>\n  <td></td>\n  <td></td>\n  <td></td>\n</template>\n```\n\n我们使用 VNode 对其进行描述\n\n```js\nconst Fragment = Symbol();\n\nconst fragmentVNode = {\n  tag: Fragment, // 过 Symbol 创建的唯一标识，但实际上我们更倾向于给 VNode 对象添加一个 flags 属性，用来代表该 VNode 的类型\n  data: null,\n  children: [\n    {\n      tag: \"td\",\n      data: null,\n    },\n    {\n      tag: \"td\",\n      data: null,\n    },\n    {\n      tag: \"td\",\n      data: null,\n    },\n  ],\n};\n```\n\n如上，我们把所有 td 标签都作为 fragmentVNode 的子节点，根元素并不是一个实实在在的真实 DOM，而是一个抽象的标识，即 Fragment。\n\n当渲染器在渲染 VNode 时，如果发现该 VNode 的类型是 Fragment，就只需要把该 VNode 的子节点渲染到页面。\n\n### Portal 允许将内容渲染在任何地方\n\n其应用场景是，假设你要实现一个蒙层组件 <Overlay/>，要求是该组件的 z-index 的层级最高，这样无论在哪里使用都希望它能够遮住全部内容，你可能会将其用在任何你需要蒙层的地方\n\n```html\n<template>\n  <Portal target=\"#app-root\">\n    <div class=\"overlay\"></div>\n  </Portal>\n</template>\n```\n\n```js\nconst Portal = Symbol();\nconst portalVNode = {\n  tag: Portal,\n  data: {\n    target: \"#app-root\",\n  },\n  children: {\n    tag: \"div\",\n    data: {\n      class: \"overlay\",\n    },\n  },\n};\n```\n\n## 使用 flags 作为 VNode 标识\n\n我们可以把 VNode 分成五类，分别是：html/svg 元素、组件、纯文本、Fragment 以及 Portal：\n\n```js\nconst VNodeFlags = {\n  // html 标签\n  ELEMENT_HTML: \"ELEMENT_HTML\",\n  // SVG 标签\n  ELEMENT_SVG: \"ELEMENT_SVG\",\n\n  // 普通有状态组件\n  COMPONENT_STATEFUL_NORMAL: \"COMPONENT_STATEFUL_NORMAL\",\n  // 需要被keepAlive的有状态组件\n  COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE: \"COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE\",\n  // 已经被keepAlive的有状态组件\n  COMPONENT_STATEFUL_KEPT_ALIVE: \"COMPONENT_STATEFUL_KEPT_ALIVE\",\n  // 函数式组件\n  COMPONENT_FUNCTIONAL: \"COMPONENT_FUNCTIONAL\",\n\n  // 纯文本\n  TEXT: \"TEXT\",\n  // Fragment\n  FRAGMENT: \"FRAGMENT\",\n  // Portal\n  PORTAL: \"PORTAL\",\n};\n\n// html 元素节点\nconst htmlVnode = {\n  flags: VNodeFlags.ELEMENT_HTML,\n  tag: \"div\",\n  data: null,\n};\n\n// svg 元素节点\nconst svgVnode = {\n  flags: VNodeFlags.ELEMENT_SVG,\n  tag: \"svg\",\n  data: null,\n};\n\n// 函数式组件\nconst functionalComponentVnode = {\n  flags: VNodeFlags.COMPONENT_FUNCTIONAL,\n  tag: MyFunctionalComponent,\n};\n\n// 普通的有状态组件\nconst normalComponentVnode = {\n  flags: VNodeFlags.COMPONENT_STATEFUL_NORMAL,\n  tag: MyStatefulComponent,\n};\n\n// Fragment\nconst fragmentVnode = {\n  flags: VNodeFlags.FRAGMENT,\n  // 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识\n  tag: null,\n};\n\n// Portal\nconst portalVnode = {\n  flags: VNodeFlags.PORTAL,\n  // 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识，tag 属性用来存储 Portal 的 target\n  tag: target,\n};\n```\n\n## childrenFlags\n\nchildren 的几种情况\n\n- 没有子节点\n- 只有一个子节点\n- 多个子节点\n  - 有 key\n  - 无 key\n- 不知道子节点的情况\n\n> TIP\n> 为什么 children 也需要标识呢？原因只有一个：为了优化。在后面讲解 diff 算法的章节中你将会意识到，这些信息是至关重要的。\n\n```js\nconst ChildrenFlags = {\n  // 未知的 children 类型\n  UNKNOWN_CHILDREN: 0,\n  // 没有 children\n  NO_CHILDREN: 1,\n  // children 是单个 VNode\n  SINGLE_VNODE: 1 << 1,\n\n  // children 是多个拥有 key 的 VNode\n  KEYED_VNODES: 1 << 2,\n  // children 是多个没有 key 的 VNode\n  NONE_KEYED_VNODES: 1 << 3,\n};\n// 没有子节点的 div 标签\nconst elementVNode = {\n  flags: VNodeFlags.ELEMENT_HTML,\n  tag: \"div\",\n  data: null,\n  children: null,\n  childFlags: ChildrenFlags.NO_CHILDREN,\n};\n```\n\n## h 函数：生成 VNode 对象\n\n#### 定义 flags\n\n```js\nfunction h(tag, data = null, children = null) {\n  return {\n    flags: defineFlags(tag),\n    children: defineChildren(children)\n  }\n\n\n  function defineFlags(tag) {\n    let flags = null;\n      if (typeof tag === 'string') {\n      flags = tag === 'svg' ? VNodeFlags.ELEMENT_SVG : VNodeFlags.ELEMENT_HTML;\n    } else if (tag === Fragment) {\n      flags = VNodeFlags.Fragment\n    } else if (tag === PORTAL) {\n      flags = VNodeFlags.PORTAL\n      tag = data && data.target\n    } else {\n      // 兼容 Vue2 的对象式组件\n      if (tag !== null && typeof tag === 'object') {\n        flags = tag.functional\n          ? VNodeFlags.COMPONENT_FUNCTIONAL       // 函数式组件\n          : VNodeFlags.COMPONENT_STATEFUL_NORMAL  // 有状态组件\n      } else if (typeof tag === 'function') {\n        // Vue3 的类组件\n        flags = tag.prototype && tag.prototype.render\n          ? VNodeFlags.COMPONENT_STATEFUL_NORMAL  // 有状态组件\n          : VNodeFlags.COMPONENT_FUNCTIONAL       // 函数式组件\n      }\n      return flags;\n  }\n}\n```\n\n### 确定 children 类型\n\n- children 是一个数组\n  ```js\n  h('ul', null, [\n    h('li'),\n    h('li'),\n    ...\n  ])\n  ```\n- children 是一个 VNode 对象\n\n  ```js\n  h(\"ul\", null, h(\"li\"));\n  ```\n\n- 没有 children\n\n  ```js\n  h(\"ul\", null, null);\n  ```\n\n- children 是一个普通文本\n  ```js\n  h(\"ul\", null, \"text\");\n  ```\n\n```js\nfunction defineChildren(children) {\n  let childFlags = null;\n  if (Array.isArray(children)) {\n    const { length } = children;\n    if (length === 0) {\n      // 没有 children\n      childFlags = ChildrenFlags.NO_CHILDREN;\n    } else if (length === 1) {\n      // 单个子节点\n      childFlags = ChildrenFlags.SINGLE_VNODE;\n      children = children[0];\n    } else {\n      // 多个子节点，且子节点使用key\n      childFlags = ChildrenFlags.KEYED_VNODES;\n      children = normalizeVNodes(children);\n    }\n  } else if (children == null) {\n    // 没有子节点\n    childFlags = ChildrenFlags.NO_CHILDREN;\n  } else if (children._isVNode) {\n    // 单个子节点\n    childFlags = ChildrenFlags.SINGLE_VNODE;\n  } else {\n    // 其他情况都作为文本节点处理，即单个子节点，会调用 createTextVNode 创建纯文本类型的 VNode\n    childFlags = ChildrenFlags.SINGLE_VNODE;\n    children = createTextVNode(children + \"\");\n  }\n  return childFlags;\n}\n```\n","slug":"vue-render","published":1,"updated":"2021-07-25T08:25:31.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7l1007rgoswhmzthxde","content":"<p>这篇文章介绍了 vue VNode 相关的事项方式。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p>vnode</p>\n<p>普通 VNode</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementVnode = &#123;</span><br><span class=\"line\">  tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>组件 VNode</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// render 函数产出 VNode</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> componentVNode = &#123;</span><br><span class=\"line\">  tag: MyComponent,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>render</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render(elementVnode, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"app\"</span>));</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">vnode, container</span>) </span>&#123;</span><br><span class=\"line\">  mountElement(vnode, container);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mountElement</span>(<span class=\"params\">vnode, container</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.createElement(vnode.tag);</span><br><span class=\"line\">    container.appendChild(el);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mountComponent</span>(<span class=\"params\">vnode, container</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> vnode.tag();</span><br><span class=\"line\"></span><br><span class=\"line\">    instance.$vnode = instance.render();</span><br><span class=\"line\"></span><br><span class=\"line\">    mountElement(instance.$vnode, container);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"VNode\"><a href=\"#VNode\" class=\"headerlink\" title=\"VNode\"></a>VNode</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> interface VNode &#123;</span><br><span class=\"line\">  <span class=\"comment\">// _isVNode 属性在上文中没有提到，它是一个始终为 true 的值，有了它，我们就可以判断一个对象是否是 VNode 对象</span></span><br><span class=\"line\">  _isVNode: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">// el 属性在上文中也没有提到，当一个 VNode 被渲染为真实 DOM 之后，el 属性的值会引用该真实DOM</span></span><br><span class=\"line\">  el: Element | <span class=\"literal\">null</span></span><br><span class=\"line\">  flags: VNodeFlags</span><br><span class=\"line\">  tag: string | FunctionalComponent | ComponentClass | <span class=\"literal\">null</span></span><br><span class=\"line\">  data: VNodeData | <span class=\"literal\">null</span></span><br><span class=\"line\">  children: VNodeChildren</span><br><span class=\"line\">  childFlags: ChildrenFlags</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VNode-描述-DOM\"><a href=\"#VNode-描述-DOM\" class=\"headerlink\" title=\"VNode 描述 DOM\"></a>VNode 描述 DOM</h2><h3 id=\"elementVNode\"><a href=\"#elementVNode\" class=\"headerlink\" title=\"elementVNode\"></a>elementVNode</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementVNode = &#123;</span><br><span class=\"line\">  tag: <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    style: &#123;</span><br><span class=\"line\">      width: <span class=\"string\">'100px'</span>,</span><br><span class=\"line\">      height: <span class=\"string\">'100px'</span>,</span><br><span class=\"line\">      backgroundColor: <span class=\"string\">'red'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">'h1'</span>,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tag：存储标签名称</li>\n<li>data：存储标签的附加信息<ul>\n<li>style</li>\n<li>class</li>\n<li>事件<br>…</li>\n</ul>\n</li>\n<li>children: 当前标签的子节点</li>\n</ul>\n<h3 id=\"textVNode\"><a href=\"#textVNode\" class=\"headerlink\" title=\"textVNode\"></a>textVNode</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> textVNode = &#123;</span><br><span class=\"line\">  tag: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  children: <span class=\"string\">\"文本内容\"</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-VNode-来描述抽象内容\"><a href=\"#使用-VNode-来描述抽象内容\" class=\"headerlink\" title=\"使用 VNode 来描述抽象内容\"></a>使用 VNode 来描述抽象内容</h2><p>抽象内容：组件，Fragment,Portal</p>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>对于如下代码，我们并不想渲染 MyComponent 标签，而是想渲染出 MyComponent 组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们使用 VNode 来对其进行描述</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementVNode = &#123;</span><br><span class=\"line\">  tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  children: &#123;</span><br><span class=\"line\">    tag: MyComponent,</span><br><span class=\"line\">    data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fragment-无父节点-元素-集合\"><a href=\"#Fragment-无父节点-元素-集合\" class=\"headerlink\" title=\"Fragment 无父节点 元素 集合\"></a>Fragment 无父节点 元素 集合</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Columns</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">转换成</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们使用 VNode 对其进行描述</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Fragment = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fragmentVNode = &#123;</span><br><span class=\"line\">  tag: Fragment, <span class=\"comment\">// 过 Symbol 创建的唯一标识，但实际上我们更倾向于给 VNode 对象添加一个 flags 属性，用来代表该 VNode 的类型</span></span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">\"td\"</span>,</span><br><span class=\"line\">      data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">\"td\"</span>,</span><br><span class=\"line\">      data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">\"td\"</span>,</span><br><span class=\"line\">      data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们把所有 td 标签都作为 fragmentVNode 的子节点，根元素并不是一个实实在在的真实 DOM，而是一个抽象的标识，即 Fragment。</p>\n<p>当渲染器在渲染 VNode 时，如果发现该 VNode 的类型是 Fragment，就只需要把该 VNode 的子节点渲染到页面。</p>\n<h3 id=\"Portal-允许将内容渲染在任何地方\"><a href=\"#Portal-允许将内容渲染在任何地方\" class=\"headerlink\" title=\"Portal 允许将内容渲染在任何地方\"></a>Portal 允许将内容渲染在任何地方</h3><p>其应用场景是，假设你要实现一个蒙层组件 <Overlay/>，要求是该组件的 z-index 的层级最高，这样无论在哪里使用都希望它能够遮住全部内容，你可能会将其用在任何你需要蒙层的地方</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Portal</span> <span class=\"attr\">target</span>=<span class=\"string\">\"#app-root\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"overlay\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Portal</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Portal = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> portalVNode = &#123;</span><br><span class=\"line\">  tag: Portal,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    target: <span class=\"string\">\"#app-root\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  children: &#123;</span><br><span class=\"line\">    tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      class: \"overlay\",</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-flags-作为-VNode-标识\"><a href=\"#使用-flags-作为-VNode-标识\" class=\"headerlink\" title=\"使用 flags 作为 VNode 标识\"></a>使用 flags 作为 VNode 标识</h2><p>我们可以把 VNode 分成五类，分别是：html/svg 元素、组件、纯文本、Fragment 以及 Portal：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VNodeFlags = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// html 标签</span></span><br><span class=\"line\">  ELEMENT_HTML: <span class=\"string\">\"ELEMENT_HTML\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// SVG 标签</span></span><br><span class=\"line\">  ELEMENT_SVG: <span class=\"string\">\"ELEMENT_SVG\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 普通有状态组件</span></span><br><span class=\"line\">  COMPONENT_STATEFUL_NORMAL: <span class=\"string\">\"COMPONENT_STATEFUL_NORMAL\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 需要被keepAlive的有状态组件</span></span><br><span class=\"line\">  COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE: <span class=\"string\">\"COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 已经被keepAlive的有状态组件</span></span><br><span class=\"line\">  COMPONENT_STATEFUL_KEPT_ALIVE: <span class=\"string\">\"COMPONENT_STATEFUL_KEPT_ALIVE\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 函数式组件</span></span><br><span class=\"line\">  COMPONENT_FUNCTIONAL: <span class=\"string\">\"COMPONENT_FUNCTIONAL\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 纯文本</span></span><br><span class=\"line\">  TEXT: <span class=\"string\">\"TEXT\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// Fragment</span></span><br><span class=\"line\">  FRAGMENT: <span class=\"string\">\"FRAGMENT\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// Portal</span></span><br><span class=\"line\">  PORTAL: <span class=\"string\">\"PORTAL\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// html 元素节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.ELEMENT_HTML,</span><br><span class=\"line\">  tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// svg 元素节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> svgVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.ELEMENT_SVG,</span><br><span class=\"line\">  tag: <span class=\"string\">\"svg\"</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数式组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> functionalComponentVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.COMPONENT_FUNCTIONAL,</span><br><span class=\"line\">  tag: MyFunctionalComponent,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 普通的有状态组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> normalComponentVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.COMPONENT_STATEFUL_NORMAL,</span><br><span class=\"line\">  tag: MyStatefulComponent,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Fragment</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fragmentVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.FRAGMENT,</span><br><span class=\"line\">  <span class=\"comment\">// 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识</span></span><br><span class=\"line\">  tag: <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Portal</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> portalVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.PORTAL,</span><br><span class=\"line\">  <span class=\"comment\">// 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识，tag 属性用来存储 Portal 的 target</span></span><br><span class=\"line\">  tag: target,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"childrenFlags\"><a href=\"#childrenFlags\" class=\"headerlink\" title=\"childrenFlags\"></a>childrenFlags</h2><p>children 的几种情况</p>\n<ul>\n<li>没有子节点</li>\n<li>只有一个子节点</li>\n<li>多个子节点<ul>\n<li>有 key</li>\n<li>无 key</li>\n</ul>\n</li>\n<li>不知道子节点的情况</li>\n</ul>\n<blockquote>\n<p>TIP<br>为什么 children 也需要标识呢？原因只有一个：为了优化。在后面讲解 diff 算法的章节中你将会意识到，这些信息是至关重要的。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ChildrenFlags = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 未知的 children 类型</span></span><br><span class=\"line\">  UNKNOWN_CHILDREN: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 没有 children</span></span><br><span class=\"line\">  NO_CHILDREN: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"comment\">// children 是单个 VNode</span></span><br><span class=\"line\">  SINGLE_VNODE: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// children 是多个拥有 key 的 VNode</span></span><br><span class=\"line\">  KEYED_VNODES: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"comment\">// children 是多个没有 key 的 VNode</span></span><br><span class=\"line\">  NONE_KEYED_VNODES: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 没有子节点的 div 标签</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> elementVNode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.ELEMENT_HTML,</span><br><span class=\"line\">  tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  children: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  childFlags: ChildrenFlags.NO_CHILDREN,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"h-函数：生成-VNode-对象\"><a href=\"#h-函数：生成-VNode-对象\" class=\"headerlink\" title=\"h 函数：生成 VNode 对象\"></a>h 函数：生成 VNode 对象</h2><h4 id=\"定义-flags\"><a href=\"#定义-flags\" class=\"headerlink\" title=\"定义 flags\"></a>定义 flags</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">h</span>(<span class=\"params\">tag, data = null, children = null</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    flags: defineFlags(tag),</span><br><span class=\"line\">    children: defineChildren(children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineFlags</span>(<span class=\"params\">tag</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flags = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> tag === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      flags = tag === <span class=\"string\">'svg'</span> ? VNodeFlags.ELEMENT_SVG : VNodeFlags.ELEMENT_HTML;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === Fragment) &#123;</span><br><span class=\"line\">      flags = VNodeFlags.Fragment</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === PORTAL) &#123;</span><br><span class=\"line\">      flags = VNodeFlags.PORTAL</span><br><span class=\"line\">      tag = data &amp;&amp; data.target</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 兼容 Vue2 的对象式组件</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (tag !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> tag === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        flags = tag.functional</span><br><span class=\"line\">          ? VNodeFlags.COMPONENT_FUNCTIONAL       <span class=\"comment\">// 函数式组件</span></span><br><span class=\"line\">          : VNodeFlags.COMPONENT_STATEFUL_NORMAL  <span class=\"comment\">// 有状态组件</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> tag === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Vue3 的类组件</span></span><br><span class=\"line\">        flags = tag.prototype &amp;&amp; tag.prototype.render</span><br><span class=\"line\">          ? VNodeFlags.COMPONENT_STATEFUL_NORMAL  <span class=\"comment\">// 有状态组件</span></span><br><span class=\"line\">          : VNodeFlags.COMPONENT_FUNCTIONAL       <span class=\"comment\">// 函数式组件</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> flags;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"确定-children-类型\"><a href=\"#确定-children-类型\" class=\"headerlink\" title=\"确定 children 类型\"></a>确定 children 类型</h3><ul>\n<li><p>children 是一个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h(<span class=\"string\">'ul'</span>, <span class=\"literal\">null</span>, [</span><br><span class=\"line\">  h(<span class=\"string\">'li'</span>),</span><br><span class=\"line\">  h(<span class=\"string\">'li'</span>),</span><br><span class=\"line\">  ...</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure></li>\n<li><p>children 是一个 VNode 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h(<span class=\"string\">\"ul\"</span>, <span class=\"literal\">null</span>, h(<span class=\"string\">\"li\"</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>没有 children</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h(<span class=\"string\">\"ul\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>children 是一个普通文本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h(<span class=\"string\">\"ul\"</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"text\"</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineChildren</span>(<span class=\"params\">children</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> childFlags = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(children)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; length &#125; = children;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有 children</span></span><br><span class=\"line\">      childFlags = ChildrenFlags.NO_CHILDREN;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 单个子节点</span></span><br><span class=\"line\">      childFlags = ChildrenFlags.SINGLE_VNODE;</span><br><span class=\"line\">      children = children[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 多个子节点，且子节点使用key</span></span><br><span class=\"line\">      childFlags = ChildrenFlags.KEYED_VNODES;</span><br><span class=\"line\">      children = normalizeVNodes(children);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (children == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没有子节点</span></span><br><span class=\"line\">    childFlags = ChildrenFlags.NO_CHILDREN;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (children._isVNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单个子节点</span></span><br><span class=\"line\">    childFlags = ChildrenFlags.SINGLE_VNODE;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他情况都作为文本节点处理，即单个子节点，会调用 createTextVNode 创建纯文本类型的 VNode</span></span><br><span class=\"line\">    childFlags = ChildrenFlags.SINGLE_VNODE;</span><br><span class=\"line\">    children = createTextVNode(children + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> childFlags;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>这篇文章介绍了 vue VNode 相关的事项方式。</p>","more":"<h1 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h1><p>vnode</p>\n<p>普通 VNode</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementVnode = &#123;</span><br><span class=\"line\">  tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>组件 VNode</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// render 函数产出 VNode</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> componentVNode = &#123;</span><br><span class=\"line\">  tag: MyComponent,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>render</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render(elementVnode, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"app\"</span>));</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">vnode, container</span>) </span>&#123;</span><br><span class=\"line\">  mountElement(vnode, container);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mountElement</span>(<span class=\"params\">vnode, container</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.createElement(vnode.tag);</span><br><span class=\"line\">    container.appendChild(el);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mountComponent</span>(<span class=\"params\">vnode, container</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> vnode.tag();</span><br><span class=\"line\"></span><br><span class=\"line\">    instance.$vnode = instance.render();</span><br><span class=\"line\"></span><br><span class=\"line\">    mountElement(instance.$vnode, container);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"VNode\"><a href=\"#VNode\" class=\"headerlink\" title=\"VNode\"></a>VNode</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> interface VNode &#123;</span><br><span class=\"line\">  <span class=\"comment\">// _isVNode 属性在上文中没有提到，它是一个始终为 true 的值，有了它，我们就可以判断一个对象是否是 VNode 对象</span></span><br><span class=\"line\">  _isVNode: <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">// el 属性在上文中也没有提到，当一个 VNode 被渲染为真实 DOM 之后，el 属性的值会引用该真实DOM</span></span><br><span class=\"line\">  el: Element | <span class=\"literal\">null</span></span><br><span class=\"line\">  flags: VNodeFlags</span><br><span class=\"line\">  tag: string | FunctionalComponent | ComponentClass | <span class=\"literal\">null</span></span><br><span class=\"line\">  data: VNodeData | <span class=\"literal\">null</span></span><br><span class=\"line\">  children: VNodeChildren</span><br><span class=\"line\">  childFlags: ChildrenFlags</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VNode-描述-DOM\"><a href=\"#VNode-描述-DOM\" class=\"headerlink\" title=\"VNode 描述 DOM\"></a>VNode 描述 DOM</h2><h3 id=\"elementVNode\"><a href=\"#elementVNode\" class=\"headerlink\" title=\"elementVNode\"></a>elementVNode</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementVNode = &#123;</span><br><span class=\"line\">  tag: <span class=\"string\">'div'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    style: &#123;</span><br><span class=\"line\">      width: <span class=\"string\">'100px'</span>,</span><br><span class=\"line\">      height: <span class=\"string\">'100px'</span>,</span><br><span class=\"line\">      backgroundColor: <span class=\"string\">'red'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">'h1'</span>,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tag：存储标签名称</li>\n<li>data：存储标签的附加信息<ul>\n<li>style</li>\n<li>class</li>\n<li>事件<br>…</li>\n</ul>\n</li>\n<li>children: 当前标签的子节点</li>\n</ul>\n<h3 id=\"textVNode\"><a href=\"#textVNode\" class=\"headerlink\" title=\"textVNode\"></a>textVNode</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> textVNode = &#123;</span><br><span class=\"line\">  tag: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  children: <span class=\"string\">\"文本内容\"</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-VNode-来描述抽象内容\"><a href=\"#使用-VNode-来描述抽象内容\" class=\"headerlink\" title=\"使用 VNode 来描述抽象内容\"></a>使用 VNode 来描述抽象内容</h2><p>抽象内容：组件，Fragment,Portal</p>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>对于如下代码，我们并不想渲染 MyComponent 标签，而是想渲染出 MyComponent 组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们使用 VNode 来对其进行描述</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> elementVNode = &#123;</span><br><span class=\"line\">  tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  children: &#123;</span><br><span class=\"line\">    tag: MyComponent,</span><br><span class=\"line\">    data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fragment-无父节点-元素-集合\"><a href=\"#Fragment-无父节点-元素-集合\" class=\"headerlink\" title=\"Fragment 无父节点 元素 集合\"></a>Fragment 无父节点 元素 集合</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Columns</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">转换成</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们使用 VNode 对其进行描述</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Fragment = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fragmentVNode = &#123;</span><br><span class=\"line\">  tag: Fragment, <span class=\"comment\">// 过 Symbol 创建的唯一标识，但实际上我们更倾向于给 VNode 对象添加一个 flags 属性，用来代表该 VNode 的类型</span></span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  children: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">\"td\"</span>,</span><br><span class=\"line\">      data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">\"td\"</span>,</span><br><span class=\"line\">      data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tag: <span class=\"string\">\"td\"</span>,</span><br><span class=\"line\">      data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如上，我们把所有 td 标签都作为 fragmentVNode 的子节点，根元素并不是一个实实在在的真实 DOM，而是一个抽象的标识，即 Fragment。</p>\n<p>当渲染器在渲染 VNode 时，如果发现该 VNode 的类型是 Fragment，就只需要把该 VNode 的子节点渲染到页面。</p>\n<h3 id=\"Portal-允许将内容渲染在任何地方\"><a href=\"#Portal-允许将内容渲染在任何地方\" class=\"headerlink\" title=\"Portal 允许将内容渲染在任何地方\"></a>Portal 允许将内容渲染在任何地方</h3><p>其应用场景是，假设你要实现一个蒙层组件 <Overlay/>，要求是该组件的 z-index 的层级最高，这样无论在哪里使用都希望它能够遮住全部内容，你可能会将其用在任何你需要蒙层的地方</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Portal</span> <span class=\"attr\">target</span>=<span class=\"string\">\"#app-root\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"overlay\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Portal</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Portal = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> portalVNode = &#123;</span><br><span class=\"line\">  tag: Portal,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    target: <span class=\"string\">\"#app-root\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  children: &#123;</span><br><span class=\"line\">    tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      class: \"overlay\",</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-flags-作为-VNode-标识\"><a href=\"#使用-flags-作为-VNode-标识\" class=\"headerlink\" title=\"使用 flags 作为 VNode 标识\"></a>使用 flags 作为 VNode 标识</h2><p>我们可以把 VNode 分成五类，分别是：html/svg 元素、组件、纯文本、Fragment 以及 Portal：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> VNodeFlags = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// html 标签</span></span><br><span class=\"line\">  ELEMENT_HTML: <span class=\"string\">\"ELEMENT_HTML\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// SVG 标签</span></span><br><span class=\"line\">  ELEMENT_SVG: <span class=\"string\">\"ELEMENT_SVG\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 普通有状态组件</span></span><br><span class=\"line\">  COMPONENT_STATEFUL_NORMAL: <span class=\"string\">\"COMPONENT_STATEFUL_NORMAL\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 需要被keepAlive的有状态组件</span></span><br><span class=\"line\">  COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE: <span class=\"string\">\"COMPONENT_STATEFUL_SHOULD_KEEP_ALIVE\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 已经被keepAlive的有状态组件</span></span><br><span class=\"line\">  COMPONENT_STATEFUL_KEPT_ALIVE: <span class=\"string\">\"COMPONENT_STATEFUL_KEPT_ALIVE\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 函数式组件</span></span><br><span class=\"line\">  COMPONENT_FUNCTIONAL: <span class=\"string\">\"COMPONENT_FUNCTIONAL\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 纯文本</span></span><br><span class=\"line\">  TEXT: <span class=\"string\">\"TEXT\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// Fragment</span></span><br><span class=\"line\">  FRAGMENT: <span class=\"string\">\"FRAGMENT\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// Portal</span></span><br><span class=\"line\">  PORTAL: <span class=\"string\">\"PORTAL\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// html 元素节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.ELEMENT_HTML,</span><br><span class=\"line\">  tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// svg 元素节点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> svgVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.ELEMENT_SVG,</span><br><span class=\"line\">  tag: <span class=\"string\">\"svg\"</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数式组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> functionalComponentVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.COMPONENT_FUNCTIONAL,</span><br><span class=\"line\">  tag: MyFunctionalComponent,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 普通的有状态组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> normalComponentVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.COMPONENT_STATEFUL_NORMAL,</span><br><span class=\"line\">  tag: MyStatefulComponent,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Fragment</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fragmentVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.FRAGMENT,</span><br><span class=\"line\">  <span class=\"comment\">// 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识</span></span><br><span class=\"line\">  tag: <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Portal</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> portalVnode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.PORTAL,</span><br><span class=\"line\">  <span class=\"comment\">// 注意，由于 flags 的存在，我们已经不需要使用 tag 属性来存储唯一标识，tag 属性用来存储 Portal 的 target</span></span><br><span class=\"line\">  tag: target,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"childrenFlags\"><a href=\"#childrenFlags\" class=\"headerlink\" title=\"childrenFlags\"></a>childrenFlags</h2><p>children 的几种情况</p>\n<ul>\n<li>没有子节点</li>\n<li>只有一个子节点</li>\n<li>多个子节点<ul>\n<li>有 key</li>\n<li>无 key</li>\n</ul>\n</li>\n<li>不知道子节点的情况</li>\n</ul>\n<blockquote>\n<p>TIP<br>为什么 children 也需要标识呢？原因只有一个：为了优化。在后面讲解 diff 算法的章节中你将会意识到，这些信息是至关重要的。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ChildrenFlags = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 未知的 children 类型</span></span><br><span class=\"line\">  UNKNOWN_CHILDREN: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 没有 children</span></span><br><span class=\"line\">  NO_CHILDREN: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"comment\">// children 是单个 VNode</span></span><br><span class=\"line\">  SINGLE_VNODE: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// children 是多个拥有 key 的 VNode</span></span><br><span class=\"line\">  KEYED_VNODES: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"comment\">// children 是多个没有 key 的 VNode</span></span><br><span class=\"line\">  NONE_KEYED_VNODES: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 没有子节点的 div 标签</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> elementVNode = &#123;</span><br><span class=\"line\">  flags: VNodeFlags.ELEMENT_HTML,</span><br><span class=\"line\">  tag: <span class=\"string\">\"div\"</span>,</span><br><span class=\"line\">  data: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  children: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  childFlags: ChildrenFlags.NO_CHILDREN,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"h-函数：生成-VNode-对象\"><a href=\"#h-函数：生成-VNode-对象\" class=\"headerlink\" title=\"h 函数：生成 VNode 对象\"></a>h 函数：生成 VNode 对象</h2><h4 id=\"定义-flags\"><a href=\"#定义-flags\" class=\"headerlink\" title=\"定义 flags\"></a>定义 flags</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">h</span>(<span class=\"params\">tag, data = null, children = null</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    flags: defineFlags(tag),</span><br><span class=\"line\">    children: defineChildren(children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineFlags</span>(<span class=\"params\">tag</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flags = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> tag === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">      flags = tag === <span class=\"string\">'svg'</span> ? VNodeFlags.ELEMENT_SVG : VNodeFlags.ELEMENT_HTML;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === Fragment) &#123;</span><br><span class=\"line\">      flags = VNodeFlags.Fragment</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === PORTAL) &#123;</span><br><span class=\"line\">      flags = VNodeFlags.PORTAL</span><br><span class=\"line\">      tag = data &amp;&amp; data.target</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 兼容 Vue2 的对象式组件</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (tag !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> tag === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        flags = tag.functional</span><br><span class=\"line\">          ? VNodeFlags.COMPONENT_FUNCTIONAL       <span class=\"comment\">// 函数式组件</span></span><br><span class=\"line\">          : VNodeFlags.COMPONENT_STATEFUL_NORMAL  <span class=\"comment\">// 有状态组件</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> tag === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Vue3 的类组件</span></span><br><span class=\"line\">        flags = tag.prototype &amp;&amp; tag.prototype.render</span><br><span class=\"line\">          ? VNodeFlags.COMPONENT_STATEFUL_NORMAL  <span class=\"comment\">// 有状态组件</span></span><br><span class=\"line\">          : VNodeFlags.COMPONENT_FUNCTIONAL       <span class=\"comment\">// 函数式组件</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> flags;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"确定-children-类型\"><a href=\"#确定-children-类型\" class=\"headerlink\" title=\"确定 children 类型\"></a>确定 children 类型</h3><ul>\n<li><p>children 是一个数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h(<span class=\"string\">'ul'</span>, <span class=\"literal\">null</span>, [</span><br><span class=\"line\">  h(<span class=\"string\">'li'</span>),</span><br><span class=\"line\">  h(<span class=\"string\">'li'</span>),</span><br><span class=\"line\">  ...</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure></li>\n<li><p>children 是一个 VNode 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h(<span class=\"string\">\"ul\"</span>, <span class=\"literal\">null</span>, h(<span class=\"string\">\"li\"</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>没有 children</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h(<span class=\"string\">\"ul\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>children 是一个普通文本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h(<span class=\"string\">\"ul\"</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"text\"</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineChildren</span>(<span class=\"params\">children</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> childFlags = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(children)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; length &#125; = children;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有 children</span></span><br><span class=\"line\">      childFlags = ChildrenFlags.NO_CHILDREN;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 单个子节点</span></span><br><span class=\"line\">      childFlags = ChildrenFlags.SINGLE_VNODE;</span><br><span class=\"line\">      children = children[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 多个子节点，且子节点使用key</span></span><br><span class=\"line\">      childFlags = ChildrenFlags.KEYED_VNODES;</span><br><span class=\"line\">      children = normalizeVNodes(children);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (children == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 没有子节点</span></span><br><span class=\"line\">    childFlags = ChildrenFlags.NO_CHILDREN;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (children._isVNode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单个子节点</span></span><br><span class=\"line\">    childFlags = ChildrenFlags.SINGLE_VNODE;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他情况都作为文本节点处理，即单个子节点，会调用 createTextVNode 创建纯文本类型的 VNode</span></span><br><span class=\"line\">    childFlags = ChildrenFlags.SINGLE_VNODE;</span><br><span class=\"line\">    children = createTextVNode(children + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> childFlags;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"webpack - sourceMap & 公共资源提取","toc":true,"date":"2020-10-06T16:00:00.000Z","_content":"\n## sourceMap\n\n作用：定位源码，开发环境开启，线上环境关闭\n\n### sourceMap 关键字\n\n- eval: 使用 eval 包裹模块代码\n- source map: 产生.map 文件\n- cheap: 不包含列信息（报错只定为到行）\n- inline: 将.map 作为 DataURI 嵌入，不单独生成.map（将 sourcemap 内联到对应 js 文件中）\n- module: 包含 loader 的 sourcemap\n\n```js\nmodule.exports = {\n  ...\n  devtool: 'source-map'\n  // devTool: 'inline-source-map'\n  // devTool: 'cheap-inline-source-map'\n}\n```\n\n## SplitChunksPlugin 分离公共脚本(react, react-dom, UI component)\n\nchunks 参数说明:\n\n- async 异步引入的库进行分离（默认）\n  js 文件中 import 导入的库\n- initial 同步引入的库进行分离\n- all 所有引入的库进行分离（推荐）\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      chunks: \"async\",\n      minSize: 20000,\n      minRemainingSize: 0,\n      maxSize: 0,\n      minChunks: 1,\n      maxAsyncRequests: 30,\n      maxInitialRequests: 30,\n      automaticNameDelimiter: \"~\",\n      enforceSizeThreshold: 50000,\n      cacheGroups: {\n        defaultVendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10,\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true,\n        },\n      },\n    },\n  },\n};\n```\n\n#### test: 匹配出要分离的包\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      ...\n      cacheGroups: {\n        commons: {// 打包出来的chunk 名称\n          test: /(react|react-dom)/,\n          name: 'vendors',// 分离出来的名称\n          chunks: 'all'\n        }\n        ...\n      }\n    }\n  }\n};\n```\n\n#### minChunks: 设置最小的引用次数 & minSize：需要执行分离的包的最小体积\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      ...\n      minSize: 0 // 分离包的最小体积\n      ...\n      cacheGroups: {\n        commons: {\n          name: 'commons',\n          chunks: 'all',\n          minChunks: 2 //最小引用次数\n        }\n      },\n    },\n  },\n};\n```\n","source":"_posts/webpack-learn07.md","raw":"---\ntitle: webpack - sourceMap & 公共资源提取\ncategories: [前端]\ntags: [webpack]\ntoc: true\ndate: 2020/10/7\n---\n\n## sourceMap\n\n作用：定位源码，开发环境开启，线上环境关闭\n\n### sourceMap 关键字\n\n- eval: 使用 eval 包裹模块代码\n- source map: 产生.map 文件\n- cheap: 不包含列信息（报错只定为到行）\n- inline: 将.map 作为 DataURI 嵌入，不单独生成.map（将 sourcemap 内联到对应 js 文件中）\n- module: 包含 loader 的 sourcemap\n\n```js\nmodule.exports = {\n  ...\n  devtool: 'source-map'\n  // devTool: 'inline-source-map'\n  // devTool: 'cheap-inline-source-map'\n}\n```\n\n## SplitChunksPlugin 分离公共脚本(react, react-dom, UI component)\n\nchunks 参数说明:\n\n- async 异步引入的库进行分离（默认）\n  js 文件中 import 导入的库\n- initial 同步引入的库进行分离\n- all 所有引入的库进行分离（推荐）\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      chunks: \"async\",\n      minSize: 20000,\n      minRemainingSize: 0,\n      maxSize: 0,\n      minChunks: 1,\n      maxAsyncRequests: 30,\n      maxInitialRequests: 30,\n      automaticNameDelimiter: \"~\",\n      enforceSizeThreshold: 50000,\n      cacheGroups: {\n        defaultVendors: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10,\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true,\n        },\n      },\n    },\n  },\n};\n```\n\n#### test: 匹配出要分离的包\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      ...\n      cacheGroups: {\n        commons: {// 打包出来的chunk 名称\n          test: /(react|react-dom)/,\n          name: 'vendors',// 分离出来的名称\n          chunks: 'all'\n        }\n        ...\n      }\n    }\n  }\n};\n```\n\n#### minChunks: 设置最小的引用次数 & minSize：需要执行分离的包的最小体积\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      ...\n      minSize: 0 // 分离包的最小体积\n      ...\n      cacheGroups: {\n        commons: {\n          name: 'commons',\n          chunks: 'all',\n          minChunks: 2 //最小引用次数\n        }\n      },\n    },\n  },\n};\n```\n","slug":"webpack-learn07","published":1,"updated":"2021-04-22T08:24:04.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7l1007vgoswdu32652m","content":"<h2 id=\"sourceMap\"><a href=\"#sourceMap\" class=\"headerlink\" title=\"sourceMap\"></a>sourceMap</h2><p>作用：定位源码，开发环境开启，线上环境关闭</p>\n<h3 id=\"sourceMap-关键字\"><a href=\"#sourceMap-关键字\" class=\"headerlink\" title=\"sourceMap 关键字\"></a>sourceMap 关键字</h3><ul>\n<li>eval: 使用 eval 包裹模块代码</li>\n<li>source map: 产生.map 文件</li>\n<li>cheap: 不包含列信息（报错只定为到行）</li>\n<li>inline: 将.map 作为 DataURI 嵌入，不单独生成.map（将 sourcemap 内联到对应 js 文件中）</li>\n<li>module: 包含 loader 的 sourcemap</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span></span><br><span class=\"line\">  <span class=\"comment\">// devTool: 'inline-source-map'</span></span><br><span class=\"line\">  <span class=\"comment\">// devTool: 'cheap-inline-source-map'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplitChunksPlugin-分离公共脚本-react-react-dom-UI-component\"><a href=\"#SplitChunksPlugin-分离公共脚本-react-react-dom-UI-component\" class=\"headerlink\" title=\"SplitChunksPlugin 分离公共脚本(react, react-dom, UI component)\"></a>SplitChunksPlugin 分离公共脚本(react, react-dom, UI component)</h2><p>chunks 参数说明:</p>\n<ul>\n<li>async 异步引入的库进行分离（默认）<br>js 文件中 import 导入的库</li>\n<li>initial 同步引入的库进行分离</li>\n<li>all 所有引入的库进行分离（推荐）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">\"async\"</span>,</span><br><span class=\"line\">      minSize: <span class=\"number\">20000</span>,</span><br><span class=\"line\">      minRemainingSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      maxSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">1</span>,</span><br><span class=\"line\">      maxAsyncRequests: <span class=\"number\">30</span>,</span><br><span class=\"line\">      maxInitialRequests: <span class=\"number\">30</span>,</span><br><span class=\"line\">      automaticNameDelimiter: <span class=\"string\">\"~\"</span>,</span><br><span class=\"line\">      enforceSizeThreshold: <span class=\"number\">50000</span>,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        defaultVendors: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-10</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>,</span><br><span class=\"line\">          reuseExistingChunk: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"test-匹配出要分离的包\"><a href=\"#test-匹配出要分离的包\" class=\"headerlink\" title=\"test: 匹配出要分离的包\"></a>test: 匹配出要分离的包</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        commons: &#123;<span class=\"comment\">// 打包出来的chunk 名称</span></span><br><span class=\"line\">          test: <span class=\"regexp\">/(react|react-dom)/</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'vendors'</span>,<span class=\"comment\">// 分离出来的名称</span></span><br><span class=\"line\">          chunks: <span class=\"string\">'all'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"minChunks-设置最小的引用次数-amp-minSize：需要执行分离的包的最小体积\"><a href=\"#minChunks-设置最小的引用次数-amp-minSize：需要执行分离的包的最小体积\" class=\"headerlink\" title=\"minChunks: 设置最小的引用次数 &amp; minSize：需要执行分离的包的最小体积\"></a>minChunks: 设置最小的引用次数 &amp; minSize：需要执行分离的包的最小体积</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      minSize: <span class=\"number\">0</span> <span class=\"comment\">// 分离包的最小体积</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'commons'</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span> <span class=\"comment\">//最小引用次数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"sourceMap\"><a href=\"#sourceMap\" class=\"headerlink\" title=\"sourceMap\"></a>sourceMap</h2><p>作用：定位源码，开发环境开启，线上环境关闭</p>\n<h3 id=\"sourceMap-关键字\"><a href=\"#sourceMap-关键字\" class=\"headerlink\" title=\"sourceMap 关键字\"></a>sourceMap 关键字</h3><ul>\n<li>eval: 使用 eval 包裹模块代码</li>\n<li>source map: 产生.map 文件</li>\n<li>cheap: 不包含列信息（报错只定为到行）</li>\n<li>inline: 将.map 作为 DataURI 嵌入，不单独生成.map（将 sourcemap 内联到对应 js 文件中）</li>\n<li>module: 包含 loader 的 sourcemap</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span></span><br><span class=\"line\">  <span class=\"comment\">// devTool: 'inline-source-map'</span></span><br><span class=\"line\">  <span class=\"comment\">// devTool: 'cheap-inline-source-map'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SplitChunksPlugin-分离公共脚本-react-react-dom-UI-component\"><a href=\"#SplitChunksPlugin-分离公共脚本-react-react-dom-UI-component\" class=\"headerlink\" title=\"SplitChunksPlugin 分离公共脚本(react, react-dom, UI component)\"></a>SplitChunksPlugin 分离公共脚本(react, react-dom, UI component)</h2><p>chunks 参数说明:</p>\n<ul>\n<li>async 异步引入的库进行分离（默认）<br>js 文件中 import 导入的库</li>\n<li>initial 同步引入的库进行分离</li>\n<li>all 所有引入的库进行分离（推荐）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">\"async\"</span>,</span><br><span class=\"line\">      minSize: <span class=\"number\">20000</span>,</span><br><span class=\"line\">      minRemainingSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      maxSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      minChunks: <span class=\"number\">1</span>,</span><br><span class=\"line\">      maxAsyncRequests: <span class=\"number\">30</span>,</span><br><span class=\"line\">      maxInitialRequests: <span class=\"number\">30</span>,</span><br><span class=\"line\">      automaticNameDelimiter: <span class=\"string\">\"~\"</span>,</span><br><span class=\"line\">      enforceSizeThreshold: <span class=\"number\">50000</span>,</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        defaultVendors: &#123;</span><br><span class=\"line\">          test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-10</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>,</span><br><span class=\"line\">          reuseExistingChunk: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"test-匹配出要分离的包\"><a href=\"#test-匹配出要分离的包\" class=\"headerlink\" title=\"test: 匹配出要分离的包\"></a>test: 匹配出要分离的包</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        commons: &#123;<span class=\"comment\">// 打包出来的chunk 名称</span></span><br><span class=\"line\">          test: <span class=\"regexp\">/(react|react-dom)/</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'vendors'</span>,<span class=\"comment\">// 分离出来的名称</span></span><br><span class=\"line\">          chunks: <span class=\"string\">'all'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"minChunks-设置最小的引用次数-amp-minSize：需要执行分离的包的最小体积\"><a href=\"#minChunks-设置最小的引用次数-amp-minSize：需要执行分离的包的最小体积\" class=\"headerlink\" title=\"minChunks: 设置最小的引用次数 &amp; minSize：需要执行分离的包的最小体积\"></a>minChunks: 设置最小的引用次数 &amp; minSize：需要执行分离的包的最小体积</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      minSize: <span class=\"number\">0</span> <span class=\"comment\">// 分离包的最小体积</span></span><br><span class=\"line\">      ...</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        commons: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'commons'</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">'all'</span>,</span><br><span class=\"line\">          minChunks: <span class=\"number\">2</span> <span class=\"comment\">//最小引用次数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"百度AI 人脸搜索 -M:N 调研","toc":true,"date":"2022-04-20T16:00:00.000Z","_content":"\n无情分隔符\n\n<!-- more -->\n\n## 介绍\n\n### 人脸搜索 M：N 识别介绍\n\n- 人脸搜索 M：N 也称为 M：N 识别，待识别图片中含有多个人脸时，在指定人脸集合中，找到这多个人脸分别最相似的人脸\n- 一张图片最大识别人数上限为 10 人\n\n### 人脸库结构介绍\n\n```js\n\n|- 人脸库(appid)\n   |- 用户组一（group_id）\n      |- 用户01（uid）\n         |- 人脸（faceid）\n      |- 用户02（uid）\n         |- 人脸（faceid）\n         |- 人脸（faceid）\n         ....\n       ....\n   |- 用户组二（group_id）\n   |- 用户组三（group_id）\n   ....\n```\n\n- 每个用户（user_id）所能注册的最大人脸数量**20**。\n\n- **每个 appid 对应一个人脸库，且不同 appid 之间，人脸库互不相通**。\n\n- `access_token`的有效期为 30 天，**切记需要每 30 天进行定期更换，或者每次请求都拉取新 token**\n\n  建议每次请求拉取新的 token，然后再进行正式请求\n\n  ```js\n  fetchAccessToken.then((access_token) => doRealFetchWithAccessToken);\n  ```\n\n* 每个人脸库对应一个 appid，一定确保不要轻易删除后台应用列表中的 appid，删除后则此人脸库将失效，无法进行任何查找！\n\n收费方式：\n\nhttps://cloud.baidu.com/doc/FACE/s/Uk37c1m9b#1%E3%80%81%E5%85%AC%E6%9C%89%E4%BA%91-api\n\n![image-20220421155208443](https://blog.shancw.net/public/uploads/image-20220421155208443.png)\n\n## 步骤\n\n![image-20220421154942659](https://blog.shancw.net/public/uploads/image-20220421154942659.png)\n\nhttps://console.bce.baidu.com/ai/?fromai=1#/ai/face/overview/index\n\n### 1. 创建应用\n\n![image-20220421134001091](https://blog.shancw.net/public/uploads/image-20220421134001091.png)\n\n创建成功后，应用列表显示如下\n\n<img src=\"https://blog.shancw.net/public/uploads/image-20220421134058407.png\" alt=\"image-20220421134058407\" style=\"zoom: 200%;\" />\n\n### 2. 创建人脸库\n\n人脸注册，有两种方式：\n\n1. 控制台手动上传\n\n   ![image-20220421134340576](https://blog.shancw.net/public/uploads/image-20220421134340576.png)\n\n2. 调用接口上传\n\nhttps://ai.baidu.com/ai-doc/FACE/ak3co86dk#%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8C\n\n### 3. 具体接口调用\n\n#### access_token 获取\n\n> 通过 API Key 和 Secret Key 获取的 access_token,参考“[Access Token 获取](http://ai.baidu.com/docs#/Auth)”\n\n```bash\nurl: https://aip.baidubce.com/oauth/2.0/token\nmethod: get\nurlParameters:\n\tgrant_type: 必须参数，固定为 'client_credentials'\n\tclient_id:  必须参数，应用的api key\n\tclient_secret: 必须参数，应用的Secret key\n```\n\n示例代码：\n\n```bash\ncurl -i -k 'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id=【百度云应用的AK】&client_secret=【百度云应用的SK】'\n```\n\n![image-20220421140709752](https://blog.shancw.net/public/uploads/image-20220421140709752.png)\n\n#### 人脸注册接口调用\n\n接口的约束如下：\n\n- **人脸识别接口分为 V2 和 V3 两个版本，本文档为 V3 版本接口的说明文档**\n\n  确认方式：查看创建的应用详情\n\n  ![image-20220421150322834](https://blog.shancw.net/public/uploads/image-20220421150322834.png)\n\n​\n\nURL：https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add\n\nURL 参数：\n\n| 参数         | 值                                                                                                       |\n| ------------ | -------------------------------------------------------------------------------------------------------- |\n| access_token | 通过 API Key 和 Secret Key 获取的 access_token,参考“[Access Token 获取](http://ai.baidu.com/docs#/Auth)” |\n\nHeader 如下：\n\n| 参数         | 值               |\n| ------------ | ---------------- |\n| Content-Type | application/json |\n\nBody 中放置请求参数，参数详情如下：\n\n**请求参数**\n\n| 参数             | 必选 | 类型   | 说明                                                                                                                                                                                                                                                                                            |\n| ---------------- | ---- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| image            | 是   | string | 图片信息(**总数据大小应小于 10M**)，图片上传方式根据 image_type 来判断。 注：组内每个 uid 下的人脸图片数目上限为 20 张                                                                                                                                                                          |\n| image_type       | 是   | string | 图片类型 **BASE64**:图片的 base64 值，base64 编码后的图片数据，编码后的图片大小不超过 2M； **URL**:图片的 URL 地址( 可能由于网络等原因导致下载图片时间过长)；                                                                                                                                   |\n| group_id         | 是   | string | 用户组 id，标识一组用户（由数字、字母、下划线组成），长度限制 48B。**产品建议**：根据您的业务需求，可以将需要注册的用户，按照业务划分，分配到不同的 group 下，例如按照会员手机尾号作为 groupid，用于刷脸支付、会员计费消费等，这样可以尽可能控制每个 group 下的用户数与人脸数，提升检索的准确率 |\n| user_id          | 是   | string | 用户 id（由数字、字母、下划线组成），长度限制 128B                                                                                                                                                                                                                                              |\n| scene_type       | 是   | string | 场景类型选择，**SEC**: 视频监控场景                                                                                                                                                                                                                                                             |\n| user_info        | 否   | string | 用户资料，长度限制 256B 默认空                                                                                                                                                                                                                                                                  |\n| quality_control  | 否   | string | 图片质量控制 **NONE**: 不进行控制 **LOW**:较低的质量要求 **NORMAL**: 一般的质量要求 **HIGH**: 较高的质量要求 **默认 NONE** 若图片质量不满足要求，则返回结果中会提示质量检测失败                                                                                                                 |\n| liveness_control | 否   | string | 活体检测控制 **NONE**: 不进行控制 **LOW**:较低的活体要求(高通过率 低攻击拒绝率) **NORMAL**: 一般的活体要求(平衡的攻击拒绝率, 通过率) **HIGH**: 较高的活体要求(高攻击拒绝率 低通过率) **默认 NONE** 若活体检测结果不满足要求，则返回结果中会提示活体检测失败                                     |\n| action_type      | 否   | string | **操作方式** APPEND: 当 user_id 在库中已经存在时，对此 user_id 重复注册时，新注册的图片默认会追加到该 user_id 下 REPLACE : 当对此 user_id 重复注册时,则会用新图替换库中该 user_id 下所有图片 默认使用 APPEND                                                                                    |\n| face_sort_type   | 否   | int    | 人脸检测排序类型 **0**:代表检测出的人脸按照人脸面积从大到小排列 **1**:代表检测出的人脸按照距离图片中心从近到远排列 **默认为 0**                                                                                                                                                                 |\n\n示例：\n\n![image-20220421152600808](https://blog.shancw.net/public/uploads/image-20220421152600808.png)\n\n### 人脸 M:N 搜索\n\nhttps://ai.baidu.com/ai-doc/FACE/Gk37c1uzc#%E4%BA%BA%E8%84%B8%E6%90%9C%E7%B4%A2-mn-%E8%AF%86%E5%88%AB\n\n![image-20220421154735868](https://blog.shancw.net/public/uploads/image-20220421154735868.png)\n","source":"_posts/百度AI 人脸搜索 -MN 调研.md","raw":"---\ntitle: 百度AI 人脸搜索 -M:N 调研\ncategories: [杂项]\ntags: []\ntoc: true\ndate: 2022/4/21\n---\n\n无情分隔符\n\n<!-- more -->\n\n## 介绍\n\n### 人脸搜索 M：N 识别介绍\n\n- 人脸搜索 M：N 也称为 M：N 识别，待识别图片中含有多个人脸时，在指定人脸集合中，找到这多个人脸分别最相似的人脸\n- 一张图片最大识别人数上限为 10 人\n\n### 人脸库结构介绍\n\n```js\n\n|- 人脸库(appid)\n   |- 用户组一（group_id）\n      |- 用户01（uid）\n         |- 人脸（faceid）\n      |- 用户02（uid）\n         |- 人脸（faceid）\n         |- 人脸（faceid）\n         ....\n       ....\n   |- 用户组二（group_id）\n   |- 用户组三（group_id）\n   ....\n```\n\n- 每个用户（user_id）所能注册的最大人脸数量**20**。\n\n- **每个 appid 对应一个人脸库，且不同 appid 之间，人脸库互不相通**。\n\n- `access_token`的有效期为 30 天，**切记需要每 30 天进行定期更换，或者每次请求都拉取新 token**\n\n  建议每次请求拉取新的 token，然后再进行正式请求\n\n  ```js\n  fetchAccessToken.then((access_token) => doRealFetchWithAccessToken);\n  ```\n\n* 每个人脸库对应一个 appid，一定确保不要轻易删除后台应用列表中的 appid，删除后则此人脸库将失效，无法进行任何查找！\n\n收费方式：\n\nhttps://cloud.baidu.com/doc/FACE/s/Uk37c1m9b#1%E3%80%81%E5%85%AC%E6%9C%89%E4%BA%91-api\n\n![image-20220421155208443](https://blog.shancw.net/public/uploads/image-20220421155208443.png)\n\n## 步骤\n\n![image-20220421154942659](https://blog.shancw.net/public/uploads/image-20220421154942659.png)\n\nhttps://console.bce.baidu.com/ai/?fromai=1#/ai/face/overview/index\n\n### 1. 创建应用\n\n![image-20220421134001091](https://blog.shancw.net/public/uploads/image-20220421134001091.png)\n\n创建成功后，应用列表显示如下\n\n<img src=\"https://blog.shancw.net/public/uploads/image-20220421134058407.png\" alt=\"image-20220421134058407\" style=\"zoom: 200%;\" />\n\n### 2. 创建人脸库\n\n人脸注册，有两种方式：\n\n1. 控制台手动上传\n\n   ![image-20220421134340576](https://blog.shancw.net/public/uploads/image-20220421134340576.png)\n\n2. 调用接口上传\n\nhttps://ai.baidu.com/ai-doc/FACE/ak3co86dk#%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8C\n\n### 3. 具体接口调用\n\n#### access_token 获取\n\n> 通过 API Key 和 Secret Key 获取的 access_token,参考“[Access Token 获取](http://ai.baidu.com/docs#/Auth)”\n\n```bash\nurl: https://aip.baidubce.com/oauth/2.0/token\nmethod: get\nurlParameters:\n\tgrant_type: 必须参数，固定为 'client_credentials'\n\tclient_id:  必须参数，应用的api key\n\tclient_secret: 必须参数，应用的Secret key\n```\n\n示例代码：\n\n```bash\ncurl -i -k 'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&client_id=【百度云应用的AK】&client_secret=【百度云应用的SK】'\n```\n\n![image-20220421140709752](https://blog.shancw.net/public/uploads/image-20220421140709752.png)\n\n#### 人脸注册接口调用\n\n接口的约束如下：\n\n- **人脸识别接口分为 V2 和 V3 两个版本，本文档为 V3 版本接口的说明文档**\n\n  确认方式：查看创建的应用详情\n\n  ![image-20220421150322834](https://blog.shancw.net/public/uploads/image-20220421150322834.png)\n\n​\n\nURL：https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add\n\nURL 参数：\n\n| 参数         | 值                                                                                                       |\n| ------------ | -------------------------------------------------------------------------------------------------------- |\n| access_token | 通过 API Key 和 Secret Key 获取的 access_token,参考“[Access Token 获取](http://ai.baidu.com/docs#/Auth)” |\n\nHeader 如下：\n\n| 参数         | 值               |\n| ------------ | ---------------- |\n| Content-Type | application/json |\n\nBody 中放置请求参数，参数详情如下：\n\n**请求参数**\n\n| 参数             | 必选 | 类型   | 说明                                                                                                                                                                                                                                                                                            |\n| ---------------- | ---- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| image            | 是   | string | 图片信息(**总数据大小应小于 10M**)，图片上传方式根据 image_type 来判断。 注：组内每个 uid 下的人脸图片数目上限为 20 张                                                                                                                                                                          |\n| image_type       | 是   | string | 图片类型 **BASE64**:图片的 base64 值，base64 编码后的图片数据，编码后的图片大小不超过 2M； **URL**:图片的 URL 地址( 可能由于网络等原因导致下载图片时间过长)；                                                                                                                                   |\n| group_id         | 是   | string | 用户组 id，标识一组用户（由数字、字母、下划线组成），长度限制 48B。**产品建议**：根据您的业务需求，可以将需要注册的用户，按照业务划分，分配到不同的 group 下，例如按照会员手机尾号作为 groupid，用于刷脸支付、会员计费消费等，这样可以尽可能控制每个 group 下的用户数与人脸数，提升检索的准确率 |\n| user_id          | 是   | string | 用户 id（由数字、字母、下划线组成），长度限制 128B                                                                                                                                                                                                                                              |\n| scene_type       | 是   | string | 场景类型选择，**SEC**: 视频监控场景                                                                                                                                                                                                                                                             |\n| user_info        | 否   | string | 用户资料，长度限制 256B 默认空                                                                                                                                                                                                                                                                  |\n| quality_control  | 否   | string | 图片质量控制 **NONE**: 不进行控制 **LOW**:较低的质量要求 **NORMAL**: 一般的质量要求 **HIGH**: 较高的质量要求 **默认 NONE** 若图片质量不满足要求，则返回结果中会提示质量检测失败                                                                                                                 |\n| liveness_control | 否   | string | 活体检测控制 **NONE**: 不进行控制 **LOW**:较低的活体要求(高通过率 低攻击拒绝率) **NORMAL**: 一般的活体要求(平衡的攻击拒绝率, 通过率) **HIGH**: 较高的活体要求(高攻击拒绝率 低通过率) **默认 NONE** 若活体检测结果不满足要求，则返回结果中会提示活体检测失败                                     |\n| action_type      | 否   | string | **操作方式** APPEND: 当 user_id 在库中已经存在时，对此 user_id 重复注册时，新注册的图片默认会追加到该 user_id 下 REPLACE : 当对此 user_id 重复注册时,则会用新图替换库中该 user_id 下所有图片 默认使用 APPEND                                                                                    |\n| face_sort_type   | 否   | int    | 人脸检测排序类型 **0**:代表检测出的人脸按照人脸面积从大到小排列 **1**:代表检测出的人脸按照距离图片中心从近到远排列 **默认为 0**                                                                                                                                                                 |\n\n示例：\n\n![image-20220421152600808](https://blog.shancw.net/public/uploads/image-20220421152600808.png)\n\n### 人脸 M:N 搜索\n\nhttps://ai.baidu.com/ai-doc/FACE/Gk37c1uzc#%E4%BA%BA%E8%84%B8%E6%90%9C%E7%B4%A2-mn-%E8%AF%86%E5%88%AB\n\n![image-20220421154735868](https://blog.shancw.net/public/uploads/image-20220421154735868.png)\n","slug":"百度AI 人脸搜索 -MN 调研","published":1,"updated":"2022-04-21T08:53:51.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7l2007ygoswgi591mpq","content":"<p>无情分隔符</p>\n<a id=\"more\"></a>\n\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"人脸搜索-M：N-识别介绍\"><a href=\"#人脸搜索-M：N-识别介绍\" class=\"headerlink\" title=\"人脸搜索 M：N 识别介绍\"></a>人脸搜索 M：N 识别介绍</h3><ul>\n<li>人脸搜索 M：N 也称为 M：N 识别，待识别图片中含有多个人脸时，在指定人脸集合中，找到这多个人脸分别最相似的人脸</li>\n<li>一张图片最大识别人数上限为 10 人</li>\n</ul>\n<h3 id=\"人脸库结构介绍\"><a href=\"#人脸库结构介绍\" class=\"headerlink\" title=\"人脸库结构介绍\"></a>人脸库结构介绍</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">|- 人脸库(appid)</span><br><span class=\"line\">   |- 用户组一（group_id）</span><br><span class=\"line\">      |- 用户<span class=\"number\">01</span>（uid）</span><br><span class=\"line\">         |- 人脸（faceid）</span><br><span class=\"line\">      |- 用户<span class=\"number\">02</span>（uid）</span><br><span class=\"line\">         |- 人脸（faceid）</span><br><span class=\"line\">         |- 人脸（faceid）</span><br><span class=\"line\">         ....</span><br><span class=\"line\">       ....</span><br><span class=\"line\">   |- 用户组二（group_id）</span><br><span class=\"line\">   |- 用户组三（group_id）</span><br><span class=\"line\">   ....</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>每个用户（user_id）所能注册的最大人脸数量<strong>20</strong>。</p>\n</li>\n<li><p><strong>每个 appid 对应一个人脸库，且不同 appid 之间，人脸库互不相通</strong>。</p>\n</li>\n<li><p><code>access_token</code>的有效期为 30 天，<strong>切记需要每 30 天进行定期更换，或者每次请求都拉取新 token</strong></p>\n<p>建议每次请求拉取新的 token，然后再进行正式请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchAccessToken.then(<span class=\"function\">(<span class=\"params\">access_token</span>) =&gt;</span> doRealFetchWithAccessToken);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>每个人脸库对应一个 appid，一定确保不要轻易删除后台应用列表中的 appid，删除后则此人脸库将失效，无法进行任何查找！</li>\n</ul>\n<p>收费方式：</p>\n<p><a href=\"https://cloud.baidu.com/doc/FACE/s/Uk37c1m9b#1%E3%80%81%E5%85%AC%E6%9C%89%E4%BA%91-api\" target=\"_blank\" rel=\"noopener\">https://cloud.baidu.com/doc/FACE/s/Uk37c1m9b#1%E3%80%81%E5%85%AC%E6%9C%89%E4%BA%91-api</a></p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421155208443.png\" alt=\"image-20220421155208443\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p><img src=\"https://blog.shancw.net/public/uploads/image-20220421154942659.png\" alt=\"image-20220421154942659\"></p>\n<p><a href=\"https://console.bce.baidu.com/ai/?fromai=1#/ai/face/overview/index\" target=\"_blank\" rel=\"noopener\">https://console.bce.baidu.com/ai/?fromai=1#/ai/face/overview/index</a></p>\n<h3 id=\"1-创建应用\"><a href=\"#1-创建应用\" class=\"headerlink\" title=\"1. 创建应用\"></a>1. 创建应用</h3><p><img src=\"https://blog.shancw.net/public/uploads/image-20220421134001091.png\" alt=\"image-20220421134001091\"></p>\n<p>创建成功后，应用列表显示如下</p>\n<img src=\"https://blog.shancw.net/public/uploads/image-20220421134058407.png\" alt=\"image-20220421134058407\" style=\"zoom: 200%;\" />\n\n<h3 id=\"2-创建人脸库\"><a href=\"#2-创建人脸库\" class=\"headerlink\" title=\"2. 创建人脸库\"></a>2. 创建人脸库</h3><p>人脸注册，有两种方式：</p>\n<ol>\n<li><p>控制台手动上传</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421134340576.png\" alt=\"image-20220421134340576\"></p>\n</li>\n<li><p>调用接口上传</p>\n</li>\n</ol>\n<p><a href=\"https://ai.baidu.com/ai-doc/FACE/ak3co86dk#%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8C\" target=\"_blank\" rel=\"noopener\">https://ai.baidu.com/ai-doc/FACE/ak3co86dk#%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8C</a></p>\n<h3 id=\"3-具体接口调用\"><a href=\"#3-具体接口调用\" class=\"headerlink\" title=\"3. 具体接口调用\"></a>3. 具体接口调用</h3><h4 id=\"access-token-获取\"><a href=\"#access-token-获取\" class=\"headerlink\" title=\"access_token 获取\"></a>access_token 获取</h4><blockquote>\n<p>通过 API Key 和 Secret Key 获取的 access_token,参考“<a href=\"http://ai.baidu.com/docs#/Auth\" target=\"_blank\" rel=\"noopener\">Access Token 获取</a>”</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: https://aip.baidubce.com/oauth/2.0/token</span><br><span class=\"line\">method: get</span><br><span class=\"line\">urlParameters:</span><br><span class=\"line\">\tgrant_type: 必须参数，固定为 <span class=\"string\">'client_credentials'</span></span><br><span class=\"line\">\tclient_id:  必须参数，应用的api key</span><br><span class=\"line\">\tclient_secret: 必须参数，应用的Secret key</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i -k <span class=\"string\">'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=【百度云应用的AK】&amp;client_secret=【百度云应用的SK】'</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421140709752.png\" alt=\"image-20220421140709752\"></p>\n<h4 id=\"人脸注册接口调用\"><a href=\"#人脸注册接口调用\" class=\"headerlink\" title=\"人脸注册接口调用\"></a>人脸注册接口调用</h4><p>接口的约束如下：</p>\n<ul>\n<li><p><strong>人脸识别接口分为 V2 和 V3 两个版本，本文档为 V3 版本接口的说明文档</strong></p>\n<p>确认方式：查看创建的应用详情</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421150322834.png\" alt=\"image-20220421150322834\"></p>\n</li>\n</ul>\n<p>​</p>\n<p>URL：<a href=\"https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add\" target=\"_blank\" rel=\"noopener\">https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add</a></p>\n<p>URL 参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>通过 API Key 和 Secret Key 获取的 access_token,参考“<a href=\"http://ai.baidu.com/docs#/Auth\" target=\"_blank\" rel=\"noopener\">Access Token 获取</a>”</td>\n</tr>\n</tbody></table>\n<p>Header 如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content-Type</td>\n<td>application/json</td>\n</tr>\n</tbody></table>\n<p>Body 中放置请求参数，参数详情如下：</p>\n<p><strong>请求参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>必选</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>image</td>\n<td>是</td>\n<td>string</td>\n<td>图片信息(<strong>总数据大小应小于 10M</strong>)，图片上传方式根据 image_type 来判断。 注：组内每个 uid 下的人脸图片数目上限为 20 张</td>\n</tr>\n<tr>\n<td>image_type</td>\n<td>是</td>\n<td>string</td>\n<td>图片类型 <strong>BASE64</strong>:图片的 base64 值，base64 编码后的图片数据，编码后的图片大小不超过 2M； <strong>URL</strong>:图片的 URL 地址( 可能由于网络等原因导致下载图片时间过长)；</td>\n</tr>\n<tr>\n<td>group_id</td>\n<td>是</td>\n<td>string</td>\n<td>用户组 id，标识一组用户（由数字、字母、下划线组成），长度限制 48B。<strong>产品建议</strong>：根据您的业务需求，可以将需要注册的用户，按照业务划分，分配到不同的 group 下，例如按照会员手机尾号作为 groupid，用于刷脸支付、会员计费消费等，这样可以尽可能控制每个 group 下的用户数与人脸数，提升检索的准确率</td>\n</tr>\n<tr>\n<td>user_id</td>\n<td>是</td>\n<td>string</td>\n<td>用户 id（由数字、字母、下划线组成），长度限制 128B</td>\n</tr>\n<tr>\n<td>scene_type</td>\n<td>是</td>\n<td>string</td>\n<td>场景类型选择，<strong>SEC</strong>: 视频监控场景</td>\n</tr>\n<tr>\n<td>user_info</td>\n<td>否</td>\n<td>string</td>\n<td>用户资料，长度限制 256B 默认空</td>\n</tr>\n<tr>\n<td>quality_control</td>\n<td>否</td>\n<td>string</td>\n<td>图片质量控制 <strong>NONE</strong>: 不进行控制 <strong>LOW</strong>:较低的质量要求 <strong>NORMAL</strong>: 一般的质量要求 <strong>HIGH</strong>: 较高的质量要求 <strong>默认 NONE</strong> 若图片质量不满足要求，则返回结果中会提示质量检测失败</td>\n</tr>\n<tr>\n<td>liveness_control</td>\n<td>否</td>\n<td>string</td>\n<td>活体检测控制 <strong>NONE</strong>: 不进行控制 <strong>LOW</strong>:较低的活体要求(高通过率 低攻击拒绝率) <strong>NORMAL</strong>: 一般的活体要求(平衡的攻击拒绝率, 通过率) <strong>HIGH</strong>: 较高的活体要求(高攻击拒绝率 低通过率) <strong>默认 NONE</strong> 若活体检测结果不满足要求，则返回结果中会提示活体检测失败</td>\n</tr>\n<tr>\n<td>action_type</td>\n<td>否</td>\n<td>string</td>\n<td><strong>操作方式</strong> APPEND: 当 user_id 在库中已经存在时，对此 user_id 重复注册时，新注册的图片默认会追加到该 user_id 下 REPLACE : 当对此 user_id 重复注册时,则会用新图替换库中该 user_id 下所有图片 默认使用 APPEND</td>\n</tr>\n<tr>\n<td>face_sort_type</td>\n<td>否</td>\n<td>int</td>\n<td>人脸检测排序类型 <strong>0</strong>:代表检测出的人脸按照人脸面积从大到小排列 <strong>1</strong>:代表检测出的人脸按照距离图片中心从近到远排列 <strong>默认为 0</strong></td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421152600808.png\" alt=\"image-20220421152600808\"></p>\n<h3 id=\"人脸-M-N-搜索\"><a href=\"#人脸-M-N-搜索\" class=\"headerlink\" title=\"人脸 M:N 搜索\"></a>人脸 M:N 搜索</h3><p><a href=\"https://ai.baidu.com/ai-doc/FACE/Gk37c1uzc#%E4%BA%BA%E8%84%B8%E6%90%9C%E7%B4%A2-mn-%E8%AF%86%E5%88%AB\" target=\"_blank\" rel=\"noopener\">https://ai.baidu.com/ai-doc/FACE/Gk37c1uzc#%E4%BA%BA%E8%84%B8%E6%90%9C%E7%B4%A2-mn-%E8%AF%86%E5%88%AB</a></p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421154735868.png\" alt=\"image-20220421154735868\"></p>\n","site":{"data":{}},"excerpt":"<p>无情分隔符</p>","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"人脸搜索-M：N-识别介绍\"><a href=\"#人脸搜索-M：N-识别介绍\" class=\"headerlink\" title=\"人脸搜索 M：N 识别介绍\"></a>人脸搜索 M：N 识别介绍</h3><ul>\n<li>人脸搜索 M：N 也称为 M：N 识别，待识别图片中含有多个人脸时，在指定人脸集合中，找到这多个人脸分别最相似的人脸</li>\n<li>一张图片最大识别人数上限为 10 人</li>\n</ul>\n<h3 id=\"人脸库结构介绍\"><a href=\"#人脸库结构介绍\" class=\"headerlink\" title=\"人脸库结构介绍\"></a>人脸库结构介绍</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">|- 人脸库(appid)</span><br><span class=\"line\">   |- 用户组一（group_id）</span><br><span class=\"line\">      |- 用户<span class=\"number\">01</span>（uid）</span><br><span class=\"line\">         |- 人脸（faceid）</span><br><span class=\"line\">      |- 用户<span class=\"number\">02</span>（uid）</span><br><span class=\"line\">         |- 人脸（faceid）</span><br><span class=\"line\">         |- 人脸（faceid）</span><br><span class=\"line\">         ....</span><br><span class=\"line\">       ....</span><br><span class=\"line\">   |- 用户组二（group_id）</span><br><span class=\"line\">   |- 用户组三（group_id）</span><br><span class=\"line\">   ....</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>每个用户（user_id）所能注册的最大人脸数量<strong>20</strong>。</p>\n</li>\n<li><p><strong>每个 appid 对应一个人脸库，且不同 appid 之间，人脸库互不相通</strong>。</p>\n</li>\n<li><p><code>access_token</code>的有效期为 30 天，<strong>切记需要每 30 天进行定期更换，或者每次请求都拉取新 token</strong></p>\n<p>建议每次请求拉取新的 token，然后再进行正式请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetchAccessToken.then(<span class=\"function\">(<span class=\"params\">access_token</span>) =&gt;</span> doRealFetchWithAccessToken);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>每个人脸库对应一个 appid，一定确保不要轻易删除后台应用列表中的 appid，删除后则此人脸库将失效，无法进行任何查找！</li>\n</ul>\n<p>收费方式：</p>\n<p><a href=\"https://cloud.baidu.com/doc/FACE/s/Uk37c1m9b#1%E3%80%81%E5%85%AC%E6%9C%89%E4%BA%91-api\" target=\"_blank\" rel=\"noopener\">https://cloud.baidu.com/doc/FACE/s/Uk37c1m9b#1%E3%80%81%E5%85%AC%E6%9C%89%E4%BA%91-api</a></p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421155208443.png\" alt=\"image-20220421155208443\"></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p><img src=\"https://blog.shancw.net/public/uploads/image-20220421154942659.png\" alt=\"image-20220421154942659\"></p>\n<p><a href=\"https://console.bce.baidu.com/ai/?fromai=1#/ai/face/overview/index\" target=\"_blank\" rel=\"noopener\">https://console.bce.baidu.com/ai/?fromai=1#/ai/face/overview/index</a></p>\n<h3 id=\"1-创建应用\"><a href=\"#1-创建应用\" class=\"headerlink\" title=\"1. 创建应用\"></a>1. 创建应用</h3><p><img src=\"https://blog.shancw.net/public/uploads/image-20220421134001091.png\" alt=\"image-20220421134001091\"></p>\n<p>创建成功后，应用列表显示如下</p>\n<img src=\"https://blog.shancw.net/public/uploads/image-20220421134058407.png\" alt=\"image-20220421134058407\" style=\"zoom: 200%;\" />\n\n<h3 id=\"2-创建人脸库\"><a href=\"#2-创建人脸库\" class=\"headerlink\" title=\"2. 创建人脸库\"></a>2. 创建人脸库</h3><p>人脸注册，有两种方式：</p>\n<ol>\n<li><p>控制台手动上传</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421134340576.png\" alt=\"image-20220421134340576\"></p>\n</li>\n<li><p>调用接口上传</p>\n</li>\n</ol>\n<p><a href=\"https://ai.baidu.com/ai-doc/FACE/ak3co86dk#%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8C\" target=\"_blank\" rel=\"noopener\">https://ai.baidu.com/ai-doc/FACE/ak3co86dk#%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8C</a></p>\n<h3 id=\"3-具体接口调用\"><a href=\"#3-具体接口调用\" class=\"headerlink\" title=\"3. 具体接口调用\"></a>3. 具体接口调用</h3><h4 id=\"access-token-获取\"><a href=\"#access-token-获取\" class=\"headerlink\" title=\"access_token 获取\"></a>access_token 获取</h4><blockquote>\n<p>通过 API Key 和 Secret Key 获取的 access_token,参考“<a href=\"http://ai.baidu.com/docs#/Auth\" target=\"_blank\" rel=\"noopener\">Access Token 获取</a>”</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url: https://aip.baidubce.com/oauth/2.0/token</span><br><span class=\"line\">method: get</span><br><span class=\"line\">urlParameters:</span><br><span class=\"line\">\tgrant_type: 必须参数，固定为 <span class=\"string\">'client_credentials'</span></span><br><span class=\"line\">\tclient_id:  必须参数，应用的api key</span><br><span class=\"line\">\tclient_secret: 必须参数，应用的Secret key</span><br></pre></td></tr></table></figure>\n\n<p>示例代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i -k <span class=\"string\">'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=【百度云应用的AK】&amp;client_secret=【百度云应用的SK】'</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421140709752.png\" alt=\"image-20220421140709752\"></p>\n<h4 id=\"人脸注册接口调用\"><a href=\"#人脸注册接口调用\" class=\"headerlink\" title=\"人脸注册接口调用\"></a>人脸注册接口调用</h4><p>接口的约束如下：</p>\n<ul>\n<li><p><strong>人脸识别接口分为 V2 和 V3 两个版本，本文档为 V3 版本接口的说明文档</strong></p>\n<p>确认方式：查看创建的应用详情</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421150322834.png\" alt=\"image-20220421150322834\"></p>\n</li>\n</ul>\n<p>​</p>\n<p>URL：<a href=\"https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add\" target=\"_blank\" rel=\"noopener\">https://aip.baidubce.com/rest/2.0/face/v3/faceset/user/add</a></p>\n<p>URL 参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_token</td>\n<td>通过 API Key 和 Secret Key 获取的 access_token,参考“<a href=\"http://ai.baidu.com/docs#/Auth\" target=\"_blank\" rel=\"noopener\">Access Token 获取</a>”</td>\n</tr>\n</tbody></table>\n<p>Header 如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content-Type</td>\n<td>application/json</td>\n</tr>\n</tbody></table>\n<p>Body 中放置请求参数，参数详情如下：</p>\n<p><strong>请求参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>必选</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>image</td>\n<td>是</td>\n<td>string</td>\n<td>图片信息(<strong>总数据大小应小于 10M</strong>)，图片上传方式根据 image_type 来判断。 注：组内每个 uid 下的人脸图片数目上限为 20 张</td>\n</tr>\n<tr>\n<td>image_type</td>\n<td>是</td>\n<td>string</td>\n<td>图片类型 <strong>BASE64</strong>:图片的 base64 值，base64 编码后的图片数据，编码后的图片大小不超过 2M； <strong>URL</strong>:图片的 URL 地址( 可能由于网络等原因导致下载图片时间过长)；</td>\n</tr>\n<tr>\n<td>group_id</td>\n<td>是</td>\n<td>string</td>\n<td>用户组 id，标识一组用户（由数字、字母、下划线组成），长度限制 48B。<strong>产品建议</strong>：根据您的业务需求，可以将需要注册的用户，按照业务划分，分配到不同的 group 下，例如按照会员手机尾号作为 groupid，用于刷脸支付、会员计费消费等，这样可以尽可能控制每个 group 下的用户数与人脸数，提升检索的准确率</td>\n</tr>\n<tr>\n<td>user_id</td>\n<td>是</td>\n<td>string</td>\n<td>用户 id（由数字、字母、下划线组成），长度限制 128B</td>\n</tr>\n<tr>\n<td>scene_type</td>\n<td>是</td>\n<td>string</td>\n<td>场景类型选择，<strong>SEC</strong>: 视频监控场景</td>\n</tr>\n<tr>\n<td>user_info</td>\n<td>否</td>\n<td>string</td>\n<td>用户资料，长度限制 256B 默认空</td>\n</tr>\n<tr>\n<td>quality_control</td>\n<td>否</td>\n<td>string</td>\n<td>图片质量控制 <strong>NONE</strong>: 不进行控制 <strong>LOW</strong>:较低的质量要求 <strong>NORMAL</strong>: 一般的质量要求 <strong>HIGH</strong>: 较高的质量要求 <strong>默认 NONE</strong> 若图片质量不满足要求，则返回结果中会提示质量检测失败</td>\n</tr>\n<tr>\n<td>liveness_control</td>\n<td>否</td>\n<td>string</td>\n<td>活体检测控制 <strong>NONE</strong>: 不进行控制 <strong>LOW</strong>:较低的活体要求(高通过率 低攻击拒绝率) <strong>NORMAL</strong>: 一般的活体要求(平衡的攻击拒绝率, 通过率) <strong>HIGH</strong>: 较高的活体要求(高攻击拒绝率 低通过率) <strong>默认 NONE</strong> 若活体检测结果不满足要求，则返回结果中会提示活体检测失败</td>\n</tr>\n<tr>\n<td>action_type</td>\n<td>否</td>\n<td>string</td>\n<td><strong>操作方式</strong> APPEND: 当 user_id 在库中已经存在时，对此 user_id 重复注册时，新注册的图片默认会追加到该 user_id 下 REPLACE : 当对此 user_id 重复注册时,则会用新图替换库中该 user_id 下所有图片 默认使用 APPEND</td>\n</tr>\n<tr>\n<td>face_sort_type</td>\n<td>否</td>\n<td>int</td>\n<td>人脸检测排序类型 <strong>0</strong>:代表检测出的人脸按照人脸面积从大到小排列 <strong>1</strong>:代表检测出的人脸按照距离图片中心从近到远排列 <strong>默认为 0</strong></td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421152600808.png\" alt=\"image-20220421152600808\"></p>\n<h3 id=\"人脸-M-N-搜索\"><a href=\"#人脸-M-N-搜索\" class=\"headerlink\" title=\"人脸 M:N 搜索\"></a>人脸 M:N 搜索</h3><p><a href=\"https://ai.baidu.com/ai-doc/FACE/Gk37c1uzc#%E4%BA%BA%E8%84%B8%E6%90%9C%E7%B4%A2-mn-%E8%AF%86%E5%88%AB\" target=\"_blank\" rel=\"noopener\">https://ai.baidu.com/ai-doc/FACE/Gk37c1uzc#%E4%BA%BA%E8%84%B8%E6%90%9C%E7%B4%A2-mn-%E8%AF%86%E5%88%AB</a></p>\n<p><img src=\"https://blog.shancw.net/public/uploads/image-20220421154735868.png\" alt=\"image-20220421154735868\"></p>"},{"title":"一分钟自建 zerotier-planet 行星服务器","toc":true,"date":"2022-03-17T16:00:00.000Z","_content":"\n通过 docker 简单部署 zerotier-planet\n[github 地址](https://github.com/Jonnyan404/zerotier-planet)\n\n<!-- more -->\n\n```bash\ndocker run --restart=on-failure:3 -d --name ztncui -e HTTP_PORT=4000 -e HTTP_ALL_INTERFACES=yes -e ZTNCUI_PASSWD=mrdoc.fun -p 4000:4000 keynetworks/ztncui\n```\n\n然后访问 http://ip:4000 访问 web 界面.\n\n用户名:admin\n密码:mrdoc.fun\n","source":"_posts/zerotier-planet.md","raw":"---\ntitle: 一分钟自建 zerotier-planet 行星服务器\ncategories: []\ntags: []\ntoc: true\ndate: 2022/3/18\n---\n\n通过 docker 简单部署 zerotier-planet\n[github 地址](https://github.com/Jonnyan404/zerotier-planet)\n\n<!-- more -->\n\n```bash\ndocker run --restart=on-failure:3 -d --name ztncui -e HTTP_PORT=4000 -e HTTP_ALL_INTERFACES=yes -e ZTNCUI_PASSWD=mrdoc.fun -p 4000:4000 keynetworks/ztncui\n```\n\n然后访问 http://ip:4000 访问 web 界面.\n\n用户名:admin\n密码:mrdoc.fun\n","slug":"zerotier-planet","published":1,"updated":"2022-03-18T12:56:52.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3sbl7l30081gosw9qj58k97","content":"<p>通过 docker 简单部署 zerotier-planet<br><a href=\"https://github.com/Jonnyan404/zerotier-planet\" target=\"_blank\" rel=\"noopener\">github 地址</a></p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=on-failure:3 -d --name ztncui -e HTTP_PORT=4000 -e HTTP_ALL_INTERFACES=yes -e ZTNCUI_PASSWD=mrdoc.fun -p 4000:4000 keynetworks/ztncui</span><br></pre></td></tr></table></figure>\n\n<p>然后访问 <a href=\"http://ip:4000\" target=\"_blank\" rel=\"noopener\">http://ip:4000</a> 访问 web 界面.</p>\n<p>用户名:admin<br>密码:mrdoc.fun</p>\n","site":{"data":{}},"excerpt":"<p>通过 docker 简单部署 zerotier-planet<br><a href=\"https://github.com/Jonnyan404/zerotier-planet\" target=\"_blank\" rel=\"noopener\">github 地址</a></p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart=on-failure:3 -d --name ztncui -e HTTP_PORT=4000 -e HTTP_ALL_INTERFACES=yes -e ZTNCUI_PASSWD=mrdoc.fun -p 4000:4000 keynetworks/ztncui</span><br></pre></td></tr></table></figure>\n\n<p>然后访问 <a href=\"http://ip:4000\" target=\"_blank\" rel=\"noopener\">http://ip:4000</a> 访问 web 界面.</p>\n<p>用户名:admin<br>密码:mrdoc.fun</p>"}],"PostAsset":[{"_id":"source/_posts/algorithm-BST/236.png","slug":"236.png","post":"cl3sbl7im000pgosw5ae1fupr","modified":0,"renderable":0},{"_id":"source/_posts/js-promise/promise.png","slug":"promise.png","post":"cl3sbl7jy003igoswb2dpbscc","modified":0,"renderable":0},{"_id":"source/_posts/auto-deploy/webhook.jpg","slug":"webhook.jpg","post":"cl3sbl7jg001mgoswb1rh4asq","modified":0,"renderable":0},{"_id":"source/_posts/git-operation/git-rebase.png","slug":"git-rebase.png","post":"cl3sbl7jo002fgosw7vbn6ogn","modified":0,"renderable":0},{"_id":"source/_posts/vue-2-reactivity-implement/data-structure.png","slug":"data-structure.png","post":"cl3sbl7kv006zgosw40565xtu","modified":0,"renderable":0},{"_id":"source/_posts/vue-next-nextTick/eventloop.jpeg","slug":"eventloop.jpeg","post":"cl3sbl7ky007dgoswcxzge5pb","modified":0,"renderable":0},{"_id":"source/_posts/vue-next-reactivity/data-structure.jpeg","slug":"data-structure.jpeg","post":"cl3sbl7ky007hgosw3ivu1cc2","modified":0,"renderable":0},{"_id":"source/_posts/HTTP-cache/cache-control-strategy.png","slug":"cache-control-strategy.png","post":"cl3sbl7ic0008goswbeoo8nz7","modified":0,"renderable":0},{"_id":"source/_posts/HTTP-cache/mindSet.png","slug":"mindSet.png","post":"cl3sbl7ic0008goswbeoo8nz7","modified":0,"renderable":0},{"_id":"source/_posts/algorithm-BST/1038.png","slug":"1038.png","post":"cl3sbl7im000pgosw5ae1fupr","modified":0,"renderable":0},{"_id":"source/_posts/js-prototype-constructor/assign-new-prototype.png","slug":"assign-new-prototype.png","post":"cl3sbl7k2003rgoswba78166v","modified":0,"renderable":0},{"_id":"source/_posts/js-prototype-constructor/create-obj.png","slug":"create-obj.png","post":"cl3sbl7k2003rgoswba78166v","modified":0,"renderable":0},{"_id":"source/_posts/js-prototype-constructor/define-constructor.png","slug":"define-constructor.png","post":"cl3sbl7k2003rgoswba78166v","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl3sbl7i00000goswdbu1c1bp","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7ii000hgoswca0mg9w1"},{"post_id":"cl3sbl7i60002gosw5zq7ct6g","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7im000ngosw0hmr7t20"},{"post_id":"cl3sbl7ij000kgoswcan1a70e","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7iq000sgosw64x7a52k"},{"post_id":"cl3sbl7ib0006goswhnks8wt0","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7it000xgoswaw9q6j35"},{"post_id":"cl3sbl7ic0008goswbeoo8nz7","category_id":"cl3sbl7im000mgosw0w036omc","_id":"cl3sbl7iw0010goswaj6oeuq1"},{"post_id":"cl3sbl7it000wgoswbbsl7zos","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7j10015gosw5fti61dq"},{"post_id":"cl3sbl7id000agoswgiqpdby6","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7j30017gosw62qebnkl"},{"post_id":"cl3sbl7ig000fgosw6hcpebfs","category_id":"cl3sbl7ix0011gosw2lka9qtp","_id":"cl3sbl7ja001cgosw70wke0c3"},{"post_id":"cl3sbl7j6001agoswgumwcuhx","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7je001igosw1nqn5vl9"},{"post_id":"cl3sbl7il000lgoswhimzglqc","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jg001ngosw9phe4ad2"},{"post_id":"cl3sbl7j8001bgosw5ltdcn8z","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jh001qgoswchswhcqu"},{"post_id":"cl3sbl7jd001fgoswb6sl69l1","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7ji001ugosw9csr6dne"},{"post_id":"cl3sbl7im000pgosw5ae1fupr","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jj001ygosw62q5e0h2"},{"post_id":"cl3sbl7je001hgoswgy3c4rhx","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jk0021gosw3wz36oil"},{"post_id":"cl3sbl7iv000zgosw94ej3zim","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jl0024gosw4mxv7p8h"},{"post_id":"cl3sbl7jh001pgoswfvktgd58","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jm0028gosw5xbe9edj"},{"post_id":"cl3sbl7ji001tgoswec0ghwl7","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jn002cgosw3t81cinj"},{"post_id":"cl3sbl7ix0012gosw2d9qblv1","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jo002ggosw842v784m"},{"post_id":"cl3sbl7j00014goswhogg85z0","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jp002kgoswg4dhc2rf"},{"post_id":"cl3sbl7jl0023gosw6v3yf08h","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7jq002ogoswgck483ve"},{"post_id":"cl3sbl7jm0027gosw2n0fhx0f","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7jr002sgosw1l4m6wn7"},{"post_id":"cl3sbl7j20016gosw6ijth7is","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7js002wgoswcwznhhc9"},{"post_id":"cl3sbl7jn002bgoswgzzm4d50","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7jt002zgosw8vz05xig"},{"post_id":"cl3sbl7jg001mgoswb1rh4asq","category_id":"cl3sbl7jn002egosweqo8731f","_id":"cl3sbl7ju0033goswdaky7v17"},{"post_id":"cl3sbl7jp002jgoswc5mz54k2","category_id":"cl3sbl7jn002egosweqo8731f","_id":"cl3sbl7jv0036goswhatc99jd"},{"post_id":"cl3sbl7jq002ngosw2e0jg3a3","category_id":"cl3sbl7j30018gosw74wlhr0p","_id":"cl3sbl7jw003agosw6x75f6qc"},{"post_id":"cl3sbl7jk0020goswhbf2enua","category_id":"cl3sbl7jn002egosweqo8731f","_id":"cl3sbl7jx003dgosw9af2f62t"},{"post_id":"cl3sbl7jr002rgoswgvo0bh71","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7jy003ggoswhh6bh4ld"},{"post_id":"cl3sbl7js002vgoswe7ri1m7r","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7jz003jgosw7wcx0lw2"},{"post_id":"cl3sbl7jo002fgosw7vbn6ogn","category_id":"cl3sbl7js002ugosw8zjx3x7r","_id":"cl3sbl7k0003mgoswatvz6o0s"},{"post_id":"cl3sbl7jt002ygosw8h2w5k7g","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7k0003pgoswgg75hubg"},{"post_id":"cl3sbl7jt0032gosw38utfluz","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7k3003sgosw79h5bs2r"},{"post_id":"cl3sbl7ju0035goswhscyevus","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7k3003vgosw3noq1zf2"},{"post_id":"cl3sbl7jv0039goswgs7m5r37","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7k4003ygoswcbkn5yj6"},{"post_id":"cl3sbl7jx003cgosw2v0p3wd1","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7k50041gosw7ki98u92"},{"post_id":"cl3sbl7jy003fgoswekm0egu7","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7k60044gosw2ut26nwi"},{"post_id":"cl3sbl7jy003igoswb2dpbscc","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7k60046goswddydc2tg"},{"post_id":"cl3sbl7jz003lgoswel65bzce","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7k70049goswc0rn9sav"},{"post_id":"cl3sbl7k0003ogoswaglpbhw0","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7k7004cgoswa3whagvb"},{"post_id":"cl3sbl7k2003rgoswba78166v","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7k8004fgoswhfs56oih"},{"post_id":"cl3sbl7k3003ugoswd90ohov8","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7k9004jgosw1d9mev4t"},{"post_id":"cl3sbl7k4003xgoswfsok6gew","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7k9004lgoswgoud39vu"},{"post_id":"cl3sbl7k40040goswceblf8xh","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7ka004pgoswaxlz9glz"},{"post_id":"cl3sbl7k50043goswhsvq5331","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7kb004sgoswhyxbdj4u"},{"post_id":"cl3sbl7k70048goswd5aycqe5","category_id":"cl3sbl7jn002egosweqo8731f","_id":"cl3sbl7kc004wgoswgpyf236z"},{"post_id":"cl3sbl7k8004egoswelhcbl4h","category_id":"cl3sbl7jn002egosweqo8731f","_id":"cl3sbl7kc004zgoswh44thkum"},{"post_id":"cl3sbl7k9004igosw2nqngewm","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7kf0053goswam4010ho"},{"post_id":"cl3sbl7k9004kgoswevz6280j","category_id":"cl3sbl7i90004gosw14dtg1xt","_id":"cl3sbl7kg0056goswgwg35mbz"},{"post_id":"cl3sbl7k7004bgosw4wh14ogc","category_id":"cl3sbl7k8004hgosw6jhk94ak","_id":"cl3sbl7ki005agoswaloffgvv"},{"post_id":"cl3sbl7ka004ogosw0bg7dyaz","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kj005dgosw7dd04bsg"},{"post_id":"cl3sbl7kb004rgosw97ppa8fh","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kj005ggoswei31bggu"},{"post_id":"cl3sbl7kc004ygoswafdzb3yx","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kk005kgoswdd7b37n2"},{"post_id":"cl3sbl7kd0052goswafos6lfd","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kl005mgoswbdkx1bgx"},{"post_id":"cl3sbl7kg0055gosw4xovfi3a","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7km005pgosw1ctjdp0r"},{"post_id":"cl3sbl7kh0059goswestig7du","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7km005sgosw102q13y0"},{"post_id":"cl3sbl7ki005cgosw3gl00sdb","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kn005wgosw9vkhaqyr"},{"post_id":"cl3sbl7kj005fgosw9k4larb6","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7ko005zgosw082vb5ip"},{"post_id":"cl3sbl7kk005jgosw9qvrgaj2","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7ko0062gosw62tg0wqw"},{"post_id":"cl3sbl7kk005lgoswbgxp0agt","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7kp0065goswa0y5f42p"},{"post_id":"cl3sbl7kl005ogosw0i5x21z7","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7kq0069goswgf79gfdc"},{"post_id":"cl3sbl7km005rgosw1gdehnum","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7kr006cgosw6oktg455"},{"post_id":"cl3sbl7kn005vgosw7sf45hx3","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7kr006ggoswbqm7h139"},{"post_id":"cl3sbl7kn005ygosw6d6hf6ym","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7ks006jgoswfzk86ryw"},{"post_id":"cl3sbl7ko0061gosw8xa632b6","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7kt006mgosw2k75hhgb"},{"post_id":"cl3sbl7kp0064goswanpl7dd8","category_id":"cl3sbl7is000ugosw7t6k9h5u","_id":"cl3sbl7kt006qgoswbx8d2l5o"},{"post_id":"cl3sbl7kp0068gosw7g7u012e","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7ku006tgoswf1nf3ofd"},{"post_id":"cl3sbl7kq006bgoswdku0f0ox","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kv006xgoswai4tcpzm"},{"post_id":"cl3sbl7kr006fgoswf502hz29","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kv0070gosw25jzev8p"},{"post_id":"cl3sbl7ks006igosw2m1qhi8q","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kw0074gosw3e7u3bmk"},{"post_id":"cl3sbl7ks006lgosw3yicdixm","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kx0077goswcapnhrx3"},{"post_id":"cl3sbl7kt006pgosw0juv1gsv","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kx007bgoswfevq4spc"},{"post_id":"cl3sbl7ku006sgosw6huwba2t","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7ky007egosw89jd7oq4"},{"post_id":"cl3sbl7ku006wgoswesom5bdb","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7kz007igoswfg10dmfb"},{"post_id":"cl3sbl7kv006zgosw40565xtu","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l0007lgoswdts83fqw"},{"post_id":"cl3sbl7kw0073gosw2lye4drv","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l0007pgosw064727pv"},{"post_id":"cl3sbl7kw0076goswhylj5xcm","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l1007sgosw31bg61qe"},{"post_id":"cl3sbl7kx007agosw3vw18ypy","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l2007wgosw1zi589ci"},{"post_id":"cl3sbl7ky007dgoswcxzge5pb","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l2007zgoswe9ly97jx"},{"post_id":"cl3sbl7ky007hgosw3ivu1cc2","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l30082gosw42s2a4an"},{"post_id":"cl3sbl7kz007kgosw9c1k5mpy","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l30085goswalaid4r8"},{"post_id":"cl3sbl7l0007ogoswh8kfdjpm","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l30087gosw79ygdsl0"},{"post_id":"cl3sbl7l1007vgoswdu32652m","category_id":"cl3sbl7ie000bgosw8z5n6glw","_id":"cl3sbl7l4008agosw4fu4619x"},{"post_id":"cl3sbl7l2007ygoswgi591mpq","category_id":"cl3sbl7jn002egosweqo8731f","_id":"cl3sbl7l4008cgosw2qyw0j5b"}],"PostTag":[{"post_id":"cl3sbl7i00000goswdbu1c1bp","tag_id":"cl3sbl7ia0005goswhuyx7ft3","_id":"cl3sbl7ig000egosw7vo57aue"},{"post_id":"cl3sbl7i60002gosw5zq7ct6g","tag_id":"cl3sbl7if000cgosw3c3k4nce","_id":"cl3sbl7in000qgosw8kkhc79g"},{"post_id":"cl3sbl7i60002gosw5zq7ct6g","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7ir000tgoswehfv94rd"},{"post_id":"cl3sbl7ib0006goswhnks8wt0","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7iu000ygosw8hoh0isu"},{"post_id":"cl3sbl7id000agoswgiqpdby6","tag_id":"cl3sbl7is000vgoswgszu9jp6","_id":"cl3sbl7je001ggoswch3b5jt6"},{"post_id":"cl3sbl7id000agoswgiqpdby6","tag_id":"cl3sbl7iy0013goswftxq154h","_id":"cl3sbl7jf001kgosw98gn8qvl"},{"post_id":"cl3sbl7id000agoswgiqpdby6","tag_id":"cl3sbl7j30019gosw4xguf1ii","_id":"cl3sbl7jg001ogosw0jjf2zhb"},{"post_id":"cl3sbl7ij000kgoswcan1a70e","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7jh001sgosw91xyag6a"},{"post_id":"cl3sbl7ij000kgoswcan1a70e","tag_id":"cl3sbl7jc001egoswgc8abjd0","_id":"cl3sbl7jj001wgoswc38ec1c1"},{"post_id":"cl3sbl7il000lgoswhimzglqc","tag_id":"cl3sbl7jf001lgoswbshahjdo","_id":"cl3sbl7jl0025gosw26h468eq"},{"post_id":"cl3sbl7il000lgoswhimzglqc","tag_id":"cl3sbl7ji001vgoswcf3f5bk5","_id":"cl3sbl7jm0029gosw34d7c8x0"},{"post_id":"cl3sbl7jl0023gosw6v3yf08h","tag_id":"cl3sbl7ia0005goswhuyx7ft3","_id":"cl3sbl7jn002dgoswgpw06h4t"},{"post_id":"cl3sbl7jm0027gosw2n0fhx0f","tag_id":"cl3sbl7if000cgosw3c3k4nce","_id":"cl3sbl7jo002hgoswgdql2vbb"},{"post_id":"cl3sbl7jm0027gosw2n0fhx0f","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7jp002lgosw9vr27bcd"},{"post_id":"cl3sbl7jn002bgoswgzzm4d50","tag_id":"cl3sbl7ia0005goswhuyx7ft3","_id":"cl3sbl7jr002pgoswdwtre3f2"},{"post_id":"cl3sbl7im000pgosw5ae1fupr","tag_id":"cl3sbl7jf001lgoswbshahjdo","_id":"cl3sbl7jr002tgosw6t9d6ib6"},{"post_id":"cl3sbl7im000pgosw5ae1fupr","tag_id":"cl3sbl7jm002agoswcmks2m9j","_id":"cl3sbl7js002xgosw0qor98xw"},{"post_id":"cl3sbl7js002vgoswe7ri1m7r","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7jt0031goswf40dc81e"},{"post_id":"cl3sbl7it000wgoswbbsl7zos","tag_id":"cl3sbl7jo002igosw7m9fajof","_id":"cl3sbl7ju0034gosw0wnd8akh"},{"post_id":"cl3sbl7it000wgoswbbsl7zos","tag_id":"cl3sbl7jr002qgoswfmur3cr1","_id":"cl3sbl7jv0038goswfcit64re"},{"post_id":"cl3sbl7iv000zgosw94ej3zim","tag_id":"cl3sbl7jt0030gosw5xgb2ajl","_id":"cl3sbl7jx003bgosw7hbc4a7q"},{"post_id":"cl3sbl7ix0012gosw2d9qblv1","tag_id":"cl3sbl7jv0037goswfimw313o","_id":"cl3sbl7jy003hgosw48ab9ryu"},{"post_id":"cl3sbl7j20016gosw6ijth7is","tag_id":"cl3sbl7jt0030gosw5xgb2ajl","_id":"cl3sbl7k0003ngoswdx5z8n0z"},{"post_id":"cl3sbl7j6001agoswgumwcuhx","tag_id":"cl3sbl7jz003kgoswde3v27av","_id":"cl3sbl7k3003tgosw2piacsze"},{"post_id":"cl3sbl7j8001bgosw5ltdcn8z","tag_id":"cl3sbl7jt0030gosw5xgb2ajl","_id":"cl3sbl7k4003zgoswhblu38oj"},{"post_id":"cl3sbl7jd001fgoswb6sl69l1","tag_id":"cl3sbl7jf001lgoswbshahjdo","_id":"cl3sbl7k7004agosw19vf4ghq"},{"post_id":"cl3sbl7jd001fgoswb6sl69l1","tag_id":"cl3sbl7jt0030gosw5xgb2ajl","_id":"cl3sbl7k8004dgosw9uut6e5o"},{"post_id":"cl3sbl7je001hgoswgy3c4rhx","tag_id":"cl3sbl7k60047goswdrhegz1u","_id":"cl3sbl7ka004ngoswc1dg0kfs"},{"post_id":"cl3sbl7je001hgoswgy3c4rhx","tag_id":"cl3sbl7jt0030gosw5xgb2ajl","_id":"cl3sbl7ka004qgosw0ksxc7u1"},{"post_id":"cl3sbl7ka004ogosw0bg7dyaz","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7kb004ugosw70ifamrm"},{"post_id":"cl3sbl7jo002fgosw7vbn6ogn","tag_id":"cl3sbl7ka004mgoswayqwh3wl","_id":"cl3sbl7kc004xgoswdykab0aj"},{"post_id":"cl3sbl7kb004rgosw97ppa8fh","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7kd0051gosw0wdn1h22"},{"post_id":"cl3sbl7kc004ygoswafdzb3yx","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7kf0054gosw97l41li7"},{"post_id":"cl3sbl7kd0052goswafos6lfd","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7kh0058gosw63v48f6q"},{"post_id":"cl3sbl7jp002jgoswc5mz54k2","tag_id":"cl3sbl7kb004tgosw2l9t2gvq","_id":"cl3sbl7ki005bgosw2x642vhd"},{"post_id":"cl3sbl7jp002jgoswc5mz54k2","tag_id":"cl3sbl7kc0050goswefzu9cm4","_id":"cl3sbl7kj005egoswbeoxeyjo"},{"post_id":"cl3sbl7ki005cgosw3gl00sdb","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7kk005igosw0chd4ekz"},{"post_id":"cl3sbl7jt002ygosw8h2w5k7g","tag_id":"cl3sbl7kg0057goswgasvhmz7","_id":"cl3sbl7km005qgoswfy2w97ir"},{"post_id":"cl3sbl7jt002ygosw8h2w5k7g","tag_id":"cl3sbl7kk005hgosw1lddaxyp","_id":"cl3sbl7km005tgosw0xeh1us4"},{"post_id":"cl3sbl7jt0032gosw38utfluz","tag_id":"cl3sbl7kl005ngosw52wdblw5","_id":"cl3sbl7kn005xgosw2lyd5o30"},{"post_id":"cl3sbl7ju0035goswhscyevus","tag_id":"cl3sbl7km005ugosw6smp0iah","_id":"cl3sbl7kp0063gosw2p2988dk"},{"post_id":"cl3sbl7kn005ygosw6d6hf6ym","tag_id":"cl3sbl7j30019gosw4xguf1ii","_id":"cl3sbl7kp0066goswe1jbcuzs"},{"post_id":"cl3sbl7jv0039goswgs7m5r37","tag_id":"cl3sbl7kl005ngosw52wdblw5","_id":"cl3sbl7kq006agosw142l3xur"},{"post_id":"cl3sbl7kp0068gosw7g7u012e","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7kr006dgosw0ncjbmza"},{"post_id":"cl3sbl7jy003fgoswekm0egu7","tag_id":"cl3sbl7km005ugosw6smp0iah","_id":"cl3sbl7ks006hgosw9wcy6gav"},{"post_id":"cl3sbl7kq006bgoswdku0f0ox","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7ks006kgosw9rb67aub"},{"post_id":"cl3sbl7kr006fgoswf502hz29","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7kt006ogosw0jj482a8"},{"post_id":"cl3sbl7ks006igosw2m1qhi8q","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7kt006rgosw7yvr5wk2"},{"post_id":"cl3sbl7ks006lgosw3yicdixm","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7ku006vgoswdpj4blfw"},{"post_id":"cl3sbl7kt006pgosw0juv1gsv","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7kv006ygoswce2f9bgx"},{"post_id":"cl3sbl7jy003igoswb2dpbscc","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7kw0072gosw06n68h9x"},{"post_id":"cl3sbl7jy003igoswb2dpbscc","tag_id":"cl3sbl7kr006egosw8k7d9h1c","_id":"cl3sbl7kw0075gosw27qa4ykz"},{"post_id":"cl3sbl7jy003igoswb2dpbscc","tag_id":"cl3sbl7kt006ngosw2kbq9co3","_id":"cl3sbl7kx0078goswbbjr8uvh"},{"post_id":"cl3sbl7ku006wgoswesom5bdb","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7ky007cgoswd1z86mxt"},{"post_id":"cl3sbl7jz003lgoswel65bzce","tag_id":"cl3sbl7ku006ugoswghdy4s71","_id":"cl3sbl7ky007fgosw9bzzfaj1"},{"post_id":"cl3sbl7kw0073gosw2lye4drv","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7kz007jgoswh3geh5r9"},{"post_id":"cl3sbl7k0003ogoswaglpbhw0","tag_id":"cl3sbl7kv0071gosw4cydaggp","_id":"cl3sbl7l0007mgosw61b29uz0"},{"post_id":"cl3sbl7kw0076goswhylj5xcm","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7l1007qgoswdyyccsbh"},{"post_id":"cl3sbl7kx007agosw3vw18ypy","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7l1007tgosw4awrhnbm"},{"post_id":"cl3sbl7k2003rgoswba78166v","tag_id":"cl3sbl7kt006ngosw2kbq9co3","_id":"cl3sbl7l2007xgosw072m87mv"},{"post_id":"cl3sbl7k4003xgoswfsok6gew","tag_id":"cl3sbl7kg0057goswgasvhmz7","_id":"cl3sbl7l20080gosw3fcm2c5f"},{"post_id":"cl3sbl7l0007ogoswh8kfdjpm","tag_id":"cl3sbl7jc001egoswgc8abjd0","_id":"cl3sbl7l30084goswbh6udhim"},{"post_id":"cl3sbl7k40040goswceblf8xh","tag_id":"cl3sbl7kv0071gosw4cydaggp","_id":"cl3sbl7l30086goswegrc1t3n"},{"post_id":"cl3sbl7l1007vgoswdu32652m","tag_id":"cl3sbl7jc001egoswgc8abjd0","_id":"cl3sbl7l40089goswfo77376c"},{"post_id":"cl3sbl7k50043goswhsvq5331","tag_id":"cl3sbl7l1007ugoswcwzl95io","_id":"cl3sbl7l4008bgosw9mrzdcfp"},{"post_id":"cl3sbl7k7004bgosw4wh14ogc","tag_id":"cl3sbl7l30083gosw606c31se","_id":"cl3sbl7l4008egoswec4p24f5"},{"post_id":"cl3sbl7k7004bgosw4wh14ogc","tag_id":"cl3sbl7l40088gosw08f383ka","_id":"cl3sbl7l4008fgosw8rnm1o0k"},{"post_id":"cl3sbl7k8004egoswelhcbl4h","tag_id":"cl3sbl7is000vgoswgszu9jp6","_id":"cl3sbl7l5008igosw6bvp8vql"},{"post_id":"cl3sbl7k8004egoswelhcbl4h","tag_id":"cl3sbl7l4008dgosw3adlccoy","_id":"cl3sbl7l5008jgosw2g5hh7m4"},{"post_id":"cl3sbl7k8004egoswelhcbl4h","tag_id":"cl3sbl7l4008ggosw5z62etdp","_id":"cl3sbl7l6008lgosw4ghv11j8"},{"post_id":"cl3sbl7k9004igosw2nqngewm","tag_id":"cl3sbl7l1007ugoswcwzl95io","_id":"cl3sbl7l6008mgoswhq4y2lbr"},{"post_id":"cl3sbl7k9004kgoswevz6280j","tag_id":"cl3sbl7l5008kgosw7rnu47rm","_id":"cl3sbl7l6008pgoswb8n8ac0a"},{"post_id":"cl3sbl7k9004kgoswevz6280j","tag_id":"cl3sbl7l6008ngosw6xfudzf3","_id":"cl3sbl7l6008qgosw8td78x2n"},{"post_id":"cl3sbl7kg0055gosw4xovfi3a","tag_id":"cl3sbl7l6008ogosw7w9x8r7c","_id":"cl3sbl7l6008sgosw7jbgcecm"},{"post_id":"cl3sbl7kh0059goswestig7du","tag_id":"cl3sbl7ii000jgosw32eef3gk","_id":"cl3sbl7l7008ugosw5hardcxo"},{"post_id":"cl3sbl7kh0059goswestig7du","tag_id":"cl3sbl7l6008rgoswfjvsgq5z","_id":"cl3sbl7l7008vgosw3vwrbdo4"},{"post_id":"cl3sbl7kj005fgosw9k4larb6","tag_id":"cl3sbl7l6008ogosw7w9x8r7c","_id":"cl3sbl7l7008xgoswhtcibd77"},{"post_id":"cl3sbl7kk005jgosw9qvrgaj2","tag_id":"cl3sbl7l7008wgosw0urudoz5","_id":"cl3sbl7l80091goswdhmc8zmy"},{"post_id":"cl3sbl7kk005jgosw9qvrgaj2","tag_id":"cl3sbl7l30083gosw606c31se","_id":"cl3sbl7l80092goswdp4g8gmy"},{"post_id":"cl3sbl7kk005jgosw9qvrgaj2","tag_id":"cl3sbl7l7008zgoswcxzd8n54","_id":"cl3sbl7l80094gosw812lcbqv"},{"post_id":"cl3sbl7kk005lgoswbgxp0agt","tag_id":"cl3sbl7l80090goswaby48d3s","_id":"cl3sbl7l90096gosw012t5sys"},{"post_id":"cl3sbl7kk005lgoswbgxp0agt","tag_id":"cl3sbl7l80093gosw0ncj8tg3","_id":"cl3sbl7l90097gosw66vl09de"},{"post_id":"cl3sbl7kl005ogosw0i5x21z7","tag_id":"cl3sbl7l80090goswaby48d3s","_id":"cl3sbl7la009cgosw7jkx84pe"},{"post_id":"cl3sbl7kl005ogosw0i5x21z7","tag_id":"cl3sbl7l90098goswfcu1hm4q","_id":"cl3sbl7la009dgoswbye845e1"},{"post_id":"cl3sbl7kl005ogosw0i5x21z7","tag_id":"cl3sbl7l7008zgoswcxzd8n54","_id":"cl3sbl7la009fgoswajarbtd0"},{"post_id":"cl3sbl7kl005ogosw0i5x21z7","tag_id":"cl3sbl7l30083gosw606c31se","_id":"cl3sbl7la009ggosw8qkt1i49"},{"post_id":"cl3sbl7km005rgosw1gdehnum","tag_id":"cl3sbl7l80090goswaby48d3s","_id":"cl3sbl7lb009igosw2xi6ea8a"},{"post_id":"cl3sbl7kn005vgosw7sf45hx3","tag_id":"cl3sbl7la009egoswag1acb0y","_id":"cl3sbl7lb009jgosw2a1zgwxa"},{"post_id":"cl3sbl7ko0061gosw8xa632b6","tag_id":"cl3sbl7l30083gosw606c31se","_id":"cl3sbl7lb009mgosw5fjpaezk"},{"post_id":"cl3sbl7ko0061gosw8xa632b6","tag_id":"cl3sbl7l7008zgoswcxzd8n54","_id":"cl3sbl7lb009ngosw3z7c33jy"},{"post_id":"cl3sbl7kp0064goswanpl7dd8","tag_id":"cl3sbl7l30083gosw606c31se","_id":"cl3sbl7lc009rgosw8p39dl48"},{"post_id":"cl3sbl7kp0064goswanpl7dd8","tag_id":"cl3sbl7l7008zgoswcxzd8n54","_id":"cl3sbl7lc009sgoswe4b11f7k"},{"post_id":"cl3sbl7kp0064goswanpl7dd8","tag_id":"cl3sbl7la009egoswag1acb0y","_id":"cl3sbl7lc009ugosw5nbpczjl"},{"post_id":"cl3sbl7kv006zgosw40565xtu","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7lc009vgoswcses4bb4"},{"post_id":"cl3sbl7kv006zgosw40565xtu","tag_id":"cl3sbl7lc009qgoswhmyy4dyr","_id":"cl3sbl7lc009xgosw09cc1khf"},{"post_id":"cl3sbl7ky007dgoswcxzge5pb","tag_id":"cl3sbl7lc009qgoswhmyy4dyr","_id":"cl3sbl7lc009ygosw8jnkb95f"},{"post_id":"cl3sbl7ky007dgoswcxzge5pb","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7ld00a0gosw9ompa66r"},{"post_id":"cl3sbl7ky007hgosw3ivu1cc2","tag_id":"cl3sbl7im000ogosw8nuvb1tf","_id":"cl3sbl7ld00a1gosw60ta0b0f"},{"post_id":"cl3sbl7ky007hgosw3ivu1cc2","tag_id":"cl3sbl7lc009qgoswhmyy4dyr","_id":"cl3sbl7ld00a3goswfrkb2u8k"},{"post_id":"cl3sbl7kz007kgosw9c1k5mpy","tag_id":"cl3sbl7ld009zgoswchvb5sbd","_id":"cl3sbl7le00a5gosweor04xbo"},{"post_id":"cl3sbl7kz007kgosw9c1k5mpy","tag_id":"cl3sbl7ld00a2gosw4btn9xb6","_id":"cl3sbl7le00a6gosw8dks6o6j"},{"post_id":"cl3sbl7kz007kgosw9c1k5mpy","tag_id":"cl3sbl7lc009qgoswhmyy4dyr","_id":"cl3sbl7le00a7gosw0dca8ll0"}],"Tag":[{"name":"Docker","_id":"cl3sbl7ia0005goswhuyx7ft3"},{"name":"jsx","_id":"cl3sbl7if000cgosw3c3k4nce"},{"name":"react","_id":"cl3sbl7ii000jgosw32eef3gk"},{"name":"implement","_id":"cl3sbl7im000ogosw8nuvb1tf"},{"name":"nodejs","_id":"cl3sbl7is000vgoswgszu9jp6"},{"name":"koa","_id":"cl3sbl7iy0013goswftxq154h"},{"name":"ts","_id":"cl3sbl7j30019gosw4xguf1ii"},{"name":"webpack","_id":"cl3sbl7jc001egoswgc8abjd0"},{"name":"algorithm","_id":"cl3sbl7jf001lgoswbshahjdo"},{"name":"LRU","_id":"cl3sbl7ji001vgoswcf3f5bk5"},{"name":"BST","_id":"cl3sbl7jm002agoswcmks2m9j"},{"name":"typescript","_id":"cl3sbl7jo002igosw7m9fajof"},{"name":"promise","_id":"cl3sbl7jr002qgoswfmur3cr1"},{"name":"linkedList","_id":"cl3sbl7jt0030gosw5xgb2ajl"},{"name":"二叉树","_id":"cl3sbl7jv0037goswfimw313o"},{"name":"binarySearch","_id":"cl3sbl7jz003kgoswde3v27av"},{"name":"递归","_id":"cl3sbl7k60047goswdrhegz1u"},{"name":"git","_id":"cl3sbl7ka004mgoswayqwh3wl"},{"name":"docker","_id":"cl3sbl7kb004tgosw2l9t2gvq"},{"name":"高阶追剧流程","_id":"cl3sbl7kc0050goswefzu9cm4"},{"name":"hibernate","_id":"cl3sbl7kg0057goswgasvhmz7"},{"name":"liquibase","_id":"cl3sbl7kk005hgosw1lddaxyp"},{"name":"java","_id":"cl3sbl7kl005ngosw52wdblw5"},{"name":"fp","_id":"cl3sbl7km005ugosw6smp0iah"},{"name":"异步","_id":"cl3sbl7kr006egosw8k7d9h1c"},{"name":"js","_id":"cl3sbl7kt006ngosw2kbq9co3"},{"name":"工程化","_id":"cl3sbl7ku006ugoswghdy4s71"},{"name":"linux","_id":"cl3sbl7kv0071gosw4cydaggp"},{"name":"nginx","_id":"cl3sbl7l1007ugoswcwzl95io"},{"name":"database","_id":"cl3sbl7l30083gosw606c31se"},{"name":"mysql","_id":"cl3sbl7l40088gosw08f383ka"},{"name":"emby","_id":"cl3sbl7l4008dgosw3adlccoy"},{"name":"chinese_subfinder","_id":"cl3sbl7l4008ggosw5z62etdp"},{"name":"nslookup","_id":"cl3sbl7l5008kgosw7rnu47rm"},{"name":"dns","_id":"cl3sbl7l6008ngosw6xfudzf3"},{"name":"redux","_id":"cl3sbl7l6008ogosw7w9x8r7c"},{"name":"styled-component","_id":"cl3sbl7l6008rgoswfjvsgq5z"},{"name":"Spring","_id":"cl3sbl7l7008wgosw0urudoz5"},{"name":"ORM","_id":"cl3sbl7l7008zgoswcxzd8n54"},{"name":"Spring Boot","_id":"cl3sbl7l80090goswaby48d3s"},{"name":"CORS","_id":"cl3sbl7l80093gosw0ncj8tg3"},{"name":"jpa","_id":"cl3sbl7l90098goswfcu1hm4q"},{"name":"JPA","_id":"cl3sbl7la009egoswag1acb0y"},{"name":"vue","_id":"cl3sbl7lc009qgoswhmyy4dyr"},{"name":"debug","_id":"cl3sbl7ld009zgoswchvb5sbd"},{"name":"nuxt","_id":"cl3sbl7ld00a2gosw4btn9xb6"}]}}